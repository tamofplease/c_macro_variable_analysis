<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/test_conn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft/uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/logger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/raft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/sqlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/vfs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/gateway.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/lib/transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/transport.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connCloseCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>closed</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>queue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>closed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>              \
	<cpp:value>FIXTURE_LOGGER;      \
	FIXTURE_VFS;         \
	FIXTURE_CONFIG;      \
	FIXTURE_REGISTRY;    \
	FIXTURE_RAFT;        \
	FIXTURE_CLIENT;      \
	struct conn conn;    \
	bool closed;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                                                                \
	<cpp:value>struct uv_stream_s *stream;                                          \
	int rv;                                                              \
	SETUP_HEAP;                                                          \
	SETUP_SQLITE;                                                        \
	SETUP_LOGGER;                                                        \
	SETUP_VFS;                                                           \
	SETUP_CONFIG;                                                        \
	SETUP_REGISTRY;                                                      \
	SETUP_RAFT;                                                          \
	SETUP_CLIENT;                                                        \
	RAFT_BOOTSTRAP;                                                      \
	RAFT_START;                                                          \
	rv = transport__stream(&amp;f-&gt;loop, f-&gt;server, &amp;stream);                \
	munit_assert_int(rv, ==, 0);                                         \
	f-&gt;closed = false;                                                   \
	f-&gt;conn.queue[0] = &amp;f-&gt;closed;                                       \
	rv = conn__start(&amp;f-&gt;conn, &amp;f-&gt;config, &amp;f-&gt;loop, &amp;f-&gt;registry,       \
			 &amp;f-&gt;raft, stream, &amp;f-&gt;raft_transport, connCloseCb); \
	munit_assert_int(rv, ==, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                         \
	<cpp:value>conn__stop(&amp;f-&gt;conn);             \
	while (!f-&gt;closed) {              \
		test_uv_run(&amp;f-&gt;loop, 1); \
	};                                \
	TEAR_DOWN_RAFT;                   \
	TEAR_DOWN_CLIENT;                 \
	TEAR_DOWN_REGISTRY;               \
	TEAR_DOWN_CONFIG;                 \
	TEAR_DOWN_VFS;                    \
	TEAR_DOWN_LOGGER;                 \
	TEAR_DOWN_SQLITE;                 \
	TEAR_DOWN_HEAP</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Send the initial client handshake. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDSHAKE_CONN</name></cpp:macro>                                 \
	<cpp:value>{                                              \
		int rv2;                               \
		rv2 = clientSendHandshake(&amp;f-&gt;client); \
		munit_assert_int(rv2, ==, 0);          \
		test_uv_run(&amp;f-&gt;loop, 1);              \
	}</cpp:value></cpp:define>

<comment type="block">/* Open a test database. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN_CONN</name></cpp:macro>                                         \
	<cpp:value>{                                                 \
		int rv2;                                  \
		rv2 = clientSendOpen(&amp;f-&gt;client, "test"); \
		munit_assert_int(rv2, ==, 0);             \
		test_uv_run(&amp;f-&gt;loop, 2);                 \
		rv2 = clientRecvDb(&amp;f-&gt;client);           \
		munit_assert_int(rv2, ==, 0);             \
	}</cpp:value></cpp:define>

<comment type="block">/* Prepare a statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREPARE_CONN</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>, <parameter><type><name>STMT_ID</name></type></parameter>)</parameter_list></cpp:macro>                         \
	<cpp:value>{                                                  \
		int rv2;                                   \
		rv2 = clientSendPrepare(&amp;f-&gt;client, SQL);  \
		munit_assert_int(rv2, ==, 0);              \
		test_uv_run(&amp;f-&gt;loop, 1);                  \
		rv2 = clientRecvStmt(&amp;f-&gt;client, STMT_ID); \
		munit_assert_int(rv2, ==, 0);              \
	}</cpp:value></cpp:define>

<comment type="block">/* Execute a statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_CONN</name><parameter_list>(<parameter><type><name>STMT_ID</name></type></parameter>, <parameter><type><name>LAST_INSERT_ID</name></type></parameter>, <parameter><type><name>ROWS_AFFECTED</name></type></parameter>, <parameter><type><name>LOOP</name></type></parameter>)</parameter_list></cpp:macro>    \
	<cpp:value>{                                                          \
		int rv2;                                           \
		rv2 = clientSendExec(&amp;f-&gt;client, STMT_ID);         \
		munit_assert_int(rv2, ==, 0);                      \
		test_uv_run(&amp;f-&gt;loop, LOOP);                       \
		rv2 = clientRecvResult(&amp;f-&gt;client, LAST_INSERT_ID, \
				       ROWS_AFFECTED);             \
		munit_assert_int(rv2, ==, 0);                      \
	}</cpp:value></cpp:define>

<comment type="block">/* Execute a non-prepared statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_SQL_CONN</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>, <parameter><type><name>LAST_INSERT_ID</name></type></parameter>, <parameter><type><name>ROWS_AFFECTED</name></type></parameter>, <parameter><type><name>LOOP</name></type></parameter>)</parameter_list></cpp:macro>    \
	<cpp:value>{                                                          \
		int rv2;                                           \
		rv2 = clientSendExecSQL(&amp;f-&gt;client, SQL);          \
		munit_assert_int(rv2, ==, 0);                      \
		test_uv_run(&amp;f-&gt;loop, LOOP);                       \
		rv2 = clientRecvResult(&amp;f-&gt;client, LAST_INSERT_ID, \
				       ROWS_AFFECTED);             \
		munit_assert_int(rv2, ==, 0);                      \
	}</cpp:value></cpp:define>

<comment type="block">/* Perform a query. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERY_CONN</name><parameter_list>(<parameter><type><name>STMT_ID</name></type></parameter>, <parameter><type><name>ROWS</name></type></parameter>)</parameter_list></cpp:macro>                           \
	<cpp:value>{                                                   \
		int rv2;                                    \
		rv2 = clientSendQuery(&amp;f-&gt;client, STMT_ID); \
		munit_assert_int(rv2, ==, 0);               \
		test_uv_run(&amp;f-&gt;loop, 2);                   \
		rv2 = clientRecvRows(&amp;f-&gt;client, ROWS);     \
		munit_assert_int(rv2, ==, 0);               \
	}</cpp:value></cpp:define>

<comment type="block">/* Perform a non-prepared query. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERY_SQL_CONN</name><parameter_list>(<parameter><type><name>SQL</name></type></parameter>, <parameter><type><name>ROWS</name></type></parameter>)</parameter_list></cpp:macro>                              \
	<cpp:value>{                                                      \
		int rv2;                                       \
		rv2 = clientSendQuerySql(&amp;f-&gt;client, SQL);     \
		munit_assert_int(rv2, ==, 0);                  \
		test_uv_run(&amp;f-&gt;loop, 2);                      \
		rv2 = clientRecvRows(&amp;f-&gt;client, ROWS);        \
		munit_assert_int(rv2, ==, 0);                  \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Handle the handshake
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>handshake_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<macro><name>TEST_SETUP</name><argument_list>(<argument>handshake</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>handshake_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>handshake</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>handshake_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>handshake</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>handshake_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE_CONN</name></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Handle an open request
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>open_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<macro><name>TEST_SETUP</name><argument_list>(<argument>open</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE_CONN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>open</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>open</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>open_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN_CONN</name></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Handle an prepare request
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>prepare_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<macro><name>TEST_SETUP</name><argument_list>(<argument>prepare</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE_CONN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN_CONN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>prepare</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>prepare</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>prepare_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Handle an exec
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>exec_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>TEST_SETUP</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE_CONN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN_CONN</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>last_insert_id</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rows_affected</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>result</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test (n) VALUES(123)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>last_insert_id</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rows_affected</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>close_while_in_flight</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXEC_SQL_CONN</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>clientSendExecSQL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Handle a query
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>query_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>insert_stmt_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>last_insert_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>rows_affected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>rows</name></name></type> <name>rows</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>TEST_SETUP</name><argument_list>(<argument>query</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>HANDSHAKE_CONN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>OPEN_CONN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE test (n INT)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name>stmt_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>last_insert_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows_affected</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO test(n) VALUES (123)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>insert_stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>insert_stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>last_insert_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows_affected</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>query</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>clientCloseRows</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Perform a query yielding one row. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>query</argument>, <argument>one</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>query_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>row</name></name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE_CONN</name><argument_list>(<argument><expr><literal type="string">"SELECT n FROM test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUERY_CONN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>rows</name><operator>.</operator><name>column_count</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>rows</name><operator>.</operator><name>column_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rows</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_not_null</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_ptr_null</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>integer</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
