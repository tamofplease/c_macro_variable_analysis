<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/test_command.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Open.
 *
 ******************************************************************************/</comment>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CASE</name><argument_list>(<argument>open</argument>, <argument>encode</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>command_open</name></name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <literal type="string">"test.db"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>command__encode</name><argument_list>(<argument><expr><name>COMMAND_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>open</argument>, <argument>decode</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>command_open</name></name></type> <name>c1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <literal type="string">"db"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>command__encode</name><argument_list>(<argument><expr><name>COMMAND_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>command__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>COMMAND_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_string_equal</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>command_open</name> <operator>*</operator><operator>)</operator><name>c2</name><operator>)</operator><operator>-&gt;</operator><name>filename</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
