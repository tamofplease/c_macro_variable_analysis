<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/test/unit/test_replication.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib/runner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/leader.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TEST_MODULE</name><argument_list>(<argument><expr><name>replication_v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXTURE</name></cpp:macro>                           \
	<cpp:value>FIXTURE_CLUSTER;                  \
	struct leader leaders[N_SERVERS]; \
	sqlite3_stmt *stmt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro>                             \
	<cpp:value>unsigned i;                       \
	SETUP_CLUSTER(V2)                 \
	for (i = 0; i &lt; N_SERVERS; i++) { \
		SETUP_LEADER(i);          \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP_LEADER</name><parameter_list>(<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro>                                           \
	<cpp:value>do {                                                      \
		struct leader *leader = &amp;f-&gt;leaders[I];           \
		struct registry *registry = CLUSTER_REGISTRY(I);  \
		struct db *db;                                    \
		int rc2;                                          \
		rc2 = registry__db_get(registry, "test.db", &amp;db); \
		munit_assert_int(rc2, ==, 0);                     \
		rc2 = leader__init(leader, db, CLUSTER_RAFT(I));  \
		munit_assert_int(rc2, ==, 0);                     \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN</name></cpp:macro>                         \
	<cpp:value>unsigned i;                       \
	for (i = 0; i &lt; N_SERVERS; i++) { \
		TEAR_DOWN_LEADER(i);      \
	}                                 \
	TEAR_DOWN_CLUSTER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEAR_DOWN_LEADER</name><parameter_list>(<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro>                             \
	<cpp:value>do {                                            \
		struct leader *leader = &amp;f-&gt;leaders[I]; \
		leader__close(leader);                  \
	} while (0)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Return the i'th leader object. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEADER</name><parameter_list>(<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;f-&gt;leaders[I]</cpp:value></cpp:define>

<comment type="block">/* Return the SQLite connection of the i'th leader object */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN</name><parameter_list>(<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LEADER(I))-&gt;conn</cpp:value></cpp:define>

<comment type="block">/* Prepare the fixture's statement using the connection of the I'th leader */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREPARE</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>SQL</name></type></parameter>)</parameter_list></cpp:macro>                                                     \
	<cpp:value>{                                                                   \
		int rc2;                                                    \
		rc2 = sqlite3_prepare_v2(CONN(I), SQL, -1, &amp;f-&gt;stmt, NULL); \
		munit_assert_int(rc2, ==, 0);                               \
	}</cpp:value></cpp:define>

<comment type="block">/* Reset the fixture's statement, expecting the given return code. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name><parameter_list>(<parameter><type><name>RC</name></type></parameter>)</parameter_list></cpp:macro>                              \
	<cpp:value>{                                      \
		int rc2;                       \
		rc2 = sqlite3_reset(f-&gt;stmt);  \
		munit_assert_int(rc2, ==, RC); \
	}</cpp:value></cpp:define>

<comment type="block">/* Finalize the fixture's statement */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINALIZE</name></cpp:macro>                                 \
	<cpp:value>{                                        \
		int rc2;                         \
		rc2 = sqlite3_finalize(f-&gt;stmt); \
		munit_assert_int(rc2, ==, 0);    \
	}</cpp:value></cpp:define>

<comment type="block">/* Submit an exec request using the I'th leader. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC</name><parameter_list>(<parameter><type><name>I</name></type></parameter>)</parameter_list></cpp:macro>                                                 \
	<cpp:value>{                                                       \
		int rc2;                                        \
		rc2 = leader__exec(LEADER(I), &amp;f-&gt;req, f-&gt;stmt, \
				   fixture_exec_cb);            \
		munit_assert_int(rc2, ==, 0);                   \
	}</cpp:value></cpp:define>

<comment type="block">/* Convenience to prepare, execute and finalize a statement. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_SQL</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>SQL</name></type></parameter>)</parameter_list></cpp:macro>                        \
	<cpp:value>PREPARE(I, SQL);                        \
	EXEC(I);                                \
	CLUSTER_APPLIED(CLUSTER_LAST_INDEX(I)); \
	FINALIZE</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Helper macros.
 *
 ******************************************************************************/</comment>

<comment type="block">/* Assert the number of pages in the WAL file on the I'th node. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_WAL_PAGES</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>                                           \
	<cpp:value>{                                                                \
		struct leader *leader_ = &amp;f-&gt;leaders[I];                 \
		sqlite3_file *file_;                                     \
		sqlite_int64 size_;                                      \
		int pages_;                                              \
		int rv_;                                                 \
		rv_ = sqlite3_file_control(leader_-&gt;conn, "main",        \
					   SQLITE_FCNTL_JOURNAL_POINTER, \
					   &amp;file_);                      \
		munit_assert_int(rv_, ==, 0);                            \
		rv_ = file_-&gt;pMethods-&gt;xFileSize(file_, &amp;size_);         \
		munit_assert_int(rv_, ==, 0);                            \
		pages_ = formatWalCalcFramesNumber(                      \
		    leader_-&gt;db-&gt;config-&gt;page_size, size_);              \
		munit_assert_int(pages_, ==, N);                         \
	}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * leader__init
 *
 ******************************************************************************/</comment>

<struct>struct <name>init_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>init</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>init_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>init</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>init_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* The connection is open and can be used. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>init</argument>, <argument>conn</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>init_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><call><name>CONN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SELECT 1"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * leader__exec
 *
 ******************************************************************************/</comment>

<struct>struct <name>exec_fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec</name></name></type> <name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>invoked</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fixture_exec_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TEST_SUITE</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_SETUP</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>SETUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block>
<macro><name>TEST_TEAR_DOWN</name><argument_list>(<argument>exec</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TEAR_DOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>success</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (a  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* A snapshot is taken after applying an entry. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>snapshot</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_SNAPSHOT_THRESHOLD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* If a transaction is in progress, no snapshot is taken. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>snapshot_busy</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CLUSTER_SNAPSHOT_THRESHOLD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"PRAGMA cache_size = 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Accumulate enough dirty data to fill the page cache */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">163</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* If the WAL size grows beyond the configured threshold, checkpoint it. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>checkpoint</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>CLUSTER_CONFIG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>checkpoint_threshold</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* The WAL was truncated. */</comment>
	<expr_stmt><expr><call><name>ASSERT_WAL_PAGES</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* If a read transaction is in progress, no checkpoint is taken. */</comment>
<macro><name>TEST_CASE</name><argument_list>(<argument>exec</argument>, <argument>checkpoint_read_lock</argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec_fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>CLUSTER_CONFIG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>registry</name></name> <modifier>*</modifier></type><name>registry</name> <init>= <expr><call><name>CLUSTER_REGISTRY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>db</name></name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader</name></name></type> <name>leader2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>checkpoint_threshold</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize another leader. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>registry__db_get</name><argument_list>(<argument><expr><name>registry</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>leader__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leader2</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>CLUSTER_RAFT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Start a read transaction in the other leader. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>leader2</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>leader2</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM test"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			  <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EXEC_SQL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The WAL was not truncated. */</comment>
	<expr_stmt><expr><call><name>ASSERT_WAL_PAGES</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>leader__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leader2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/******************************************************************************
 *
 * Fixture
 *
 ******************************************************************************/</comment>

<struct>struct <name>fixture</name>
<block>{
	<expr_stmt><expr><name>FIXTURE_CLUSTER</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader</name></name></type> <name><name>leaders</name><index>[<expr><name>N_SERVERS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec</name></name></type> <name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>invoked</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>setUp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MunitParameter</name></type> <name><name>params</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>munit_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SETUP_CLUSTER</name><argument_list>(<argument><expr><name>V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SETUP_LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TEAR_DOWN_LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TEAR_DOWN_CLUSTER</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>replication</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST</name><argument_list>(<argument>replication</argument>, <argument>exec</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>execCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (a  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>execCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>execCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_false</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>munit_assert_true</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>invoked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><name>SQLITE_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SETUP_LEADER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEAR_DOWN_LEADER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>

<comment type="block">/* If the WAL size grows beyond the configured threshold, checkpoint it. */</comment>
<macro><name>TEST</name><argument_list>(<argument>replication</argument>, <argument>checkpoint</argument>, <argument>setUp</argument>, <argument>tearDown</argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>fixture</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>CLUSTER_CONFIG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>checkpoint_threshold</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_ELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE test (n  INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>execCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"INSERT INTO test(n) VALUES(1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>execCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munit_assert_int</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>==</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FINALIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CLUSTER_APPLIED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The WAL was truncated. */</comment>
	<expr_stmt><expr><call><name>ASSERT_WAL_PAGES</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MUNIT_OK</name></expr>;</return>
</block_content>}</block>
</unit>
