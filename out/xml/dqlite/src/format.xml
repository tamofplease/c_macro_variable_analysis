<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/format.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"format.h"</cpp:file></cpp:include>

<comment type="block">/* WAL magic value. Either this value, or the same value with the least
 * significant bit also set (FORMAT__WAL_MAGIC | 0x00000001) is stored in 32-bit
 * big-endian format in the first 4 bytes of a WAL file.
 *
 * If the LSB is set, then the checksums for each frame within the WAL file are
 * calculated by treating all data as an array of 32-bit big-endian
 * words. Otherwise, they are calculated by interpreting all data as 32-bit
 * little-endian words. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT__WAL_MAGIC</name></cpp:macro> <cpp:value>0x377f0682</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT__WAL_MAX_VERSION</name></cpp:macro> <cpp:value>3007000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>formatGet32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>v</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>v</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>v</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>v</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Encode a 32-bit number to big endian format */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>formatPut32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Generate or extend an 8 byte checksum based on the data in array data[] and
 * the initial values of in[0] and in[1] (or initial values of 0 and 0 if
 * in==NULL).
 *
 * The checksum is written back into out[] before returning.
 *
 * n must be a positive multiple of 8. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>formatWalChecksumBytes</name><parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>native</name></decl></parameter>,   <comment type="block">/* True for native byte-order, false for non-native */</comment>
    <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <comment type="block">/* Content to be checksummed */</comment>
    <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>,    <comment type="block">/* Bytes of content in a[].  Must be a multiple of 8. */</comment>
    <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <comment type="block">/* Initial checksum value input */</comment>
    <parameter><decl><type><name>uint32_t</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>       <comment type="block">/* OUT: Final checksum value output */</comment>
)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
	<comment type="block">/* `data` is an alias for the `hdr` member of a `struct vfsWal`. `hdr`
	 * is the first member of this struct. Because `struct vfsWal` contains
	 * pointer members, the struct itself will have the alignment of the pointer
	 * members. As `hdr` is the first member, it will have this alignment too.
	 * Therefore it is safe to assume pointer alignment (and silence the compiler).
	 * more info -&gt; http://www.catb.org/esr/structure-packing/ */</comment>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <call><name>__builtin_assume_aligned</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x00000007</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>native</name></expr>)</condition> <block>{<block_content>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>s1</name> <operator>+=</operator> <operator>*</operator><name>cur</name><operator>++</operator> <operator>+</operator> <name>s2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>s2</name> <operator>+=</operator> <operator>*</operator><name>cur</name><operator>++</operator> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<do>do <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>d</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>formatPut32</name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>d</name> <operator>+</operator> <name>s2</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>formatPut32</name><argument_list>(<argument><expr><name><name>cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>d</name> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>formatWalRestartHeader</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>checksum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>checkpoint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>salt1</name></decl>;</decl_stmt>

	<comment type="block">/* Increase the checkpoint sequence. */</comment>
	<expr_stmt><expr><call><name>formatGet32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>checkpoint</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>formatPut32</name><argument_list>(<argument><expr><name>checkpoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Increase salt1. */</comment>
	<expr_stmt><expr><call><name>formatGet32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>salt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>salt1</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>formatPut32</name><argument_list>(<argument><expr><name>salt1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Generate a random salt2. */</comment>
	<expr_stmt><expr><call><name>sqlite3_randomness</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Update the checksum. */</comment>
	<expr_stmt><expr><call><name>formatWalChecksumBytes</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>formatPut32</name><argument_list>(<argument><expr><name><name>checksum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>header</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>formatPut32</name><argument_list>(<argument><expr><name><name>checksum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>header</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
