<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/command.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/serialize.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* Format version */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                    \
	<cpp:value>X(uint8, format, ##__VA_ARGS__)   \
	X(uint8, type, ##__VA_ARGS__)     \
	X(uint8, _unused1, ##__VA_ARGS__) \
	X(uint8, _unused2, ##__VA_ARGS__) \
	X(uint32, _unused3, ##__VA_ARGS__)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SERIALIZE__DEFINE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SERIALIZE__IMPLEMENT</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>frames__sizeof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>frames_t</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name>uint32__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
		   <call><name>uint16__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
		   <call><name>uint16__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>__unused__</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
		   <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name> <operator>+</operator> <comment type="block">/* Page numbers */</comment>
		   <name><name>frames</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> <name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Page data */</comment>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frames__encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>frames_t</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>dqlite_vfs_frame</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>uint32__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint16__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint16__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>__unused__</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>frames</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>pgno</name> <init>= <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>page_number</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>cursor</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>frames</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>+=</operator> <name><name>frames</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>frames__decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><name>frames_t</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint32__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>n_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint16__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint16__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frames</name><operator>-&gt;</operator><name>__unused__</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMAND__IMPLEMENT</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>, <parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>SERIALIZE__IMPLEMENT(command_##LOWER, COMMAND__##UPPER);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>COMMAND__TYPES</name><argument_list>(<argument><expr><name>COMMAND__IMPLEMENT</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>, <parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro>                                 \
	<cpp:value>case COMMAND_##UPPER:                                   \
		h.type = COMMAND_##UPPER;                       \
		buf-&gt;len = header__sizeof(&amp;h);                  \
		buf-&gt;len += command_##LOWER##__sizeof(command); \
		buf-&gt;base = raft_malloc(buf-&gt;len);              \
		if (buf-&gt;base == NULL) {                        \
			return DQLITE_NOMEM;                    \
		}                                               \
		cursor = buf-&gt;base;                             \
		header__encode(&amp;h, &amp;cursor);                    \
		command_##LOWER##__encode(command, &amp;cursor);    \
		break;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>command__encode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>header</name></name></type> <name>h</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>FORMAT</name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
		<macro><name>COMMAND__TYPES</name><argument_list>(<argument>ENCODE</argument>, )</argument_list></macro>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>, <parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro>                                         \
	<cpp:value>case COMMAND_##UPPER:                                           \
		*command = raft_malloc(sizeof(struct command_##LOWER)); \
		if (*command == NULL) {                                 \
			return DQLITE_NOMEM;                            \
		}                                                       \
		rc = command_##LOWER##__decode(&amp;cursor, *command);      \
		break;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>command__decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>header</name></name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>header__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>FORMAT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_PROTO</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>h</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<macro><name>COMMAND__TYPES</name><argument_list>(<argument>DECODE</argument>, )</argument_list></macro>
		<default>default:</default>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DQLITE_PROTO</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>command_frames__page_numbers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>command_frames</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
				 <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name><name>page_numbers</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frames</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>frames</name><operator>.</operator><name>n_pages</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>page_numbers</name> <operator>=</operator>
	    <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<operator>*</operator><name>page_numbers</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>frames</name><operator>.</operator><name>n_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>page_numbers</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>frames</name><operator>.</operator><name>n_pages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>pgno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>uint64__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>r</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>page_numbers</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>pgno</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>command_frames__pages</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>command_frames</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>pages</name> <operator>=</operator>
	    <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frames</name><operator>.</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>frames</name><operator>.</operator><name>n_pages</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
