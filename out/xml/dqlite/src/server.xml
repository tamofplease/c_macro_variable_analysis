<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/server.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/dqlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/addr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tracing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vfs.h"</cpp:file></cpp:include>

<comment type="block">/* Special ID for the bootstrap node. Equals to raft_digest("1", 0). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOTSTRAP_ID</name></cpp:macro> <cpp:value>0x2dc171858c3155be</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATABASE_DIR_FMT</name></cpp:macro> <cpp:value>"%s/database"</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>dqlite__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
		 <parameter><decl><type><name>dqlite_node_id</name></type> <name>id</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>db_dir_path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>db_dir_path</name></expr></argument>, <argument><expr><sizeof>sizeof <name>db_dir_path</name></sizeof></expr></argument>, <argument><expr><name>DATABASE_DIR_FMT</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rv</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof <name>db_dir_path</name></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"failed to init: snprintf(rv:%d)"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>config__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>db_dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"config__init(rv:%d)"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>VfsInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vfs</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vfs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>err_after_config_init</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>registry__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"uv_loop_init(): %s"</literal></expr></argument>,
			 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_vfs_init</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raftProxyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_transport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>err_after_loop_init</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_uv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"raft_uv_init(): %s"</literal></expr></argument>,
			 <argument><expr><name><name>d</name><operator>-&gt;</operator><name>raft_io</name><operator>.</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_raft_transport_init</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>fsm__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>err_after_raft_io_init</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* TODO: properly handle closing the dqlite server without running it */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>id</name></name></expr></argument>,
		       <argument><expr><name><name>d</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"raft_init(): %s"</literal></expr></argument>,
			 <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* TODO: expose these values through some API */</comment>
	<expr_stmt><expr><call><name>raft_set_election_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_heartbeat_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_snapshot_threshold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_snapshot_trailing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_pre_vote</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_max_catch_up_rounds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_max_catch_up_round_duration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 50 secs */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <call><name>dispatch_semaphore_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <call><name>dispatch_semaphore_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"sem_init(): %s"</literal></expr></argument>,
			 <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_raft_fsm_init</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>stopped</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"sem_init(): %s"</literal></expr></argument>,
			 <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_ready_init</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>QUEUE__INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUEUE__INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>raft_state</name></name> <operator>=</operator> <name>RAFT_UNAVAILABLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>listener</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err_after_ready_init</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>dispatch_release</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>err_after_raft_fsm_init</name>:</label>
	<expr_stmt><expr><call><name>fsm__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_after_raft_io_init</name>:</label>
	<expr_stmt><expr><call><name>raft_uv_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_after_raft_transport_init</name>:</label>
	<expr_stmt><expr><call><name>raftProxyClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_after_loop_init</name>:</label>
	<expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_after_vfs_init</name>:</label>
	<expr_stmt><expr><call><name>VfsClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_after_config_init</name>:</label>
	<expr_stmt><expr><call><name>config__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>dispatch_release</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>stopped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dispatch_release</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>stopped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Fails only if sem object is not valid */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Fails only if sem object is not valid */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>fsm__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raftProxyClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>registry__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VfsClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>config__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_create</name><parameter_list>(<parameter><decl><type><name>dqlite_node_id</name></type> <name>id</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_dir</name></decl></parameter>,
		       <parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>dqlite__init</name><argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>data_dir</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_set_bind_address</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* sockaddr_un is large enough for our purposes */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>addr_un</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr_un</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>addr_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr_un</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sa_family_t</name></type> <name>domain</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>AddrParse</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>, <argument><expr><literal type="string">"8080"</literal></expr></argument>, <argument><expr><name>DQLITE_ADDR_PARSE_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>domain</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>domain</name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name>domain</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>reuse</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
				<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>reuse</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>transport__stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>domain</name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name>domain</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Room for '\0' */</comment>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>path_len</name> <operator>=</operator> <sizeof>sizeof <name><name>addr_un</name><operator>.</operator><name>sun_path</name></name></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_pipe_getsockname</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_pipe_s</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>,
					 <argument><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dqlite_node_get_bind_address</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>bind_address</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_set_connect_func</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
				 <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
					  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list></function_decl></parameter>,
				 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>raftProxySetConnectFunc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>raft_transport</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_set_network_latency</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
				    <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>nanoseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>milliseconds</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

        <comment type="block">/* 1 hour latency should be more than sufficient, also avoids overflow
         * issues when converting to unsigned milliseconds later on */</comment>
	<if_stmt><if>if <condition>(<expr><name>nanoseconds</name> <operator>&gt;</operator> <literal type="number">3600000000000ULL</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>milliseconds</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>nanoseconds</name> <operator>/</operator> <operator>(</operator><literal type="number">1000000ULL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><call><name>dqlite_node_set_network_latency_ms</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_set_network_latency_ms</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
				       <parameter><decl><type><name>unsigned</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Currently we accept at least 1 millisecond latency and maximum 3600 s
	 * of latency */</comment>
	<if_stmt><if>if <condition>(<expr><name>milliseconds</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>milliseconds</name> <operator>&gt;</operator> <literal type="number">3600U</literal> <operator>*</operator> <literal type="number">1000U</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>raft_set_heartbeat_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>(</operator><name>milliseconds</name> <operator>*</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_election_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>milliseconds</name> <operator>*</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_set_failure_domain</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>failure_domain</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_set_snapshot_params</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>snapshot_threshold</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name></type> <name>snapshot_trailing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>snapshot_trailing</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* This is a safety precaution and allows to recover data from the second
	 * last raft snapshot and segment files in case the last raft snapshot is
	 * unusable. */</comment>
	<if_stmt><if>if <condition>(<expr><name>snapshot_trailing</name> <operator>&lt;</operator> <name>snapshot_threshold</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>raft_set_snapshot_threshold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>snapshot_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_set_snapshot_trailing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>snapshot_trailing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_enable_disk_mode</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqlite_vfs_enable_disk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>vfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>registry</name><operator>.</operator><name>config</name><operator>-&gt;</operator><name>disk</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Close the default fsm and initialize the disk one. */</comment>
	<expr_stmt><expr><call><name>fsm__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>fsm__init_disk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>raft_fsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>maybeBootstrap</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
			  <parameter><decl><type><name>dqlite_node_id</name></type> <name>id</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_configuration</name></name></type> <name>configuration</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>!=</operator> <name>BOOTSTRAP_ID</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>raft_configuration_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <name>RAFT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_NOMEM</name></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_bootstrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>RAFT_CANTBOOTSTRAP</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"raft_bootstrap(): %s"</literal></expr></argument>,
				 <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>raft_configuration_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Callback invoked when the stop async handle gets fired.
 *
 * This callback will walk through all active handles and close them. After the
 * last handle (which must be the 'stop' async handle) is closed, the loop gets
 * stopped.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>raftCloseCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>raft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>raft</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>raft_uv_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>raft_io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>startup</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conn</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>QUEUE__REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_cb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>stop</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>queue</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<comment type="block">/* Nothing to do. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"not running or already stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<macro><name>QUEUE__FOREACH</name><argument_list>(<argument>head</argument>, <argument>&amp;d-&gt;conns</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>QUEUE__DATA</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>struct <name>conn</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>conn__stop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>raft_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>raftCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Callback invoked as soon as the loop as started.
 *
 * It unblocks the s-&gt;ready semaphore.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>startup_cb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name> <modifier>*</modifier></type><name>startup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>startup</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>dispatch_semaphore_signal</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* No reason for which posting should fail */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listenCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>listener</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>listener</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"not running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* TODO: log the error. */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>UV_TCP</name></expr>:</case>
			<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>uv_tcp_s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_tcp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>uv_tcp_s</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UV_NAMED_PIPE</name></expr>:</case>
			<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>uv_pipe_s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>uv_pipe_s</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></argument>,
					  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_accept</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We accept unix socket connections only from the same process. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>listener</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_NAMED_PIPE</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>io_watcher</name><operator>.</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="line">// Linux</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>ucred</name></name></type> <name>cred</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_PEERCRED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>.</operator><name>pid</name></name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOCAL_PEERPID</name></expr></argument>)</argument_list></call></expr></cpp:elif> <comment type="line">// BSD</comment>
		<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_LOCAL</name></expr></argument>, <argument><expr><name>LOCAL_PEERPID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="line">// The unix socket connection can't be verified and from</comment>
		<comment type="line">// security perspective it's better to block it entirely</comment>
		<goto>goto <name>err</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>conn__start</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>,
			 <argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>raft_transport</name></name></expr></argument>, <argument><expr><name>destroy_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>err_after_conn_alloc</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QUEUE__PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>

<label><name>err_after_conn_alloc</name>:</label>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_close_cb</name><operator>)</operator><name>raft_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_cb</name><parameter_list>(<parameter><decl><type><name>uv_prepare_t</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>monitor</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><call><name>raft_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>queue</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>conn</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_UNAVAILABLE</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>raft_state</name></name> <operator>==</operator> <name>RAFT_LEADER</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>RAFT_LEADER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"node %llu@%s: leadership lost"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>QUEUE__FOREACH</name><argument_list>(<argument>head</argument>, <argument>&amp;d-&gt;conns</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>QUEUE__DATA</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>struct <name>conn</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>gateway__leader_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>gateway</name></name></expr></argument>, <argument><expr><name>RAFT_LEADERSHIPLOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>raft_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>taskRun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<comment type="block">/* TODO: implement proper cleanup upon error by spinning the loop a few
	 * times. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>listener</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>listener</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>listenCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>listener</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

	<comment type="block">/* Initialize notification handles. */</comment>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>stop</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_async_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><name>stop_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Schedule startup_cb to be fired as soon as the loop starts. It will
	 * unblock clients of taskReady. */</comment>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>startup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>startup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>startup</name></name></expr></argument>, <argument><expr><name>startup_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Schedule raft state change monitor. */</comment>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>monitor</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_prepare_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_prepare_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>monitor</name></name></expr></argument>, <argument><expr><name>monitor_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>raft</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"raft_start(): %s"</literal></expr></argument>,
			 <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Unblock any client of taskReady */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
		<expr_stmt><expr><call><name>dispatch_semaphore_signal</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Unblock any client of taskReady */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>dispatch_semaphore_signal</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* no reason for which posting should fail */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dqlite_node_errmsg</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
	    <return>return <expr><name><name>n</name><operator>-&gt;</operator><name>errmsg</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="string">"node is NULL"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taskStart</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>taskRun</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uintptr_t</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>rv</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>result</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite_node_destroy</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dqlite__close</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Wait until a dqlite server is ready and can handle connections.
**
** Returns true if the server has been successfully started, false otherwise.
**
** This is a thread-safe API, but must be invoked before any call to
** dqlite_stop or dqlite_handle.
*/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>taskReady</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dqlite_node</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Wait for the ready semaphore */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>dispatch_semaphore_wait</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>, <argument><expr><name>DISPATCH_TIME_FOREVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>running</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dqliteDatabaseDirSetup</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>disk</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// nothing to do</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>FsEnsureDir</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error creating database dir: %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>FsRemoveDirFiles</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>DQLITE_ERRMSG_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error removing files in database dir: %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_start</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"dqlite node start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqliteTracingMaybeEnable</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dqliteDatabaseDirSetup</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"database dir setup failed %s"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>maybeBootstrap</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bootstrap failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskStart</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"pthread create failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taskReady</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"!taskReady"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err</name>:</label>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_stop</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"dqlite node stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_async_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>pthread_join</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_recover</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>dqlite_node_info</name></name></type> <name><name>infos</name><index>[]</index></name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>n_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"dqlite node recover"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node_info_ext</name></name> <modifier>*</modifier></type><name>infos_ext</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos_ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>infos_ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_info</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>infos_ext</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>infos_ext</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos_ext</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name><name>infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos_ext</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name> <operator>=</operator> <call><name>PTR_TO_UINT64</name><argument_list>(<argument><expr><name><name>infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos_ext</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dqlite_role</name> <operator>=</operator> <name>DQLITE_VOTER</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dqlite_node_recover_ext</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>infos_ext</name></expr></argument>, <argument><expr><name>n_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infos_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>node_info_valid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dqlite_node_info_ext</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Reject any size smaller than the original definition of the extensible
     * struct. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>DQLITE_NODE_INFO_EXT_SZ_ORIG</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Require 8 byte allignment */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the user uses a newer, and larger version of the struct, make sure the unknown
     * fields are zeroed out. */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>known_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dqlite_node_info_ext</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>known_size</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_known_fields</name> <init>= <expr><name>known_size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_extra_fields</name> <init>= <expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>known_size</name><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>extra_fields</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>info</name><operator>)</operator> <operator>+</operator> <name>num_known_fields</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_extra_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>extra_fields</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite_node_recover_ext</name><parameter_list>(<parameter><decl><type><name>dqlite_node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>dqlite_node_info_ext</name></name></type> <name><name>infos</name><index>[]</index></name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>n_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"dqlite node recover ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_configuration</name></name></type> <name>configuration</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>raft_configuration_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_info</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dqlite_node_info_ext</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>infos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>node_info_valid</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_MISUSE</name></expr>;</expr_stmt>
                    <goto>goto <name>out</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>raft_role</name> <init>= <expr><call><name>translateDqliteRole</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>dqlite_role</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><call><name>UINT64_TO_PTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
					    <argument><expr><name>address</name></expr></argument>, <argument><expr><name>raft_role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <name>RAFT_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_NOMEM</name></expr>;</expr_stmt>
			<goto>goto <name>out</name>;</goto>
		</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_recover</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>raft_configuration_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dqlite_node_id</name></type> <name>dqlite_generate_node_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"generate node id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><call><name>raft_digest</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
