<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/query.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple.h"</cpp:file></cpp:include>


<comment type="block">/* Return the type code of the i'th column value.
 *
 * TODO: find a better way to handle time types. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>value_type</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column_type_name</name> <init>= <expr><call><name>sqlite3_column_decltype</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>column_type_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>column_type_name</name></expr></argument>, <argument><expr><literal type="string">"DATETIME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>  <operator>||</operator>
		    <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>column_type_name</name></expr></argument>, <argument><expr><literal type="string">"DATE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>      <operator>||</operator>
		    <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>column_type_name</name></expr></argument>, <argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SQLITE_INTEGER</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DQLITE_UNIXTIME</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>SQLITE_TEXT</name> <operator>||</operator>
				       <name>type</name> <operator>==</operator> <name>SQLITE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DQLITE_ISO8601</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>column_type_name</name></expr></argument>, <argument><expr><literal type="string">"BOOLEAN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>SQLITE_INTEGER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SQLITE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DQLITE_BOOLEAN</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Append a single row to the message. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_row</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_encoder</name></name></type> <name>encoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tuple_encoder__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>TUPLE__ROW</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Encode the row values */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* Figure the type */</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>value</name></name></type> <name>value</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>value_type</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name><name>value</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>SQLITE_INTEGER</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator>
				    <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SQLITE_FLOAT</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>float_</name></name> <operator>=</operator>
				    <call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>blob</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SQLITE_NULL</name></expr>:</case>
				<comment type="block">/* TODO: allow null to be encoded with 0 bytes
				 */</comment>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>null</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>=</operator>
				    <operator>(</operator><name>text_t</name><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>DQLITE_UNIXTIME</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator>
				    <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>DQLITE_ISO8601</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>=</operator>
				    <operator>(</operator><name>text_t</name><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>value</name><operator>.</operator><name>text</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>DQLITE_BOOLEAN</name></expr>:</case>
				<expr_stmt><expr><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>=</operator>
				    <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tuple_encoder__next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>rc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>query__batch</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <comment type="block">/* Column count */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>n64</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n64</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>

	<comment type="block">/* Insert the column count */</comment>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Insert the column names */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>text__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>text__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Insert the rows. */</comment>
	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>buffer__offset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* If we are already filled a memory page, let's break
			 * for now, we'll send more rows in a separate
			 * response. */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ROW</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>encode_row</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
