<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/leader.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tracing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vfs.h"</cpp:file></cpp:include>

<comment type="block">/* Called when a leader exec request terminates and the associated callback can
 * be invoked. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>leaderExecDone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Open a SQLite connection and set it to leader replication mode. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>openConnection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfs</name></decl></parameter>,
			  <parameter><decl><type><name>unsigned</name></type> <name>page_size</name></decl></parameter>,
			  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier><modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"open connection filename %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>pragma</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>vfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"open failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Enable extended result codes */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_extended_result_codes</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"extended codes failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The vfs, db, gateway, and leader code currently assumes that
	 * each connection will operate on only one DB file/WAL file
	 * pair. Make sure that the client can't use ATTACH DATABASE to
	 * break this assumption. We apply the same limit in open_follower_conn
	 * in db.c.
	 *
	 * Note, 0 instead of 1 -- apparently the "initial database" is not
	 * counted when evaluating this limit. */</comment>
	<expr_stmt><expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><name>SQLITE_LIMIT_ATTACHED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set the page size. */</comment>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pragma</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA page_size=%d"</literal></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"page size set failed %d page size %u"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Disable syncs. */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA synchronous=OFF"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"sync off failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set WAL journaling. */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA journal_mode=WAL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"wal on failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA wal_autocheckpoint=0"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			  <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"wal autocheckpoint off failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator>
	    <call><name>sqlite3_db_config</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><name>SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"db config failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* TODO: make setting foreign keys optional. */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA foreign_keys=1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"enable foreign keys failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Whether we need to submit a barrier request because there is no transaction
 * in progress in the underlying database and the FSM is behind the last log
 * index. */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>needsBarrier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>l</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>tx_id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	       <call><name>raft_last_applied</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>raft_last_index</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>leader__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>raft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"leader init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>raft</name></name> <operator>=</operator> <name>raft</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>openConnection</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
			    <argument><expr><name><name>db</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"open failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>inflight</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QUEUE__PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>leaders</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>leader__close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"leader close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<comment type="block">/* TODO: there shouldn't be any ongoing exec request. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>inflight</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>leaderExecDone</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>QUEUE__REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* A checkpoint command that fails to commit is not a huge issue.
 * The WAL will not be checkpointed this time around on these nodes,
 * a new checkpoint command will be issued once the WAL on the leader reaches
 * threshold size again. It's improbable that the WAL in this way could grow
 * without bound, it would mean that apply frames commands commit without
 * issues, while the checkpoint command would somehow always fail to commit. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>leaderCheckpointApplyCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
				    <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>,
				    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>result</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"checkpoint apply failed %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Attempt to perform a checkpoint on nodes running a version of dqlite that
 * doens't perform autonomous checkpoints. For recent nodes, the checkpoint
 * command will just be a no-op.
 * This function will run after the WAL might have been checkpointed during a call
 * to `apply_frames`.
 * */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>leaderMaybeCheckpointLegacy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"leader maybe checkpoint legacy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlite3_file</name></name> <modifier>*</modifier></type><name>wal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>command_checkpoint</name></name></type> <name>command</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<comment type="block">/* Get the database file associated with this connection */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_JOURNAL_POINTER</name></expr></argument>,
				  <argument><expr><operator>&amp;</operator><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <name>SQLITE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Should never fail */</comment>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>wal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <name>SQLITE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Should never fail */</comment>

	<comment type="block">/* size of the WAL will be 0 if it has just been checkpointed on this
	 * leader as a result of running apply_frames. */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"issue checkpoint command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Attempt to perfom a checkpoint across nodes that don't perform
	 * autonomous snapshots. */</comment>
	<expr_stmt><expr><name><name>command</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>command__encode</name><argument_list>(<argument><expr><name>COMMAND_CHECKPOINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"encode failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>apply</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>apply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>apply</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft_malloc - no mem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err_after_buf_alloc</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_apply</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>apply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>leaderCheckpointApplyCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft_apply failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>apply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err_after_buf_alloc</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>

<label><name>err_after_buf_alloc</name>:</label>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>leaderApplyFramesCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>,
				<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"apply frames cb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>apply</name></name> <modifier>*</modifier></type><name>apply</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>apply</name><operator>-&gt;</operator><name>leader</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>apply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>result</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"apply frames cb failed status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>vfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>RAFT_LEADERSHIPLOST</name></expr>:</case>
				<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SQLITE_IOERR_LEADERSHIP_LOST</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RAFT_NOSPACE</name></expr>:</case>
				<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SQLITE_IOERR_WRITE</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RAFT_SHUTDOWN</name></expr>:</case>
				<comment type="block">/* If we got here it means we have manually
				 * fired the apply callback from
				 * gateway__close(). In this case we don't
				 * free() the apply object, since it will be
				 * freed when the callback is fired again by
				 * raft.
				 *
				 * TODO: we should instead make gatewa__close()
				 * itself asynchronous. */</comment>
				<expr_stmt><expr><name><name>apply</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SQLITE_ABORT</name></expr>;</expr_stmt>
				<goto>goto <name>finish</name>;</goto>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>VfsAbort</name><argument_list>(<argument><expr><name>vfs</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>apply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>leaderMaybeCheckpointLegacy</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>inflight</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>tx_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>leaderExecDone</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>leaderApplyFrames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
			     <parameter><decl><type><name>dqlite_vfs_frame</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>,
			     <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>leader</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>db</name></name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>command_frames</name></name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>apply</name></name> <modifier>*</modifier></type><name>apply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>tx_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>truncate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>is_commit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>n_pages</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>frames</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>apply</name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>apply</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_NOMEM</name></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>command__encode</name><argument_list>(<argument><expr><name>COMMAND_FRAMES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"encode %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err_after_apply_alloc</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>apply</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>leader</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apply</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>apply</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>apply</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_FRAMES</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_apply</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>apply</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>leaderApplyFramesCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft apply failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err_after_command_encode</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>tx_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>inflight</name></name> <operator>=</operator> <name>apply</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err_after_command_encode</name>:</label>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_after_apply_alloc</name>:</label>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>apply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>leaderExecV2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>leader</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>db</name></name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>vfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dqlite_vfs_frame</name> <modifier>*</modifier></type><name>frames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>VfsPoll</name><argument_list>(<argument><expr><name>vfs</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"vfs poll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>finish</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leaderApplyFrames</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>VfsAbort</name><argument_list>(<argument><expr><name>vfs</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>finish</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>

<label><name>finish</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"exec v2 failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>leaderExecDone</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execBarrierCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"exec barrier cb status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>leader</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>leaderExecDone</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>leaderExecV2</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>leader__exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>,
		 <parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
		 <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>,
		 <parameter><decl><type><name>exec_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"leader exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"busy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SQLITE_BUSY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__barrier</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>, <argument><expr><name>execBarrierCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raftBarrierCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_barrier</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft barrier cb status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RAFT_LEADERSHIPLOST</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>SQLITE_IOERR_LEADERSHIP_LOST</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>barrier_cb</name></type> <name>cb</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>cb</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"barrier cb already fired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>barrier</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>leader__barrier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>leader</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>barrier_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"leader barrier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>needsBarrier</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"not needed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>barrier</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>barrier</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_barrier</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>raftBarrierCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft barrier failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
