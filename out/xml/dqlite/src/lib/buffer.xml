<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/lib/buffer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>

<comment type="block">/* How large is the buffer currently */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(B-&gt;n_pages * B-&gt;page_size)</cpp:value></cpp:define>

<comment type="block">/* How many remaining bytes the buffer currently */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP</name><parameter_list>(<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SIZE(B) - B-&gt;offset)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>buffer__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_pages</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>buffer__close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Ensure that the buffer has at least @size spare bytes */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_pages</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>n_pages</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Double the buffer until we have enough capacity */</comment>
	<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>CAP</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_pages</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* CAP(b) was insufficient */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>n_pages</name></name> <operator>&gt;</operator> <name>n_pages</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>n_pages</name></name> <operator>=</operator> <name>n_pages</name></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>buffer__advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ensure</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>buffer__cursor</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>buffer__offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>buffer__cursor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>buffer__reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
