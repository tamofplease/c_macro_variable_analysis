<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/lib/addr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"addr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>AddrParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
	      <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	      <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addr_len</name></decl></parameter>,
	      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
	      <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>input_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>addr_un</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>close_bracket</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>colon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Unix domain address.
		 * FIXME the use of the "abstract namespace" here is
		 * Linux-specific */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DQLITE_ADDR_PARSE_UNIX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_MISUSE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>addr_un</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator><name>addr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>addr_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>addr_un</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>input</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>name_len</name> <operator>=</operator> <name>input_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Autogenerated abstract socket name */</comment>
			<expr_stmt><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>addr_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_family</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Leading null byte, no trailing null byte */</comment>
		<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_path</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>addr_un</name><operator>-&gt;</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>addr_len</name> <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>+</operator>
			    <operator>(</operator><name>socklen_t</name><operator>)</operator><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* IPv6 address with port */</comment>
		<expr_stmt><expr><name>addr_start</name> <operator>=</operator> <name>input</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>close_bracket</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>close_bracket</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>colon</name> <operator>=</operator> <name>close_bracket</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>colon</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator>
		    <call><name>strndup</name><argument_list>(<argument><expr><name>addr_start</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>close_bracket</name> <operator>-</operator> <name>addr_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* IPv4 address */</comment>
		<expr_stmt><expr><name>colon</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>colon</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>service</name> <operator>=</operator> <name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>colon</name> <operator>-</operator> <name>input</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* IPv6 address without port */</comment>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_NUMERICHOST</name> <operator>|</operator> <name>AI_NUMERICSERV</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_strdup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>&gt;</operator> <operator>*</operator><name>addr_len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_ERROR</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_getaddrinfo</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>addr_len</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

<label><name>err_after_getaddrinfo</name>:</label>
	<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err_after_strdup</name>:</label>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
</unit>
