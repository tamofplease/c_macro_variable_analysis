<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/lib/transport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<comment type="block">/* Called to allocate a buffer for the next stream read. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>alloc_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>suggested_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>read</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Invoke the read callback. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>transport_read_cb</name></type> <name>cb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_read_stop</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>read_cb</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_cb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* We shouldn't have read more data than the pending amount. */</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Advance the read window */</comment>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>base</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

		<comment type="block">/* If there's more data to read in order to fill the current
		 * read buffer, just return, we'll be invoked again. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Read completed, invoke the callback. */</comment>
		<expr_stmt><expr><call><name>read_done</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Empty read */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Failure. */</comment>
	<expr_stmt><expr><call><name>read_done</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport__stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>uv_loop_s</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>,
		      <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
		      <parameter><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_pipe_s</name></name> <modifier>*</modifier></type><name>pipe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_tcp_s</name></name> <modifier>*</modifier></type><name>tcp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>uv_guess_handle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>UV_TCP</name></expr>:</case>
			<expr_stmt><expr><name>tcp</name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tcp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_tcp_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_tcp_open</name><argument_list>(<argument><expr><name>tcp</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>TRANSPORT__BADSOCKET</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>stream</name> <operator>=</operator> <operator>(</operator>struct <name>uv_stream_s</name> <operator>*</operator><operator>)</operator><name>tcp</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UV_NAMED_PIPE</name></expr>:</case>
			<expr_stmt><expr><name>pipe</name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_pipe_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_pipe_open</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>TRANSPORT__BADSOCKET</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>stream</name> <operator>=</operator> <operator>(</operator>struct <name>uv_stream_s</name> <operator>*</operator><operator>)</operator><name>pipe</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>TRANSPORT__BADSOCKET</name></expr>;</return>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>write</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>close_cb</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transport__close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>transport_close_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport__read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>transport_read_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>base</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_read_start</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>alloc_cb</name></expr></argument>, <argument><expr><name>read_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_cb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>transport_write_cb</name></type> <name>cb</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>write_cb</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transport__write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>transport_write_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
