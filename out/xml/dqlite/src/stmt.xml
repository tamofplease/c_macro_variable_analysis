<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/stmt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./tuple.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stmt.h"</cpp:file></cpp:include>

<comment type="block">/* The maximum number of columns we expect (for bindings or rows) is 255, which
 * can fit in one byte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT__MAX_COLUMNS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8) - 1</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>stmt__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stmt__close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ignore the return code, since it will be non-zero in case the
		 * most rececent evaluation of the statement failed. */</comment>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmt__hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stmt</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>REGISTRY_METHODS</name><argument_list>(<argument><expr><name>stmt__registry</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
