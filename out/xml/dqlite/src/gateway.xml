<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/gateway.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gateway.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"response.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tracing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vfs.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>gateway__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
		   <parameter><decl><type><name><name>struct</name> <name>config</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,
		   <parameter><decl><type><name><name>struct</name> <name>registry</name></name> <modifier>*</modifier></type><name>registry</name></decl></parameter>,
		   <parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>raft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>registry</name></name> <operator>=</operator> <name>registry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name></name> <operator>=</operator> <name>raft</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>stmt__registry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>DQLITE_PROTOCOL_VERSION</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gateway__leader_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway:%p or gateway-&gt;leader are NULL"</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>inflight</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"finish inflight apply request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>inflight</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"finish inflight barrier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* This is not a typo, g-&gt;barrier.req.cb is a wrapper
			 * around g-&gt;barrier.cb and when called, will set g-&gt;barrier.cb to NULL.
			 * */</comment>
			<decl_stmt><decl><type><name><name>struct</name> <name>raft_barrier</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>cb</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>exec</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"finish inflight exec barrier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>struct</name> <name>raft_barrier</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>barrier</name><operator>.</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>b</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>exec</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_QUERY</name>
					   <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_EXEC</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Regular exec and query stmt's will be closed when the
			 * registry is closed below. */</comment>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"finalize exec_sql or query_sql type:%d"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>stmt__registry_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>leader__close</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gateway__close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>stmt__registry_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>gateway__leader_close</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>RAFT_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Declare a request struct and a response struct of the appropriate types and
 * decode the request. This is used in the common case where only one schema
 * version is extant. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_V0</name><parameter_list>(<parameter><type><name>REQ</name></type></parameter>, <parameter><type><name>RES</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                    \
	<cpp:value>struct request_##REQ request = {0};                                        \
	struct response_##RES response = {0};                                      \
	{                                                                          \
		int rv_;                                                           \
		if (req-&gt;schema != 0) {                                            \
			tracef("bad schema version %d", req-&gt;schema);              \
			failure(req, DQLITE_PARSE, "unrecognized schema version"); \
			return 0;                                                  \
		}                                                                  \
		rv_ = request_##REQ##__decode(cursor, &amp;request);                   \
		if (rv_ != 0) {                                                    \
			return rv_;                                                \
		}                                                                  \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_LEADER</name><parameter_list>(<parameter><type><name>REQ</name></type></parameter>)</parameter_list></cpp:macro>                                            \
	<cpp:value>if (raft_state(REQ-&gt;gateway-&gt;raft) != RAFT_LEADER) {         \
		failure(REQ, SQLITE_IOERR_NOT_LEADER, "not leader"); \
		return 0;                                            \
	}</cpp:value></cpp:define>

<comment type="block">/* Encode the given success response and invoke the request callback */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESS</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>)</parameter_list></cpp:macro>                                                  \
	<cpp:value>{                                                                      \
		size_t _n = response_##LOWER##__sizeof(&amp;response);             \
		void *_cursor;                                                 \
		assert(_n % 8 == 0);                                           \
		_cursor = buffer__advance(req-&gt;buffer, _n);                    \
		<comment type="block">/* Since responses are small and the buffer it's at least 4096 \
		 * bytes, this can't fail. */</comment>                                  \
		assert(_cursor != NULL);                                       \
		response_##LOWER##__encode(&amp;response, &amp;_cursor);               \
		req-&gt;cb(req, 0, DQLITE_RESPONSE_##UPPER);                      \
	}</cpp:value></cpp:define>

<comment type="block">/* Lookup the database with the given ID.
 *
 * TODO: support more than one database per connection? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_DB</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro>                                                \
	<cpp:value>if (ID != 0 || req-&gt;gateway-&gt;leader == NULL) {               \
		failure(req, SQLITE_NOTFOUND, "no database opened"); \
		return 0;                                            \
	}</cpp:value></cpp:define>

<comment type="block">/* Lookup the statement with the given ID. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_STMT</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro>                                      \
	<cpp:value>stmt = stmt__registry_get(&amp;req-&gt;gateway-&gt;stmts, ID); \
	if (stmt == NULL) {                                  \
		failure(req, SQLITE_NOTFOUND,                \
			"no statement with the given id");   \
		return 0;                                    \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL_IF_CHECKPOINTING</name></cpp:macro>                                                  \
	<cpp:value>{                                                                      \
		struct sqlite3_file *_file;                                    \
		int _rv;                                                       \
		_rv = sqlite3_file_control(g-&gt;leader-&gt;conn, "main",            \
					   SQLITE_FCNTL_FILE_POINTER, &amp;_file); \
		assert(_rv == SQLITE_OK); <comment type="block">/* Should never fail */</comment>              \
                                                                               \
		_rv = _file-&gt;pMethods-&gt;xShmLock(                               \
		    _file, 1 <comment type="block">/* checkpoint lock */</comment>, 1,                         \
		    SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE);                   \
		if (_rv != 0) {                                                \
			assert(_rv == SQLITE_BUSY);                            \
			failure(req, SQLITE_BUSY, "checkpoint in progress");   \
			return 0;                                              \
		}                                                              \
		_file-&gt;pMethods-&gt;xShmLock(                                     \
		    _file, 1 <comment type="block">/* checkpoint lock */</comment>, 1,                         \
		    SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE);                 \
	}</cpp:value></cpp:define>

<comment type="block">/* Encode fa failure response and invoke the request callback */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>failure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_failure</name></name></type> <name>failure</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>failure</name><operator>.</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>failure</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>response_failure__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* The buffer has at least 4096 bytes, and error messages are shorter
	 * than that. So this can't fail. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>response_failure__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>failure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_leader_legacy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle leader legacy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>leader</name></expr></argument>, <argument><expr><name>server_legacy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>raft_id</name></type> <name>id</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>raft_leader</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>response</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>address</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>response</name><operator>.</operator><name>address</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>server_legacy</name></expr></argument>, <argument><expr><name>SERVER_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_leader</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_id</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>DQLITE_PROTOCOL_VERSION_LEGACY</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>handle_leader_legacy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>leader</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Only voters might now who the leader is. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>configuration</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>raft_server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>configuration</name><operator>.</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>id</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>-&gt;</operator><name>role</name></name> <operator>==</operator> <name>RAFT_VOTER</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle leader - dispatch to %llu"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raft_leader</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>address</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>response</name><operator>.</operator><name>address</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_client</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>welcome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>heartbeat_timeout</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>gateway</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>heartbeat_timeout</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>welcome</name></expr></argument>, <argument><expr><name>WELCOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>db</name></name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>open</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"already open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>SQLITE_BUSY</name></expr></argument>,
			<argument><expr><literal type="string">"a database for this connection is already open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>registry__db_get</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>registry</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"registry db get failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>leader__init</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"leader init failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareBarrierCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"prepare barrier cb status:%d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_stmt</name></name></type> <name>response</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>stmt__registry_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>stmt__registry_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"barrier error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"prepare barrier cb sqlite prepare failed %d %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>stmt__registry_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"prepare barrier cb empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>stmt__registry_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* FIXME Should we use a code other than 0 here? */</comment>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>params</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>prepare</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_DB</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>db_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>response</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stmt__registry_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle prepare registry add failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This cast is safe as long as the TODO in LOOKUP_DB is not
	 * implemented. */</comment>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>db_id</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>request</name><operator>.</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>stmt_id</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>sql</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>leader__barrier</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>, <argument><expr><name>prepareBarrierCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle prepare barrier failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>stmt__registry_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fill a result response with the last inserted ID and number of rows
 * affected. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>response_result</name></name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>last_insert_id</name></name> <operator>=</operator>
	    <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>rows_affected</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>sqlite3_changes</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_message</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SQLITE_IOERR_LEADERSHIP_LOST</name></expr>:</case>
		<return>return <expr><literal type="string">"disk I/O error"</literal></expr>;</return>
	<case>case <expr><name>SQLITE_IOERR_WRITE</name></expr>:</case>
		<return>return <expr><literal type="string">"disk I/O error"</literal></expr>;</return>
	<case>case <expr><name>SQLITE_ABORT</name></expr>:</case>
		<return>return <expr><literal type="string">"abort"</literal></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>leader_exec_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>exec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>exec</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_result</name></name></type> <name>response</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fill_result</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>error_message</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_exec</name></name></type> <name>request</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tuple_format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS32</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bad schema version %d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized schema version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
	<comment type="block">/* The v0 and v1 schemas only differ in the layout of the tuple,
	 * so we can use the same decode function for both. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>request_exec__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_DB</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>db_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_STMT</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FAIL_IF_CHECKPOINTING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind__params</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>tuple_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec bind failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"bind parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>leader_exec_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec leader exec failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Step through the given statement and populate the response buffer of the
 * given request with a single batch of rows.
 *
 * A single batch of rows is typically about the size of a memory page. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>query_batch</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_rows</name></name></type> <name>response</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>query__batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_ROW</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>SQLITE_DONE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>done</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>response</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <name>DQLITE_RESPONSE_ROWS_PART</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>response</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <name>DQLITE_RESPONSE_ROWS_DONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* TODO: do we care about errors? */</comment>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>query_barrier_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"query barrier cb status:%d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"barrier error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>query_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_query</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query</name></name></type> <name>request</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tuple_format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS32</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bad schema version %d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized schema version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
	<comment type="block">/* The only difference in layout between the v0 and v1 requests is in the tuple,
	 * which isn't parsed until bind__params later on. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>request_query__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_DB</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>db_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_STMT</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FAIL_IF_CHECKPOINTING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind__params</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>tuple_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query bind failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__barrier</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>, <argument><expr><name>query_barrier_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query leader barrier failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_finalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle finalize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>finalize</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_DB</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>db_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_STMT</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>stmt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>stmt__registry_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>gateway</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle finalize registry del failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"finalize statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_exec_sql_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_exec_sql_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec</name></name> <modifier>*</modifier></type><name>exec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec sql cb status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>exec</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>SQLITE_DONE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>handle_exec_sql_next</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>error_message</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_exec_sql_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec sql next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_result</name></name></type> <name>response</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tuple_format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>success</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* g-&gt;stmt will be set to NULL by sqlite when an error occurs. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"exec sql prepare failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>done</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>success</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* TODO: what about bindings for multi-statement SQL text? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS32</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<comment type="block">/* Should have been caught by handle_exec_sql */</comment>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind__params</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>tuple_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>done_after_prepare</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__exec</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>handle_exec_sql_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>done_after_prepare</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>

<label><name>success</name>:</label>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec sql next success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fill_result</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done_after_prepare</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execSqlBarrierCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"exec sql barrier cb status:%d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"barrier error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>handle_exec_sql_next</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_exec_sql</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec sql"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_exec_sql</name></name></type> <name>request</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<comment type="block">/* Fail early if the schema version isn't recognized, even though we won't
	 * use it until later. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>schema</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bad schema version %d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized schema version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* The only difference in layout between the v0 and v1 requests is in the tuple,
	 * which isn't parsed until bind__params later on. */</comment>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>request_exec_sql__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_DB</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>db_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FAIL_IF_CHECKPOINTING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>sql</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>leader__barrier</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>, <argument><expr><name>execSqlBarrierCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle exec sql barrier failed %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>querySqlBarrierCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>barrier</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"query sql barrier cb status:%d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tuple_format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"barrier error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query sql prepare failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query sql empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"empty statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>tuple_format</name> <operator>=</operator> <name>TUPLE__PARAMS32</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Should have been caught by handle_query_sql */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>bind__params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>tuple_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query sql bind failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>query_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_query_sql</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query sql"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query_sql</name></name></type> <name>request</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<comment type="block">/* Fail early if the schema version isn't recognized. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>schema</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bad schema version %d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized schema version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Schema version only affect the tuple format, which is parsed later */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>request_query_sql__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOOKUP_DB</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>db_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>FAIL_IF_CHECKPOINTING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>sql</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>leader__barrier</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>, <argument><expr><name>querySqlBarrierCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle query sql barrier failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_interrupt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>interrupt</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Take appropriate action depending on the cleanup code. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt_finalize</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>change</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>gateway</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_change</name></name></type> <name>req</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>raftChangeCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>change</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft change cb status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>change</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_empty</name></name></type> <name>response</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>translateRaftErrCode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>raft_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>response</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>gateway</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_add</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>address</name></name></expr></argument>,
		      <argument><expr><name>raftChangeCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft add failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>translateRaftErrCode</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>raft_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle assign"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>role</name> <init>= <expr><name>DQLITE_VOTER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>assign</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>response</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Detect if this is an assign role request, instead of the former
	 * promote request. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>cap</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uint64__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle assign promote rv %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>rv</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>gateway</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_assign</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>id</name></name></expr></argument>,
			 <argument><expr><call><name>translateDqliteRole</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>role</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>raftChangeCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft_assign failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>translateRaftErrCode</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>raft_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>change</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>remove</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>response</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>gateway</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_remove</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>raftChangeCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft_remote failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>translateRaftErrCode</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>raft_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dumpFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
		    <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
		    <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
		    <parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>text__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>oom</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>text__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>uint64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>oom</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>oom</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>oom</name>:</label>
	<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>vfs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>database_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>database</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n_database</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n_wal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>response_files__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>response_files__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>vfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>VfsSnapshot</name><argument_list>(<argument><expr><name>vfs</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"dump failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"failed to dump database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Extract the database size from the first page. */</comment>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>database_size</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>page</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>database_size</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>page</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>database_size</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>page</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>database_size</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>page</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>n_database</name> <operator>=</operator> <name>database_size</name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_wal</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>n_database</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>database</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>wal</name> <operator>=</operator> <name>database</name> <operator>+</operator> <name>n_database</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>n_database</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_wal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>database</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>wal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dumpFile</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>n_database</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"dump failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"failed to dump database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>out_free_data</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* filename is zero inited and initially we allow only writing 1024 - 4
	 * - 1 bytes to it, so after strncpy filename will be zero-terminated
	 * and will not have overflowed. strcat adds the 4 byte suffix and
	 * also zero terminates the resulting string. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>wal_suffix</name> <init>= <expr><literal type="string">"-wal"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>wal_suffix</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>wal_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>dumpFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>n_wal</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"wal dump failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"failed to dump wal file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>out_free_data</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<label><name>out_free_data</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encodeServer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
			<parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>role</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text_t</name></type> <name>address</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>format</name> <operator>==</operator> <name>DQLITE_REQUEST_CLUSTER_FORMAT_V0</name> <operator>||</operator>
	       <name>format</name> <operator>==</operator> <name>DQLITE_REQUEST_CLUSTER_FORMAT_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>configuration</name><operator>.</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>address</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>configuration</name><operator>.</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>role</name> <operator>=</operator>
	    <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>translateRaftRole</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>configuration</name><operator>.</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>uint64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>text__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>text__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>DQLITE_REQUEST_CLUSTER_FORMAT_V0</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>uint64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>role</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>role</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_cluster</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_CLUSTER_FORMAT_V0</name> <operator>&amp;&amp;</operator>
	    <name><name>request</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_CLUSTER_FORMAT_V1</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bad cluster format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized cluster format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>configuration</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>response_servers__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>response_servers__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>response</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>encodeServer</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>request</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"encode failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="string">"failed to encode server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DQLITE_RESPONSE_SERVERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftTransferCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_transfer</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_empty</name></name></type> <name>response</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>raft</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RAFT_LEADER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"transfer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"leadership transfer failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle transfer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_transfer</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>response</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_LEADER</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>raft_transfer</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>raftTransferCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft_transfer failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>translateRaftErrCode</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>raft_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_describe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle describe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>describe</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_DESCRIBE_FORMAT_V0</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"bad format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>SQLITE_PROTOCOL</name></expr></argument>, <argument><expr><literal type="string">"bad format version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>failure_domain</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>failure_domain</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>response</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>METADATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_weight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"handle weight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>START_V0</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SUCCESS</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gateway__handle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
		    <parameter><decl><type><name><name>struct</name> <name>handle</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
		    <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
		    <parameter><decl><type><name>int</name></type> <name>schema</name></decl></parameter>,
		    <parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
		    <parameter><decl><type><name>handle_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Check if there is a request in progress. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>DQLITE_REQUEST_HEARTBEAT</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DQLITE_REQUEST_QUERY</name> <operator>||</operator>
		    <name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DQLITE_REQUEST_QUERY_SQL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* TODO: handle interrupt requests */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>DQLITE_REQUEST_INTERRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>handle</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DQLITE_REQUEST_EXEC</name> <operator>||</operator>
		    <name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DQLITE_REQUEST_EXEC_SQL</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway handle - BUSY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SQLITE_BUSY</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>handle</name>:</label>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <name>schema</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>gateway</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>db_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>stmt_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>, <parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro>                 \
	<cpp:value>case DQLITE_REQUEST_##UPPER:              \
		rc = handle_##LOWER(req); \
		break;</cpp:value></cpp:define>
		<expr_stmt><expr><call><name>REQUEST__TYPES</name><argument_list>(<argument><expr><name>DISPATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<default>default:</default>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"unrecognized request type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>failure</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>DQLITE_PARSE</name></expr></argument>, <argument><expr><literal type="string">"unrecognized request type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gateway__resume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gateway</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>finished</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_QUERY</name> <operator>&amp;&amp;</operator>
			       <name><name>g</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>DQLITE_REQUEST_QUERY_SQL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway resume - finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>finished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"gateway resume - not finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>finished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>query_batch</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
