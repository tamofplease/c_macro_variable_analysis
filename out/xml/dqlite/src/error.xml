<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/error.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../include/dqlite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./lib/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>

<comment type="block">/* Fallback message returned when failing to allocate the error message
 * itself. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dqlite__error_oom_msg</name> <init>=
    <expr><literal type="string">"error message unavailable (out of memory)"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dqlite__error_init</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__error_close</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>e</name> <operator>!=</operator> <name>dqlite__error_oom_msg</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Set an error message by rendering the given format against the given
 * parameters.
 *
 * Any previously set error message will be cleared. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dqlite__error_vprintf</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>   <name>fmt</name></decl></parameter>,
                                  <parameter><decl><type><name>va_list</name></type>        <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If a previous error was set (other than the hard-coded OOM fallback
	 * fallback), let's free it. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>e</name> <operator>!=</operator> <name>dqlite__error_oom_msg</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Render the message. In case of error we fallback to the hard-coded
	 * OOM fallback message. */</comment>
	<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>dqlite__error_oom_msg</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__error_printf</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dqlite__error_vprintf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dqlite__error_vwrapf</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>   <name>cause</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>   <name>fmt</name></decl></parameter>,
                                 <parameter><decl><type><name>va_list</name></type>        <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>dqlite__error</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type>        <name>msg</name></decl>;</decl_stmt>

	<comment type="block">/* First, print the format and arguments, using a temporary error. */</comment>
	<expr_stmt><expr><call><name>dqlite__error_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dqlite__error_vprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cause</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Special case the cause error being empty. */</comment>
		<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"%s: (null)"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cause</name> <operator>==</operator> <operator>*</operator><name>e</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* When the error is wrapping itself, we need to make a copy */</comment>
		<expr_stmt><expr><call><name>dqlite__error_copy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>dqlite__error_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__error_wrapf</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type>      <name>e</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>dqlite__error</name> <modifier>*</modifier></type><name>cause</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>         <name>fmt</name></decl></parameter>,
                         <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dqlite__error_vwrapf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>cause</name><operator>)</operator></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__error_oom</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dqlite__error_vwrapf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__error_sys</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dqlite__error_uv</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>dqlite__error_printf</name><argument_list>(
	    <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"%s: %s (%s)"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite__error_copy</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Trying to copy an empty error message is an error. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>copy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite__error_is_null</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>e</name> <operator>==</operator> <name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>dqlite__error_is_disconnect</name><parameter_list>(<parameter><decl><type><name>dqlite__error</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>UV_EOF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>UV_ECONNRESET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
