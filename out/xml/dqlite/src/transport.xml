<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/transport.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/transport.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/addr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tracing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<struct>struct <name>impl</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_loop_s</name></name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	}</block> <decl><name>connect</name></decl>;</struct>
	<decl_stmt><decl><type><name>raft_id</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_uv_accept_cb</name></type> <name>accept_cb</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>connect</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>impl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_uv_connect</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_work_s</name></name></type> <name>work</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>raft_id</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>impl_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
		     <parameter><decl><type><name>raft_id</name></type> <name>id</name></decl></parameter>,
		     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"impl init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>impl_listen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
		       <parameter><decl><type><name>raft_uv_accept_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"impl listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>accept_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect_work_cb</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name> <modifier>*</modifier></type><name>work</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"connect work cb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connect</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>message</name></name></type> <name>message</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_connect</name></name></type> <name>request</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>protocol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<comment type="block">/* Establish a connection to the other node using the provided connect
	 * function. */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>connect</name><operator>.</operator><name>f</name></name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>connect</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"connect failed to %llu@%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>RAFT_NOCONNECTION</name></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Send the initial dqlite protocol handshake. */</comment>
	<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><name>DQLITE_PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>, <argument><expr><sizeof>sizeof <name>protocol</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <sizeof>sizeof <name>protocol</name></sizeof></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>RAFT_NOCONNECTION</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_connect</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Send a CONNECT dqlite protocol command, which will transfer control
	 * to the underlying raft UV backend. */</comment>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>message__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>request_connect__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>message</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DQLITE_REQUEST_CONNECT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>message</name><operator>.</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>n2</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n1</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>RAFT_NOCONNECTION</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_connect</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>message__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>request_connect__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>RAFT_NOCONNECTION</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_connect</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return;</return>

<label><name>err_after_connect</name>:</label>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect_after_work_cb</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"connect after work cb status %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connect</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>transport__stream</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"transport stream failed %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>RAFT_NOCONNECTION</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
	<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>impl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>raft_uv_connect</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
			<parameter><decl><type><name>raft_id</name></type> <name>id</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
			<parameter><decl><type><name>raft_uv_connect_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"impl connect id:%llu address:%s"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connect</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>DQLITE_NOMEM</name></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>work</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uv_queue_work</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>work</name></name></expr></argument>, <argument><expr><name>connect_work_cb</name></expr></argument>,
			   <argument><expr><name>connect_after_work_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"queue work failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>RAFT_NOCONNECTION</name></expr>;</expr_stmt>
		<goto>goto <name>err_after_connect_alloc</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err_after_connect_alloc</name>:</label>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>impl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
		       <parameter><decl><type><name>raft_uv_transport_close_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"impl close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>default_connect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr_in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr_in</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>addr_len</name> <init>= <expr><sizeof>sizeof <name>addr_in</name></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>AddrParse</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>, <argument><expr><literal type="string">"8080"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RAFT_NOCONNECTION</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RAFT_NOCONNECTION</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RAFT_NOCONNECTION</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>raftProxyInit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>uv_loop_s</name></name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft proxy init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>connect</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>default_connect</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>connect</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>accept_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>impl_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>listen</name></name> <operator>=</operator> <name>impl_listen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>connect</name></name> <operator>=</operator> <name>impl_connect</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>impl_close</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftProxyClose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft proxy close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftProxyAccept</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
		     <parameter><decl><type><name>raft_id</name></type> <name>id</name></decl></parameter>,
		     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
		     <parameter><decl><type><name><name>struct</name> <name>uv_stream_s</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft proxy accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* If the accept callback is NULL it means we were stopped. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>accept_cb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"raft proxy accept closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator>struct <name>uv_handle_s</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_close_cb</name><operator>)</operator><name>raft_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name><name>i</name><operator>-&gt;</operator><name>accept_cb</name></name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raftProxySetConnectFunc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>,
			     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list></function_decl></parameter>,
			     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>impl</name></name> <modifier>*</modifier></type><name>i</name> <init>= <expr><name><name>transport</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>connect</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>connect</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
