<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/tuple.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>

<comment type="block">/* Return the tuple header size in bytes, for a tuple of @n values.
 *
 * If the tuple is a row, then each slot is 4 bits, otherwise if the tuple is a
 * sequence of parameters each slot is 8 bits. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>calc_header_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>TUPLE__ROW</name></expr>:</case>
			<comment type="block">/* Half a byte for each slot, rounded up... */</comment>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<comment type="block">/* ...and padded to a multiple of 8 bytes. */</comment>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>BytePad64</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TUPLE__PARAMS</name></expr>:</case>
			<comment type="block">/* 1-byte params count at the beginning of the first word */</comment>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>BytePad64</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Params count is not included in the header */</comment>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TUPLE__PARAMS32</name></expr>:</case>
			<comment type="block">/* 4-byte params count at the beginning of the first word */</comment>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>BytePad64</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Params count is not included in the header */</comment>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tuple_decoder__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_decoder</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
			<parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>cursor</name></name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>TUPLE__ROW</name></expr>:</case>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TUPLE__PARAMS</name></expr>:</case>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint8__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TUPLE__PARAMS32</name></expr>:</case>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint32__decode</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

	<comment type="block">/* Check that there is enough room to hold n type code slots. */</comment>
	<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>calc_header_size</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&gt;</operator> <name><name>cursor</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_PARSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name>header_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>cap</name></name> <operator>-=</operator> <name>header_size</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the number of values in the decoder's tuple. */</comment>
<function><type><name>unsigned</name> <name>long</name></type> <name>tuple_decoder__n</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_decoder</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>n</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the type of the i'th value of the tuple. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_decoder</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

	<comment type="block">/* In row format the type slot size is 4 bits, while in params format
	 * the slot is 8 bits. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>TUPLE__ROW</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>type</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tuple_decoder__next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_decoder</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_type</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SQLITE_INTEGER</name></expr>:</case>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>int64__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_FLOAT</name></expr>:</case>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>float__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>float_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>blob__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_NULL</name></expr>:</case>
			<comment type="block">/* TODO: allow null to be encoded with 0 bytes? */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>text__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_ISO8601</name></expr>:</case>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>text__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>iso8601</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_BOOLEAN</name></expr>:</case>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uint64__decode</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DQLITE_PARSE</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>rc</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return a pointer to the tuple header. */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>encoder__header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_encoder</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>buffer__cursor</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tuple_encoder__init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_encoder</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
			<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n_header</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* When encoding a tuple of parameters, we need to write the
	 * number of values at the beginning of the header. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>TUPLE__PARAMS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name>UINT8_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>TUPLE__PARAMS32</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>val</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>uint32__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>buffer__offset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reset the header */</comment>
	<expr_stmt><expr><name>n_header</name> <operator>=</operator> <call><name>calc_header_size</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>encoder__header</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Advance the buffer write pointer past the tuple header. */</comment>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Set the type of the i'th value of the tuple. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_encoder</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>encoder__header</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* In row format the type slot size is 4 bits, while in params format
	 * the slot is 8 bits. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>TUPLE__ROW</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>&amp;</operator><name><name>header</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>type</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tuple_encoder__next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuple_encoder</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>value</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_type</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SQLITE_INTEGER</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>int64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_FLOAT</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>float__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>float_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>blob__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_NULL</name></expr>:</case>
			<comment type="block">/* TODO: allow null to be encoded with 0 bytes */</comment>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>uint64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>text__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_UNIXTIME</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>int64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>unixtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_ISO8601</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>text__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>iso8601</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_BOOLEAN</name></expr>:</case>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>uint64__sizeof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>

	<comment type="block">/* Advance the buffer write pointer. */</comment>
	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>buffer__advance</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SQLITE_INTEGER</name></expr>:</case>
			<expr_stmt><expr><call><name>int64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_FLOAT</name></expr>:</case>
			<expr_stmt><expr><call><name>float__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>float_</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
			<expr_stmt><expr><call><name>blob__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_NULL</name></expr>:</case>
			<comment type="block">/* TODO: allow null to be encoded with 0 bytes */</comment>
			<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>null</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
			<expr_stmt><expr><call><name>text__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_UNIXTIME</name></expr>:</case>
			<expr_stmt><expr><call><name>int64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>unixtime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_ISO8601</name></expr>:</case>
			<expr_stmt><expr><call><name>text__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>iso8601</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_BOOLEAN</name></expr>:</case>
			<expr_stmt><expr><call><name>uint64__encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>boolean</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
