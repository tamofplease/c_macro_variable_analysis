<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/logger.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logger.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_BUF_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>loggerDefaultEmit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>EMIT_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

	<comment type="block">/* First, render the logging level. */</comment>
	<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>DQLITE_DEBUG</name></expr>:</case>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"[DEBUG]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_INFO</name></expr>:</case>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"[INFO ]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_WARN</name></expr>:</case>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"[WARN ]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DQLITE_LOG_ERROR</name></expr>:</case>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"[ERROR]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="string">"[     ]: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch><empty_stmt>;</empty_stmt>

	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then render the message, possibly truncating it. */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>EMIT_BUF_LEN</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wformat-nonliteral"</cpp:literal></cpp:pragma>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
