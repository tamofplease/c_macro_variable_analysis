<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/dqlite/src/client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"response.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tracing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>clientInit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"init client fd %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>buffer__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"init client read buffer init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>buffer__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"init client write buffer init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>err_after_read_buffer_init</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err_after_read_buffer_init</name>:</label>
	<expr_stmt><expr><call><name>buffer__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clientClose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client close fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>buffer__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>buffer__close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendHandshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>protocol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>rv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send handshake fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* TODO: update to version 1 */</comment>
	<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><name>DQLITE_PROTOCOL_VERSION_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>, <argument><expr><sizeof>sizeof <name>protocol</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send handshake failed %zd"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write out a request. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>)</parameter_list></cpp:macro>                                       \
	<cpp:value>{                                                           \
		struct message message = {0};                       \
		size_t n;                                           \
		size_t n1;                                          \
		size_t n2;                                          \
		void *cursor;                                       \
		ssize_t rv;                                         \
		n1 = message__sizeof(&amp;message);                     \
		n2 = request_##LOWER##__sizeof(&amp;request);           \
		n = n1 + n2;                                        \
		buffer__reset(&amp;c-&gt;write);                           \
		cursor = buffer__advance(&amp;c-&gt;write, n);             \
		if (cursor == NULL) {                               \
			return DQLITE_NOMEM;                        \
		}                                                   \
		assert(n2 % 8 == 0);                                \
		message.type = DQLITE_REQUEST_##UPPER;              \
		message.words = (uint32_t)(n2 / 8);                 \
		message__encode(&amp;message, &amp;cursor);                 \
		request_##LOWER##__encode(&amp;request, &amp;cursor);       \
		rv = write(c-&gt;fd, buffer__cursor(&amp;c-&gt;write, 0), n); \
		if (rv != (int)n) {                                 \
			tracef("request write failed rv %zd", rv);  \
			return DQLITE_ERROR;                        \
		}                                                   \
	}</cpp:value></cpp:define>

<comment type="block">/* Read a response without decoding it. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>)</parameter_list></cpp:macro>                                          \
	<cpp:value>{                                                           \
		struct message _message = {0};                      \
		struct cursor _cursor;                              \
		size_t _n;                                          \
		void *_p;                                           \
		ssize_t _rv;                                        \
		_n = message__sizeof(&amp;_message);                    \
		buffer__reset(&amp;c-&gt;read);                            \
		_p = buffer__advance(&amp;c-&gt;read, _n);                 \
		assert(_p != NULL);                                 \
		_rv = read(c-&gt;fd, _p, _n);                          \
		if (_rv != (int)_n) {                               \
			tracef("read head failed rv %zd", _rv);     \
			return DQLITE_ERROR;                        \
		}                                                   \
		_cursor.p = _p;                                     \
		_cursor.cap = _n;                                   \
		_rv = message__decode(&amp;_cursor, &amp;_message);         \
		assert(_rv == 0);                                   \
		if (_message.type != DQLITE_RESPONSE_##UPPER) {     \
			tracef("read decode failed rv %zd)", _rv);  \
			return DQLITE_ERROR;                        \
		}                                                   \
		buffer__reset(&amp;c-&gt;read);                            \
		_n = _message.words * 8;                            \
		_p = buffer__advance(&amp;c-&gt;read, _n);                 \
		if (_p == NULL) {                                   \
			tracef("read buf adv failed rv %zd", _rv);  \
			return DQLITE_ERROR;                        \
		}                                                   \
		_rv = read(c-&gt;fd, _p, _n);                          \
		if (_rv != (int)_n) {                               \
			tracef("read body failed rv %zd", _rv);     \
			return DQLITE_ERROR;                        \
		}                                                   \
	}</cpp:value></cpp:define>

<comment type="block">/* Decode a response. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>)</parameter_list></cpp:macro>                                                \
	<cpp:value>{                                                            \
		int rv;                                              \
		struct cursor cursor;                                \
		cursor.p = buffer__cursor(&amp;c-&gt;read, 0);              \
		cursor.cap = buffer__offset(&amp;c-&gt;read);               \
		rv = response_##LOWER##__decode(&amp;cursor, &amp;response); \
		if (rv != 0) {                                       \
			tracef("decode failed rv %d)", rv);          \
			return DQLITE_ERROR;                         \
		}                                                    \
	}</cpp:value></cpp:define>

<comment type="block">/* Read and decode a response. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESPONSE</name><parameter_list>(<parameter><type><name>LOWER</name></type></parameter>, <parameter><type><name>UPPER</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>READ(LOWER, UPPER);    \
	DECODE(LOWER)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>clientSendOpen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send open fd %d name %s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_open</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* TODO: this is unused, should we drop it? */</comment>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>vfs</name></name> <operator>=</operator> <literal type="string">"test"</literal></expr>;</expr_stmt> <comment type="block">/* TODO: this is unused, should we drop it? */</comment>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>open</name></expr></argument>, <argument><expr><name>OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientRecvDb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recvdb fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_db</name></name></type> <name>response</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RESPONSE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>db_id</name></name> <operator>=</operator> <name><name>response</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendPrepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send prepare fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_prepare</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>prepare</name></expr></argument>, <argument><expr><name>PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientRecvStmt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>stmt_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_stmt</name></name></type> <name>response</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RESPONSE</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>stmt_id</name> <operator>=</operator> <name><name>response</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recv stmt fd %d stmt_id %u"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>*</operator><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendExec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send exec fd %d id %u"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_exec</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><name>EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendExecSQL</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send exec sql fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_exec_sql</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>exec_sql</name></expr></argument>, <argument><expr><name>EXEC_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientRecvResult</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
		     <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>last_insert_id</name></decl></parameter>,
		     <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rows_affected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_result</name></name></type> <name>response</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RESPONSE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>last_insert_id</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>response</name><operator>.</operator><name>last_insert_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>rows_affected</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>response</name><operator>.</operator><name>rows_affected</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recv result fd %d last_insert_id %u rows_affected %u"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>*</operator><name>last_insert_id</name></expr></argument>, <argument><expr><operator>*</operator><name>rows_affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendQuery</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>stmt_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send query fd %d stmt_id %u"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>stmt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>stmt_id</name></name> <operator>=</operator> <name>stmt_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendQuerySql</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send query sql fd %d sql %s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_query_sql</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>db_id</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>db_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>query_sql</name></expr></argument>, <argument><expr><name>QUERY_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientRecvRows</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rows</name></name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recv rows fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor</name></name></type> <name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tuple_decoder</name></name></type> <name>decoder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>column_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>row</name></name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>buffer__cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <call><name>buffer__offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>uint64__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recv rows fd %d decode failed %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>rows</name><operator>-&gt;</operator><name>column_count</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>column_count</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rows</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>rows</name><operator>-&gt;</operator><name>column_names</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(
		    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>column_count</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>rows</name><operator>-&gt;</operator><name>column_names</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>rows</name><operator>-&gt;</operator><name>column_names</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>text__decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rows</name><operator>-&gt;</operator><name>column_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>eof</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>row</name></name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>.</operator><name>cap</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* No EOF marker fond */</comment>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>ByteFlipLe64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>cursor</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>==</operator> <name>DQLITE_RESPONSE_ROWS_DONE</name> <operator>||</operator>
		    <name>eof</name> <operator>==</operator> <name>DQLITE_RESPONSE_ROWS_PART</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator>
		    <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>column_count</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name><name>row</name><operator>-&gt;</operator><name>values</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>row</name><operator>-&gt;</operator><name>values</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_NOMEM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>tuple_decoder__init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>column_count</name></expr></argument>,
					 <argument><expr><name>TUPLE__ROW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"decode init error %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rows</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>tuple_decoder__next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"decode error %d"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>DQLITE_ERROR</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>rows</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clientCloseRows</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rows</name></name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>row</name></name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>rows</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>row</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>row</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>rows</name><operator>-&gt;</operator><name>column_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendAdd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send add fd %d id %u address %s"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_add</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendAssign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send assign fd %d id %u role %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_assign</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>role</name></expr>;</expr_stmt>
	<comment type="block">/* TODO: actually send an assign request, not a legacy promote one. */</comment>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>assign</name></expr></argument>, <argument><expr><name>ASSIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendRemove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send remove fd %d id %u"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_remove</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>remove</name></expr></argument>, <argument><expr><name>REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientSendTransfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client send transfer fd %d id %u"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>request_transfer</name></name></type> <name>request</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>request</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REQUEST</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>, <argument><expr><name>TRANSFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientRecvEmpty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recv empty fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_empty</name></name></type> <name>response</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RESPONSE</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clientRecvFailure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tracef</name><argument_list>(<argument><expr><literal type="string">"client recv failure fd %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>response_failure</name></name></type> <name>response</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RESPONSE</name><argument_list>(<argument><expr><name>failure</name></expr></argument>, <argument><expr><name>FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <name><name>response</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name><name>response</name><operator>.</operator><name>message</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
