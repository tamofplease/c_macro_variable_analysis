<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/hiredis/net.c"><comment type="block">/* Extracted from anet.c to work properly with Hiredis error reporting.
 *
 * Copyright (c) 2009-2011, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * Copyright (c) 2010-2014, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 * Copyright (c) 2015, Matt Stancliff &lt;matt at genges dot com&gt;,
 *                     Jan-Erik Rediger &lt;janerik at fnordig dot com&gt;
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mstcpip.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <comment type="block">/* Defined in hiredis.c */</comment>
<function_decl><type><name>void</name></type> <name>__redisSetError</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisContextCloseFd</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisSetErrorFromErrno</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>__redis_strerror_r</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisSetReuseAddr</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisCreateSocket</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>redisSetReuseAddr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisSetBlocking</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

	<comment type="block">/* Set the socket nonblocking.
	 * Note that fcntl(2) for F_GETFL and F_SETFL can't be
	 * interrupted by a signal. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_GETFL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>blocking</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_SETFL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisKeepAlive</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OSX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__sun</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>tcp_keepalive</name></name></type> <name>settings</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>bytesReturned</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WSAOVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>onoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>keepalivetime</name></name> <operator>=</operator> <name>interval</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>keepaliveinterval</name></name> <operator>=</operator> <name>interval</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FDAPI_WSAIoctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
			<argument><expr><name>SIO_KEEPALIVE_VALS</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tcp_keepalive</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>bytesReturned</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisSetTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(TCP_NODELAY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MAX_MSEC</name></cpp:macro> <cpp:value>(((LONG_MAX) - 999) / 1000)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisContextTimeoutMsec</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PORT_LONG</name></type> <name>msec</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Only use timeout when not NULL. */</comment>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal> <operator>||</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name>__MAX_MSEC</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>msec</name></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>msec</name> <operator>=</operator> <operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>msec</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>msec</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>msec</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>msec</name></expr>;</expr_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisContextWaitReady</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name></type> <name>msec</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type>   <name><name>wfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>wfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>msec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
				<name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"poll(2)"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>redisCheckSocketError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><name>REDIS_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisCheckSocketError</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>errlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"getsockopt(SO_ERROR)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisContextSetTimeout</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(SO_RCVTIMEO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetErrorFromErrno</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(SO_SNDTIMEO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<function><type><name>int</name></type> <name>redisContextPreConnectTcp</name><parameter_list>(
	<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>,
	<parameter><decl><type><name>SOCKADDR_STORAGE</name><modifier>*</modifier></type> <name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>blocking</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ParseStorageAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>REDIS_OK</name> <operator>!=</operator> <call><name>redisCreateSocket</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_family</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>redisSetTcpNoDelay</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>blocking</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>redisSetBlocking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_redisContextConnectTcp</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>_port</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* strlen("65535"); */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>servinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bservinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>blocking</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>reuseaddr</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_REUSEADDR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>reuses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PORT_LONG</name></type> <name>timeout_msec</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>servinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>connection_type</name></name> <operator>=</operator> <name>REDIS_CONN_TCP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

	<comment type="block">/* We need to take possession of the passed parameters
	 * to make them reusable for a reconnect.
	 * We also carefully check we don't free data we already own,
	 * as in the case of the reconnect method.
	 *
	 * This is a bit ugly, but atleast it works and doesn't leak memory.
	 **/</comment>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>!=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>!=</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>redisContextTimeoutMsec</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_msec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><literal type="string">"Invalid timeout specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>source_addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name> <operator>!=</operator> <name>source_addr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>source_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_port</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

	<comment type="block">/* Try with IPv6 if no IPv4 address was found. We do it in this order since
	 * in a Redis client you can't afford to test if you have IPv6 connectivity
	 * as this would add latency to every connect. Otherwise a more sensible
	 * route could be: Use IPv6 if both addresses are available and there is IPv6
	 * connectivity. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name>_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>servinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>servinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>servinfo</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
	<label><name>addrretry</name>:</label>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>redisSetBlocking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>bound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Using getaddrinfo saves us from self-determining IPv4 vs IPv6 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bservinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Can't get addr: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>error</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>reuseaddr</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>,
					<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<goto>goto <name>error</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>bservinfo</name></expr>;</init> <condition><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>bound</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>bservinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bound</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Can't bind socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EHOSTUNREACH</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blocking</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* This is ok. */</comment>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name> <operator>&amp;&amp;</operator> <name>reuseaddr</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>++</operator><name>reuses</name> <operator>&gt;=</operator> <name>REDIS_CONNECT_RETRIES</name></expr>)</condition> <block>{<block_content>
					<goto>goto <name>error</name>;</goto>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>redisContextCloseFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>addrretry</name>;</goto>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>redisContextWaitReady</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>timeout_msec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>blocking</name> <operator>&amp;&amp;</operator> <call><name>redisSetBlocking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>redisSetTcpNoDelay</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_CONNECTED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>REDIS_OK</name></expr>;</expr_stmt>
		<goto>goto <name>end</name>;</goto>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Can't create socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>REDIS_ERR</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
	<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>servinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rv</name></expr>;</return>  <comment type="line">// Need to return REDIS_OK if alright</comment>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisContextConnectTcp</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>_redisContextConnectTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisContextConnectBindTcp</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>_redisContextConnectTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>source_addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><name>int</name></type> <name>redisContextConnectUnix</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>,
		<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unix sockets are not suported on Windows platform. (%s)\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>redisContextConnectUnix</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>blocking</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PORT_LONG</name></type> <name>timeout_msec</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>redisCreateSocket</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>redisSetBlocking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>connection_type</name></name> <operator>=</operator> <name>REDIS_CONN_UNIX</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <name>path</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>!=</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>redisContextTimeoutMsec</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_msec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blocking</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* This is ok. */</comment>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>redisContextWaitReady</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>timeout_msec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Reset socket to be blocking after connect(2). */</comment>
	<if_stmt><if>if <condition>(<expr><name>blocking</name> <operator>&amp;&amp;</operator> <call><name>redisSetBlocking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_CONNECTED</name></expr>;</expr_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>
