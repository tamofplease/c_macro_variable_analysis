<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/hiredis/dict.c"><comment type="block">/* Hash table implementation.
 *
 * This file implements in memory hash tables with insert/del/replace/find/
 * get-random-element operations. Hash tables will auto resize if needed
 * tables of power of two in size are used, collisions are handled by
 * chaining. See the source code for more information... :)
 *
 * Copyright (c) 2006-2010, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/win32_Interop/win32_types.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>

<comment type="block">/* -------------------------- private prototypes ---------------------------- */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_dictExpandIfNeeded</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PORT_ULONG</name></type> <name>_dictNextPower</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_dictKeyIndex</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_dictInit</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privDataPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* -------------------------- hash functions -------------------------------- */</comment>

<comment type="block">/* Generic hash function (a popular one from Bernstein).
 * I tested a few and this was the best. */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>dictGenHashFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>hash</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while> <comment type="block">/* hash * 33 + c */</comment>
    <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------- API implementation ------------------------- */</comment>

<comment type="block">/* Reset an hashtable already initialized with ht_init().
 * NOTE: This function should only called by ht_destroy(). */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_dictReset</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>sizemask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Create a new hash table */</comment>
<function><type><specifier>static</specifier> <name>dict</name> <modifier>*</modifier></type><name>dictCreate</name><parameter_list>(<parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privDataPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ht</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_dictInit</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr><name>privDataPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ht</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize the hash table */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_dictInit</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>dictType</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privDataPtr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>_dictReset</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <name>privDataPtr</name></expr>;</expr_stmt>
    <return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Expand or create the hashtable */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dictExpand</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>PORT_ULONG</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dict</name></type> <name>n</name></decl>;</decl_stmt> <comment type="block">/* the new hashtable */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>realsize</name> <init>= <expr><call><name>_dictNextPower</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <comment type="block">/* the size is invalid if it is smaller than the number of
     * elements already inside the hashtable */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>_dictInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>privdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>realsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>sizemask</name></name> <operator>=</operator> <name>realsize</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>table</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>realsize</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy all the elements from the old to the new table:
     * note that if the old hash table is empty ht-&gt;size is zero,
     * so dictExpand just creates an hash table. */</comment>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>used</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>used</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>used</name></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextHe</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* For each hash entry on this slot... */</comment>
        <expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>nextHe</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <comment type="block">/* Get the new element index */</comment>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name><name>n</name><operator>.</operator><name>sizemask</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>table</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>.</operator><name>table</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
            <comment type="block">/* Pass to the next element */</comment>
            <expr_stmt><expr><name>he</name> <operator>=</operator> <name>nextHe</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Remap the new hashtable in the old */</comment>
    <expr_stmt><expr><operator>*</operator><name>ht</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add an element to the target hash table */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dictAdd</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

    <comment type="block">/* Get the index of the new element, or -1 if
     * the element already exists. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>index</name> <operator>=</operator> <call><name>_dictKeyIndex</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Allocates the memory and stores key */</comment>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

    <comment type="block">/* Set the hash entry fields. */</comment>
    <expr_stmt><expr><call><name>dictSetHashKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictSetHashVal</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add an element, discarding the old if the key already exists.
 * Return 1 if the key was added from scratch, 0 if there was already an
 * element with such key and dictReplace() just performed a value update
 * operation. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dictReplace</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"/><name>auxentry</name></decl>;</decl_stmt>

    <comment type="block">/* Try to add the element. If the key
     * does not exists dictAdd will succeed. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* It already exists, get the entry */</comment>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Free the old value and set the new one */</comment>
    <comment type="block">/* Set the new value and free the old one. Note that it is important
     * to do that in this order, as the value may just be exactly the same
     * as the previous one. In this context, think to reference counting,
     * you want to increment (set), and then decrement (free), and not the
     * reverse. */</comment>
    <expr_stmt><expr><name>auxentry</name> <operator>=</operator> <operator>*</operator><name>entry</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictSetHashVal</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictFreeEntryVal</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Search and remove an element */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dictDelete</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prevde</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>DICT_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>sizemask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>prevde</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dictCompareHashKeys</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name><name>de</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Unlink the element from the list */</comment>
            <if_stmt><if>if <condition>(<expr><name>prevde</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>prevde</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>dictFreeEntryKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dictFreeEntryVal</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
            <return>return <expr><name>DICT_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>prevde</name> <operator>=</operator> <name>de</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>de</name> <operator>=</operator> <name><name>de</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>DICT_ERR</name></expr>;</return> <comment type="block">/* not found */</comment>
</block_content>}</block></function>

<comment type="block">/* Destroy an entire hash table */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_dictClear</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Free all the elements */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>used</name></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextHe</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>he</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nextHe</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dictFreeEntryKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dictFreeEntryVal</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>he</name> <operator>=</operator> <name>nextHe</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
    <comment type="block">/* Free the table and the allocated cache structure */</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Re-initialize the table */</comment>
    <expr_stmt><expr><call><name>_dictReset</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DICT_OK</name></expr>;</return> <comment type="block">/* never fails */</comment>
</block_content>}</block></function>

<comment type="block">/* Clear &amp; Release the hash table */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dictRelease</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>_dictClear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>dictFind</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>sizemask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dictCompareHashKeys</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>he</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dictIterator</name> <modifier>*</modifier></type><name>dictGetIterator</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dictEntry</name> <modifier>*</modifier></type><name>dictNext</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator>
                    <operator>(</operator><name>signed</name><operator>)</operator><name><name>iter</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* We need to save the 'next' here, the iterator user
             * may delete the entry we are returning. */</comment>
            <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextEntry</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dictReleaseIterator</name><parameter_list>(<parameter><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ------------------------- private functions ------------------------------ */</comment>

<comment type="block">/* Expand the hash table if needed */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_dictExpandIfNeeded</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* If the hash table is empty expand it to the initial size,
     * if the table is "full" dobule its size. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>dictExpand</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>DICT_HT_INITIAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>used</name></name> <operator>==</operator> <name><name>ht</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>dictExpand</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>size</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>DICT_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Our hash table capability is a power of two */</comment>
<function><type><specifier>static</specifier> <name>PORT_ULONG</name></type> <name>_dictNextPower</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>i</name> <init>= <expr><name>DICT_HT_INITIAL_SIZE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>PORT_LONG_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PORT_LONG_MAX</name></expr>;</return></block_content></block></if></if_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Returns the index of a free slot that can be populated with
 * an hash entry for the given 'key'.
 * If the key already exists, -1 is returned. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_dictKeyIndex</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>

    <comment type="block">/* Expand the hashtable if needed */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>_dictExpandIfNeeded</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DICT_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Compute the key hash value */</comment>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>dictHashKey</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>sizemask</name></name></expr>;</expr_stmt>
    <comment type="block">/* Search if this slot does not already contain the given key */</comment>
    <expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dictCompareHashKeys</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>he</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

</unit>
