<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/hiredis/hiredis.c"><comment type="block">/*
 * Copyright (c) 2009-2011, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * Copyright (c) 2010-2014, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 * Copyright (c) 2015, Matt Stancliff &lt;matt at genges dot com&gt;,
 *                     Jan-Erik Rediger &lt;janerik at fnordig dot com&gt;
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_hiredis.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>redisReply</name> <modifier>*</modifier></type><name>createReplyObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createArrayObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elements</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createIntegerObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createNilObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Default set of functions to build the reply. Keep in mind that such a
 * function returning NULL is interpreted as OOM. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>redisReplyObjectFunctions</name></type> <name>defaultFunctions</name> <init>= <expr><block>{
	<expr><name>createStringObject</name></expr>,
	<expr><name>createArrayObject</name></expr>,
	<expr><name>createIntegerObject</name></expr>,
	<expr><name>createNilObject</name></expr>,
	<expr><name>freeReplyObject</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Create a reply object */</comment>
<function><type><specifier>static</specifier> <name>redisReply</name> <modifier>*</modifier></type><name>createReplyObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free a reply object */</comment>
<function><type><name>void</name></type> <name>freeReplyObject</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>reply</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>REDIS_REPLY_INTEGER</name></expr>:</case>
		<break>break;</break> <comment type="block">/* Nothing to free */</comment>
	<case>case <expr><name>REDIS_REPLY_ARRAY</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>element</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>elements</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>REDIS_REPLY_ERROR</name></expr>:</case>
	<case>case <expr><name>REDIS_REPLY_STATUS</name></expr>:</case>
	<case>case <expr><name>REDIS_REPLY_STRING</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createStringObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>createReplyObject</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ERROR</name> <operator>||</operator>
		<name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>||</operator>
		<name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Copy string value */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>element</name><index>[<expr><name><name>task</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createArrayObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elements</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>createReplyObject</name><argument_list>(<argument><expr><name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>elements</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>element</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>elements</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>element</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <name>elements</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>element</name><index>[<expr><name><name>task</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createIntegerObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>createReplyObject</name><argument_list>(<argument><expr><name>REDIS_REPLY_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>integer</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>element</name><index>[<expr><name><name>task</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>createNilObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisReadTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>createReplyObject</name><argument_list>(<argument><expr><name>REDIS_REPLY_NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>element</name><index>[<expr><name><name>task</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the number of digits of 'v' when converted to string in radix 10.
 * Implementation borrowed from link in redis/src/util.c:string2ll(). */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>countDigits</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10000U</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Helper that calculates the bulk length given a certain string length. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bulklen</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>countDigits</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisvFormatCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>format</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* final command */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt> <comment type="block">/* position in final command */</comment>
	<decl_stmt><decl><type><name>sds</name></type> <name>curarg</name></decl>, <decl><type ref="prev"/><name>newarg</name></decl>;</decl_stmt> <comment type="block">/* current argument */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>touched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* was the current argument touched? */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>curargv</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>newargv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>error_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* 0 = no error; -1 = memory error; -2 = format error */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

	<comment type="block">/* Abort if there is not target to set */</comment>
	<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Build the command string accordingly to protocol */</comment>
	<expr_stmt><expr><name>curarg</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>curarg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>||</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>touched</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>newargv</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>curargv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>newargv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>memory_err</name>;</goto></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>curargv</name> <operator>=</operator> <name>newargv</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>curargv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>curarg</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>bulklen</name><argument_list>(<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* curarg is put in argv so it can be overwritten. */</comment>
					<expr_stmt><expr><name>curarg</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>curarg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>memory_err</name>;</goto></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>touched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>newarg</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>newarg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>memory_err</name>;</goto></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>curarg</name> <operator>=</operator> <name>newarg</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

			<comment type="block">/* Set newarg so it can be checked even if it is not touched. */</comment>
			<expr_stmt><expr><name>newarg</name> <operator>=</operator> <name>curarg</name></expr>;</expr_stmt>

			<switch>switch <condition>(<expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>newarg</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>newarg</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'%'</literal></expr>:</case>
				<expr_stmt><expr><name>newarg</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<comment type="block">/* Try to detect printf format */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>intfmts</name><index>[]</index></name> <init>= <expr><literal type="string">"diouxX"</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>flags</name><index>[]</index></name> <init>= <expr><literal type="string">"#0-+ "</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name></type> <name><name>_format</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_p</name> <init>= <expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>size_t</name></type> <name>_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>va_list</name></type> <name>_cpy</name></decl>;</decl_stmt>

				<comment type="block">/* Flags */</comment>
				<while>while <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>_p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

				<comment type="block">/* Field width */</comment>
				<while>while <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>_p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

				<comment type="block">/* Precision */</comment>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>_p</name><operator>++</operator></expr>;</expr_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>_p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Copy va_list before consuming with va_arg */</comment>
				<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>_cpy</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Integer conversion (without modifiers) */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>intfmts</name></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>fmt_valid</name>;</goto>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Double conversion (without modifiers) */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"eEfFgGaA"</literal></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>fmt_valid</name>;</goto>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Size: char */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>&amp;&amp;</operator> <name><name>_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>_p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>intfmts</name></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* char gets promoted to int */</comment>
						<goto>goto <name>fmt_valid</name>;</goto>
					</block_content>}</block></if></if_stmt>
					<goto>goto <name>fmt_invalid</name>;</goto>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Size: short */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>_p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>intfmts</name></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* short gets promoted to int */</comment>
						<goto>goto <name>fmt_valid</name>;</goto>
					</block_content>}</block></if></if_stmt>
					<goto>goto <name>fmt_invalid</name>;</goto>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Size: PORT_LONGLONG */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name><name>_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>_p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>intfmts</name></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>PORT_LONGLONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<goto>goto <name>fmt_valid</name>;</goto>
					</block_content>}</block></if></if_stmt>
					<goto>goto <name>fmt_invalid</name>;</goto>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Size: PORT_LONG */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>_p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>intfmts</name></expr></argument>, <argument><expr><operator>*</operator><name>_p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<goto>goto <name>fmt_valid</name>;</goto>
					</block_content>}</block></if></if_stmt>
					<goto>goto <name>fmt_invalid</name>;</goto>
				</block_content>}</block></if></if_stmt>

			<label><name>fmt_invalid</name>:</label>
				<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>_cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>format_err</name>;</goto>

			<label><name>fmt_valid</name>:</label>
				<expr_stmt><expr><name>_l</name> <operator>=</operator> <operator>(</operator><name>_p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>c</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>_l</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_format</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>_format</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>_format</name><index>[<expr><name>_l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>newarg</name> <operator>=</operator> <call><name>sdscatvprintf</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>, <argument><expr><name>_format</name></expr></argument>, <argument><expr><name>_cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Update current position (note: outer blocks
					 * increment c twice so compensate here) */</comment>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <name>_p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>_cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			</block_content>}</block></switch>

			<if_stmt><if>if <condition>(<expr><name>newarg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>memory_err</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>curarg</name> <operator>=</operator> <name>newarg</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>touched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Add the last argument if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name>touched</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>newargv</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>curargv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newargv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>memory_err</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>curargv</name> <operator>=</operator> <name>newargv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>curargv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>curarg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>bulklen</name><argument_list>(<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Clear curarg because it was put in curargv or was free'd. */</comment>
	<expr_stmt><expr><name>curarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Add bytes needed to hold multi bulk count */</comment>
	<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>countDigits</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<comment type="block">/* Build the command at protocol level */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>totlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>memory_err</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"*%d\r\n"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"$%Iu\r\n"</literal></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>curargv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* %zu -&gt; %Iu */</comment>
			<name>memcpy</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>curargv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>curargv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>curargv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>curargv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>curargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
	<return>return <expr><name>totlen</name></expr>;</return>

<label><name>format_err</name>:</label>
	<expr_stmt><expr><name>error_type</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<goto>goto <name>cleanup</name>;</goto>

<label><name>memory_err</name>:</label>
	<expr_stmt><expr><name>error_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<goto>goto <name>cleanup</name>;</goto>

<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>curargv</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><name>argc</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>curargv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>curargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No need to check cmd since it is the last statement that can fail,
	 * but do it anyway to be as defensive as possible. */</comment>
	<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>error_type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Format a command according to the Redis protocol. This function
 * takes a format similar to printf:
 *
 * %s represents a C null terminated string you want to interpolate
 * %b represents a binary safe string
 *
 * When using %b you need to provide both the pointer to the string
 * and the length in bytes as a size_t. Examples:
 *
 * len = redisFormatCommand(target, "GET %s", mykey);
 * len = redisFormatCommand(target, "SET %s %b", mykey, myval, myvallen);
 */</comment>
<function><type><name>int</name></type> <name>redisFormatCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisvFormatCommand</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The API says "-1" means bad result, but we now also return "-2" in some
	 * cases.  Force the return value to always be -1. */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Format a command according to the Redis protocol using an sds string and
 * sdscatfmt for the processing of arguments. This function takes the
 * number of arguments, an array with arguments and an array with their
 * lengths. If the latter is set to NULL, strlen will be used to compute the
 * argument lengths.
 */</comment>
<function><type><name>int</name></type> <name>redisFormatSdsCommandArgv</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>argvlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sds</name></type> <name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PORT_ULONGLONG</name></type> <name>totlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<comment type="block">/* Abort on a NULL target */</comment>
	<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Calculate our total size */</comment>
	<expr_stmt><expr><name>totlen</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>countDigits</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>argvlen</name></expr> ?</condition><then> <expr><name><name>argvlen</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <call><name>bulklen</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Use an SDS string for command construction */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* We already know how much storage we need */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Construct command */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"*%i\r\n"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>argvlen</name></expr> ?</condition><then> <expr><name><name>argvlen</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"$%u\r\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
	<return>return <expr><name>totlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisFreeSdsCommand</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Format a command according to the Redis protocol. This function takes the
 * number of arguments, an array with arguments and an array with their
 * lengths. If the latter is set to NULL, strlen will be used to compute the
 * argument lengths.
 */</comment>
<function><type><name>int</name></type> <name>redisFormatCommandArgv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>argvlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* final command */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt> <comment type="block">/* position in final command */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>totlen</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<comment type="block">/* Abort on a NULL target */</comment>
	<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Calculate number of bytes needed for the command */</comment>
	<expr_stmt><expr><name>totlen</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>countDigits</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>argvlen</name></expr> ?</condition><then> <expr><name><name>argvlen</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <call><name>bulklen</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Build the command at protocol level */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>totlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"*%d\r\n"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>argvlen</name></expr> ?</condition><then> <expr><name><name>argvlen</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"$%Iu\r\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                 <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* %zu -&gt; %Iu */</comment>
			<name>memcpy</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cmd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
	<return>return <expr><name>totlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisFreeCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>__redisSetError</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Only REDIS_ERR_IO may lack a description! */</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>REDIS_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__redis_strerror_r</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>redisReader</name> <modifier>*</modifier></type><name>redisReaderCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>redisReaderCreateWithFunctions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defaultFunctions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>redisContext</name> <modifier>*</modifier></type><name>redisContextInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>reader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisFree</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisFreeKeepFd</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisReconnect</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>connection_type</name></name> <operator>==</operator> <name>REDIS_CONN_TCP</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>redisContextConnectBindTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>,
			<argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>source_addr</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>connection_type</name></name> <operator>==</operator> <name>REDIS_CONN_UNIX</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>redisContextConnectUnix</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Something bad happened here and shouldn't have. There isn't
		   enough information in the context to reconnect. */</comment>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><literal type="string">"Not enough information to reconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Connect to a Redis instance. On error the field error in the returned
 * context will be set to the return value of the error function.
 * When no set of reply functions is given, the default set will be used. */</comment>
<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectWithTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectNonBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectBindNonBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>redisContextInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectBindTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>source_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectBindNonBlockWithReuse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>redisContextInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_REUSEADDR</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectBindTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>source_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectUnix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectUnix</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectUnixWithTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectUnix</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectUnixNonBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextConnectUnix</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisConnectFd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REDIS_BLOCK</name> <operator>|</operator> <name>REDIS_CONNECTED</name></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><name>redisContext</name> <modifier>*</modifier></type><name>redisPreConnectNonBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>SOCKADDR_STORAGE</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>redisContextInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REDIS_BLOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>redisContextPreConnectTcp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Set read/write timeout on a blocking socket. */</comment>
<function><type><name>int</name></type> <name>redisSetTimeout</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>redisContextSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Enable connection KeepAlive. */</comment>
<function><type><name>int</name></type> <name>redisEnableKeepAlive</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>redisKeepAlive</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_KEEPALIVE_INTERVAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Use this function to handle a read event on the descriptor. It will try
 * and read some bytes from the socket and feed them to the reply parser.
 *
 * After this function is called, you may use redisContextReadReply to
 * see if there is a reply available. */</comment>
<function><type><name>int</name></type> <name>redisBufferRead</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>

	<comment type="block">/* Return early when the context has seen an error. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                   <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
		<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<comment type="block">/* Try again later */</comment>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>REDIS_ERR</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_EOF</name></expr></argument>, <argument><expr><literal type="string">"Server closed the connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>REDIS_ERR</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<comment type="block">/* Use this function if the caller has already read the data. It will
 * feed bytes to the reply parser.
 *
 * After this function is called, you may use redisContextReadReply to
 * see if there is a reply available. */</comment>
<function><type><name>int</name></type> <name>redisBufferReadDone</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Try again later */</comment>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_EOF</name></expr></argument>, <argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Server closed the connection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDIS_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Write the output buffer to the socket.
 *
 * Returns REDIS_OK when the buffer is empty, or (a part of) the buffer was
 * successfully written to the socket. When the buffer is empty after the
 * write operation, "done" is set to 1 (if given).
 *
 * Returns REDIS_ERR if an error occurred trying to write and sets
 * c-&gt;errstr to hold the appropriate error string.
 */</comment>
<function><type><name>int</name></type> <name>redisBufferWrite</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nwritten</name></decl>;</decl_stmt>

	<comment type="block">/* Return early when the context has seen an error. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>nwritten</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
			<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<comment type="block">/* Try again later */</comment>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>REDIS_ERR</name></expr>;</return>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>nwritten</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>(</operator><name>signed</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<comment type="block">/* Use this function if the caller has already written the data.
 */</comment>
<function><type><name>int</name></type> <name>redisBufferWriteDone</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nwritten</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>(</operator><name>signed</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>done</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Internal helper function to try and get a reply from the reader,
 * or set an error in the context otherwise. */</comment>
<function><type><name>int</name></type> <name>redisGetReplyFromReader</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisGetReply</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>wdone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Try to read pending replies */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>redisGetReplyFromReader</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* For the blocking context, flush output buffer and read reply */</comment>
	<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Write until done */</comment>
		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>redisBufferWrite</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wdone</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block> while <condition>(<expr><operator>!</operator><name>wdone</name></expr>)</condition>;</do>

		<comment type="block">/* Read until there is a reply */</comment>
		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>redisBufferRead</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>redisGetReplyFromReader</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block> while <condition>(<expr><name>aux</name> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set reply object */</comment>
	<if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>reply</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper function for the redisAppendCommand* family of functions.
 *
 * Write a formatted command to the output buffer. When this family
 * is used, you need to call redisGetReply yourself to retrieve
 * the reply (or replies in pub/sub).
 */</comment>
<function><type><name>int</name></type> <name>__redisAppendCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>sds</name></type> <name>newbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisAppendFormattedCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>__redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisvAppendCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisvFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OTHER</name></expr></argument>, <argument><expr><literal type="string">"Invalid format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisAppendCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisvAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisAppendCommandArgv</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>argvlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>sds</name></type> <name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatSdsCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__redisSetError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>REDIS_ERR_OOM</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>__redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDIS_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper function for the redisCommand* family of functions.
 *
 * Write a formatted command to the output buffer. If the given context is
 * blocking, immediately read the reply into the "reply" pointer. When the
 * context is non-blocking, the "reply" pointer will not be used and the
 * command is simply appended to the write buffer.
 *
 * Returns the reply when a reply was successfully retrieved. Returns NULL
 * otherwise. When NULL is returned in a blocking context, the error field
 * in the context will be set.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__redisBlockForReply</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REDIS_BLOCK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>reply</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>redisvCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>redisvAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>__redisBlockForReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>redisCommand</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisvCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>redisCommandArgv</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>argvlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>redisAppendCommandArgv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>__redisBlockForReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></unit>
