<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/hiredis/test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;WinSock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/Win32_Interop/Win32_Time.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcasecmp</name></cpp:macro> <cpp:value>_stricmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strncasecmp</name></cpp:macro> <cpp:value>_strnicmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGPIPE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <name>connection_type</name> <block>{
    <decl><name>CONN_TCP</name></decl>,
    <decl><name>CONN_UNIX</name></decl>,
    <decl><name>CONN_FD</name></decl>
}</block>;</enum>

<struct>struct <name>config</name> <block>{
    <decl_stmt><decl><type><name><name>enum</name> <name>connection_type</name></name></type> <name>type</name></decl>;</decl_stmt>

    <struct>struct <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
    }</block> <decl><name>tcp</name></decl>;</struct>

    <struct>struct <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
    }</block> <decl><name>unix_sock</name></decl>;</struct>
}</block>;</struct>

<comment type="block">/* The following lines make up our testing "framework" :) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tests</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>_s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ printf("#%02d ", ++tests); printf(_s); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_cond</name><parameter_list>(<parameter><type><name>_c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(_c) printf("\033[0;32mPASSED\033[0;0m\n"); else {printf("\033[0;31mFAILED\033[0;0m\n"); fails++;}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PORT_LONGLONG</name></type> <name>usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal><operator>)</operator><operator>+</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The assert() calls below have side effects, so we need assert()
 * even if we are compiling without asserts (-DNDEBUG). */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NDEBUG</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>assert</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(e)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>redisContext</name> <modifier>*</modifier></type><name>select_database</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

    <comment type="block">/* Switch to DB 9 for testing, now that we know we can chat. */</comment>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SELECT 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Make sure the DB is empty */</comment>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"DBSIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>integer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Awesome, DB 9 is empty and we can continue. */</comment>
        <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Database #9 is not empty, test can not continue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>disconnect</name><parameter_list>(<parameter><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure we're on DB 9. */</comment>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SELECT 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"FLUSHDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Free the context as well, but keep the fd if requested. */</comment>
    <if_stmt><if>if <condition>(<expr><name>keep_fd</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>redisFreeKeepFd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>redisContext</name> <modifier>*</modifier></type><name>_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>redisContext</name> <modifier>*</modifier></type><name>connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_TCP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_UNIX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectUnix</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CONN_FD</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Create a dummy connection just to get an fd to inherit */</comment>
        <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>dummy_ctx</name> <init>= <expr><call><name>redisConnectUnix</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dummy_ctx</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>disconnect</name><argument_list>(<argument><expr><name>dummy_ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connecting to inherited fd %d\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectFd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection error: can't allocate redis context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection error: %s\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>select_database</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_format_commands</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command without interpolation: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%s string interpolation: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%s and an empty string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$0\r\n\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with an empty string in between proper interpolations: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$0\r\n\r\n$3\r\nfoo\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%b string interpolation: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">"b\0r"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nb\0r\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with %%b and an empty string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$0\r\n\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with literal %%: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET %% %%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$1\r\n%\r\n$1\r\n%\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Vararg width depends on the type. These tests make sure that the
     * width is correctly determined using the format and subsequent varargs
     * can correctly be interpolated. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGER_WIDTH_TEST</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                \
    type value = 123;                                                                     \
    test("Format command with printf-delegation (" #type "): ");                          \
    len = redisFormatCommand(&amp;cmd,"key:%08" fmt " str:%s", value, "hello");               \
    test_cond(strncmp(cmd,"*2\r\n$12\r\nkey:00000123\r\n$9\r\nstr:hello\r\n",len) == 0 &amp;&amp; \
        len == 4+5+(12+2)+4+(9+2));                                                       \
    free(cmd);                                                                            \
} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_WIDTH_TEST</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                       \
    type value = 123.0;                                                                   \
    test("Format command with printf-delegation (" #type "): ");                          \
    len = redisFormatCommand(&amp;cmd,"key:%08.3f str:%s", value, "hello");                   \
    test_cond(strncmp(cmd,"*2\r\n$12\r\nkey:0123.000\r\n$9\r\nstr:hello\r\n",len) == 0 &amp;&amp; \
        len == 4+5+(12+2)+4+(9+2));                                                       \
    free(cmd);                                                                            \
} while(0)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"hhd"</literal></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"hd"</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"lld"</literal></expr></argument>, <argument><expr><name>PORT_LONGLONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"u"</literal></argument>, <argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"hhu"</literal></argument>, <argument>unsigned char</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><literal type="string">"hu"</literal></argument>, <argument>unsigned short</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"lu"</literal></expr></argument>, <argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INTEGER_WIDTH_TEST</name><argument_list>(<argument><expr><literal type="string">"llu"</literal></expr></argument>, <argument><expr><name>PORT_ULONGLONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLOAT_WIDTH_TEST</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLOAT_WIDTH_TEST</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command with invalid printf format: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"key:%08p %b"</literal></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1234</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"SET"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"foo\0xxx"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"bar"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>lens</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command by passing argc/argv without lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command by passing argc/argv with lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>lens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$7\r\nfoo\0xxx\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">7</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>sds</name></type> <name>sds_cmd</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sds_cmd</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command into sds by passing argc/argv without lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatSdsCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sds_cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sds_cmd</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Format command into sds by passing argc/argv with lengths: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatSdsCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sds_cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>lens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>,<argument><expr><literal type="string">"*3\r\n$3\r\nSET\r\n$7\r\nfoo\0xxx\r\n$3\r\nbar\r\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">7</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sds_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_append_formatted_commands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Append format command: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"SET foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>redisAppendFormattedCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_reply_reader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>reader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Error handling in reply parser: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"@foo\r\n"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
              <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Protocol error, got \"@\" as reply type byte"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* when the reply already contains multiple items, they must be free'd
     * on an error. valgrind will bark when this doesn't happen. */</comment>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Memory cleanup in reply parser: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"*2\r\n"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"$5\r\nhello\r\n"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"@foo\r\n"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
              <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Protocol error, got \"@\" as reply type byte"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error on nested multi bulks with depth &gt; 7: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"*1\r\n"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
              <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"No support for"</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Works with NULL functions for reply: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"+OK\r\n"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Works when a single newline (\\r\\n) covers two calls to feed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"+OK\r"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't reset state after protocol error: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"x"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Regression test for issue #45 on GitHub. */</comment>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't do empty allocation for empty multi bulk: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>redisReaderCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFeed</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"*0\r\n"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>redisReaderGetReply</name><argument_list>(<argument><expr><name>reader</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>REDIS_OK</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>redisReply</name><operator>*</operator><operator>)</operator><name>reply</name><operator>)</operator><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReaderFree</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_free_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>redisCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't fail when redisFree is passed a NULL value: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>redisCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>redisCtx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Don't fail when freeReplyObject is passed a NULL value: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_connection_errors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns error when host cannot be resolved: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"idontexist.test"</literal></expr></argument>, <argument><expr><literal type="number">6379</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_OTHER</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Name or service not known"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Can't resolve: idontexist.test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"nodename nor servname provided, or not known"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"No address associated with hostname"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Temporary failure in name resolution"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"hostname nor servname provided, or not known"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"no address associated with name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns error when the port is not open: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnect</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator>
        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Connection refused"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns error when the unix_sock socket path doesn't accept connections: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectUnix</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"/tmp/idontexist.sock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Don't care about the message... */</comment>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Is able to deliver commands: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_STATUS &amp;&amp;
        strcasecmp(reply-&gt;str,<literal type="string">"pong"</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Is a able to send commands verbatim: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name> <argument_list>(<argument>reply-&gt;type == REDIS_REPLY_STATUS &amp;&amp;
        strcasecmp(reply-&gt;str,<literal type="string">"ok"</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"%%s String interpolation works: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET %s %s"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator>
        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"hello world"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"%%b String interpolation works: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET %b %b"</literal></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">"hello\x00world"</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_STRING &amp;&amp;
        memcmp(reply-&gt;str,<literal type="string">"hello\x00world"</literal>,<literal type="number">11</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Binary reply length is correct: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name><argument_list>(<argument>reply-&gt;len == <literal type="number">11</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse nil replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"GET nokey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_NIL</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test 7 */</comment>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse integer replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INCR mycounter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_INTEGER &amp;&amp; reply-&gt;integer == <literal type="number">1</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can parse multi bulk replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>test_cond</name><argument_list>(<argument>reply-&gt;type == REDIS_REPLY_ARRAY &amp;&amp;
              reply-&gt;elements == <literal type="number">2</literal> &amp;&amp;
              !memcmp(reply-&gt;element[<literal type="number">0</literal>]-&gt;str,<literal type="string">"bar"</literal>,<literal type="number">3</literal>) &amp;&amp;
              !memcmp(reply-&gt;element[<literal type="number">1</literal>]-&gt;str,<literal type="string">"foo"</literal>,<literal type="number">3</literal>)</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* m/e with multi bulk reply *before* other reply.
     * specifically test ordering of reply items to parse. */</comment>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Can handle nested multi bulk replies: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"MULTI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 -1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <operator>(</operator><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"EXEC"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
              <name><name>reply</name><operator>-&gt;</operator><name>elements</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
              <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator>
              <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
              <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
              <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
              <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator>
              <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"pong"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_connection_timeouts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><literal type="string">"DEBUG SLEEP 3\r\n"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Successfully completes a command when the timeout is not exceeded: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SET foo fast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"fast"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Does not return a reply when the command times out: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"GET foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reply</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Resource temporarily unavailable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Reconnect properly reconnects after a timeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"PONG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Reconnect properly uses owned parameters: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>=</operator> <literal type="string">"foo"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>=</operator> <literal type="string">"foo"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisReconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"PONG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blocking_io_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_reply</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

    <comment type="block">/* Connect to target given by config. */</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <comment type="block">/* Find out Redis version to determine the path for the next test */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><literal type="string">"redis_version:"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"INFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>eptr</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* char next to the first "." */</comment>
        <expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns I/O error when the connection is lost: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"QUIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* &gt; 2.0 returns OK on QUIT and read() should be issued once more
         * to know the descriptor is at EOF. */</comment>
        <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>_reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name>reply</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* On 2.0, QUIT will cause the connection to be closed immediately and
     * the read(2) for the reply on QUIT will set the error to EOF.
     * On &gt;2.0, QUIT will return with OK and another read(2) needed to be
     * issued to find out the socket was closed by the server. In both
     * conditions, the error will be set to EOF. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_EOF</name> <operator>&amp;&amp;</operator>
        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><literal type="string">"Server closed the connection"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Returns I/O error on socket timeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisSetTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>_reply</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_ERR</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_invalid_timeout_errors</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when an invalid timeout usec value is given to redisConnectWithTimeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">10000001</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectWithTimeout</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid timeout specified"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Set error when an invalid timeout sec value is given to redisConnectWithTimeout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>LONG_MAX</name><operator>)</operator> <operator>-</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>redisConnectWithTimeout</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>tcp</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>REDIS_ERR_IO</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid timeout specified"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_throughput</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config</name></name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_connect</name></expr></argument>,<argument><expr><name>connect</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier><modifier>*</modifier></type><name>replies</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"Throughput:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">500</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx PING: %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>redisCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 499"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx LRANGE with 500 elements: %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx PING (pipelined): %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>replies</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReply</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>redisAppendCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 499"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDIS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>elements</name> <operator>==</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name><name>replies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>replies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%dx LRANGE with 500 elements (pipelined): %.3fs)\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>t2</name><operator>-</operator><name>t1</name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>disconnect</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// static PORT_LONG __test_callback_flags = 0;</comment>
<comment type="line">// static void __test_callback(redisContext *c, void *privdata) {</comment>
<comment type="line">//     ((void)c);</comment>
<comment type="line">//     /* Shift to detect execution order */</comment>
<comment type="line">//     __test_callback_flags &lt;&lt;= 8;</comment>
<comment type="line">//     __test_callback_flags |= (PORT_LONG)privdata;</comment>
<comment type="line">// }</comment>
<comment type="line">//</comment>
<comment type="line">// static void __test_reply_callback(redisContext *c, redisReply *reply, void *privdata) {</comment>
<comment type="line">//     ((void)c);</comment>
<comment type="line">//     /* Shift to detect execution order */</comment>
<comment type="line">//     __test_callback_flags &lt;&lt;= 8;</comment>
<comment type="line">//     __test_callback_flags |= (PORT_LONG)privdata;</comment>
<comment type="line">//     if (reply) freeReplyObject(reply);</comment>
<comment type="line">// }</comment>
<comment type="line">//</comment>
<comment type="line">// static redisContext *__connect_nonblock() {</comment>
<comment type="line">//     /* Reset callback flags */</comment>
<comment type="line">//     __test_callback_flags = 0;</comment>
<comment type="line">//     return redisConnectNonBlock("127.0.0.1", port, NULL);</comment>
<comment type="line">// }</comment>
<comment type="line">//</comment>
<comment type="line">// static void test_nonblocking_connection() {</comment>
<comment type="line">//     redisContext *c;</comment>
<comment type="line">//     int wdone = 0;</comment>
<comment type="line">//</comment>
<comment type="line">//     test("Calls command callback when command is issued: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisSetCommandCallback(c,__test_callback,(void*)1);</comment>
<comment type="line">//     redisCommand(c,"PING");</comment>
<comment type="line">//     test_cond(__test_callback_flags == 1);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//</comment>
<comment type="line">//     test("Calls disconnect callback on redisDisconnect: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisSetDisconnectCallback(c,__test_callback,(void*)2);</comment>
<comment type="line">//     redisDisconnect(c);</comment>
<comment type="line">//     test_cond(__test_callback_flags == 2);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//</comment>
<comment type="line">//     test("Calls disconnect callback and free callback on redisFree: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisSetDisconnectCallback(c,__test_callback,(void*)2);</comment>
<comment type="line">//     redisSetFreeCallback(c,__test_callback,(void*)4);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//     test_cond(__test_callback_flags == ((2 &lt;&lt; 8) | 4));</comment>
<comment type="line">//</comment>
<comment type="line">//     test("redisBufferWrite against empty write buffer: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     test_cond(redisBufferWrite(c,&amp;wdone) == REDIS_OK &amp;&amp; wdone == 1);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//</comment>
<comment type="line">//     test("redisBufferWrite against not yet connected fd: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisCommand(c,"PING");</comment>
<comment type="line">//     test_cond(redisBufferWrite(c,NULL) == REDIS_ERR &amp;&amp;</comment>
<comment type="line">//               strncmp(c-&gt;error,"write:",6) == 0);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//</comment>
<comment type="line">//     test("redisBufferWrite against closed fd: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisCommand(c,"PING");</comment>
<comment type="line">//     redisDisconnect(c);</comment>
<comment type="line">//     test_cond(redisBufferWrite(c,NULL) == REDIS_ERR &amp;&amp;</comment>
<comment type="line">//               strncmp(c-&gt;error,"write:",6) == 0);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//</comment>
<comment type="line">//     test("Process callbacks in the right sequence: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisCommandWithCallback(c,__test_reply_callback,(void*)1,"PING");</comment>
<comment type="line">//     redisCommandWithCallback(c,__test_reply_callback,(void*)2,"PING");</comment>
<comment type="line">//     redisCommandWithCallback(c,__test_reply_callback,(void*)3,"PING");</comment>
<comment type="line">//</comment>
<comment type="line">//     /* Write output buffer */</comment>
<comment type="line">//     wdone = 0;</comment>
<comment type="line">//     while(!wdone) {</comment>
<comment type="line">//         usleep(500);</comment>
<comment type="line">//         redisBufferWrite(c,&amp;wdone);</comment>
<comment type="line">//     }</comment>
<comment type="line">//</comment>
<comment type="line">//     /* Read until at least one callback is executed (the 3 replies will</comment>
<comment type="line">//      * arrive in a single packet, causing all callbacks to be executed in</comment>
<comment type="line">//      * a single pass). */</comment>
<comment type="line">//     while(__test_callback_flags == 0) {</comment>
<comment type="line">//         assert(redisBufferRead(c) == REDIS_OK);</comment>
<comment type="line">//         redisProcessCallbacks(c);</comment>
<comment type="line">//     }</comment>
<comment type="line">//     test_cond(__test_callback_flags == 0x010203);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">//</comment>
<comment type="line">//     test("redisDisconnect executes pending callbacks with NULL reply: ");</comment>
<comment type="line">//     c = __connect_nonblock();</comment>
<comment type="line">//     redisSetDisconnectCallback(c,__test_callback,(void*)1);</comment>
<comment type="line">//     redisCommandWithCallback(c,__test_reply_callback,(void*)2,"PING");</comment>
<comment type="line">//     redisDisconnect(c);</comment>
<comment type="line">//     test_cond(__test_callback_flags == 0x0201);</comment>
<comment type="line">//     redisFree(c);</comment>
<comment type="line">// }</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>config</name></name></type> <name>cfg</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>tcp</name> <operator>=</operator> <block>{
            <expr><operator>.</operator><name>host</name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>,
            <expr><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">6379</literal></expr>
        }</block></expr>,
        <expr><operator>.</operator><name>unix_sock</name> <operator>=</operator> <block>{
            <expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"/tmp/redis.sock"</literal></expr>
        }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>throughput</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>test_inherit_fd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Ignore broken pipe signal (for I/O error tests). */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Parse command line options. */</comment>
    <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--skip-throughput"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throughput</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--skip-inherit-fd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>test_inherit_fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>test_format_commands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_reply_reader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_connection_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_free_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against TCP connection (%s:%d):\n"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>tcp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_TCP</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_connection_timeouts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_io_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_invalid_timeout_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_append_formatted_commands</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>throughput</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_throughput</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against Unix socket connection (%s):\n"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_UNIX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_connection_timeouts</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_blocking_io_errors</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>throughput</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_throughput</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>test_inherit_fd</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting against inherited fd (%s):\n"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>unix_sock</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CONN_FD</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_blocking_connection</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <if_stmt><if>if <condition>(<expr><name>fails</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** %d TESTS FAILED ***\n"</literal></expr></argument>, <argument><expr><name>fails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ALL TESTS PASSED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
