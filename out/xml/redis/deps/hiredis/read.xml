<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/hiredis/read.c"><comment type="block">/*
 * Copyright (c) 2009-2011, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * Copyright (c) 2010-2011, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MSC_VER</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisReaderSetError</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clear input buffer on errors. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Reset task stack. */</comment>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Set error. */</comment>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>errstr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>chrtos</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>byte</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
    <case>case <expr><literal type="char">'"'</literal></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\%c\""</literal></expr></argument>,<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\n\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\r\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\t\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\a'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\a\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\b\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"%c\""</literal></expr></argument>,<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="string">"\"\\x%02x\""</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisReaderSetErrorProtocolByte</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>chrtos</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
        <argument><expr><literal type="string">"Protocol error, got %s as reply type byte"</literal></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__redisReaderSetError</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>REDIS_ERR_PROTOCOL</name></expr></argument>,<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__redisReaderSetErrorOOM</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>__redisReaderSetError</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>REDIS_ERR_OOM</name></expr></argument>,<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>readBytes</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Find pointer to \r\n. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>seekNewline</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>_len</name> <init>= <expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Position should be &lt; len-1 because the character at "pos" should be
     * followed by a \n. Note that strchr cannot be used because it doesn't
     * allow to search a limited length and the buffer that is being searched
     * might not have a trailing NULL character. */</comment>
    <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>_len</name></expr>)</condition> <block>{<block_content>
        <while>while<condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>_len</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><name>pos</name><operator>==</operator><name>_len</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Not found. */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Found. */</comment>
                <return>return <expr><name>s</name><operator>+</operator><name>pos</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Continue searching. */</comment>
                <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read a PORT_LONGLONG value starting at *s, under the assumption that it will be
 * terminated by \r\n. Ambiguously returns -1 for unexpected input. */</comment>
<function><type><specifier>static</specifier> <name>PORT_LONGLONG</name></type> <name>readLongLong</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dec</name></decl>, <decl><type ref="prev"/><name>mult</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>s</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dec</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>dec</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dec</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v</name> <operator>+=</operator> <name>dec</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Should not happen... */</comment>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>mult</name><operator>*</operator><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>readLine</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>seekNewline</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name><operator>-</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* skip \r\n */</comment>
        <if_stmt><if>if <condition>(<expr><name>_len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>moveToNextTask</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReadTask</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prv</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Return a.s.a.p. when the stack is now empty. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name><operator>--</operator></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>prv</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>prv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name><name>prv</name><operator>-&gt;</operator><name>elements</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Reset the type because the next item can be anything */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>prv</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>processLineItem</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReadTask</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>readLine</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createInteger</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createInteger</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><call><name>readLongLong</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_INTEGER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Type will be error or status. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createString</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createString</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>__redisReaderSetErrorOOM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>REDIS_ERR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Set reply if this is the root object. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>moveToNextTask</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>REDIS_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>processBulkItem</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReadTask</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>bytelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>seekNewline</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytelen</name> <operator>=</operator> <name>s</name><operator>-</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* include \r\n */</comment>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>readLongLong</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* The nil object can always be created. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createNil</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createNil</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_NIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Only continue when the buffer contains the entire bulk item. */</comment>
            <expr_stmt><expr><name>bytelen</name> <operator>+=</operator> <name>len</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* include \r\n */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name><operator>+</operator><name>bytelen</name> <operator>&lt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createString</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createString</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_STRING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Proceed when obj was created. */</comment>
        <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>__redisReaderSetErrorOOM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>REDIS_ERR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>bytelen</name></expr>;</expr_stmt>

            <comment type="block">/* Set reply if this is the root object. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>moveToNextTask</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>REDIS_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>processMultiBulkItem</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReadTask</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>elements</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Set error for nested multi bulks with depth &gt; 7 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__redisReaderSetError</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>REDIS_ERR_PROTOCOL</name></expr></argument>,
            <argument><expr><literal type="string">"No support for nested multi bulk replies with depth &gt; 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>REDIS_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>readLine</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>elements</name> <operator>=</operator> <call><name>readLongLong</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>elements</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createNil</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createNil</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_NIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>__redisReaderSetErrorOOM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>REDIS_ERR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>moveToNextTask</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createArray</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>createArray</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_ARRAY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>__redisReaderSetErrorOOM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>REDIS_ERR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Modify task stack when there are more than 0 elements. */</comment>
            <if_stmt><if>if <condition>(<expr><name>elements</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <name>elements</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>.</operator><name>elements</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>.</operator><name>privdata</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>moveToNextTask</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Set reply if this is the root object. */</comment>
        <if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>REDIS_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>REDIS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>processItem</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReadTask</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="block">/* check if we need to read type */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>readBytes</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'-'</literal></expr>:</case>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDIS_REPLY_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'+'</literal></expr>:</case>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDIS_REPLY_STATUS</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">':'</literal></expr>:</case>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDIS_REPLY_INTEGER</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'$'</literal></expr>:</case>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDIS_REPLY_STRING</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'*'</literal></expr>:</case>
                <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REDIS_REPLY_ARRAY</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>__redisReaderSetErrorProtocolByte</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>REDIS_ERR</name></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* could not consume 1 byte */</comment>
            <return>return <expr><name>REDIS_ERR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* process typed item */</comment>
    <switch>switch<condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>REDIS_REPLY_ERROR</name></expr>:</case>
    <case>case <expr><name>REDIS_REPLY_STATUS</name></expr>:</case>
    <case>case <expr><name>REDIS_REPLY_INTEGER</name></expr>:</case>
        <return>return <expr><call><name>processLineItem</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>REDIS_REPLY_STRING</name></expr>:</case>
        <return>return <expr><call><name>processBulkItem</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>REDIS_REPLY_ARRAY</name></expr>:</case>
        <return>return <expr><call><name>processMultiBulkItem</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>REDIS_ERR</name></expr>;</return> <comment type="block">/* Avoid warning. */</comment>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>redisReader</name> <modifier>*</modifier></type><name>redisReaderCreateWithFunctions</name><parameter_list>(<parameter><decl><type><name>redisReplyObjectFunctions</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisReader</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>errstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>maxbuf</name></name> <operator>=</operator> <name>REDIS_READER_MAX_BUF</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisReaderFree</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>fn</name><operator>-&gt;</operator><name>freeObject</name></name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisReaderFeed</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>newbuf</name></decl>;</decl_stmt>

    <comment type="block">/* Return early when this reader is in an erroneous state. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Copy the provided buffer. */</comment>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Destroy internal buffer when it is empty and is quite large. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>maxbuf</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>maxbuf</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <comment type="block">/* r-&gt;buf should not be NULL since we just free'd a larger one. */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>__redisReaderSetErrorOOM</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>REDIS_ERR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisReaderGetReply</name><parameter_list>(<parameter><decl><type><name>redisReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Default target pointer to NULL. */</comment>
    <if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>reply</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Return early when this reader is in an erroneous state. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* When the buffer is empty, there will never be a reply. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDIS_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Set first item to process when the stack is empty. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>elements</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rstack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>privdata</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>privdata</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process items in reply. */</comment>
    <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>processItem</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

    <comment type="block">/* Return ASAP when an error occurred. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDIS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Discard part of the buffer when we've consumed at least 1k, to avoid
     * doing unnecessary calls to memmove() in sds.c. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Emit a reply when there is one. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ridx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>reply</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>reply</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reply</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>REDIS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
