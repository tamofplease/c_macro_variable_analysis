<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/linenoise/linenoise.c"><comment type="block">/* linenoise.c -- guerrilla line editing library against the idea that a
 * line editing lib needs to be 20,000 lines of C code.
 *
 * You can find the latest source code at:
 *
 *   http://github.com/antirez/linenoise
 *
 * Does a number of crazy assumptions that happen to be true in 99.9999% of
 * the 2010 UNIX computers around.
 *
 * ------------------------------------------------------------------------
 *
 * Copyright (c) 2010-2016, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * Copyright (c) 2010-2013, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  *  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *  *  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ------------------------------------------------------------------------
 *
 * References:
 * - http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
 * - http://www.3waylabs.com/nw/WWW/products/wizcon/vt220.html
 *
 * Todo list:
 * - Filter bogus Ctrl+&lt;char&gt; combinations.
 * - Win32 support
 *
 * Bloat:
 * - History search like Ctrl+r in readline?
 *
 * List of escape sequences used by this program, we do everything just
 * with three sequences. In order to be so cheap we may have some
 * flickering effect with some slow terminal, but the lesser sequences
 * the more compatible.
 *
 * EL (Erase Line)
 *    Sequence: ESC [ n K
 *    Effect: if n is 0 or missing, clear from cursor to end of line
 *    Effect: if n is 1, clear from beginning of line to cursor
 *    Effect: if n is 2, clear entire line
 *
 * CUF (CUrsor Forward)
 *    Sequence: ESC [ n C
 *    Effect: moves cursor forward n chars
 *
 * CUB (CUrsor Backward)
 *    Sequence: ESC [ n D
 *    Effect: moves cursor backward n chars
 *
 * The following is used to get the terminal width if getting
 * the width with the TIOCGWINSZ ioctl fails
 *
 * DSR (Device Status Report)
 *    Sequence: ESC [ 6 n
 *    Effect: reports the current cusor position as ESC [ n ; m R
 *            where n is the row and m is the column
 *
 * When multi line mode is enabled, we also use an additional escape
 * sequence. However multi line editing is disabled by default.
 *
 * CUU (Cursor Up)
 *    Sequence: ESC [ n A
 *    Effect: moves cursor up of n chars.
 *
 * CUD (Cursor Down)
 *    Sequence: ESC [ n B
 *    Effect: moves cursor down of n chars.
 *
 * When linenoiseClearScreen() is called, two additional escape sequences
 * are used in order to clear the screen and position the cursor at home
 * position.
 *
 * CUP (Cursor position)
 *    Sequence: ESC [ H
 *    Effect: moves the cursor to upper left corner
 *
 * ED (Erase display)
 *    Sequence: ESC [ 2 J
 *    Effect: clear the whole screen
 *
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/Win32_Interop/win32fixes.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../src/Win32_Interop/win32_ANSI.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linenoise.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINENOISE_DEFAULT_HISTORY_MAX_LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINENOISE_MAX_LINE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>unsupported_term</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"dumb"</literal></expr>,<expr><literal type="string">"cons25"</literal></expr>,<expr><literal type="string">"emacs"</literal></expr>,<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>linenoiseCompletionCallback</name> <modifier>*</modifier></type><name>completionCallback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>linenoiseHintsCallback</name> <modifier>*</modifier></type><name>hintsCallback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>linenoiseFreeHintsCallback</name> <modifier>*</modifier></type><name>freeHintsCallback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>orig_termios</name></decl>;</decl_stmt> <comment type="block">/* In order to restore at exit.*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rawmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* For atexit() function to check if restore is needed*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mlmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* Multi line mode. Default is single line. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>atexit_registered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Register atexit just 1 time. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_max_len</name> <init>= <expr><name>LINENOISE_DEFAULT_HISTORY_MAX_LEN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>history_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>history</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* The linenoiseState structure represents the state during line editing.
 * We pass this state to functions implementing specific editing
 * functionalities. */</comment>
<struct>struct <name>linenoiseState</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ifd</name></decl>;</decl_stmt>            <comment type="block">/* Terminal stdin file descriptor. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ofd</name></decl>;</decl_stmt>            <comment type="block">/* Terminal stdout file descriptor. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>          <comment type="block">/* Edited line buffer. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>      <comment type="block">/* Edited line buffer size. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt> <comment type="block">/* Prompt to display. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>        <comment type="block">/* Prompt length. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>         <comment type="block">/* Current cursor position. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>oldpos</name></decl>;</decl_stmt>      <comment type="block">/* Previous refresh cursor position. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>         <comment type="block">/* Current edited line length. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cols</name></decl>;</decl_stmt>        <comment type="block">/* Number of columns in terminal. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>maxrows</name></decl>;</decl_stmt>     <comment type="block">/* Maximum num of rows used so far (multiline mode) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>history_index</name></decl>;</decl_stmt>  <comment type="block">/* The history index we are currently editing. */</comment>
}</block>;</struct>

<enum>enum <name>KEY_ACTION</name><block>{
	<decl><name>KEY_NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,	    <comment type="block">/* NULL */</comment>
	<decl><name>CTRL_A</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,         <comment type="block">/* Ctrl+a */</comment>
	<decl><name>CTRL_B</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,         <comment type="block">/* Ctrl-b */</comment>
	<decl><name>CTRL_C</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,         <comment type="block">/* Ctrl-c */</comment>
	<decl><name>CTRL_D</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,         <comment type="block">/* Ctrl-d */</comment>
	<decl><name>CTRL_E</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,         <comment type="block">/* Ctrl-e */</comment>
	<decl><name>CTRL_F</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,         <comment type="block">/* Ctrl-f */</comment>
	<decl><name>CTRL_H</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,         <comment type="block">/* Ctrl-h */</comment>
	<decl><name>TAB</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,            <comment type="block">/* Tab */</comment>
	<decl><name>CTRL_K</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,        <comment type="block">/* Ctrl+k */</comment>
	<decl><name>CTRL_L</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,        <comment type="block">/* Ctrl+l */</comment>
	<decl><name>ENTER</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,         <comment type="block">/* Enter */</comment>
	<decl><name>CTRL_N</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,        <comment type="block">/* Ctrl-n */</comment>
	<decl><name>CTRL_P</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,        <comment type="block">/* Ctrl-p */</comment>
	<decl><name>CTRL_T</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,        <comment type="block">/* Ctrl-t */</comment>
	<decl><name>CTRL_U</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,        <comment type="block">/* Ctrl+u */</comment>
	<decl><name>CTRL_W</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,        <comment type="block">/* Ctrl+w */</comment>
	<decl><name>ESC</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,           <comment type="block">/* Escape */</comment>
	<decl><name>BACKSPACE</name> <init>=  <expr><literal type="number">127</literal></expr></init></decl>    <comment type="block">/* Backspace */</comment>
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>linenoiseAtExit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>linenoiseHistoryAdd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>refreshLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDIN_FILENO</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIN_FILENO</name></cpp:macro> <cpp:value>(_fileno(stdin))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hOut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hIn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>consolemode</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win32read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>DWORD</name></type> <name>foo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KEY_EVENT_RECORD</name></type> <name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>altgr</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadConsoleInput</name><argument_list>(<argument><expr><name>hIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>foo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foo</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name></expr>)</condition> <block>{<block_content>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name>altgr</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEFT_CTRL_PRESSED</name> <operator>|</operator> <name>RIGHT_ALT_PRESSED</name><operator>)</operator></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEFT_CTRL_PRESSED</name> <operator>|</operator> <name>RIGHT_CTRL_PRESSED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>altgr</name></expr>)</condition> <block>{<block_content>

                <comment type="block">/* Ctrl+Key */</comment>
                <switch>switch <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="char">'D'</literal></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'C'</literal></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'H'</literal></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'T'</literal></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'B'</literal></expr>:</case> <comment type="block">/* ctrl-b, left_arrow */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'F'</literal></expr>:</case> <comment type="block">/* ctrl-f right_arrow*/</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'P'</literal></expr>:</case> <comment type="block">/* ctrl-p up_arrow*/</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'N'</literal></expr>:</case> <comment type="block">/* ctrl-n down_arrow*/</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'U'</literal></expr>:</case> <comment type="block">/* Ctrl+u, delete the whole line. */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'K'</literal></expr>:</case> <comment type="block">/* Ctrl+k, delete from current to end of line. */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'A'</literal></expr>:</case> <comment type="block">/* Ctrl+a, go to the start of the line */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><literal type="char">'E'</literal></expr>:</case> <comment type="block">/* ctrl+e, go to the end of the line */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></switch>

                <comment type="block">/* Other Ctrl+KEYs ignored */</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>

                <switch>switch <condition>(<expr><name><name>e</name><operator>.</operator><name>wVirtualKeyCode</name></name></expr>)</condition> <block>{<block_content>

                    <case>case <expr><name>VK_ESCAPE</name></expr>:</case> <comment type="block">/* ignore - send ctrl-c, will return -1 */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_RETURN</name></expr>:</case>  <comment type="block">/* enter */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_LEFT</name></expr>:</case>   <comment type="block">/* left */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_RIGHT</name></expr>:</case> <comment type="block">/* right */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_UP</name></expr>:</case>   <comment type="block">/* up */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_DOWN</name></expr>:</case>  <comment type="block">/* down */</comment>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_HOME</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_END</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_BACK</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <case>case <expr><name>VK_DELETE</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
                        <return>return <expr><literal type="number">1</literal></expr>;</return>
                    <default>default:</default>
                        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* Makes compiler happy */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Debugging macro. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
FILE *lndebug_fp = NULL;
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lndebug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { \
        if (lndebug_fp == NULL) { \
            lndebug_fp = fopen("/tmp/lndebug.txt","a"); \
            fprintf(lndebug_fp, \
            "[%d %d %d] p: %d, rows: %d, rpos: %d, max: %d, oldmax: %d\n", \
            (int)l-&gt;len,(int)l-&gt;pos,(int)l-&gt;oldpos,plen,rows,rpos, \
            (int)l-&gt;maxrows,old_rows); \
        } \
        fprintf(lndebug_fp, ", " __VA_ARGS__); \
        fflush(lndebug_fp); \
    } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lndebug</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ======================= Low level terminal handling ====================== */</comment>

<comment type="block">/* Set if to use or not the multi line mode. */</comment>
<function><type><name>void</name></type> <name>linenoiseSetMultiLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ml</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>mlmode</name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return true if the terminal name is in the list of terminals we know are
 * not able to understand basic escape sequences. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isUnsupportedTerm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>unsupported_term</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>,<argument><expr><name><name>unsupported_term</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Raw mode: 1960 magic shit. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>enableRawMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>raw</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_registered</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>linenoiseAtExit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>atexit_registered</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>orig_termios</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>raw</name> <operator>=</operator> <name>orig_termios</name></expr>;</expr_stmt>  <comment type="block">/* modify the original mode */</comment>
    <comment type="block">/* input modes: no break, no CR to NL, no parity check, no strip char,
     * no start/stop output control. */</comment>
    <expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>BRKINT</name> <operator>|</operator> <name>ICRNL</name> <operator>|</operator> <name>INPCK</name> <operator>|</operator> <name>ISTRIP</name> <operator>|</operator> <name>IXON</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* output modes - disable post processing */</comment>
    <expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>OPOST</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* control modes - set 8 bit chars */</comment>
    <expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_cflag</name></name> <operator>|=</operator> <operator>(</operator><name>CS8</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* local modes - choing off, canonical off, no extended functions,
     * no signal chars (^Z,^C) */</comment>
    <expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ECHO</name> <operator>|</operator> <name>ICANON</name> <operator>|</operator> <name>IEXTEN</name> <operator>|</operator> <name>ISIG</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* control chars - set return condition: min number of bytes and timer.
     * We want read to return every single byte, without timeout. */</comment>
    <expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>raw</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* 1 byte, no timer */</comment>

    <comment type="block">/* put terminal in raw mode after flushing */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>TCSAFLUSH</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rawmode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_registered</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Init windows console handles only once */</comment>
        <expr_stmt><expr><name>hOut</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hOut</name><operator>==</operator><name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fatal</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>hOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consolemode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTTY</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name>hIn</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hIn</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTTY</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>hIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consolemode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>hIn</name></expr></argument>, <argument><expr><name>ENABLE_PROCESSED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Cleanup them at exit */</comment>
        <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>linenoiseAtExit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>atexit_registered</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rawmode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fatal</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTTY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>disableRawMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rawmode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Don't even check the return value as it's too late. */</comment>
    <if_stmt><if>if <condition>(<expr><name>rawmode</name> <operator>&amp;&amp;</operator> <call><name>tcsetattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>TCSAFLUSH</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>orig_termios</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rawmode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Use the ESC [6n escape sequence to query the horizontal cursor position
 * and return it. On error -1 is returned, on success the position of the
 * cursor. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getCursorPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Report cursor location */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><literal type="string">"\x1b[6n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Read the response: ESC [ rows ; cols R */</comment>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>,<argument><expr><name>buf</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/* Parse it. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ESC</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="string">"%d;%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>cols</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Try to get the number of columns in the current terminal, or assume 80
 * if it fails. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getColumns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>b</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>hOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">80</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>b</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* ioctl() failed. Try to query the terminal itself. */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>

        <comment type="block">/* Get the initial position so we can restore it later. */</comment>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>getCursorPosition</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>,<argument><expr><name>ofd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Go to right margin and get position. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>,<argument><expr><literal type="string">"\x1b[999C"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>getCursorPosition</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>,<argument><expr><name>ofd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Restore position. */</comment>
        <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="string">"\x1b[%dD"</literal></expr></argument>,<argument><expr><name>cols</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Can't recover... */</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cols</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>failed</name>:</label>
    <return>return <expr><literal type="number">80</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Clear the screen. Used to handle ctrl+l */</comment>
<function><type><name>void</name></type> <name>linenoiseClearScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>,<argument><expr><literal type="string">"\x1b[H\x1b[2J"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* nothing to do, just to avoid warning. */</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Beep, used for completion when there is nothing to complete or when all
 * the choices were already shown. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>linenoiseBeep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\x7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ============================== Completion ================================ */</comment>

<comment type="block">/* Free a list of completion option populated by linenoiseAddCompletion(). */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>freeCompletions</name><parameter_list>(<parameter><decl><type><name>linenoiseCompletions</name> <modifier>*</modifier></type><name>lc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lc</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>cvec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>cvec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>cvec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This is an helper function for linenoiseEdit() and is called when the
 * user types the &lt;tab&gt; key in order to complete the string currently in the
 * input.
 *
 * The state of the editing is encapsulated into the pointed linenoiseState
 * structure as described in the structure definition. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>completeLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>linenoiseCompletions</name></type> <name>lc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>, <decl><type ref="prev"/><name>nwritten</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>completionCallback</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>linenoiseBeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while<condition>(<expr><operator>!</operator><name>stop</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Show completion or original buffer */</comment>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>lc</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>struct</name> <name>linenoiseState</name></name></type> <name>saved</name> <init>= <expr><operator>*</operator><name>ls</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>lc</name><operator>.</operator><name>cvec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>lc</name><operator>.</operator><name>cvec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>read</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>ifd</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                    <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
            <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>freeCompletions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="block">/* tab */</comment>
                    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>lc</name><operator>.</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>lc</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>linenoiseBeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="number">27</literal></expr>:</case> <comment type="block">/* escape */</comment>
                    <comment type="block">/* Re-show original buffer */</comment>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>lc</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>stop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <comment type="block">/* Update buffer and return */</comment>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>lc</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name><name>lc</name><operator>.</operator><name>cvec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>nwritten</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>stop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>freeCompletions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return> <comment type="block">/* Return last read character */</comment>
</block_content>}</block></function>

<comment type="block">/* Register a callback function to be called for tab-completion. */</comment>
<function><type><name>void</name></type> <name>linenoiseSetCompletionCallback</name><parameter_list>(<parameter><decl><type><name>linenoiseCompletionCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>completionCallback</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Register a hits function to be called to show hits to the user at the
 * right of the prompt. */</comment>
<function><type><name>void</name></type> <name>linenoiseSetHintsCallback</name><parameter_list>(<parameter><decl><type><name>linenoiseHintsCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>hintsCallback</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Register a function to free the hints returned by the hints callback
 * registered with linenoiseSetHintsCallback(). */</comment>
<function><type><name>void</name></type> <name>linenoiseSetFreeHintsCallback</name><parameter_list>(<parameter><decl><type><name>linenoiseFreeHintsCallback</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>freeHintsCallback</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is used by the callback function registered by the user
 * in order to add completion options given the input string when the
 * user typed &lt;tab&gt;. See the example.c source code for a very easy to
 * understand example. */</comment>
<function><type><name>void</name></type> <name>linenoiseAddCompletion</name><parameter_list>(<parameter><decl><type><name>linenoiseCompletions</name> <modifier>*</modifier></type><name>lc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>cvec</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cvec</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>lc</name><operator>-&gt;</operator><name>cvec</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>lc</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cvec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>cvec</name></name> <operator>=</operator> <name>cvec</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>cvec</name><index>[<expr><name><name>lc</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* =========================== Line editing ================================= */</comment>

<comment type="block">/* We define a very simple "append buffer" structure, that is an heap
 * allocated string where we can append to. This is useful in order to
 * write all the escape sequences in a buffer and flush them to the standard
 * output in a single call, to avoid flickering effects. */</comment>
<struct>struct <name>abuf</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abInit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>abuf</name></name> <modifier>*</modifier></type><name>ab</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abAppend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>abuf</name></name> <modifier>*</modifier></type><name>ab</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name><operator>+</operator><name><name>ab</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abFree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>abuf</name></name> <modifier>*</modifier></type><name>ab</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper of refreshSingleLine() and refreshMultiLine() to show hints
 * to the right of the prompt. */</comment>
<function><type><name>void</name></type> <name>refreshShowHints</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>abuf</name></name> <modifier>*</modifier></type><name>ab</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hintsCallback</name> <operator>&amp;&amp;</operator> <name>plen</name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>bold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><call><name>hintsCallback</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hintlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                    <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast int */</comment>
            <name>int</name></type> <name>hintmaxlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>-</operator><operator>(</operator><name>plen</name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>                      <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast int */</comment>
            <if_stmt><if>if <condition>(<expr><name>hintlen</name> <operator>&gt;</operator> <name>hintmaxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hintlen</name> <operator>=</operator> <name>hintmaxlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>bold</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>color</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">37</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>bold</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\033[%d;%d;49m"</literal></expr></argument>,<argument><expr><name>bold</name></expr></argument>,<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast int */</comment>
            <name>abAppend</name><argument_list>(<argument><expr><name>ab</name></expr></argument>,<argument><expr><name>hint</name></expr></argument>,<argument><expr><name>hintlen</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>bold</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><name>ab</name></expr></argument>,<argument><expr><literal type="string">"\033[0m"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block">/* Call the function to free the hint returned. */</comment>
            <if_stmt><if>if <condition>(<expr><name>freeHintsCallback</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeHintsCallback</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Single line low level line refresh.
 *
 * Rewrite the currently edited line accordingly to the buffer content,
 * cursor position, and number of columns of the terminal. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>refreshSingleLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>ofd</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>abuf</name></name></type> <name>ab</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>(</operator><name>plen</name><operator>+</operator><name>pos</name><operator>)</operator> <operator>&gt;=</operator> <name><name>l</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while>while <condition>(<expr><name>plen</name><operator>+</operator><name>len</name> <operator>&gt;</operator> <name><name>l</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>abInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Cursor to left edge */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Write the prompt and the current buffer content */</comment>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Show hits if any. */</comment>
    <expr_stmt><expr><call><name>refreshShowHints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                          <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast int */</comment>
    <comment type="block">/* Erase to right */</comment>
    <name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\x1b[0K"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Move cursor to original position. */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r\x1b[%dC"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pos</name><operator>+</operator><name>plen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>ab</name><operator>.</operator><name>b</name></name></expr></argument>,<argument><expr><name><name>ab</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> <comment type="block">/* Can't recover from write error. */</comment>
    <expr_stmt><expr><call><name>abFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Multi line low level line refresh.
 *
 * Rewrite the currently edited line accordingly to the buffer content,
 * cursor position, and number of columns of the terminal. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>refreshMultiLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>plen</name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* rows used by current buf. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>rpos</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>plen</name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>oldpos</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>)</operator><operator>/</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* cursor relative row. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>rpos2</name></decl>;</decl_stmt> <comment type="block">/* rpos after refresh. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt> <comment type="block">/* colum position, zero-based. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>old_rows</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>maxrows</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>ofd</name></name></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>abuf</name></name></type> <name>ab</name></decl>;</decl_stmt>

    <comment type="block">/* Update maxrows if needed. */</comment>
    <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>maxrows</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>maxrows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* First step: clear all the lines used before. To do so start by
     * going to the last row. */</comment>
    <expr_stmt><expr><call><name>abInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old_rows</name><operator>-</operator><name>rpos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"go down %d"</literal></expr></argument>, <argument><expr><name>old_rows</name><operator>-</operator><name>rpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\x1b[%dB"</literal></expr></argument>, <argument><expr><name>old_rows</name><operator>-</operator><name>rpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Now for every row clear it, go up. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>old_rows</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"clear+up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r\x1b[0K\x1b[1A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Clean the top line. */</comment>
    <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r\x1b[0K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write the prompt and the current buffer content */</comment>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Show hits if any. */</comment>
    <expr_stmt><expr><call><name>refreshShowHints</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If we are at the very end of the screen with our prompt, we need to
     * emit a newline and move the prompt to the first column. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>&amp;&amp;</operator>
        <name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>+</operator><name>plen</name><operator>)</operator> <operator>%</operator> <name><name>l</name><operator>-&gt;</operator><name>cols</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"&lt;newline&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>maxrows</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>maxrows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Move cursor to right position. */</comment>
    <expr_stmt><expr><name>rpos2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>plen</name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>)</operator><operator>/</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* current cursor relative row. */</comment>
    <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"rpos2 %d"</literal></expr></argument>, <argument><expr><name>rpos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Go up till we reach the expected positon. */</comment>
    <if_stmt><if>if <condition>(<expr><name>rows</name><operator>-</operator><name>rpos2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"go-up %d"</literal></expr></argument>, <argument><expr><name>rows</name><operator>-</operator><name>rpos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\x1b[%dA"</literal></expr></argument>, <argument><expr><name>rows</name><operator>-</operator><name>rpos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set column. */</comment>
    <expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>plen</name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"set col %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r\x1b[%dC"</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>abAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lndebug</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>oldpos</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>ab</name><operator>.</operator><name>b</name></name></expr></argument>,<argument><expr><name><name>ab</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> <comment type="block">/* Can't recover from write error. */</comment>
    <expr_stmt><expr><call><name>abFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Calls the two low level functions refreshSingleLine() or
 * refreshMultiLine() according to the selected mode. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>refreshLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mlmode</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>refreshMultiLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>refreshSingleLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Insert the character 'c' at cursor current position.
 *
 * On error writing to the terminal -1 is returned, otherwise 0. */</comment>
<function><type><name>int</name></type> <name>linenoiseEditInsert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>buflen</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>mlmode</name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>plen</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hintsCallback</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Avoid a full update of the line in the
                 * trivial case. */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>ofd</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Move cursor on the left. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditMoveLeft</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Move cursor on the right. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditMoveRight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Move cursor to the start of the line. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditMoveHome</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Move cursor to the end of the line. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditMoveEnd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Substitute the currently edited line with the next or previous history
 * entry as specified by 'dir'. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINENOISE_HISTORY_NEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINENOISE_HISTORY_PREV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>linenoiseEditHistoryNext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>history_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Update the current history entry before to
         * overwrite it with the next one. */</comment>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>history_len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>l</name><operator>-&gt;</operator><name>history_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>history</name><index>[<expr><name>history_len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>l</name><operator>-&gt;</operator><name>history_index</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Show the new entry */</comment>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>history_index</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>dir</name> <operator>==</operator> <name>LINENOISE_HISTORY_PREV</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>history_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>history_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>history_index</name></name> <operator>&gt;=</operator> <name>history_len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>history_index</name></name> <operator>=</operator> <name>history_len</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>history</name><index>[<expr><name>history_len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>l</name><operator>-&gt;</operator><name>history_index</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>buflen</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Delete the character at the right of the cursor without altering the cursor
 * position. Basically this is what happens with the "Delete" keyboard key. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditDelete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Backspace implementation. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditBackspace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Delete the previosu word, maintaining the cursor at the start of the
 * current word. */</comment>
<function><type><name>void</name></type> <name>linenoiseEditDeletePrevWord</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linenoiseState</name></name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>old_pos</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>diff</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>old_pos</name> <operator>-</operator> <name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name><name>l</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name>old_pos</name></expr></argument>,<argument><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name>old_pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is the core of the line editing capability of linenoise.
 * It expects 'fd' to be already in "raw mode" so that every key pressed
 * will be returned ASAP to read().
 *
 * The resulting string is put into 'buf' when the user type enter, or
 * when ctrl+d is typed.
 *
 * The function returns the length of the current buffer. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>linenoiseEdit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stdin_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stdout_fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>linenoiseState</name></name></type> <name>l</name></decl>;</decl_stmt>

    <comment type="block">/* Populate the linenoise state that we pass to functions implementing
     * specific editing functionalities. */</comment>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>ifd</name></name> <operator>=</operator> <name>stdin_fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>ofd</name></name> <operator>=</operator> <name>stdout_fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>buflen</name></name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>prompt</name></name> <operator>=</operator> <name>prompt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>plen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>oldpos</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>cols</name></name> <operator>=</operator> <call><name>getColumns</name><argument_list>(<argument><expr><name>stdin_fd</name></expr></argument>, <argument><expr><name>stdout_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>maxrows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>history_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Buffer starts empty. */</comment>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><operator>.</operator><name>buflen</name></name><operator>--</operator></expr>;</expr_stmt> <comment type="block">/* Make sure there is always space for the nulterm */</comment>

    <comment type="block">/* The latest history entry is always our current buffer, that
     * initially is just an empty string. */</comment>
    <expr_stmt><expr><call><name>linenoiseHistoryAdd</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>ofd</name></name></expr></argument>,<argument><expr><name>prompt</name></expr></argument>,<argument><expr><name><name>l</name><operator>.</operator><name>plen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>win32read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>ifd</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>.</operator><name>len</name></name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Only autocomplete when the callback is set. It returns &lt; 0 when
         * there was an error reading from fd. Otherwise it will return the
         * character that should be handled next. */</comment>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>completionCallback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>completeLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Return on errors */</comment>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>.</operator><name>len</name></name></expr>;</return></block_content></block></if></if_stmt>
            <comment type="block">/* Read next character when 0 */</comment>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>ENTER</name></expr>:</case>    <comment type="block">/* enter */</comment>
            <expr_stmt><expr><name>history_len</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>history_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mlmode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>linenoiseEditMoveEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>hintsCallback</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Force a refresh without hints to leave the previous
                 * line as the user typed it after a newline. */</comment>
                <decl_stmt><decl><type><name>linenoiseHintsCallback</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><name>hintsCallback</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>hintsCallback</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hintsCallback</name> <operator>=</operator> <name>hc</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>.</operator><name>len</name></name></expr>;</return>
        <case>case <expr><name>CTRL_C</name></expr>:</case>     <comment type="block">/* ctrl-c */</comment>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <case>case <expr><name>BACKSPACE</name></expr>:</case>   <comment type="block">/* backspace */</comment>
        <case>case <expr><literal type="number">8</literal></expr>:</case>     <comment type="block">/* ctrl-h */</comment>
            <expr_stmt><expr><call><name>linenoiseEditBackspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_D</name></expr>:</case>     <comment type="block">/* ctrl-d, remove char at right of cursor, or if the
                            line is empty, act as end-of-file. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>linenoiseEditDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>history_len</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>history_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_T</name></expr>:</case>    <comment type="block">/* ctrl-t, swaps current character with previous. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>l</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>l</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>aux</name> <init>= <expr><name><name>buf</name><index>[<expr><name><name>l</name><operator>.</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>l</name><operator>.</operator><name>pos</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name><name>l</name><operator>.</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>l</name><operator>.</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>l</name><operator>.</operator><name>pos</name></name> <operator>!=</operator> <name><name>l</name><operator>.</operator><name>len</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>l</name><operator>.</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_B</name></expr>:</case>     <comment type="block">/* ctrl-b */</comment>
            <expr_stmt><expr><call><name>linenoiseEditMoveLeft</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_F</name></expr>:</case>     <comment type="block">/* ctrl-f */</comment>
            <expr_stmt><expr><call><name>linenoiseEditMoveRight</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_P</name></expr>:</case>    <comment type="block">/* ctrl-p */</comment>
            <expr_stmt><expr><call><name>linenoiseEditHistoryNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>LINENOISE_HISTORY_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_N</name></expr>:</case>    <comment type="block">/* ctrl-n */</comment>
            <expr_stmt><expr><call><name>linenoiseEditHistoryNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>LINENOISE_HISTORY_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ESC</name></expr>:</case>    <comment type="block">/* escape sequence */</comment>
            <comment type="block">/* Read the next two bytes representing the escape sequence.
             * Use two calls to handle slow terminals returning the two
             * chars at different times. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>ifd</name></name></expr></argument>,<argument><expr><name>seq</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>ifd</name></name></expr></argument>,<argument><expr><name>seq</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <comment type="block">/* ESC [ sequences. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* Extended escape, read additional byte. */</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>ifd</name></name></expr></argument>,<argument><expr><name>seq</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                        <switch>switch<condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="char">'3'</literal></expr>:</case> <comment type="block">/* Delete key. */</comment>
                            <expr_stmt><expr><call><name>linenoiseEditDelete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></switch>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <switch>switch<condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="char">'A'</literal></expr>:</case> <comment type="block">/* Up */</comment>
                        <expr_stmt><expr><call><name>linenoiseEditHistoryNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>LINENOISE_HISTORY_PREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'B'</literal></expr>:</case> <comment type="block">/* Down */</comment>
                        <expr_stmt><expr><call><name>linenoiseEditHistoryNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>LINENOISE_HISTORY_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'C'</literal></expr>:</case> <comment type="block">/* Right */</comment>
                        <expr_stmt><expr><call><name>linenoiseEditMoveRight</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'D'</literal></expr>:</case> <comment type="block">/* Left */</comment>
                        <expr_stmt><expr><call><name>linenoiseEditMoveLeft</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'H'</literal></expr>:</case> <comment type="block">/* Home */</comment>
                        <expr_stmt><expr><call><name>linenoiseEditMoveHome</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'F'</literal></expr>:</case> <comment type="block">/* End*/</comment>
                        <expr_stmt><expr><call><name>linenoiseEditMoveEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>

            <comment type="block">/* ESC O sequences. */</comment>
            <if type="elseif">else if <condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>
                <switch>switch<condition>(<expr><name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="char">'H'</literal></expr>:</case> <comment type="block">/* Home */</comment>
                    <expr_stmt><expr><call><name>linenoiseEditMoveHome</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="char">'F'</literal></expr>:</case> <comment type="block">/* End*/</comment>
                    <expr_stmt><expr><call><name>linenoiseEditMoveEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><call><name>linenoiseEditInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_U</name></expr>:</case> <comment type="block">/* Ctrl+u, delete the whole line. */</comment>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_K</name></expr>:</case> <comment type="block">/* Ctrl+k, delete from current to end of line. */</comment>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>l</name><operator>.</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>l</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_A</name></expr>:</case> <comment type="block">/* Ctrl+a, go to the start of the line */</comment>
            <expr_stmt><expr><call><name>linenoiseEditMoveHome</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_E</name></expr>:</case> <comment type="block">/* ctrl+e, go to the end of the line */</comment>
            <expr_stmt><expr><call><name>linenoiseEditMoveEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_L</name></expr>:</case> <comment type="block">/* ctrl+l, clear screen */</comment>
            <expr_stmt><expr><call><name>linenoiseClearScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>refreshLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CTRL_W</name></expr>:</case> <comment type="block">/* ctrl+w, delete previous word */</comment>
            <expr_stmt><expr><call><name>linenoiseEditDeletePrevWord</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>l</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This special mode is used by linenoise in order to print scan codes
 * on screen for debugging / development purposes. It is implemented
 * by the linenoise_example program using the --keycodes option. */</comment>
<function><type><name>void</name></type> <name>linenoisePrintKeyCodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>quit</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Linenoise key codes debugging mode.\n"</literal>
            <literal type="string">"Press keys to see scan codes. Type 'quit' at any time to exit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>enableRawMode</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>quit</name></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>read</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                   <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
        <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>quit</name></expr></argument>,<argument><expr><name>quit</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quit</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* shift string to left. */</comment>
        <expr_stmt><expr><name><name>quit</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>quit</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <comment type="block">/* Insert current char on the right. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>quit</name></expr></argument>,<argument><expr><literal type="string">"quit"</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%c' %02x (%d) (type quit to exit)\n"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Go left edge manually, we are in raw mode. */</comment>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>disableRawMode</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function calls the line editing function linenoiseEdit() using
 * the STDIN file descriptor set in raw mode. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>linenoiseRaw</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>enableRawMode</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>linenoiseEdit</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>disableRawMode</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is called when linenoise() is called with the standard
 * input file descriptor not attached to a TTY. So for example when the
 * program using linenoise is called in pipe or with a file redirected
 * to its standard input. In this case, we want to be able to return the
 * line regardless of its length (by default we are limited to 4k). */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>linenoiseNoTTY</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>maxlen</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldval</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>oldval</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>fgetc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <return>return <expr><name>line</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* The high level function that is the main API of the linenoise library.
 * This function checks if the terminal has basic capabilities, just checking
 * for a blacklist of stupid terminals, and later either calls the line
 * editing function or uses dummy fgets() so that you will be able to type
 * something even in the most desperate of the conditions. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>linenoise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LINENOISE_MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Not a tty: read from file / pipe. In this mode we don't want any
         * limit to the line size, so we call a function to handle that. */</comment>
        <return>return <expr><call><name>linenoiseNoTTY</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isUnsupportedTerm</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>LINENOISE_MAX_LINE</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>linenoiseRaw</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>LINENOISE_MAX_LINE</name></expr></argument>,<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This is just a wrapper the user may want to call in order to make sure
 * the linenoise returned buffer is freed with the same allocator it was
 * created with. Useful when the main program is using an alternative
 * allocator. */</comment>
<function><type><name>void</name></type> <name>linenoiseFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ================================ History ================================= */</comment>

<comment type="block">/* Free the history, but does not reset it. Only used when we have to
 * exit() to avoid memory leaks are reported by valgrind &amp; co. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>freeHistory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>history</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>history_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>history</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* At exit we'll try to fix the terminal to the initial conditions. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>linenoiseAtExit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>disableRawMode</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This is the API call to add a new entry in the linenoise history.
 * It uses a fixed array of char pointers that are shifted (memmoved)
 * when the history max length is reached in order to remove the older
 * entry and make room for the new one, so it is not exactly suitable for huge
 * histories, but will work well for a few hundred of entries.
 *
 * Using a circular buffer is smarter, but a bit more complex to handle. */</comment>
<function><type><name>int</name></type> <name>linenoiseHistoryAdd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linecopy</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>history_max_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Initialization on first call. */</comment>
    <if_stmt><if>if <condition>(<expr><name>history</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>history</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>history_max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>history</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>history</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>history_max_len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Don't add duplicated lines. */</comment>
    <if_stmt><if>if <condition>(<expr><name>history_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>history_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Add an heap allocated copy of the line in the history.
     * If we reached the max length, remove the older line. */</comment>
    <expr_stmt><expr><name>linecopy</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>linecopy</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>history_len</name> <operator>==</operator> <name>history_max_len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>history</name></expr></argument>,<argument><expr><name>history</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>history_max_len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>history_len</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>history</name><index>[<expr><name>history_len</name></expr>]</index></name> <operator>=</operator> <name>linecopy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>history_len</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Set the maximum length for the history. This function can be called even
 * if there is already some history, the function will make sure to retain
 * just the latest 'len' elements if the new history length value is smaller
 * than the amount of items already inside the history. */</comment>
<function><type><name>int</name></type> <name>linenoiseHistorySetMaxLen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>history</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tocopy</name> <init>= <expr><name>history_len</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* If we can't copy everything, free the elements we'll not use. */</comment>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>tocopy</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tocopy</name><operator>-</operator><name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>tocopy</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>,<argument><expr><name>history</name><operator>+</operator><operator>(</operator><name>history_len</name><operator>-</operator><name>tocopy</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>tocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>history</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>history</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>history_max_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>history_len</name> <operator>&gt;</operator> <name>history_max_len</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>history_len</name> <operator>=</operator> <name>history_max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save the history in the specified file. On success 0 is returned
 * otherwise -1 is returned. */</comment>
<function><type><name>int</name></type> <name>linenoiseHistorySave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>history_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name><name>history</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Load the history from the specified file. If the file does not exist
 * zero is returned and no operation is performed.
 *
 * If the file exists and the operation succeeded 0 is returned, otherwise
 * on error -1 is returned. */</comment>
<function><type><name>int</name></type> <name>linenoiseHistoryLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LINENOISE_MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>LINENOISE_MAX_LINE</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>linenoiseHistoryAdd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
