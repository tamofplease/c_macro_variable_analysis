<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lmem.c"><comment type="block">/*
** $Id: lmem.c,v 1.70.1.1 2007/12/27 13:02:25 roberto Exp $
** Interface to Memory Manager
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lmem_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>



<comment type="block">/*
** About the realloc function:
** void * frealloc (void *ud, void *ptr, size_t osize, size_t nsize);
** (`osize' is the old size, `nsize' is the new size)
**
** Lua ensures that (ptr == NULL) iff (osize == 0).
**
** * frealloc(ud, NULL, 0, x) creates a new block of size `x'
**
** * frealloc(ud, p, x, 0) frees the block `p'
** (in this specific case, frealloc must return NULL).
** particularly, frealloc(ud, NULL, 0, 0) does nothing
** (which is equivalent to free(NULL) in ANSI C)
**
** frealloc returns NULL if it cannot create or reallocate the area
** (any reallocation to an equal or smaller size cannot fail!)
*/</comment>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINSIZEARRAY</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>


<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_growaux_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_elems</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errormsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newblock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>newsize</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&gt;=</operator> <name>limit</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* cannot double it? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* cannot grow even a little? */</comment>
      <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>  <comment type="block">/* still have at least one free place */</comment>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name>newsize</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>size</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <name>MINSIZEARRAY</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>MINSIZEARRAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* minimum size */</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>newblock</name> <operator>=</operator> <call><name>luaM_reallocv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>, <argument><expr><name>size_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>  <comment type="block">/* update only when everything else is OK */</comment>
  <return>return <expr><name>newblock</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_toobig</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error: block too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* to avoid warnings */</comment>
</block_content>}</block></function>



<comment type="block">/*
** generic allocation routine.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>luaM_realloc_</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>osize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>block</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>block</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name>)<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>nsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>block</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>-</operator> <name>osize</name><operator>)</operator> <operator>+</operator> <name>nsize</name></expr>;</expr_stmt>
  <return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

</unit>
