<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/ltable.c"><comment type="block">/*
** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $
** Lua tables (hash)
** See Copyright Notice in lua.h
*/</comment>


<comment type="block">/*
** Implementation of tables (aka arrays, objects, or hash tables).
** Tables keep its elements in two parts: an array part and a hash part.
** Non-negative integer keys are all candidates to be kept in the array
** part. The actual size of the array is the largest `n' such that at
** least half the slots between 0 and n are in use.
** Hash uses a mix of chained scatter table with Brent's variation.
** A main invariant of these tables is that, if an element is not
** in its main position (i.e. the `original' position that its hash gives
** to it), then the colliding element is in its own main position.
** Hence even when the load factor reaches 100%, performance remains good.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ltable_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>


<comment type="block">/*
** max size of array part is 2^MAXBITS
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUAI_BITSINT</name> <operator>&gt;</operator> <literal type="number">26</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBITS</name></cpp:macro>		<cpp:value>26</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBITS</name></cpp:macro>		<cpp:value>(LUAI_BITSINT-2)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXASIZE</name></cpp:macro>	<cpp:value>(1 &lt;&lt; MAXBITS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashpow2</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(gnode(t, lmod((n), sizenode(t))))</cpp:value></cpp:define>
  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashstr</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>hashpow2(t, (str)-&gt;tsv.hash)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashboolean</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>hashpow2(t, p)</cpp:value></cpp:define>


<comment type="block">/*
** for some types, it is better to avoid modulus by power of 2, as
** they tend to have many 2 factors.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashmod</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(gnode(t, ((n) % ((sizenode(t)-1)|1))))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hashpointer</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>hashmod(t, IntPoint(p))</cpp:value></cpp:define>


<comment type="block">/*
** number of ints inside a lua_Number
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>numints</name></cpp:macro>		<cpp:value>cast_int(sizeof(lua_Number)/sizeof(int))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dummynode</name></cpp:macro>		<cpp:value>(&amp;dummynode_)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Node</name></type> <name>dummynode_</name> <init>= <expr><block>{
  <expr><block>{<expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>LUA_TNIL</name></expr>}</block></expr>,  <comment type="block">/* value */</comment>
  <expr><block>{<expr><block>{<expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><name>LUA_TNIL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr>  <comment type="block">/* key */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
** hash for lua_Numbers
*/</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>hashnum</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>a</name><index>[<expr><name>numints</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luai_numeq</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* avoid problems with -0 */</comment>
    <return>return <expr><call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numints</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><call><name>hashmod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** returns the `main' position of an element in a table (that is, the index
** of its hash value)
*/</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>mainposition</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
      <return>return <expr><call><name>hashnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
      <return>return <expr><call><name>hashstr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
      <return>return <expr><call><name>hashboolean</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>bvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TLIGHTUSERDATA</name></expr>:</case>
      <return>return <expr><call><name>hashpointer</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>pvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <return>return <expr><call><name>hashpointer</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
** returns the index for `key' if `key' is an appropriate key to live in
** the array part of the table, -1 otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>arrayindex</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_number2int</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>luai_numeq</name><argument_list>(<argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>k</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>  <comment type="block">/* `key' did not match some condition */</comment>
</block_content>}</block></function>


<comment type="block">/*
** returns the index of a `key' for table traversals. First goes all
** elements in the array part, then elements in the hash part. The
** beginning of a traversal is signalled by -1.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>findindex</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* first iteration */</comment>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>arrayindex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is `key' inside array part? */</comment>
    <return>return <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* yes; that's the index (corrected to C) */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>mainposition</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>  <comment type="block">/* check whether `key' is somewhere in the chain */</comment>
      <comment type="block">/* key may be dead already, but it is ok to use it in `next' */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>luaO_rawequalObj</name><argument_list>(<argument><expr><call><name>key2tval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>(</operator><call><name>ttype</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TDEADKEY</name> <operator>&amp;&amp;</operator> <call><name>iscollectable</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
             <call><name>gcvalue</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>gcvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* key index in hash table */</comment>
        <comment type="block">/* hash elements are numbered after array ones */</comment>
        <return>return <expr><name>i</name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>;</return>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gnext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>n</name></expr>)</condition>;</do>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid key to "</literal> <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"next"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* key not found */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* to avoid warnings */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaH_next</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>findindex</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* find original element */</comment>
  <for>for <control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* try first array part */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* a non-nil value? */</comment>
      <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>key</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>-=</operator> <name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sizenode</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* then hash part */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* a non-nil value? */</comment>
      <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>key2tval</name><argument_list>(<argument><expr><call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>key</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>gval</name><argument_list>(<argument><expr><call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* no more elements */</comment>
</block_content>}</block></function>


<comment type="block">/*
** {=============================================================
** Rehash
** ==============================================================
*/</comment>


<function><type><specifier>static</specifier> <name>int</name></type> <name>computesizes</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>nums</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>narray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>twotoi</name></decl>;</decl_stmt>  <comment type="block">/* 2^i */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of elements smaller than 2^i */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>na</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of elements to go to array part */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* optimal size for array part */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>twotoi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>twotoi</name><operator>/</operator><literal type="number">2</literal> <operator>&lt;</operator> <operator>*</operator><name>narray</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>twotoi</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>twotoi</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* more than half elements present? */</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>twotoi</name></expr>;</expr_stmt>  <comment type="block">/* optimal size (till now) */</comment>
        <expr_stmt><expr><name>na</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>  <comment type="block">/* all elements smaller than n will go to array part */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <operator>*</operator><name>narray</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>  <comment type="block">/* all elements already counted */</comment>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>narray</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>*</operator><name>narray</name><operator>/</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>na</name> <operator>&amp;&amp;</operator> <name>na</name> <operator>&lt;=</operator> <operator>*</operator><name>narray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>na</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>countint</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>arrayindex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>MAXASIZE</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is `key' an appropriate array index? */</comment>
    <expr_stmt><expr><name><name>nums</name><index>[<expr><call><name>ceillog2</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* count as such */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>numusearray</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ttlg</name></decl>;</decl_stmt>  <comment type="block">/* 2^lg */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ause</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* summation of `nums' */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* count to traverse all array keys */</comment>
  <for>for <control>(<init><expr><name>lg</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>ttlg</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>lg</name><operator>&lt;=</operator><name>MAXBITS</name></expr>;</condition> <incr><expr><name>lg</name><operator>++</operator></expr><operator>,</operator> <expr><name>ttlg</name><operator>*=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* for each slice */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* counter */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><name>ttlg</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>;</expr_stmt>  <comment type="block">/* adjust upper limit */</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>  <comment type="block">/* no more elements to count */</comment>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* count elements in range (2^(lg-1), 2^lg] */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>lc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>nums</name><index>[<expr><name>lg</name></expr>]</index></name> <operator>+=</operator> <name>lc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ause</name> <operator>+=</operator> <name>lc</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ause</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>numusehash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnasize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>totaluse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* total number of elements */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ause</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* summation of `nums' */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>sizenode</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ause</name> <operator>+=</operator> <call><name>countint</name><argument_list>(<argument><expr><call><name>key2tval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>totaluse</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>pnasize</name> <operator>+=</operator> <name>ause</name></expr>;</expr_stmt>
  <return>return <expr><name>totaluse</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>setarrayvector</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaM_reallocvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
     <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>setnodevector</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lsize</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* no elements to hash part? */</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>dummynode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* use common `dummynode' */</comment>
    <expr_stmt><expr><name>lsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>lsize</name> <operator>=</operator> <call><name>ceillog2</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lsize</name> <operator>&gt;</operator> <name>MAXBITS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"table overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>twoto</name><argument_list>(<argument><expr><name>lsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>gnext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lsizenode</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>lsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lastfree</name></name> <operator>=</operator> <call><name>gnode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* all positions are free */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>resize</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nasize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nhsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oldasize</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oldhsize</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>lsizenode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>nold</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* save old hash ... */</comment>
  <if_stmt><if>if <condition>(<expr><name>nasize</name> <operator>&gt;</operator> <name>oldasize</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* array part must grow? */</comment>
    <expr_stmt><expr><call><name>setarrayvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <comment type="block">/* create new hash part with appropriate size */</comment>
  <expr_stmt><expr><call><name>setnodevector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nhsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <if_stmt><if>if <condition>(<expr><name>nasize</name> <operator>&lt;</operator> <name>oldasize</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* array part must shrink? */</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name> <operator>=</operator> <name>nasize</name></expr>;</expr_stmt>
    <comment type="block">/* re-insert elements from vanishing slice */</comment>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>nasize</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>oldasize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setobjt2t</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_setnum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* shrink array */</comment>
    <expr_stmt><expr><call><name>luaM_reallocvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>oldasize</name></expr></argument>, <argument><expr><name>nasize</name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* re-insert elements from hash part */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>twoto</name><argument_list>(<argument><expr><name>oldhsize</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>nold</name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setobjt2t</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>key2tval</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name> <name>4334</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>nold</name> <operator>!=</operator> <name>dummynode</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nold</name></expr></argument>, <argument><expr><call><name>twoto</name><argument_list>(<argument><expr><name>oldhsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* free old array */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaH_resizearray</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nasize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nsize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>dummynode</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>sizenode</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nasize</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>rehash</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>ek</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nasize</name></decl>, <decl><type ref="prev"/><name>na</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>nums</name><index>[<expr><name>MAXBITS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* nums[i] = number of keys between 2^(i-1) and 2^i */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>totaluse</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>MAXBITS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>  <comment type="block">/* reset counts */</comment>
  <expr_stmt><expr><name>nasize</name> <operator>=</operator> <call><name>numusearray</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* count keys in array part */</comment>
  <expr_stmt><expr><name>totaluse</name> <operator>=</operator> <name>nasize</name></expr>;</expr_stmt>  <comment type="block">/* all those keys are integer keys */</comment>
  <expr_stmt><expr><name>totaluse</name> <operator>+=</operator> <call><name>numusehash</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* count keys in hash part */</comment>
  <comment type="block">/* count extra key */</comment>
  <expr_stmt><expr><name>nasize</name> <operator>+=</operator> <call><name>countint</name><argument_list>(<argument><expr><name>ek</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>totaluse</name><operator>++</operator></expr>;</expr_stmt>
  <comment type="block">/* compute new size for array part */</comment>
  <expr_stmt><expr><name>na</name> <operator>=</operator> <call><name>computesizes</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* resize the table to new computed sizes */</comment>
  <expr_stmt><expr><call><name>resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nasize</name></expr></argument>, <argument><expr><name>totaluse</name> <operator>-</operator> <name>na</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
** }=============================================================
*/</comment>


<function><type><name>Table</name> <modifier>*</modifier></type><name>luaH_new</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nhash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>luaM_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>Table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_link</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>metatable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* temporary values (kept only if some malloc fails) */</comment>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lsizenode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><name>dummynode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setarrayvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>narray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnodevector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaH_free</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name> <name>4334</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>!=</operator> <name>dummynode</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><call><name>sizenode</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>getfreepos</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>lastfree</name></name><operator>--</operator> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>lastfree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>lastfree</name></name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* could not find a free place */</comment>
</block_content>}</block></function>



<comment type="block">/*
** inserts a new key into a hash table; first, check whether key's main 
** position is free. If not, check whether colliding node is in its main 
** position or not: if it is not, move colliding node to an empty place and 
** put new key in its main position; otherwise (colliding node is in its main 
** position), new key goes to an empty position. 
*/</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>newkey</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><call><name>mainposition</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>mp</name> <operator>==</operator> <name>dummynode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>othern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>getfreepos</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* get a free place */</comment>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* cannot find a free place? */</comment>
      <expr_stmt><expr><call><name>rehash</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* grow table */</comment>
      <return>return <expr><call><name>luaH_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* re-insert key into grown table */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>dummynode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>othern</name> <operator>=</operator> <call><name>mainposition</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>key2tval</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>othern</name> <operator>!=</operator> <name>mp</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is colliding node out of its main position? */</comment>
      <comment type="block">/* yes; move colliding node into free position */</comment>
      <while>while <condition>(<expr><call><name>gnext</name><argument_list>(<argument><expr><name>othern</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>mp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>othern</name> <operator>=</operator> <call><name>gnext</name><argument_list>(<argument><expr><name>othern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* find previous */</comment>
      <expr_stmt><expr><call><name>gnext</name><argument_list>(<argument><expr><name>othern</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>n</name></expr>;</expr_stmt>  <comment type="block">/* redo the chain with `n' in place of `mp' */</comment>
      <expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>*</operator><name>mp</name></expr>;</expr_stmt>  <comment type="block">/* copy colliding node into free pos. (mp-&gt;next also goes) */</comment>
      <expr_stmt><expr><call><name>gnext</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* now `mp' is free */</comment>
      <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>  <comment type="block">/* colliding node is in its own main position */</comment>
      <comment type="block">/* new node will go into free position */</comment>
      <expr_stmt><expr><call><name>gnext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>gnext</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* chain new position */</comment>
      <expr_stmt><expr><call><name>gnext</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>gkey</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>value</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>gkey</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tt</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>tt</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_barriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>gval</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>gval</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** search function for integers
*/</comment>
<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaH_getnum</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* (1 &lt;= key &amp;&amp; key &lt;= t-&gt;sizearray) */</comment>
  <if_stmt><if>if <condition>(<expr><macro><name>cast</name><argument_list>(<argument>unsigned int</argument>, <argument>key-<literal type="number">1</literal></argument>)</argument_list></macro> <operator>&lt;</operator> <macro><name>cast</name><argument_list>(<argument>unsigned int</argument>, <argument>t-&gt;sizearray</argument>)</argument_list></macro></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>key</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Number</name></type> <name>nk</name> <init>= <expr><call><name>cast_num</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>hashnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>  <comment type="block">/* check whether `key' is somewhere in the chain */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>luai_numeq</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>  <comment type="block">/* that's it */</comment>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gnext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>n</name></expr>)</condition>;</do>
    <return>return <expr><name>luaO_nilobject</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** search function for strings
*/</comment>
<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaH_getstr</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>hashstr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>  <comment type="block">/* check whether `key' is somewhere in the chain */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rawtsvalue</name><argument_list>(<argument><expr><call><name>gkey</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>  <comment type="block">/* that's it */</comment>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gnext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>n</name></expr>)</condition>;</do>
  <return>return <expr><name>luaO_nilobject</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** main search function
*/</comment>
<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaH_get</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TNIL</name></expr>:</case> <return>return <expr><name>luaO_nilobject</name></expr>;</return>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case> <return>return <expr><call><name>luaH_getstr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lua_number2int</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>luai_numeq</name><argument_list>(<argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* index is int? */</comment>
        <return>return <expr><call><name>luaH_getnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* use specialized version */</comment>
      <comment type="block">/* else go through */</comment>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>mainposition</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <do>do <block>{<block_content>  <comment type="block">/* check whether `key' is somewhere in the chain */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>luaO_rawequalObj</name><argument_list>(<argument><expr><call><name>key2tval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><call><name>gval</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>  <comment type="block">/* that's it */</comment>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gnext</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block> while <condition>(<expr><name>n</name></expr>)</condition>;</do>
      <return>return <expr><name>luaO_nilobject</name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>TValue</name> <modifier>*</modifier></type><name>luaH_set</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaH_get</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>luaO_nilobject</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>cast</name><argument_list>(<argument><expr><name>TValue</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"table index is nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>luai_numisnan</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"table index is NaN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><call><name>newkey</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>TValue</name> <modifier>*</modifier></type><name>luaH_setnum</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaH_getnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>luaO_nilobject</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>cast</name><argument_list>(<argument><expr><name>TValue</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>newkey</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>TValue</name> <modifier>*</modifier></type><name>luaH_setstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaH_getstr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>luaO_nilobject</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>cast</name><argument_list>(<argument><expr><name>TValue</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setsvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>newkey</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>unbound_search</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* i is zero or a present index */</comment>
  <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
  <comment type="block">/* find `i' and `j' such that i is present and j is not */</comment>
  <while>while <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>luaH_getnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <macro><name>cast</name><argument_list>(<argument>unsigned int</argument>, <argument>MAX_INT</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>  <comment type="block">/* overflow? */</comment>
      <comment type="block">/* table was built with bad purposes: resort to linear search */</comment>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>luaH_getnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      <return>return <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <comment type="block">/* now do a binary search between them */</comment>
  <while>while <condition>(<expr><name>j</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>i</name><operator>+</operator><name>j</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><call><name>luaH_getnum</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Try to find a boundary in table `t'. A `boundary' is an integer index
** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).
*/</comment>
<function><type><name>int</name></type> <name>luaH_getn</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>sizearray</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* there is a boundary in the array part: (binary) search for it */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>j</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>i</name><operator>+</operator><name>j</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>i</name></expr>;</return>
  </block_content>}</block></if>
  <comment type="block">/* else must find a boundary in hash part */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>dummynode</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* hash part is empty? */</comment>
    <return>return <expr><name>j</name></expr>;</return></block_content></block></if>  <comment type="block">/* that is easy... */</comment>
  <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>unbound_search</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>Node</name> <modifier>*</modifier></type><name>luaH_mainposition</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Table</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>mainposition</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>luaH_isdummy</name> <parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>n</name> <operator>==</operator> <name>dummynode</name></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
