<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lua_struct.c"><comment type="block">/*
** {======================================================
** Library for packing/unpacking structures.
** $Id: struct.c,v 1.7 2018/05/11 22:04:31 roberto Exp $
** See Copyright Notice at the end of this file
** =======================================================
*/</comment>
<comment type="block">/*
** Valid formats:
** &gt; - big endian
** &lt; - little endian
** ![num] - alignment
** x - pading
** b/B - signed/unsigned byte
** h/H - signed/unsigned short
** l/L - signed/unsigned long
** T   - size_t
** i/In - signed/unsigned integer with size 'n' (default is size of int)
** cn - sequence of 'n' chars (from/to a string); when packing, n==0 means
        the whole string; when unpacking, n==0 means use the previous
        read number as the string length
** s - zero-terminated string
** f - float
** d - double
** ' ' - ignored
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LUA_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">502</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luaL_register</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>luaL_newlib(L,f)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* basic integer type */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STRUCT_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRUCT_INT</name></cpp:macro>	<cpp:value>long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>STRUCT_INT</name></type> <name>Inttype</name>;</typedef>

<comment type="block">/* corresponding unsigned version */</comment>
<typedef>typedef <type><name>unsigned</name> <name>STRUCT_INT</name></type> <name>Uinttype</name>;</typedef>


<comment type="block">/* maximum size (in bytes) for integral types */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXINTSIZE</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>

<comment type="block">/* is 'x' a power of 2? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isp2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((x) &gt; 0 &amp;&amp; ((x) &amp; ((x) - 1)) == 0)</cpp:value></cpp:define>

<comment type="block">/* dummy structure to get alignment requirements */</comment>
<struct>struct <name>cD</name> <block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDING</name></cpp:macro>		<cpp:value>(sizeof(struct cD) - sizeof(double))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXALIGN</name></cpp:macro>  	<cpp:value>(PADDING &gt; sizeof(int) ? PADDING : sizeof(int))</cpp:value></cpp:define>


<comment type="block">/* endian options */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LITTLE</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>


<union><specifier>static</specifier> union <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>endian</name></decl>;</decl_stmt>
}</block> <decl>const <name>native</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</union>


<typedef>typedef <type><struct>struct <name>Header</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>endian</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>
}</block></struct></type> <name>Header</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>getnum</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* no number? */</comment>
    <return>return <expr><name>df</name></expr>;</return></block_content></block></if>  <comment type="block">/* return default value */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>||</operator> <name>a</name> <operator>*</operator> <literal type="number">10</literal> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>fmt</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"integral size overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>*</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    <return>return <expr><name>a</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>defaultoptions</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((h)-&gt;endian = native.endian, (h)-&gt;align = 1)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>size_t</name></type> <name>optsize</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    <case>case <expr><literal type="char">'H'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    <case>case <expr><literal type="char">'T'</literal></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case>  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    <case>case <expr><literal type="char">'x'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><call><name>getnum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'I'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>getnum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>MAXINTSIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"integral size %d is larger than limit of %d"</literal></expr></argument>,
                       <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MAXINTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>sz</name></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* other cases do not need alignment */</comment>
  </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
** return number of bytes needed to align an element of size 'size'
** at current position 'len'
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gettoalign</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>opt</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* respect max. alignment */</comment>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** options to control endianess and alignment
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>controloptions</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>,
                            <parameter><decl><type><name>Header</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
    <case>case  <expr><literal type="char">' '</literal></expr>:</case> <return>return;</return>  <comment type="block">/* ignore white spaces */</comment>
    <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <name>BIG</name></expr>;</expr_stmt> <return>return;</return>
    <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>endian</name></name> <operator>=</operator> <name>LITTLE</name></expr>;</expr_stmt> <return>return;</return>
    <case>case <expr><literal type="char">'!'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>getnum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>MAXALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isp2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"alignment %d is not a power of 2"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid format option '%c'"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>putinteger</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endian</name></decl></parameter>,
                        <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Uinttype</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>MAXINTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>Uinttype</name><operator>)</operator><operator>(</operator><name>Inttype</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>Uinttype</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>endian</name> <operator>==</operator> <name>LITTLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>correctbytes</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endian</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>endian</name> <operator>!=</operator> <name><name>native</name><operator>.</operator><name>endian</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>--</operator><name>size</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>b</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>b_pack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Header</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>totalsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>defaultoptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* mark to separate arguments from string buffer */</comment>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><operator>*</operator><name>fmt</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>optsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>toalign</name> <init>= <expr><call><name>gettoalign</name><argument_list>(<argument><expr><name>totalsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>totalsize</name> <operator>+=</operator> <name>toalign</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>toalign</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'H'</literal></expr>:</case>
      <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'I'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* integer types */</comment>
        <expr_stmt><expr><call><name>putinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>arg</name><operator>++</operator></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>endian</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'x'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>correctbytes</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>correctbytes</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"string too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add zero at the end */</comment>
          <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <expr_stmt><expr><call><name>controloptions</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>totalsize</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>lua_Number</name></type> <name>getinteger</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endian</name></decl></parameter>,
                        <parameter><decl><type><name>int</name></type> <name>issigned</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Uinttype</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>endian</name> <operator>==</operator> <name>BIG</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>l</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>l</name> <operator>|=</operator> <operator>(</operator><name>Uinttype</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>l</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>l</name> <operator>|=</operator> <operator>(</operator><name>Uinttype</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>issigned</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>l</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>  <comment type="block">/* signed format */</comment>
    <decl_stmt><decl><type><name>Uinttype</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>Uinttype</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>Uinttype</name><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>size</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* negative value? */</comment>
      <expr_stmt><expr><name>l</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* signal extension */</comment>
    <return>return <expr><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><name>Inttype</name><operator>)</operator><name>l</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>b_unpack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Header</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ld</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ld</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"offset must be 1 or greater"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt> <comment type="block">/* Lua indexes are 1-based, but here we want 0-based for C
          * pointer math. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of results */</comment>
  <expr_stmt><expr><call><name>defaultoptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><operator>*</operator><name>fmt</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>optsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>gettoalign</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name> <operator>&lt;=</operator> <name>ld</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;=</operator> <name>ld</name> <operator>-</operator> <name>size</name></expr></argument>,
                   <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"data string too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* stack space for item + next position */</comment>
    <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"too many results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'H'</literal></expr>:</case>
      <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case>  <case>case <expr><literal type="char">'I'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* integer types */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>issigned</name> <init>= <expr><call><name>islower</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>lua_Number</name></type> <name>res</name> <init>= <expr><call><name>getinteger</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>endian</name></name></expr></argument>, <argument><expr><name>issigned</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'x'</literal></expr>:</case> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>correctbytes</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>correctbytes</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>endian</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"format 'c0' needs a previous size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>size</name> <operator>&lt;=</operator> <name>ld</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;=</operator> <name>ld</name> <operator>-</operator> <name>size</name></expr></argument>,
                           <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"data string too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>ld</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"unfinished string in data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>-</operator> <operator>(</operator><name>data</name><operator>+</operator><name>pos</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <expr_stmt><expr><call><name>controloptions</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* next position */</comment>
  <return>return <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>b_size</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Header</name></type> <name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>defaultoptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><operator>*</operator><name>fmt</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>optsize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>gettoalign</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"option 's' has no fixed size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>opt</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"option 'c0' has no fixed size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>controloptions</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>luaL_Reg</name></name></type> <name><name>thislib</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"pack"</literal></expr>, <expr><name>b_pack</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"unpack"</literal></expr>, <expr><name>b_unpack</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"size"</literal></expr>, <expr><name>b_size</name></expr>}</block></expr>,
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_struct</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_struct</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_register</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>, <argument><expr><name>thislib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/******************************************************************************
* Copyright (C) 2010-2018 Lua.org, PUC-Rio.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
******************************************************************************/</comment>

</unit>
