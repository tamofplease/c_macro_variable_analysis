<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lcode.c"><comment type="block">/*
** $Id: lcode.c,v 2.25.1.5 2011/01/31 14:53:16 roberto Exp $
** Code generator for Lua
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcode_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lparser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hasjumps</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((e)-&gt;t != (e)-&gt;f)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type> <name>isnumeral</name><parameter_list>(<parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VKNUM</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>NO_JUMP</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>NO_JUMP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_nil</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name> <operator>&gt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>lasttarget</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* no jumps to current position? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* function start? */</comment>
      <if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name><name>fs</name><operator>-&gt;</operator><name>nactvar</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* positions are already clean */</comment>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name>previous</name> <operator>=</operator> <operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>previous</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_LOADNIL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pfrom</name> <init>= <expr><call><name>GETARG_A</name><argument_list>(<argument><expr><operator>*</operator><name>previous</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pto</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><operator>*</operator><name>previous</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pfrom</name> <operator>&lt;=</operator> <name>from</name> <operator>&amp;&amp;</operator> <name>from</name> <operator>&lt;=</operator> <name>pto</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* can connect both? */</comment>
          <if_stmt><if>if <condition>(<expr><name>from</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>pto</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>SETARG_B</name><argument_list>(<argument><expr><operator>*</operator><name>previous</name></expr></argument>, <argument><expr><name>from</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LOADNIL</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>from</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* else no optimization */</comment>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_jump</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>jpc</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>jpc</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* save list of jumps to here */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>jpc</name></name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>luaK_codeAsBx</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_JMP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NO_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><name>jpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep them on hold */</comment>
  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_ret</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nret</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_RETURN</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>nret</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>condjump</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaK_jump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>fixjump</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>jmp</name> <init>= <expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>dest</name><operator>-</operator><operator>(</operator><name>pc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>dest</name> <operator>!=</operator> <name>NO_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXARG_sBx</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaX_syntaxerror</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ls</name></name></expr></argument>, <argument><expr><literal type="string">"control structure too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SETARG_sBx</name><argument_list>(<argument><expr><operator>*</operator><name>jmp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** returns current `pc' and marks it as a jump target (to avoid wrong
** optimizations with consecutive instructions not in the same basic block).
*/</comment>
<function><type><name>int</name></type> <name>luaK_getlabel</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>lasttarget</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>getjump</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>NO_JUMP</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* point to itself represents end of list */</comment>
    <return>return <expr><name>NO_JUMP</name></expr>;</return></block_content></block></if>  <comment type="block">/* end of list */</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>pc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>offset</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* turn offset into absolute position */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>getjumpcontrol</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>testTMode</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>pi</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>pi</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>pi</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** check whether list has any jump that do not produce a value
** (or produce an inverted value)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>need_value</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>list</name> <operator>!=</operator> <name>NO_JUMP</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <call><name>getjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name> <init>= <expr><operator>*</operator><call><name>getjumpcontrol</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_TESTSET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>patchtestreg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><call><name>getjumpcontrol</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_TESTSET</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* cannot patch other instructions */</comment>
  <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>NO_REG</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>!=</operator> <call><name>GETARG_B</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SETARG_A</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>  <comment type="block">/* no register to put value or register already has the value */</comment>
    <expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <call><name>CREATE_ABC</name><argument_list>(<argument><expr><name>OP_TEST</name></expr></argument>, <argument><expr><call><name>GETARG_B</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GETARG_C</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>removevalues</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>list</name> <operator>!=</operator> <name>NO_JUMP</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <call><name>getjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>patchtestreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>NO_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>patchlistaux</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vtarget</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>dtarget</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>list</name> <operator>!=</operator> <name>NO_JUMP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><call><name>getjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>patchtestreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fixjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>vtarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fixjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>dtarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* jump to default target */</comment>
    <expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dischargejpc</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>patchlistaux</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>jpc</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>NO_REG</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>jpc</name></name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_patchlist</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaK_patchtohere</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>target</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>patchlistaux</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>NO_REG</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_patchtohere</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_getlabel</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>jpc</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_concat</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>l2</name> <operator>==</operator> <name>NO_JUMP</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>l1</name> <operator>==</operator> <name>NO_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <name>l2</name></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>list</name> <init>= <expr><operator>*</operator><name>l1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>getjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NO_JUMP</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* find last element */</comment>
      <expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>fixjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_checkstack</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>newstack</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newstack</name> <operator>&gt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>newstack</name> <operator>&gt;=</operator> <name>MAXSTACK</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaX_syntaxerror</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ls</name></name></expr></argument>, <argument><expr><literal type="string">"function or expression too complex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>newstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_reserveregs</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_checkstack</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freereg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISK</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&gt;=</operator> <name><name>fs</name><operator>-&gt;</operator><name>nactvar</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>reg</name> <operator>==</operator> <name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freeexp</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VNONRELOC</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>freereg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>addk</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>luaH_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oldsize</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>luaO_rawequalObj</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><call><name>cast_int</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>cast_int</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if>
  <else>else <block>{<block_content>  <comment type="block">/* constant not found; create a new entry */</comment>
    <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>nk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaM_growvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>nk</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>,
                    <argument><expr><name>MAXARG_Bx</name></expr></argument>, <argument><expr><literal type="string">"constant table overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>oldsize</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>oldsize</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name><name>fs</name><operator>-&gt;</operator><name>nk</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaC_barrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>fs</name><operator>-&gt;</operator><name>nk</name></name><operator>++</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_stringK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>o</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setsvalue</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>addk</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_numberK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>o</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>addk</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>boolK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>o</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setbvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>addk</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>nilK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* cannot use nil as key; instead use table itself to represent nil */</comment>
  <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>addk</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_setreturns</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nresults</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VCALL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* expression is an open function call? */</comment>
    <expr_stmt><expr><call><name>SETARG_C</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nresults</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VVARARG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SETARG_B</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nresults</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SETARG_A</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaK_reserveregs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_setoneret</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VCALL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* expression is an open function call? */</comment>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VNONRELOC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>GETARG_A</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VVARARG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SETARG_B</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt>  <comment type="block">/* can relocate its simple result */</comment>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_dischargevars</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VLOCAL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VNONRELOC</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VUPVAL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_GETUPVAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VGLOBAL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>luaK_codeABx</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_GETGLOBAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VINDEXED</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>freereg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>aux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freereg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_GETTABLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>aux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VVARARG</name></expr>:</case>
    <case>case <expr><name>VCALL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_setoneret</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <break>break;</break>  <comment type="block">/* there is one value available (somewhere) */</comment>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>code_label</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jump</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_getlabel</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* those instructions may be jump targets */</comment>
  <return>return <expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LOADBOOL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>discharge2reg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VNIL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_nil</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VFALSE</name></expr>:</case>  <case>case <expr><name>VTRUE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LOADBOOL</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VTRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VK</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_codeABx</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LOADK</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VKNUM</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_codeABx</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LOADK</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><call><name>luaK_numberK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VRELOCABLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SETARG_A</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VNONRELOC</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_MOVE</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VVOID</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VJMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>  <comment type="block">/* nothing to do... */</comment>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VNONRELOC</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>discharge2anyreg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <name>VNONRELOC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaK_reserveregs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>discharge2reg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>exp2reg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>discharge2reg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VJMP</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* put this jump in `t' list */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>hasjumps</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>final</name></decl>;</decl_stmt>  <comment type="block">/* position after whole expression */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>p_f</name> <init>= <expr><name>NO_JUMP</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* position of an eventual LOAD false */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>p_t</name> <init>= <expr><name>NO_JUMP</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* position of an eventual LOAD true */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>need_value</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>need_value</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>fj</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VJMP</name><operator>)</operator></expr> ?</condition><then> <expr><name>NO_JUMP</name></expr> </then><else>: <expr><call><name>luaK_jump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>p_f</name> <operator>=</operator> <call><name>code_label</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p_t</name> <operator>=</operator> <call><name>code_label</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaK_patchtohere</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>final</name> <operator>=</operator> <call><name>luaK_getlabel</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>patchlistaux</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>p_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>patchlistaux</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>p_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VNONRELOC</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_exp2nextreg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaK_reserveregs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exp2reg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_exp2anyreg</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VNONRELOC</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasjumps</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* exp is already in a register */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>&gt;=</operator> <name><name>fs</name><operator>-&gt;</operator><name>nactvar</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* reg. is not a local? */</comment>
      <expr_stmt><expr><call><name>exp2reg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* put value on it */</comment>
      <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaK_exp2nextreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* default */</comment>
  <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_exp2val</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>hasjumps</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_exp2RK</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_exp2val</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VKNUM</name></expr>:</case>
    <case>case <expr><name>VTRUE</name></expr>:</case>
    <case>case <expr><name>VFALSE</name></expr>:</case>
    <case>case <expr><name>VNIL</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nk</name></name> <operator>&lt;=</operator> <name>MAXINDEXRK</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* constant fit in RK operand? */</comment>
        <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VNIL</name><operator>)</operator></expr>  ?</condition><then> <expr><call><name>nilK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr> </then><else>:
                      <expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VKNUM</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaK_numberK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nval</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
                                        <expr><call><name>boolK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VTRUE</name><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VK</name></expr>;</expr_stmt>
        <return>return <expr><call><name>RKASK</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>VK</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>&lt;=</operator> <name>MAXINDEXRK</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* constant fit in argC? */</comment>
        <return>return <expr><call><name>RKASK</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
    </block_content>}</block>
    <default>default:</default> <break>break;</break>
  </block_content>}</block></switch>
  <comment type="block">/* not a constant in the right range: put it in a register */</comment>
  <return>return <expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_storevar</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VLOCAL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exp2reg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block>
    <case>case <expr><name>VUPVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SETUPVAL</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VGLOBAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaK_codeABx</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SETGLOBAL</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VINDEXED</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SETTABLE</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>aux</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* invalid var kind to store */</comment>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_self</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>func</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaK_reserveregs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SELF</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VNONRELOC</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>invertjump</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>getjumpcontrol</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>testTMode</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_TESTSET</name> <operator>&amp;&amp;</operator>
                                           <call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SETARG_A</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><call><name>GETARG_A</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>jumponcond</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VRELOCABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>Instruction</name></type> <name>ie</name> <init>= <expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_NOT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* remove previous OP_NOT */</comment>
      <return>return <expr><call><name>condjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_TEST</name></expr></argument>, <argument><expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>!</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* else go through */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>discharge2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>condjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_TESTSET</name></expr></argument>, <argument><expr><name>NO_REG</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_goiftrue</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>  <comment type="block">/* pc of last jump */</comment>
  <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VK</name></expr>:</case> <case>case <expr><name>VKNUM</name></expr>:</case> <case>case <expr><name>VTRUE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>  <comment type="block">/* always true; do nothing */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VJMP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>invertjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>jumponcond</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* insert last jump in `f' list */</comment>
  <expr_stmt><expr><call><name>luaK_patchtohere</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>luaK_goiffalse</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>  <comment type="block">/* pc of last jump */</comment>
  <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VNIL</name></expr>:</case> <case>case <expr><name>VFALSE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>  <comment type="block">/* always false; do nothing */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VJMP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>jumponcond</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* insert last jump in `t' list */</comment>
  <expr_stmt><expr><call><name>luaK_patchtohere</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>codenot</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VNIL</name></expr>:</case> <case>case <expr><name>VFALSE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VTRUE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VK</name></expr>:</case> <case>case <expr><name>VKNUM</name></expr>:</case> <case>case <expr><name>VTRUE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VFALSE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VJMP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>invertjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>VRELOCABLE</name></expr>:</case>
    <case>case <expr><name>VNONRELOC</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>discharge2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_NOT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* cannot happen */</comment>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <comment type="block">/* interchange true and false lists */</comment>
  <block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt> </block_content>}</block>
  <expr_stmt><expr><call><name>removevalues</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>removevalues</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_indexed</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>aux</name></name> <operator>=</operator> <call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VINDEXED</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>constfolding</name> <parameter_list>(<parameter><decl><type><name>OpCode</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnumeral</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isnumeral</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>v2</name> <operator>=</operator> <name><name>e2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nval</name></name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_ADD</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_numadd</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_SUB</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_numsub</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_MUL</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_nummul</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_DIV</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>v2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* do not attempt to divide by 0 */</comment>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_numdiv</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_MOD</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>v2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* do not attempt to divide by 0 */</comment>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_nummod</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_POW</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_numpow</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_UNM</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>luai_numunm</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OP_LEN</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* no constant folding for 'len' */</comment>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><call><name>luai_numisnan</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* do not attempt to produce NaN */</comment>
  <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nval</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>codearith</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>constfolding</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>o2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>!=</operator> <name>OP_UNM</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>OP_LEN</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>o1</name> <init>= <expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>o1</name> <operator>&gt;</operator> <name>o2</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>codecomp</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>,
                                                          <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>o1</name> <init>= <expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>o2</name> <init>= <expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>cond</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>OP_EQ</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>  <comment type="block">/* exchange args to replace by `&lt;' or `&lt;=' */</comment>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>o1</name></expr>;</expr_stmt> <expr_stmt><expr><name>o1</name> <operator>=</operator> <name>o2</name></expr>;</expr_stmt> <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>  <comment type="block">/* o1 &lt;==&gt; o2 */</comment>
    <expr_stmt><expr><name>cond</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>condjump</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VJMP</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_prefix</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>UnOpr</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>expdesc</name></type> <name>e2</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>e2</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name><name>e2</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>NO_JUMP</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e2</name><operator>.</operator><name>k</name></name> <operator>=</operator> <name>VKNUM</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e2</name><operator>.</operator><name>u</name><operator>.</operator><name>nval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OPR_MINUS</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnumeral</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* cannot operate on non-numeric constants */</comment>
      <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_UNM</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_NOT</name></expr>:</case> <expr_stmt><expr><call><name>codenot</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_LEN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_exp2anyreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* cannot operate on constants */</comment>
      <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LEN</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_infix</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>BinOpr</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OPR_AND</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_goiftrue</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_OR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_goiffalse</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_CONCAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_exp2nextreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* operand must be on the `stack' */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_ADD</name></expr>:</case> <case>case <expr><name>OPR_SUB</name></expr>:</case> <case>case <expr><name>OPR_MUL</name></expr>:</case> <case>case <expr><name>OPR_DIV</name></expr>:</case>
    <case>case <expr><name>OPR_MOD</name></expr>:</case> <case>case <expr><name>OPR_POW</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnumeral</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_exp2RK</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_posfix</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>BinOpr</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e1</name></decl></parameter>, <parameter><decl><type><name>expdesc</name> <modifier>*</modifier></type><name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OPR_AND</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>NO_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* list must be closed */</comment>
      <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e2</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>e1</name> <operator>=</operator> <operator>*</operator><name>e2</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_OR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>NO_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* list must be closed */</comment>
      <expr_stmt><expr><call><name>luaK_dischargevars</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>luaK_concat</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e2</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>e1</name> <operator>=</operator> <operator>*</operator><name>e2</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_CONCAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>luaK_exp2val</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>e2</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <name>VRELOCABLE</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_CONCAT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>==</operator> <call><name>GETARG_B</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeexp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SETARG_B</name><argument_list>(<argument><expr><call><name>getcode</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>VRELOCABLE</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>e2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><operator>.</operator><name>info</name></name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>luaK_exp2nextreg</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* operand must be on the 'stack' */</comment>
        <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_CONCAT</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>OPR_ADD</name></expr>:</case> <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_ADD</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_SUB</name></expr>:</case> <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SUB</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_MUL</name></expr>:</case> <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_MUL</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_DIV</name></expr>:</case> <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_DIV</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_MOD</name></expr>:</case> <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_MOD</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_POW</name></expr>:</case> <expr_stmt><expr><call><name>codearith</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_POW</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_EQ</name></expr>:</case> <expr_stmt><expr><call><name>codecomp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_EQ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_NE</name></expr>:</case> <expr_stmt><expr><call><name>codecomp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_EQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_LT</name></expr>:</case> <expr_stmt><expr><call><name>codecomp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_LE</name></expr>:</case> <expr_stmt><expr><call><name>codecomp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_GT</name></expr>:</case> <expr_stmt><expr><call><name>codecomp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OPR_GE</name></expr>:</case> <expr_stmt><expr><call><name>codecomp</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_LE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_fixline</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>luaK_code</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>Instruction</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dischargejpc</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* `pc' will change */</comment>
  <comment type="block">/* put new instruction in code array */</comment>
  <expr_stmt><expr><call><name>luaM_growvector</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>, <argument><expr><name>Instruction</name></expr></argument>,
                  <argument><expr><name>MAX_INT</name></expr></argument>, <argument><expr><literal type="string">"code size overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <comment type="block">/* save corresponding line information */</comment>
  <expr_stmt><expr><call><name>luaM_growvector</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>,
                  <argument><expr><name>MAX_INT</name></expr></argument>, <argument><expr><literal type="string">"code size overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
  <return>return <expr><name><name>fs</name><operator>-&gt;</operator><name>pc</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_codeABC</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>getOpMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iABC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>getBMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OpArgN</name> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>getCMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OpArgN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaK_code</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>CREATE_ABC</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ls</name><operator>-&gt;</operator><name>lastline</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaK_codeABx</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>OpCode</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>getOpMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iABx</name> <operator>||</operator> <call><name>getOpMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iAsBx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>getCMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OpArgN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaK_code</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>CREATE_ABx</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ls</name><operator>-&gt;</operator><name>lastline</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaK_setlist</name> <parameter_list>(<parameter><decl><type><name>FuncState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nelems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tostore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>=  <expr><operator>(</operator><name>nelems</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>LFIELDS_PER_FLUSH</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tostore</name> <operator>==</operator> <name>LUA_MULTRET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>tostore</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>tostore</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>MAXARG_C</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SETLIST</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>luaK_codeABC</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>OP_SETLIST</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaK_code</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>cast</name><argument_list>(<argument><expr><name>Instruction</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ls</name><operator>-&gt;</operator><name>lastline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>freereg</name></name> <operator>=</operator> <name>base</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* free registers with list values */</comment>
</block_content>}</block></function>

</unit>
