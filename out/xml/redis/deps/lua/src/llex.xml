<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/llex.c"><comment type="block">/*
** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $
** Lexical Analyzer
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llex_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lparser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>next</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ls-&gt;current = zgetc(ls-&gt;z))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>currIsNewline</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(ls-&gt;current == '\n' || ls-&gt;current == '\r')</cpp:value></cpp:define>


<comment type="block">/* ORDER RESERVED */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaX_tokens</name> <index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"and"</literal></expr>, <expr><literal type="string">"break"</literal></expr>, <expr><literal type="string">"do"</literal></expr>, <expr><literal type="string">"else"</literal></expr>, <expr><literal type="string">"elseif"</literal></expr>,
    <expr><literal type="string">"end"</literal></expr>, <expr><literal type="string">"false"</literal></expr>, <expr><literal type="string">"for"</literal></expr>, <expr><literal type="string">"function"</literal></expr>, <expr><literal type="string">"if"</literal></expr>,
    <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"local"</literal></expr>, <expr><literal type="string">"nil"</literal></expr>, <expr><literal type="string">"not"</literal></expr>, <expr><literal type="string">"or"</literal></expr>, <expr><literal type="string">"repeat"</literal></expr>,
    <expr><literal type="string">"return"</literal></expr>, <expr><literal type="string">"then"</literal></expr>, <expr><literal type="string">"true"</literal></expr>, <expr><literal type="string">"until"</literal></expr>, <expr><literal type="string">"while"</literal></expr>,
    <expr><literal type="string">".."</literal></expr>, <expr><literal type="string">"..."</literal></expr>, <expr><literal type="string">"=="</literal></expr>, <expr><literal type="string">"&gt;="</literal></expr>, <expr><literal type="string">"&lt;="</literal></expr>, <expr><literal type="string">"~="</literal></expr>,
    <expr><literal type="string">"&lt;number&gt;"</literal></expr>, <expr><literal type="string">"&lt;name&gt;"</literal></expr>, <expr><literal type="string">"&lt;string&gt;"</literal></expr>, <expr><literal type="string">"&lt;eof&gt;"</literal></expr>,
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>save_and_next</name><parameter_list>(<parameter><type><name>ls</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(save(ls, ls-&gt;current), next(ls))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>save</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Mbuffer</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>buffsize</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>buffsize</name></name> <operator>&gt;=</operator> <name>MAX_SIZET</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"lexical element too long"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>newsize</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>buffsize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaZ_resizebuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_RESERVED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>luaX_tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaS_fix</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reserved words are never collected */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>luaX_tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>TOKEN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reserved word */</comment>
  </block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSRC</name></cpp:macro>          <cpp:value>80</cpp:value></cpp:define>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaX_token2str</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>token</name> <operator>&lt;</operator> <name>FIRST_RESERVED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>token</name> <operator>==</operator> <macro><name>cast</name><argument_list>(<argument>unsigned char</argument>, <argument>token</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>iscntrl</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"char(%d)"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr> </then><else>:
                              <expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>luaX_tokens</name><index>[<expr><name>token</name><operator>-</operator><name>FIRST_RESERVED</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txtToken</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TK_NAME</name></expr>:</case>
    <case>case <expr><name>TK_STRING</name></expr>:</case>
    <case>case <expr><name>TK_NUMBER</name></expr>:</case>
      <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <return>return <expr><call><name>luaX_token2str</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_lexerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>MAXSRC</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaO_chunkid</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXSRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%d: %s"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"%s near "</literal> <name>LUA_QS</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>txtToken</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LUA_ERRSYNTAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_syntaxerror</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>TString</name> <modifier>*</modifier></type><name>luaX_newstring</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>luaH_setstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* entry for `str' */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setbvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* make sure `str' will not be collected */</comment>
    <expr_stmt><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inclinenumber</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip `\n' or `\r' */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip `\n\r' or `\r\n' */</comment>
  <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name> <operator>&gt;=</operator> <name>MAX_INT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaX_syntaxerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"chunk has too many lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_setinput</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>decpoint</name></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>=</operator> <name>TK_EOS</name></expr>;</expr_stmt>  <comment type="block">/* no look-ahead token */</comment>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>fs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lastline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaZ_resizebuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>, <argument><expr><name>LUA_MINBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* initialize buffer */</comment>
  <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* read first char */</comment>
</block_content>}</block></function>



<comment type="block">/*
** =======================================================
** LEXICAL ANALYZER
** =======================================================
*/</comment>



<function><type><specifier>static</specifier> <name>int</name></type> <name>check_next</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>buffreplace</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>trydecpoint</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* format error: try to update decimal point separator */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>lconv</name></name> <modifier>*</modifier></type><name>cv</name> <init>= <expr><call><name>localeconv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>old</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>decpoint</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>decpoint</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>cv</name></expr> ?</condition><then> <expr><name><name>cv</name><operator>-&gt;</operator><name>decimal_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>buffreplace</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>decpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* try updated decimal separator */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>luaO_str2d</name><argument_list>(<argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>seminfo</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* format error with correct decimal point: no more options */</comment>
    <expr_stmt><expr><call><name>buffreplace</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>decpoint</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* undo change (for error message) */</comment>
    <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"malformed number"</literal></expr></argument>, <argument><expr><name>TK_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* LUA_NUMBER */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_numeral</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><call><name>check_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"Ee"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* `E'? */</comment>
    <expr_stmt><expr><call><name>check_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"+-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* optional exponent sign */</comment>
  <while>while <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>buffreplace</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>decpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* follow locale for decimal point */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>luaO_str2d</name><argument_list>(<argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>seminfo</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* format error? */</comment>
    <expr_stmt><expr><call><name>trydecpoint</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* try to update decimal point separator */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_sep</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_long_string</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>cont</name><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* avoid warnings when `cont' is not used */</comment>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip 2nd `[' */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* string starts with a newline? */</comment>
    <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip it */</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EOZ</name></expr>:</case>
        <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>seminfo</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"unfinished long string"</literal></expr> </then><else>:
                                   <expr><literal type="string">"unfinished long comment"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>TK_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>  <comment type="block">/* to avoid warnings */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_COMPAT_LSTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sep</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip 2nd `[' */</comment>
          <expr_stmt><expr><name>cont</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_COMPAT_LSTR</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"nesting of [[...]] is deprecated"</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <case>case <expr><literal type="char">']'</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sep</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip 2nd `]' */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_COMPAT_LSTR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LUA_COMPAT_LSTR</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
          <expr_stmt><expr><name>cont</name><operator>--</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cont</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <goto>goto <name>endloop</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>seminfo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* avoid wasting space */</comment>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>seminfo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for> <label><name>endloop</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>seminfo</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>luaX_newstring</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>sep</name><operator>)</operator></expr></argument>,
                                     <argument><expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>sep</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_string</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>del</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>EOZ</name></expr>:</case>
        <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"unfinished string"</literal></expr></argument>, <argument><expr><name>TK_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>  <comment type="block">/* to avoid warnings */</comment>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
        <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"unfinished string"</literal></expr></argument>, <argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>  <comment type="block">/* to avoid warnings */</comment>
      <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* do not save the `\' */</comment>
        <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'f'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt> <break>break;</break>
          <case>case <expr><literal type="char">'\n'</literal></expr>:</case>  <comment type="block">/* go through */</comment>
          <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <continue>continue;</continue>
          <case>case <expr><name>EOZ</name></expr>:</case> <continue>continue;</continue>  <comment type="block">/* will raise an error next loop */</comment>
          <default>default:</default> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* handles \\, \", \', and \? */</comment>
            <else>else <block>{<block_content>  <comment type="block">/* \xxx */</comment>
              <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <do>do <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>c</name> <operator>+</operator> <operator>(</operator><name><name>ls</name><operator>-&gt;</operator><name>current</name></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name><operator>&lt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
              <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>UCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"escape sequence too large"</literal></expr></argument>, <argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <continue>continue;</continue>
          </block_content>}</block>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <default>default:</default>
        <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* skip delimiter */</comment>
  <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>luaX_newstring</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                   <argument><expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>llex</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><name>SemInfo</name> <modifier>*</modifier></type><name>seminfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>inclinenumber</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'-'</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block">/* else is a comment */</comment>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* `skip_sep' may dirty the buffer */</comment>
          <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read_long_string</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* long comment */</comment>
            <expr_stmt><expr><call><name>luaZ_resetbuffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* else short comment */</comment>
        <while>while <condition>(<expr><operator>!</operator><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>EOZ</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><call><name>skip_sep</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>read_long_string</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TK_STRING</name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>sep</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'['</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaX_lexerror</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"invalid long string delimiter"</literal></expr></argument>, <argument><expr><name>TK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'='</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'='</literal></expr>;</return></block_content></block></if>
        <else>else <block>{<block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TK_EQ</name></expr>;</return> </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'&lt;'</literal></expr>;</return></block_content></block></if>
        <else>else <block>{<block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TK_LE</name></expr>;</return> </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'&gt;'</literal></expr>;</return></block_content></block></if>
        <else>else <block>{<block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TK_GE</name></expr>;</return> </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'~'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'~'</literal></expr>;</return></block_content></block></if>
        <else>else <block>{<block_content> <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TK_NE</name></expr>;</return> </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><literal type="char">'"'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\''</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>read_string</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TK_STRING</name></expr>;</return>
      </block_content>}</block>
      <case>case <expr><literal type="char">'.'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>check_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>check_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TK_DOTS</name></expr>;</return></block_content></block></if>   <comment type="block">/* ... */</comment>
          <else>else<block type="pseudo"><block_content> <return>return <expr><name>TK_CONCAT</name></expr>;</return></block_content></block></else></if_stmt>   <comment type="block">/* .. */</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'.'</literal></expr>;</return></block_content></block></if>
        <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>read_numeral</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TK_NUMBER</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><name>EOZ</name></expr>:</case> <block>{<block_content>
        <return>return <expr><name>TK_EOS</name></expr>;</return>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>currIsNewline</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>read_numeral</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><name>seminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TK_NUMBER</name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
          <comment type="block">/* identifier or reserved word */</comment>
          <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
          <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>save_and_next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> while <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ls</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>;</do>
          <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>luaX_newstring</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>luaZ_buffer</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>luaZ_bufflen</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>reserved</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* reserved word? */</comment>
            <return>return <expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>reserved</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>FIRST_RESERVED</name></expr>;</return></block_content></block></if>
          <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>seminfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
            <return>return <expr><name>TK_NAME</name></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>c</name></expr>;</return>  <comment type="block">/* single-char tokens (+ - / ...) */</comment>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_next</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lastline</name></name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>linenumber</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>!=</operator> <name>TK_EOS</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is there a look-ahead token? */</comment>
    <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name><name>ls</name><operator>-&gt;</operator><name>lookahead</name></name></expr>;</expr_stmt>  <comment type="block">/* use this one */</comment>
    <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>=</operator> <name>TK_EOS</name></expr>;</expr_stmt>  <comment type="block">/* and discharge it */</comment>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>token</name></name> <operator>=</operator> <call><name>llex</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>seminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* read next token */</comment>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaX_lookahead</name> <parameter_list>(<parameter><decl><type><name>LexState</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>==</operator> <name>TK_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>token</name></name> <operator>=</operator> <call><name>llex</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ls</name><operator>-&gt;</operator><name>lookahead</name><operator>.</operator><name>seminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
