<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lstrlib.c"><comment type="block">/*
** $Id: lstrlib.c,v 1.132.1.5 2010/05/14 15:34:19 roberto Exp $
** Standard library for string operations and pattern-matching
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstrlib_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>


<comment type="block">/* macro to `unsign' a character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uchar</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>((unsigned char)(c))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type> <name>str_len</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ptrdiff_t</name></type> <name>posrelat</name> <parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* relative string position: negative means back from end */</comment>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>pos</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_sub</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>start</name> <init>= <expr><call><name>posrelat</name><argument_list>(<argument><expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>end</name> <init>= <expr><call><name>posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><name>start</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_reverse</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_lower</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><call><name>tolower</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_upper</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><call><name>toupper</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_rep</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_byte</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>posi</name> <init>= <expr><call><name>posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pose</name> <init>= <expr><call><name>posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>posi</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>posi</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>posi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>pose</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pose</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>posi</name> <operator>&gt;</operator> <name>pose</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* empty interval; return no values */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pose</name> <operator>-</operator>  <name>posi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>posi</name> <operator>+</operator> <name>n</name> <operator>&lt;=</operator> <name>pose</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* overflow? */</comment>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"string slice too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"string slice too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>posi</name><operator>+</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_char</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of arguments */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>luaL_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"invalid value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>writer</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>(</operator><name>luaL_Buffer</name><operator>*</operator><operator>)</operator> <name>B</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_dump</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checktype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>lua_dump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"unable to dump given function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** {======================================================
** PATTERN MATCHING
** =======================================================
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_UNFINISHED</name></cpp:macro>	<cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_POSITION</name></cpp:macro>	<cpp:value>(-2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MatchState</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_init</name></decl>;</decl_stmt>  <comment type="block">/* init of source string */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_end</name></decl>;</decl_stmt>  <comment type="block">/* end (`\0') of source string */</comment>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>  <comment type="block">/* total number of captures (finished or unfinished) */</comment>
  <struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl>;</decl_stmt>
  }</block> <decl><name><name>capture</name><index>[<expr><name>LUA_MAXCAPTURES</name></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>MatchState</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_ESC</name></cpp:macro>		<cpp:value>'%'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIALS</name></cpp:macro>	<cpp:value>"^$*+?.([%-"</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type> <name>check_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>||</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid capture index"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>capture_to_close</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>level</name><operator>--</operator></expr>;</init> <condition><expr><name>level</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>level</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid pattern capture"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classend</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>L_ESC</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"malformed pattern (ends with "</literal> <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"%%"</literal></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <do>do <block>{<block_content>  <comment type="block">/* look for a `]' */</comment>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"malformed pattern (missing "</literal> <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>L_ESC</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip escapes (e.g. `%]') */</comment>
      </block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>;</do>
      <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>match_class</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'a'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'c'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'l'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'p'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ispunct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'u'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'x'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'z'</literal></expr> :</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
    <default>default:</default> <return>return <expr><operator>(</operator><name>cl</name> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>islower</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><operator>!</operator><name>res</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>matchbracketclass</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sig</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip the `^' */</comment>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>++</operator><name>p</name> <operator>&lt;</operator> <name>ec</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L_ESC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>match_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>ec</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>!</operator><name>sig</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>singlematch</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'.'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* matches any char */</comment>
    <case>case <expr><name>L_ESC</name></expr>:</case> <return>return <expr><call><name>match_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><literal type="char">'['</literal></expr>:</case> <return>return <expr><call><name>matchbracketclass</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>  <return>return <expr><operator>(</operator><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>matchbalance</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"unbalanced pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>++</operator><name>s</name> <operator>&lt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><name>cont</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cont</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* string ends out of balance */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>max_expand</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* counts maximum expand for item */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator><operator>&lt;</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <call><name>singlematch</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <comment type="block">/* keeps trying to match with the maximum repetitions */</comment>
  <while>while <condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* else didn't match; reduce 1 repetition to try again */</comment>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>min_expand</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>res</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>s</name><operator>&lt;</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <call><name>singlematch</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* try with one more repetition */</comment>
    <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>LUA_MAXCAPTURES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"too many captures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* match failed? */</comment>
    <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo capture */</comment>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>capture_to_close</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>init</name></expr>;</expr_stmt>  <comment type="block">/* close capture */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* match failed? */</comment>
    <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>CAP_UNFINISHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo capture */</comment>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_capture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>check_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name><operator>-</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <name>len</name> <operator>&amp;&amp;</operator>
      <call><name>memcmp</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>s</name><operator>+</operator><name>len</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <label><name>init</name>:</label> <comment type="block">/* using goto's to optimize tail recursion */</comment>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'('</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* start capture */</comment>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* position capture? */</comment>
        <return>return <expr><call><name>start_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>CAP_POSITION</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>start_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>CAP_UNFINISHED</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><literal type="char">')'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* end capture */</comment>
      <return>return <expr><call><name>end_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>L_ESC</name></expr>:</case> <block>{<block_content>
      <switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* balanced string? */</comment>
          <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>matchbalance</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* else return match(ms, s, p+4); */</comment>
        </block_content>}</block>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* frontier? */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>previous</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"missing "</literal> <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call> <literal type="string">" after "</literal>
                               <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"%%f"</literal></expr></argument>)</argument_list></call> <literal type="string">" in pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>classend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* points to what is next */</comment>
          <expr_stmt><expr><name>previous</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\0'</literal></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>matchbracketclass</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <operator>!</operator><call><name>matchbracketclass</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>p</name><operator>=</operator><name>ep</name></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* else return match(ms, s, ep); */</comment>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* capture results (%0-%9)? */</comment>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>match_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* else return match(ms, s, p+2) */</comment>
          </block_content>}</block></if></if_stmt>
          <goto>goto <name>dflt</name>;</goto>  <comment type="block">/* case default */</comment>
        </block_content>}</block>
      </block_content>}</block></switch>
    </block_content>}</block>
    <case>case <expr><literal type="char">'\0'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* end of pattern */</comment>
      <return>return <expr><name>s</name></expr>;</return>  <comment type="block">/* match succeeded */</comment>
    </block_content>}</block>
    <case>case <expr><literal type="char">'$'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is the `$' the last char in pattern? */</comment>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return></block_content></block></if>  <comment type="block">/* check end of string */</comment>
      <else>else<block type="pseudo"><block_content> <goto>goto <name>dflt</name>;</goto></block_content></block></else></if_stmt>
    </block_content>}</block>
    <default>default:</default> <label><name>dflt</name>:</label> <block>{<block_content>  <comment type="block">/* it is a pattern item */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>classend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* points to what is next */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>s</name><operator>&lt;</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <call><name>singlematch</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><operator>*</operator><name>ep</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'?'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* optional */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>p</name><operator>=</operator><name>ep</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* else return match(ms, s, ep+1); */</comment>
        </block_content>}</block>
        <case>case <expr><literal type="char">'*'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* 0 or more repetitions */</comment>
          <return>return <expr><call><name>max_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="char">'+'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* 1 or more repetitions */</comment>
          <return>return <expr><operator>(</operator><ternary><condition><expr><name>m</name></expr> ?</condition><then> <expr><call><name>max_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* 0 or more repetitions (minimum) */</comment>
          <return>return <expr><call><name>min_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>=</operator><name>ep</name></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto>  <comment type="block">/* else return match(ms, s+1, ep); */</comment>
        </block_content>}</block>
      </block_content>}</block></switch>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lmemfind</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l1</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>l2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s1</name></expr>;</return></block_content></block></if>  <comment type="block">/* empty strings are everywhere */</comment>
  <if type="elseif">else if <condition>(<expr><name>l2</name> <operator>&gt;</operator> <name>l1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>  <comment type="block">/* avoids a negative `l1' */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>  <comment type="block">/* to search for a `*s2' inside `s1' */</comment>
    <expr_stmt><expr><name>l2</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* 1st char will be checked by `memchr' */</comment>
    <expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l1</name><operator>-</operator><name>l2</name></expr>;</expr_stmt>  <comment type="block">/* `s2' cannot be found after that */</comment>
    <while>while <condition>(<expr><name>l1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>init</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><operator>*</operator><name>s2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name><operator>++</operator></expr>;</expr_stmt>   <comment type="block">/* 1st char is already checked */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>s2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>init</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
      <else>else <block>{<block_content>  <comment type="block">/* correct `l1' and `s1' to try again */</comment>
        <expr_stmt><expr><name>l1</name> <operator>-=</operator> <name>init</name><operator>-</operator><name>s1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>init</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* not found */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>push_onecapture</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* ms-&gt;level == 0, too */</comment>
      <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* add whole match */</comment>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"invalid capture index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>l</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="string">"unfinished capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>CAP_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>push_captures</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlevels</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>nlevels</name></expr></argument>, <argument><expr><literal type="string">"too many captures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlevels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>nlevels</name></expr>;</return>  <comment type="block">/* number of strings pushed */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_find_aux</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>find</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>init</name> <init>= <expr><call><name>posrelat</name><argument_list>(<argument><expr><call><name>luaL_optinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>init</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>init</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>init</name><operator>)</operator> <operator>&gt;</operator> <name>l1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>init</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>l1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>find</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>  <comment type="block">/* explicit request? */</comment>
      <call><name>strpbrk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPECIALS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* or no special characters? */</comment>
    <comment type="block">/* do a plain search */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>lmemfind</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>init</name></expr></argument>, <argument><expr><name>l1</name><operator>-</operator><name>init</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s2</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s2</name><operator>-</operator><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s2</name><operator>-</operator><name>s</name><operator>+</operator><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>anchor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>p</name><operator>++</operator>, <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name><init>=<expr><name>s</name><operator>+</operator><name>init</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_init</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>=</operator> <name>s</name><operator>+</operator><name>l1</name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>find</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s1</name><operator>-</operator><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* start */</comment>
          <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* end */</comment>
          <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
          <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>s1</name><operator>++</operator> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>anchor</name></expr>)</condition>;</do>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* not found */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_find</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>str_find_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_match</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>str_find_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gmatch_aux</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ls</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_upvalueindex</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_upvalueindex</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_init</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>=</operator> <name>s</name><operator>+</operator><name>ls</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name>s</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>lua_tointeger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_upvalueindex</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr><name>src</name> <operator>&lt;=</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name></expr>;</condition>
       <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>lua_Integer</name></type> <name>newstart</name> <init>= <expr><name>e</name><operator>-</operator><name>s</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newstart</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* empty match? go at least one position */</comment>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>newstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_replace</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_upvalueindex</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gmatch</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_settop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushcclosure</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>gmatch_aux</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gfind_nodef</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"string.gfind"</literal></expr></argument>)</argument_list></call> <literal type="string">" was renamed to "</literal>
                       <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"string.gmatch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>add_s</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>news</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>L_ESC</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip ESC */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'1'</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add capture to accumulated result */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>add_value</name> <parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>add_s</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block>
    <case>case <expr><name>LUA_TFUNCTION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>push_captures</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* nil or false? */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep original text */</comment>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid replacement value (a %s)"</literal></expr></argument>, <argument><expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add result to accumulator */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_gsub</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>srcl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>tr</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_s</name> <init>= <expr><call><name>luaL_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>srcl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>anchor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>p</name><operator>++</operator>, <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tr</name> <operator>==</operator> <name>LUA_TNUMBER</name> <operator>||</operator> <name>tr</name> <operator>==</operator> <name>LUA_TSTRING</name> <operator>||</operator>
                   <name>tr</name> <operator>==</operator> <name>LUA_TFUNCTION</name> <operator>||</operator> <name>tr</name> <operator>==</operator> <name>LUA_TTABLE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
                      <argument><expr><literal type="string">"string/function/table expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_init</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>=</operator> <name>src</name><operator>+</operator><name>srcl</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>max_s</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name>e</name><operator>&gt;</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* non empty match? */</comment>
      <expr_stmt><expr><name>src</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* skip it */</comment>
    <if type="elseif">else if <condition>(<expr><name>src</name> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name><operator>-</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* number of substitutions */</comment>
  <return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* }====================================================== */</comment>


<comment type="block">/* maximum size of each formatted item (&gt; len(format('%99.99f', -1e308))) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ITEM</name></cpp:macro>	<cpp:value>512</cpp:value></cpp:define>
<comment type="block">/* valid flags in a format specification */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro>	<cpp:value>"-+ #0"</cpp:value></cpp:define>
<comment type="block">/*
** maximum size of each format specification (such as '%-099.99d')
** (+10 accounts for %99.99x plus margin of error)
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FORMAT</name></cpp:macro>	<cpp:value>(sizeof(FLAGS) + sizeof(LUA_INTFRMLEN) + 10)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addquoted</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>l</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'\0'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"\\000"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scanformat</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strfrmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>strfrmt</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>FLAGS</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* skip flags */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>strfrmt</name><operator>)</operator> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FLAGS</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid format (repeated flags)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip width */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* (2 digits at most) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip precision */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* (2 digits at most) */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid format (width or precision too long)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>form</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>strfrmt</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>strfrmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>form</name> <operator>+=</operator> <name>p</name> <operator>-</operator> <name>strfrmt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>form</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addintlen</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>spec</name> <init>= <expr><name><name>form</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>form</name> <operator>+</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_INTFRMLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>form</name><index>[<expr><name>l</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LUA_INTFRMLEN</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>form</name><index>[<expr><name>l</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LUA_INTFRMLEN</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>str_format</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sfl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strfrmt</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sfl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strfrmt_end</name> <init>= <expr><name>strfrmt</name><operator>+</operator><name>sfl</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>strfrmt</name> <operator>&lt;</operator> <name>strfrmt_end</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>strfrmt</name> <operator>!=</operator> <name>L_ESC</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>strfrmt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>++</operator><name>strfrmt</name> <operator>==</operator> <name>L_ESC</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>strfrmt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* %% */</comment>
    <else>else <block>{<block_content> <comment type="block">/* format item */</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>form</name><index>[<expr><name>MAX_FORMAT</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* to store the format (`%...') */</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>MAX_ITEM</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* to store the formatted item */</comment>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>arg</name> <operator>&gt;</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>strfrmt</name> <operator>=</operator> <call><name>scanformat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>strfrmt</name></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><operator>*</operator><name>strfrmt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'d'</literal></expr>:</case>  <case>case <expr><literal type="char">'i'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>addintlen</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>LUA_INTFRM_T</name><operator>)</operator><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'o'</literal></expr>:</case>  <case>case <expr><literal type="char">'u'</literal></expr>:</case>  <case>case <expr><literal type="char">'x'</literal></expr>:</case>  <case>case <expr><literal type="char">'X'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>addintlen</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>LUA_INTFRM_T</name><operator>)</operator><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'e'</literal></expr>:</case>  <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case>
        <case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>luaL_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>addquoted</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>  <comment type="block">/* skip the 'addsize' at the end */</comment>
        </block_content>}</block>
        <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>l</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* no precision and string is too long to be formatted;
               keep original string */</comment>
            <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>  <comment type="block">/* skip the `addsize' at the end */</comment>
          </block_content>}</block></if>
          <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>  <comment type="block">/* also treat cases `pnLlh' */</comment>
          <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"invalid option "</literal> <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"%%%c"</literal></expr></argument>)</argument_list></call> <literal type="string">" to "</literal>
                               <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>strfrmt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>strlib</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"byte"</literal></expr>, <expr><name>str_byte</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"char"</literal></expr>, <expr><name>str_char</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"dump"</literal></expr>, <expr><name>str_dump</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"find"</literal></expr>, <expr><name>str_find</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"format"</literal></expr>, <expr><name>str_format</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"gfind"</literal></expr>, <expr><name>gfind_nodef</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"gmatch"</literal></expr>, <expr><name>gmatch</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"gsub"</literal></expr>, <expr><name>str_gsub</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"len"</literal></expr>, <expr><name>str_len</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"lower"</literal></expr>, <expr><name>str_lower</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"match"</literal></expr>, <expr><name>str_match</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"rep"</literal></expr>, <expr><name>str_rep</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"reverse"</literal></expr>, <expr><name>str_reverse</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"sub"</literal></expr>, <expr><name>str_sub</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"upper"</literal></expr>, <expr><name>str_upper</name></expr>}</block></expr>,
  <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>createmetatable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* create metatable for strings */</comment>
  <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* dummy string */</comment>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* set string metatable */</comment>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop dummy string */</comment>
  <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* string library... */</comment>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ...is the __index metamethod */</comment>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* pop metatable */</comment>
</block_content>}</block></function>


<comment type="block">/*
** Open string library
*/</comment>
<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_string</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaL_register</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_STRLIBNAME</name></expr></argument>, <argument><expr><name>strlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LUA_COMPAT_GFIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>lua_getfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gmatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"gfind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>createmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
