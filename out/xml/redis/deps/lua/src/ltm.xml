<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/ltm.c"><comment type="block">/*
** $Id: ltm.c,v 2.8.1.1 2007/12/27 13:02:25 roberto Exp $
** Tag methods
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ltm_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaT_typenames</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="string">"nil"</literal></expr>, <expr><literal type="string">"boolean"</literal></expr>, <expr><literal type="string">"userdata"</literal></expr>, <expr><literal type="string">"number"</literal></expr>,
  <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"function"</literal></expr>, <expr><literal type="string">"userdata"</literal></expr>, <expr><literal type="string">"thread"</literal></expr>,
  <expr><literal type="string">"proto"</literal></expr>, <expr><literal type="string">"upval"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>luaT_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaT_eventname</name><index>[]</index></name> <init>= <expr><block>{  <comment type="block">/* ORDER TM */</comment>
    <expr><literal type="string">"__index"</literal></expr>, <expr><literal type="string">"__newindex"</literal></expr>,
    <expr><literal type="string">"__gc"</literal></expr>, <expr><literal type="string">"__mode"</literal></expr>, <expr><literal type="string">"__eq"</literal></expr>,
    <expr><literal type="string">"__add"</literal></expr>, <expr><literal type="string">"__sub"</literal></expr>, <expr><literal type="string">"__mul"</literal></expr>, <expr><literal type="string">"__div"</literal></expr>, <expr><literal type="string">"__mod"</literal></expr>,
    <expr><literal type="string">"__pow"</literal></expr>, <expr><literal type="string">"__unm"</literal></expr>, <expr><literal type="string">"__len"</literal></expr>, <expr><literal type="string">"__lt"</literal></expr>, <expr><literal type="string">"__le"</literal></expr>,
    <expr><literal type="string">"__concat"</literal></expr>, <expr><literal type="string">"__call"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TM_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>luaT_eventname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaS_fix</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* never collect these names */</comment>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** function to be used with macro "fasttm": optimized for absence of
** tag methods
*/</comment>
<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaT_gettm</name> <parameter_list>(<parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>TString</name> <modifier>*</modifier></type><name>ename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>luaH_getstr</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>ename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>event</name> <operator>&lt;=</operator> <name>TM_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* no tag method? */</comment>
    <expr_stmt><expr><name><name>events</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><literal type="number">1u</literal><operator>&lt;&lt;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* cache this fact */</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <return>return <expr><name>tm</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaT_gettmbyobj</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>uvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>mt</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>mt</name></expr> ?</condition><then> <expr><call><name>luaH_getstr</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>tmname</name><index>[<expr><name>event</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>luaO_nilobject</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
