<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lstate.c"><comment type="block">/*
** $Id: lstate.c,v 2.36.1.2 2008/01/03 15:20:39 roberto Exp $
** Global State
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstate_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>state_size</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(sizeof(x) + LUAI_EXTRASPACE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fromstate</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(cast(lu_byte *, (l)) - LUAI_EXTRASPACE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tostate</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(cast(lua_State *, cast(lu_byte *, l) + LUAI_EXTRASPACE))</cpp:value></cpp:define>


<comment type="block">/*
** Main thread combines a thread state and the global state
*/</comment>
<typedef>typedef <type><struct>struct <name>LG</name> <block>{
  <decl_stmt><decl><type><name>lua_State</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name></type> <name>g</name></decl>;</decl_stmt>
}</block></struct></type> <name>LG</name>;</typedef>
  


<function><type><specifier>static</specifier> <name>void</name></type> <name>stack_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* initialize CallInfo array */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>base_ci</name></name> <operator>=</operator> <call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>BASIC_CI_SIZE</name></expr></argument>, <argument><expr><name>CallInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>size_ci</name></name> <operator>=</operator> <name>BASIC_CI_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>end_ci</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>base_ci</name></name> <operator>+</operator> <name><name>L1</name><operator>-&gt;</operator><name>size_ci</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="block">/* initialize stack array */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>BASIC_STACK_SIZE</name> <operator>+</operator> <name>EXTRA_STACK</name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>BASIC_STACK_SIZE</name> <operator>+</operator> <name>EXTRA_STACK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stack_last</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>stack</name></name><operator>+</operator><operator>(</operator><name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>-</operator> <name>EXTRA_STACK</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="block">/* initialize first ci */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* `function' entry for this `ci' */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>LUA_MINSTACK</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>freestack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L1</name><operator>-&gt;</operator><name>base_ci</name></name></expr></argument>, <argument><expr><name><name>L1</name><operator>-&gt;</operator><name>size_ci</name></name></expr></argument>, <argument><expr><name>CallInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** open parts that may cause memory-allocation errors
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>f_luaopen</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stack_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* init stack */</comment>
  <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gt</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* table of globals */</comment>
  <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* registry */</comment>
  <expr_stmt><expr><call><name>luaS_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>MINSTRTABSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* initial size of string table */</comment>
  <expr_stmt><expr><call><name>luaT_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaX_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaS_fix</name><argument_list>(<argument><expr><call><name>luaS_newliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>MEMERRMSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCthreshold</name></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>preinit_state</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errorJmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hook</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>allowhook</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>size_ci</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>baseCcalls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>gt</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>close_state</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* close all upvalues for this thread */</comment>
  <expr_stmt><expr><call><name>luaC_freeall</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* collect all objects */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>rootgc</name></name> <operator>==</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>nuse</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strt</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>TString</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaZ_freebuffer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name>)<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>, <argument><expr><call><name>fromstate</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>state_size</name><argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>lua_State</name> <modifier>*</modifier></type><name>luaE_newthread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name> <init>= <expr><call><name>tostate</name><argument_list>(<argument><expr><call><name>luaM_malloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>state_size</name><argument_list>(<argument><expr><name>lua_State</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_link</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_TTHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>preinit_state</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stack_init</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* init stack */</comment>
  <expr_stmt><expr><call><name>setobj2n</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>gt</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gt</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* share table of globals */</comment>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>basehookcount</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>hook</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>hook</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>iswhite</name><argument_list>(<argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>L1</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaE_freethread</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* close all upvalues for this thread */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>openupval</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luai_userstatefree</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>fromstate</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>state_size</name><argument_list>(<argument><expr><name>lua_State</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_State</name> <modifier>*</modifier></type><name>lua_newstate</name> <parameter_list>(<parameter><decl><type><name>lua_Alloc</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name>ud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>state_size</name><argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>tostate</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>LG</name> <operator>*</operator><operator>)</operator><name>L</name><operator>)</operator><operator>-&gt;</operator><name>g</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>LUA_TTHREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>currentwhite</name></name> <operator>=</operator> <call><name>bit2mask</name><argument_list>(<argument><expr><name>WHITE0BIT</name></expr></argument>, <argument><expr><name>FIXEDBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>set2bits</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>marked</name></name></expr></argument>, <argument><expr><name>FIXEDBIT</name></expr></argument>, <argument><expr><name>SFIXEDBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>preinit_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>frealloc</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>ud</name></name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>mainthread</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>uvhead</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>uvhead</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>GCthreshold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* mark it as unfinished state */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>nuse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strt</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaZ_initbuffer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>panic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstate</name></name> <operator>=</operator> <name>GCSpause</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>rootgc</name></name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepstrgc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sweepgc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>rootgc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>grayagain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>weak</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>tmudata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>totalbytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LG</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcpause</name></name> <operator>=</operator> <name>LUAI_GCPAUSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcstepmul</name></name> <operator>=</operator> <name>LUAI_GCMUL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gcdept</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_TAGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><call><name>luaD_rawrunprotected</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f_luaopen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* memory allocation error: free partial state */</comment>
    <expr_stmt><expr><call><name>close_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>L</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luai_userstateopen</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>callallgcTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaC_callGCTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call GC metamethods for all udata */</comment>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_close</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mainthread</name></expr>;</expr_stmt>  <comment type="block">/* only the main thread can be closed */</comment>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* close all upvalues for this thread */</comment>
  <expr_stmt><expr><call><name>luaC_separateudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* separate udata that have GC metamethods */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* no error function during GC metamethods */</comment>
  <do>do <block>{<block_content>  <comment type="block">/* repeat until no more errors */</comment>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>baseCcalls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>luaD_rawrunprotected</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>callallgcTM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tmudata</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luai_userstateclose</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>close_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
