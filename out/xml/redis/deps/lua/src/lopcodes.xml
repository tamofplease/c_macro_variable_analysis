<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lopcodes.c"><comment type="block">/*
** $Id: lopcodes.c,v 1.37.1.1 2007/12/27 13:02:25 roberto Exp $
** See Copyright Notice in lua.h
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lopcodes_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>


<comment type="block">/* ORDER OP */</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>luaP_opnames</name><index>[<expr><name>NUM_OPCODES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><literal type="string">"MOVE"</literal></expr>,
  <expr><literal type="string">"LOADK"</literal></expr>,
  <expr><literal type="string">"LOADBOOL"</literal></expr>,
  <expr><literal type="string">"LOADNIL"</literal></expr>,
  <expr><literal type="string">"GETUPVAL"</literal></expr>,
  <expr><literal type="string">"GETGLOBAL"</literal></expr>,
  <expr><literal type="string">"GETTABLE"</literal></expr>,
  <expr><literal type="string">"SETGLOBAL"</literal></expr>,
  <expr><literal type="string">"SETUPVAL"</literal></expr>,
  <expr><literal type="string">"SETTABLE"</literal></expr>,
  <expr><literal type="string">"NEWTABLE"</literal></expr>,
  <expr><literal type="string">"SELF"</literal></expr>,
  <expr><literal type="string">"ADD"</literal></expr>,
  <expr><literal type="string">"SUB"</literal></expr>,
  <expr><literal type="string">"MUL"</literal></expr>,
  <expr><literal type="string">"DIV"</literal></expr>,
  <expr><literal type="string">"MOD"</literal></expr>,
  <expr><literal type="string">"POW"</literal></expr>,
  <expr><literal type="string">"UNM"</literal></expr>,
  <expr><literal type="string">"NOT"</literal></expr>,
  <expr><literal type="string">"LEN"</literal></expr>,
  <expr><literal type="string">"CONCAT"</literal></expr>,
  <expr><literal type="string">"JMP"</literal></expr>,
  <expr><literal type="string">"EQ"</literal></expr>,
  <expr><literal type="string">"LT"</literal></expr>,
  <expr><literal type="string">"LE"</literal></expr>,
  <expr><literal type="string">"TEST"</literal></expr>,
  <expr><literal type="string">"TESTSET"</literal></expr>,
  <expr><literal type="string">"CALL"</literal></expr>,
  <expr><literal type="string">"TAILCALL"</literal></expr>,
  <expr><literal type="string">"RETURN"</literal></expr>,
  <expr><literal type="string">"FORLOOP"</literal></expr>,
  <expr><literal type="string">"FORPREP"</literal></expr>,
  <expr><literal type="string">"TFORLOOP"</literal></expr>,
  <expr><literal type="string">"SETLIST"</literal></expr>,
  <expr><literal type="string">"CLOSE"</literal></expr>,
  <expr><literal type="string">"CLOSURE"</literal></expr>,
  <expr><literal type="string">"VARARG"</literal></expr>,
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opmode</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((t)&lt;&lt;7) | ((a)&lt;&lt;6) | ((b)&lt;&lt;4) | ((c)&lt;&lt;2) | (m))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>lu_byte</name></type> <name><name>luaP_opmodes</name><index>[<expr><name>NUM_OPCODES</name></expr>]</index></name> <init>= <expr><block>{
<comment type="block">/*       T  A    B       C     mode		   opcode	*/</comment>
  <expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr> 		<comment type="block">/* OP_MOVE */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_LOADK */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_LOADBOOL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_LOADNIL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_GETUPVAL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_GETGLOBAL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_GETTABLE */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_SETGLOBAL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_SETUPVAL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_SETTABLE */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_NEWTABLE */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_SELF */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_ADD */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_SUB */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_MUL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_DIV */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_MOD */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_POW */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_UNM */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_NOT */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_LEN */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_CONCAT */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iAsBx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_JMP */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_EQ */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_LT */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>OpArgK</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_LE */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_TEST */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_TESTSET */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_CALL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_TAILCALL */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_RETURN */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iAsBx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_FORLOOP */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgR</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iAsBx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_FORPREP */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_TFORLOOP */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_SETLIST */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABC</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_CLOSE */</comment>
 ,<expr><call><name>opmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>OpArgU</name></expr></argument>, <argument><expr><name>OpArgN</name></expr></argument>, <argument><expr><name>iABx</name></expr></argument>)</argument_list></call></expr>		<comment type="block">/* OP_CLOSURE */</comment>
 ,<macro><name>opmode</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>OpArgU</argument>, <argument>OpArgN</argument>, <argument>iABC</argument>)</argument_list></macro>		<comment type="block">/* OP_VARARG */</comment>
}</block></expr></init></decl>;</decl_stmt>

</unit>
