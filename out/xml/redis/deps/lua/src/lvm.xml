<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/lua/src/lvm.c"><comment type="block">/*
** $Id: lvm.c,v 2.63.1.5 2011/08/17 20:43:11 roberto Exp $
** Lua virtual machine
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lvm_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lvm.h"</cpp:file></cpp:include>



<comment type="block">/* limit for table tag-method chains (to avoid loops) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXTAGLOOP</name></cpp:macro>	<cpp:value>100</cpp:value></cpp:define>


<function><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>luaV_tonumber</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>num</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>obj</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>luaO_str2d</name><argument_list>(<argument><expr><call><name>svalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>n</name></expr>;</return>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaV_tostring</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnumber</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>LUAI_MAXNUMBER2STR</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_number2str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>luaS_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>traceexec</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>lu_byte</name></type> <name>mask</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>oldpc</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>LUA_MASKCOUNT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>L</name><operator>-&gt;</operator><name>hookcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaD_callhook</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_HOOKCOUNT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>LUA_MASKLINE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ci_func</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>npc</name> <init>= <expr><call><name>pcRel</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newline</name> <init>= <expr><call><name>getline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>npc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* call linehook when enter a new function, when jump back (loop),
       or when enter a new line */</comment>
    <if_stmt><if>if <condition>(<expr><name>npc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pc</name> <operator>&lt;=</operator> <name>oldpc</name> <operator>||</operator> <name>newline</name> <operator>!=</operator> <call><name>getline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>pcRel</name><argument_list>(<argument><expr><name>oldpc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaD_callhook</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_HOOKLINE</name></expr></argument>, <argument><expr><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>callTMres</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>result</name> <init>= <expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 1st argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 2nd argument */</comment>
  <expr_stmt><expr><call><name>luaD_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>callTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 1st argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 2nd argument */</comment>
  <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 3th argument */</comment>
  <expr_stmt><expr><call><name>luaD_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaV_gettable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>MAXTAGLOOP</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttistable</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* `t' is a table? */</comment>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>hvalue</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>luaH_get</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* do a primitive get */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator>  <comment type="block">/* result is no nil? */</comment>
          <operator>(</operator><name>tm</name> <operator>=</operator> <call><name>fasttm</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>, <argument><expr><name>TM_INDEX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <comment type="block">/* or no TM? */</comment>
        <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* else will try the tag method */</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name> <operator>=</operator> <call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>TM_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaG_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttisfunction</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>callTMres</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>  <comment type="block">/* else repeat with `tm' */</comment> 
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"loop in gettable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaV_settable</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>temp</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>MAXTAGLOOP</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttistable</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* `t' is a table? */</comment>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>hvalue</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>oldval</name> <init>= <expr><call><name>luaH_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* do a primitive set */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call> <operator>||</operator>  <comment type="block">/* result is no nil? */</comment>
          <operator>(</operator><name>tm</name> <operator>=</operator> <call><name>fasttm</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>, <argument><expr><name>TM_NEWINDEX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <comment type="block">/* or no TM? */</comment>
        <expr_stmt><expr><call><name>setobj2t</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaC_barriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* else will try the tag method */</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name> <operator>=</operator> <call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>TM_NEWINDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaG_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ttisfunction</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>callTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* else repeat with `tm' */</comment>
    <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* avoid pointing inside table (may rehash) */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name>temp</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"loop in settable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>call_binTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
                       <parameter><decl><type><name>StkId</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* try first operand */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* try second operand */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>callTMres</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>get_compTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt1</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>mt2</name></decl></parameter>,
                                  <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm1</name> <init>= <expr><call><name>fasttm</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>mt1</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm2</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tm1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* no metamethod */</comment>
  <if_stmt><if>if <condition>(<expr><name>mt1</name> <operator>==</operator> <name>mt2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>tm1</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* same metatables =&gt; same metamethods */</comment>
  <expr_stmt><expr><name>tm2</name> <operator>=</operator> <call><name>fasttm</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>mt2</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tm2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* no metamethod */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>luaO_rawequalObj</name><argument_list>(<argument><expr><name>tm1</name></expr></argument>, <argument><expr><name>tm2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* same metamethods? */</comment>
    <return>return <expr><name>tm1</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>call_orderTM</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
                         <parameter><decl><type><name>TMS</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm1</name> <init>= <expr><call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm2</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttisnil</name><argument_list>(<argument><expr><name>tm1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* no metamethod? */</comment>
  <expr_stmt><expr><name>tm2</name> <operator>=</operator> <call><name>luaT_gettmbyobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>luaO_rawequalObj</name><argument_list>(<argument><expr><name>tm1</name></expr></argument>, <argument><expr><name>tm2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* different metamethods? */</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>callTMres</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>tm1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>!</operator><call><name>l_isfalse</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>l_strcmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TString</name> <modifier>*</modifier></type><name>ls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TString</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ll</name> <init>= <expr><name><name>ls</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>getstr</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>lr</name> <init>= <expr><name><name>rs</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>strcoll</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>temp</name></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>  <comment type="block">/* strings are equal up to a `\0' */</comment>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* index of first `\0' in both strings */</comment>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>lr</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* r is finished? */</comment>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>==</operator> <name>ll</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <name>ll</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* l is finished? */</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* l is smaller than r (because r is not finished) */</comment>
      <comment type="block">/* both strings longer than `len'; go on comparing (after the `\0') */</comment>
      <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>l</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>ll</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt> <expr_stmt><expr><name>lr</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaV_lessthan</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ttype</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaG_ordererror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luai_numlt</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>l_strcmp</name><argument_list>(<argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>call_orderTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>TM_LT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>luaG_ordererror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lessequal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ttype</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luaG_ordererror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>luai_numle</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>l_strcmp</name><argument_list>(<argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>call_orderTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>TM_LE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* first try `le' */</comment>
    <return>return <expr><name>res</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>call_orderTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>TM_LT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* else try `lt' */</comment>
    <return>return <expr><operator>!</operator><name>res</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>luaG_ordererror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaV_equalval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttype</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ttype</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TNIL</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <return>return <expr><call><name>luai_numeq</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case> <return>return <expr><call><name>bvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>bvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* true must be 1 !! */</comment>
    <case>case <expr><name>LUA_TLIGHTUSERDATA</name></expr>:</case> <return>return <expr><call><name>pvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>pvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>uvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>uvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>get_compTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>uvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>, <argument><expr><call><name>uvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>,
                         <argument><expr><name>TM_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>  <comment type="block">/* will try TM */</comment>
    </block_content>}</block>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>hvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>hvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>get_compTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>hvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>, <argument><expr><call><name>hvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>, <argument><expr><name>TM_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>  <comment type="block">/* will try TM */</comment>
    </block_content>}</block>
    <default>default:</default> <return>return <expr><call><name>gcvalue</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>gcvalue</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>tm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* no TM? */</comment>
  <expr_stmt><expr><call><name>callTMres</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call TM */</comment>
  <return>return <expr><operator>!</operator><call><name>l_isfalse</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaV_concat</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>StkId</name></type> <name>top</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name>last</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* number of elements handled in this pass (at least 2) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>ttisstring</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ttisnumber</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>call_binTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>TM_CONCAT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>luaG_concaterror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* second op is empty? */</comment>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* result is first op (as string) */</comment>
    <else>else <block>{<block_content>
      <comment type="block">/* at least two string values; get as many as possible */</comment>
      <decl_stmt><decl><type><name>size_t</name></type> <name>tl</name> <init>= <expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <comment type="block">/* collect total length */</comment>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>total</name> <operator>&amp;&amp;</operator> <call><name>tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>MAX_SIZET</name> <operator>-</operator> <name>tl</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"string length overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>tl</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>luaZ_openspace</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>buff</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* concat all strings */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name><operator>+</operator><name>tl</name></expr></argument>, <argument><expr><call><name>svalue</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tl</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>setsvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><call><name>luaS_newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>total</name> <operator>-=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* got `n' strings to create 1 new */</comment>
    <expr_stmt><expr><name>last</name> <operator>-=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>total</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>;</do>  <comment type="block">/* repeat until only 1 result left */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Arith</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>ra</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>TMS</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>tempb</name></decl>, <decl><type ref="prev"/><name>tempc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>luaV_tonumber</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>c</name> <operator>=</operator> <call><name>luaV_tonumber</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Number</name></type> <name>nb</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>nc</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TM_ADD</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numadd</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TM_SUB</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numsub</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TM_MUL</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_nummul</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TM_DIV</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numdiv</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TM_MOD</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_nummod</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TM_POW</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numpow</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TM_UNM</name></expr>:</case> <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numunm</name><argument_list>(<argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>call_binTM</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_aritherror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<comment type="block">/*
** some macros for common tasks in `luaV_execute'
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>runtime_check</name><parameter_list>(<parameter><type><name>L</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ if (!(c)) break; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(base+GETARG_A(i))</cpp:value></cpp:define>
<comment type="block">/* to be used after possible stack reallocation */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check_exp(getBMode(GET_OPCODE(i)) == OpArgR, base+GETARG_B(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check_exp(getCMode(GET_OPCODE(i)) == OpArgR, base+GETARG_C(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RKB</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check_exp(getBMode(GET_OPCODE(i)) == OpArgK, \
	ISK(GETARG_B(i)) ? k+INDEXK(GETARG_B(i)) : base+GETARG_B(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RKC</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check_exp(getCMode(GET_OPCODE(i)) == OpArgK, \
	ISK(GETARG_C(i)) ? k+INDEXK(GETARG_C(i)) : base+GETARG_C(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KBx</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check_exp(getBMode(GET_OPCODE(i)) == OpArgK, k+GETARG_Bx(i))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dojump</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>pc</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{(pc) += (i); luai_threadyield(L);}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Protect</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ L-&gt;savedpc = pc; {x;}; base = L-&gt;base; }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arith_op</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>tm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
        TValue *rb = RKB(i); \
        TValue *rc = RKC(i); \
        if (ttisnumber(rb) &amp;&amp; ttisnumber(rc)) { \
          lua_Number nb = nvalue(rb), nc = nvalue(rc); \
          setnvalue(ra, op(nb, nc)); \
        } \
        else \
          Protect(Arith(L, ra, rb, rc, tm)); \
      }</cpp:value></cpp:define>



<function><type><name>void</name></type> <name>luaV_execute</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nexeccalls</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LClosure</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StkId</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
 <label><name>reentry</name>:</label>  <comment type="block">/* entry point */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isLua</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cl</name> <operator>=</operator> <operator>&amp;</operator><call><name>clvalue</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>l</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
  <comment type="block">/* main loop of interpreter */</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>pc</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StkId</name></type> <name>ra</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>&amp;</operator> <operator>(</operator><name>LUA_MASKLINE</name> <operator>|</operator> <name>LUA_MASKCOUNT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>--</operator><name><name>L</name><operator>-&gt;</operator><name>hookcount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>&amp;</operator> <name>LUA_MASKLINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>traceexec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>LUA_YIELD</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* did hook yield? */</comment>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* warning!! several calls may realloc the stack and invalidate `ra' */</comment>
    <expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>RA</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>base</name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>base</name> <operator>&lt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&lt;=</operator> <name><name>L</name><operator>-&gt;</operator><name>stack</name></name> <operator>+</operator> <name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>||</operator> <call><name>luaG_checkopenop</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OP_MOVE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_LOADK</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>KBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_LOADBOOL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>setbvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip next instruction (if C) */</comment>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_LOADNIL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
          <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name>rb</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>rb</name> <operator>&gt;=</operator> <name>ra</name></expr>)</condition>;</do>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_GETUPVAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setobj2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><name>b</name></expr>]</index></name><operator>-&gt;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_GETGLOBAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>TValue</name></type> <name>g</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>KBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaV_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_GETTABLE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaV_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RKC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_SETGLOBAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>TValue</name></type> <name>g</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisstring</name><argument_list>(<argument><expr><call><name>KBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaV_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><call><name>KBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_SETUPVAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><name><name>cl</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaC_barrier</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_SETTABLE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaV_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>RKB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RKC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_NEWTABLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaO_fb2int</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>luaO_fb2int</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_SELF</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>StkId</name></type> <name>rb</name> <init>= <expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaV_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><call><name>RKC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_ADD</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>arith_op</name><argument_list>(<argument><expr><name>luai_numadd</name></expr></argument>, <argument><expr><name>TM_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_SUB</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>arith_op</name><argument_list>(<argument><expr><name>luai_numsub</name></expr></argument>, <argument><expr><name>TM_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_MUL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>arith_op</name><argument_list>(<argument><expr><name>luai_nummul</name></expr></argument>, <argument><expr><name>TM_MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_DIV</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>arith_op</name><argument_list>(<argument><expr><name>luai_numdiv</name></expr></argument>, <argument><expr><name>TM_DIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_MOD</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>arith_op</name><argument_list>(<argument><expr><name>luai_nummod</name></expr></argument>, <argument><expr><name>TM_MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_POW</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>arith_op</name><argument_list>(<argument><expr><name>luai_numpow</name></expr></argument>, <argument><expr><name>TM_POW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_UNM</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ttisnumber</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>lua_Number</name></type> <name>nb</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numunm</name><argument_list>(<argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>Arith</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>TM_UNM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_NOT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>l_isfalse</name><argument_list>(<argument><expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* next assignment may change this value */</comment>
        <expr_stmt><expr><call><name>setbvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_LEN</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><call><name>luaH_getn</name><argument_list>(<argument><expr><call><name>hvalue</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>cast_num</name><argument_list>(<argument><expr><call><name>tsvalue</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <default>default:</default> <block>{<block_content>  <comment type="block">/* try metamethod */</comment>
            <macro><name>Protect</name><argument_list>(
              <argument>if (!call_binTM(L, rb, luaO_nilobject, ra, TM_LEN))
                luaG_typeerror(L, rb, <literal type="string">"get length of"</literal>);</argument>
            )</argument_list></macro>
          </block_content>}</block>
        </block_content>}</block></switch>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_CONCAT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <macro><name>Protect</name><argument_list>(<argument>luaV_concat(L, c-b+<literal type="number">1</literal>, c); luaC_checkGC(L)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>RA</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base</name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_JMP</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>dojump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_EQ</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>RKB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><call><name>RKC</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <macro><name>Protect</name><argument_list>(
          <argument>if (equalobj(L, rb, rc) == GETARG_A(i))
            dojump(L, pc, GETARG_sBx(*pc));</argument>
        )</argument_list></macro>
        <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_LT</name></expr>:</case> <block>{<block_content>
        <macro><name>Protect</name><argument_list>(
          <argument>if (luaV_lessthan(L, RKB(i), RKC(i)) == GETARG_A(i))
            dojump(L, pc, GETARG_sBx(*pc));</argument>
        )</argument_list></macro>
        <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_LE</name></expr>:</case> <block>{<block_content>
        <macro><name>Protect</name><argument_list>(
          <argument>if (lessequal(L, RKB(i), RKC(i)) == GETARG_A(i))
            dojump(L, pc, GETARG_sBx(*pc));</argument>
        )</argument_list></macro>
        <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_TEST</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>l_isfalse</name><argument_list>(<argument><expr><name>ra</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>dojump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_TESTSET</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>RB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>l_isfalse</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>dojump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_CALL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nresults</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>ra</name><operator>+</operator><name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* else previous instruction set top */</comment>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><call><name>luaD_precall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>nresults</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>PCRLUA</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>nexeccalls</name><operator>++</operator></expr>;</expr_stmt>
            <goto>goto <name>reentry</name>;</goto>  <comment type="block">/* restart luaV_execute over new Lua function */</comment>
          </block_content>}</block>
          <case>case <expr><name>PCRC</name></expr>:</case> <block>{<block_content>
            <comment type="block">/* it was a C function (`precall' called it); adjust results */</comment>
            <if_stmt><if>if <condition>(<expr><name>nresults</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block>
          <default>default:</default> <block>{<block_content>
            <return>return;</return>  <comment type="block">/* yield */</comment>
          </block_content>}</block>
        </block_content>}</block></switch>
      </block_content>}</block>
      <case>case <expr><name>OP_TAILCALL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>ra</name><operator>+</operator><name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* else previous instruction set top */</comment>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>LUA_MULTRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><call><name>luaD_precall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>LUA_MULTRET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>PCRLUA</name></expr>:</case> <block>{<block_content>
            <comment type="block">/* tail call: put new frame in place of previous one */</comment>
            <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* previous frame */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>aux</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StkId</name></type> <name>func</name> <init>= <expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StkId</name></type> <name>pfunc</name> <init>= <expr><operator>(</operator><name>ci</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>func</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* previous function index */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>func</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ci</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>base</name> <operator>-</operator> <name>pfunc</name><operator>)</operator></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>aux</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pfunc</name><operator>+</operator><name>aux</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr>;</condition> <incr><expr><name>aux</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* move frame down */</comment>
              <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name><operator>+</operator><name>aux</name></expr></argument>, <argument><expr><name>pfunc</name><operator>+</operator><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>func</name><operator>+</operator><name>aux</name></expr>;</expr_stmt>  <comment type="block">/* correct top */</comment>
            <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <call><name>clvalue</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>tailcalls</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* one more call lost */</comment>
            <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* remove new frame */</comment>
            <goto>goto <name>reentry</name>;</goto>
          </block_content>}</block>
          <case>case <expr><name>PCRC</name></expr>:</case> <block>{<block_content>  <comment type="block">/* it was a C function (`precall' called it) */</comment>
            <expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block>
          <default>default:</default> <block>{<block_content>
            <return>return;</return>  <comment type="block">/* yield */</comment>
          </block_content>}</block>
        </block_content>}</block></switch>
      </block_content>}</block>
      <case>case <expr><name>OP_RETURN</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>ra</name><operator>+</operator><name>b</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>luaD_poscall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><name>nexeccalls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* was previous function running `here'? */</comment>
          <return>return;</return></block_content></block></if>  <comment type="block">/* no: return */</comment>
        <else>else <block>{<block_content>  <comment type="block">/* yes: continue its execution */</comment>
          <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>isLua</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>ci</name></name><operator>)</operator><operator>-&gt;</operator><name>savedpc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>reentry</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block>
      <case>case <expr><name>OP_FORLOOP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>lua_Number</name></type> <name>step</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>ra</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>lua_Number</name></type> <name>idx</name> <init>= <expr><call><name>luai_numadd</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* increment index */</comment>
        <decl_stmt><decl><type><name>lua_Number</name></type> <name>limit</name> <init>= <expr><call><name>nvalue</name><argument_list>(<argument><expr><name>ra</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><ternary><condition><expr><call><name>luai_numlt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>luai_numle</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>
                                </then><else>: <expr><call><name>luai_numle</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>dojump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* jump back */</comment>
          <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* update internal index... */</comment>
          <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ...and external index */</comment>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_FORPREP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>init</name> <init>= <expr><name>ra</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>plimit</name> <init>= <expr><name>ra</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>pstep</name> <init>= <expr><name>ra</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>  <comment type="block">/* next steps may throw errors */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tonumber</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"for"</literal></expr></argument>)</argument_list></call> <literal type="string">" initial value must be a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>tonumber</name><argument_list>(<argument><expr><name>plimit</name></expr></argument>, <argument><expr><name>ra</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"for"</literal></expr></argument>)</argument_list></call> <literal type="string">" limit must be a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>tonumber</name><argument_list>(<argument><expr><name>pstep</name></expr></argument>, <argument><expr><name>ra</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"for"</literal></expr></argument>)</argument_list></call> <literal type="string">" step must be a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>luai_numsub</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>pstep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dojump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_TFORLOOP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>StkId</name></type> <name>cb</name> <init>= <expr><name>ra</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* call base */</comment>
        <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cb</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ra</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cb</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ra</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>cb</name><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>  <comment type="block">/* func. + 2 args (state and index) */</comment>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>RA</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>  <comment type="block">/* previous call may change the stack */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisnil</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* continue loop? */</comment>
          <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* save control variable */</comment>
          <expr_stmt><expr><call><name>dojump</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* jump back */</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_SETLIST</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name>ra</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>runtime_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttistable</name><argument_list>(<argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>hvalue</name><argument_list>(<argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>LFIELDS_PER_FLUSH</name><operator>)</operator> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>sizearray</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* needs more space? */</comment>
          <expr_stmt><expr><call><name>luaH_resizearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* pre-alloc it at once */</comment>
        <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>ra</name><operator>+</operator><name>n</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>setobj2t</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaH_setnum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>last</name><operator>--</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>luaC_barriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_CLOSE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>luaF_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_CLOSURE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Closure</name> <modifier>*</modifier></type><name>ncl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nup</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p</name><index>[<expr><call><name>GETARG_Bx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nup</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nups</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ncl</name> <operator>=</operator> <call><name>luaF_newLclosure</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nup</name></expr></argument>, <argument><expr><name><name>cl</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ncl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nup</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_GETUPVAL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ncl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>upvals</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>upvals</name><index>[<expr><call><name>GETARG_B</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
          <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_MOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ncl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>upvals</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>luaF_findupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>base</name> <operator>+</operator> <call><name>GETARG_B</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>setclvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name>ncl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaC_checkGC</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block>
      <case>case <expr><name>OP_VARARG</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>cast_int</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>-</operator> <name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>cl</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>numparams</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>LUA_MULTRET</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>Protect</name><argument_list>(<argument><expr><call><name>luaD_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>RA</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* previous call may change the stack */</comment>
          <expr_stmt><expr><name>b</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>ra</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>-</operator> <name>n</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if>
          <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name>ra</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <continue>continue;</continue>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>

</unit>
