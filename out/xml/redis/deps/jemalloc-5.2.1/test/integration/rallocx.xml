<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/rallocx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nsizes_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nlarge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_nsizes_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.nlextents"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_size_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib([\"%s\", %zu], ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_large_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_size_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_grow_and_shrink</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>tsz</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCYCLES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSZS</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>szs</name><index>[<expr><name>NSZS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSZ</name></cpp:macro> <cpp:value>ZU(12 * 1024 * 1024)</cpp:value></cpp:define>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>szs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NCYCLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NSZS</name> <operator>&amp;&amp;</operator> <name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>MAXSZ</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected rallocx() error for size=%zu--&gt;%zu"</literal></expr></argument>,
			    <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>szs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name><name>szs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,
			    <argument><expr><literal type="string">"Expected size to be at least: %zu"</literal></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<for>for <control>(<init><expr><name>j</name><operator>--</operator></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected rallocx() error for size=%zu--&gt;%zu"</literal></expr></argument>,
			    <argument><expr><name><name>szs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tsz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>tsz</name></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
			    <argument><expr><literal type="string">"Expected size=%zu, got size=%zu"</literal></expr></argument>, <argument><expr><name><name>szs</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXSZ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSZS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NCYCLES</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>bool</name></type>
<name>validate_fill</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><name><name>buf</name><index>[<expr><name>offset</name><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Allocation at %p (len=%zu) contains %#x "</literal>
			    <literal type="string">"rather than %#x at offset %zu"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
			    <argument><expr><name>offset</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_zero</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>psz</name></decl>, <decl><type ref="prev"/><name>qsz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>start_sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>*</operator><literal type="number">1024</literal></expr>, <expr><literal type="number">63</literal><operator>*</operator><literal type="number">1024</literal></expr>, <expr><literal type="number">4095</literal><operator>*</operator><literal type="number">1024</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_BYTE</name></cpp:macro> <cpp:value>0xaaU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>start_size</name> <init>= <expr><name><name>start_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>start_size</name></expr></argument>, <argument><expr><name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Expected zeroed memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Expected filled memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>RANGE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start_size</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>qsz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>p</name> <operator>||</operator> <name>qsz</name> <operator>!=</operator> <name>psz</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				    <argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected filled memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>qsz</name><operator>-</operator><name>psz</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><literal type="string">"Expected zeroed memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>psz</name> <operator>!=</operator> <name>qsz</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>q</name><operator>+</operator><name>psz</name><operator>)</operator></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>,
				    <argument><expr><name>qsz</name><operator>-</operator><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>qsz</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Expected filled memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILL_BYTE</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_align</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>align</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALIGN</name></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; 25)</cpp:value></cpp:define>

	<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>align</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>align</name> <operator>&lt;=</operator> <name>MAX_ALIGN</name></expr>;</condition> <incr><expr><name>align</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected rallocx() error for align=%zu"</literal></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(
		    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>q</name> <operator>&amp;</operator> <operator>(</operator><name>align</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="string">"%p inadequately aligned for align=%zu"</literal></expr></argument>,
		    <argument><expr><name>q</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX_ALIGN</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_lg_align_and_zero</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LG_ALIGN</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VALIDATE</name></cpp:macro> <cpp:value>(ZU(1) &lt;&lt; 22)</cpp:value></cpp:define>

	<expr_stmt><expr><name>lg_align</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_LG_ALIGN</name><argument_list>(<argument><expr><name>lg_align</name></expr></argument>)</argument_list></call><operator>|</operator><name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>lg_align</name><operator>++</operator></expr>;</init> <condition><expr><name>lg_align</name> <operator>&lt;=</operator> <name>MAX_LG_ALIGN</name></expr>;</condition> <incr><expr><name>lg_align</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_LG_ALIGN</name><argument_list>(<argument><expr><name>lg_align</name></expr></argument>)</argument_list></call><operator>|</operator><name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected rallocx() error for lg_align=%u"</literal></expr></argument>, <argument><expr><name>lg_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(
		    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>q</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_align</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="string">"%p inadequately aligned for lg_align=%u"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>lg_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>MAX_VALIDATE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Expected zeroed memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_VALIDATE</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Expected zeroed memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>q</name><operator>+</operator><name>sz</name><operator>-</operator><name>MAX_VALIDATE</name><operator>)</operator></expr></argument>,
			    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_VALIDATE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected zeroed memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX_VALIDATE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX_LG_ALIGN</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<comment type="block">/*
 * GCC "-Walloc-size-larger-than" warning detects when one of the memory
 * allocation functions is called with a size larger than the maximum size that
 * they support. Here we want to explicitly test that the allocation functions
 * do indeed fail properly when this is the case, which triggers the warning.
 * Therefore we disable the warning for these tests.
 */</comment>
<name>JEMALLOC_DIAGNOSTIC_PUSH</name>
<name>JEMALLOC_DIAGNOSTIC_IGNORE_ALLOC_SIZE_LARGER_THAN</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_overflow</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>largemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for rallocx(p, size=%#zx, 0)"</literal></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for rallocx(p, size=%#zx, 0)"</literal></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for rallocx(p, size=%#zx, 0)"</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for rallocx(p, size=1, MALLOCX_ALIGN(%#zx))"</literal></expr></argument>,
	    <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<comment type="block">/* Re-enable the "-Walloc-size-larger-than=" warning */</comment>
<name>JEMALLOC_DIAGNOSTIC_POP</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_grow_and_shrink</name></expr></argument>,
	    <argument><expr><name>test_zero</name></expr></argument>,
	    <argument><expr><name>test_align</name></expr></argument>,
	    <argument><expr><name>test_lg_align_and_zero</name></expr></argument>,
	    <argument><expr><name>test_overflow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
