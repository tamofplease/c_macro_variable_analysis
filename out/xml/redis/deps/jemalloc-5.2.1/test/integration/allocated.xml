<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/allocated.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>config_stats</name> <init>=
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_STATS</name></cpp:ifdef>
    <expr><name>true</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>false</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    ;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>thd_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ap0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>usize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.allocated"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_ENOENT</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"%s(): Error in mallctl(): %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
		    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ap0</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.allocatedp"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ap0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_ENOENT</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"%s(): Error in mallctl(): %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
		    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>*</operator><name>ap0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>,
	    <argument><expr><literal type="string">"\"thread.allocatedp\" should provide a pointer to internal "</literal>
	    <literal type="string">"storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>d0</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.deallocated"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_ENOENT</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"%s(): Error in mallctl(): %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
		    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dp0</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.deallocatedp"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dp0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_ENOENT</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"%s(): Error in mallctl(): %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
		    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>*</operator><name>dp0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>,
	    <argument><expr><literal type="string">"\"thread.deallocatedp\" should provide a pointer to internal "</literal>
	    <literal type="string">"storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.allocated"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ap1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.allocatedp"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ap1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>*</operator><name>ap1</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>,
	    <argument><expr><literal type="string">"Dereferenced \"thread.allocatedp\" value should equal "</literal>
	    <literal type="string">"\"thread.allocated\" value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ap0</name></expr></argument>, <argument><expr><name>ap1</name></expr></argument>,
	    <argument><expr><literal type="string">"Pointer returned by \"thread.allocatedp\" should not change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>malloc_usable_size</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_le</name><argument_list>(<argument><expr><name>a0</name> <operator>+</operator> <name>usize</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>,
	    <argument><expr><literal type="string">"Allocated memory counter should increase by at least the amount "</literal>
	    <literal type="string">"explicitly allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.deallocated"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dp1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.deallocatedp"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>*</operator><name>dp1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>,
	    <argument><expr><literal type="string">"Dereferenced \"thread.deallocatedp\" value should equal "</literal>
	    <literal type="string">"\"thread.deallocated\" value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>dp0</name></expr></argument>, <argument><expr><name>dp1</name></expr></argument>,
	    <argument><expr><literal type="string">"Pointer returned by \"thread.deallocatedp\" should not change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_u64_le</name><argument_list>(<argument><expr><name>d0</name> <operator>+</operator> <name>usize</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>,
	    <argument><expr><literal type="string">"Deallocated memory counter should increase by at least the amount "</literal>
	    <literal type="string">"explicitly deallocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
<label><name>label_ENOENT</name>:</label>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>config_stats</name></expr></argument>,
	    <argument><expr><literal type="string">"ENOENT should only be returned if stats are disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_skip</name><argument_list>(<argument><expr><literal type="string">"\"thread.allocated\" mallctl not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_main_thread</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>thd_start</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_subthread</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_t</name></type> <name>thd</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thd</name></expr></argument>, <argument><expr><name>thd_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Run tests multiple times to check for bad interactions. */</comment>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_main_thread</name></expr></argument>,
	    <argument><expr><name>test_subthread</name></expr></argument>,
	    <argument><expr><name>test_main_thread</name></expr></argument>,
	    <argument><expr><name>test_subthread</name></expr></argument>,
	    <argument><expr><name>test_main_thread</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
