<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/sdallocx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXALIGN</name></cpp:macro> <cpp:value>(((size_t)1) &lt;&lt; 22)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NITER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_basic</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sdallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_alignment_and_size</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nsz</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>, <decl><type ref="prev"/><name>alignment</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ps</name><index>[<expr><name>NITER</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>alignment</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init>
	    <condition><expr><name>alignment</name> <operator>&lt;=</operator> <name>MAXALIGN</name></expr>;</condition>
	    <incr><expr><name>alignment</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
		    <condition><expr><name>sz</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>alignment</name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</condition>
		    <incr><expr><name>sz</name> <operator>+=</operator> <operator>(</operator><name>alignment</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>LG_SIZEOF_PTR</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>|</operator>
				    <name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>|</operator>
				    <name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>nsz</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <operator>(</operator><name>MAXALIGN</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>sdallocx</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
					    <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_basic</name></expr></argument>,
	    <argument><expr><name>test_alignment_and_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
