<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/xallocx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Use a separate arena for xallocx() extension/contraction tests so that
 * internal allocation e.g. by heap profiling can't interpose allocations where
 * xallocx() would ordinarily be able to extend.
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>arena_ind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ind</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure creating arena"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ind</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_same_size</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>tsz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tsz</name> <operator>=</operator> <call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>tsz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Unexpected size change: %zu --&gt; %zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>tsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_extra_no_move</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>tsz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tsz</name> <operator>=</operator> <call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>sz</name><operator>-</operator><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>tsz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Unexpected size change: %zu --&gt; %zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>tsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_no_move_fail</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>tsz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tsz</name> <operator>=</operator> <call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>tsz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Unexpected size change: %zu --&gt; %zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>tsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>unsigned</name></type>
<name>get_nsizes_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nsmall</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_nsizes_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.nbins"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nlarge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_nsizes_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.nlextents"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_size_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib([\"%s\", %zu], ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_small_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_size_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.bin.0.size"</literal></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_large_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_size_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_size</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>small0</name></decl>, <decl><type ref="prev"/><name>largemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<comment type="block">/* Get size classes. */</comment>
	<expr_stmt><expr><name>small0</name> <operator>=</operator> <call><name>get_small_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>small0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test smallest supported size. */</comment>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>small0</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test largest supported size. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test size overflow. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_size_extra_overflow</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>small0</name></decl>, <decl><type ref="prev"/><name>largemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<comment type="block">/* Get size classes. */</comment>
	<expr_stmt><expr><name>small0</name> <operator>=</operator> <call><name>get_small_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>small0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test overflows that can be resolved by clamping extra. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test overflow such that largemax-size underflows. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIZE_T_MAX</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SIZE_T_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_extra_small</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>small0</name></decl>, <decl><type ref="prev"/><name>small1</name></decl>, <decl><type ref="prev"/><name>largemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<comment type="block">/* Get size classes. */</comment>
	<expr_stmt><expr><name>small0</name> <operator>=</operator> <call><name>get_small_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>small1</name> <operator>=</operator> <call><name>get_small_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>small0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>small1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>small0</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>small1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>small0</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>small0</name></expr></argument>, <argument><expr><name>small1</name> <operator>-</operator> <name>small0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>small0</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test size+extra overflow. */</comment>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>small0</name></expr></argument>, <argument><expr><name>largemax</name> <operator>-</operator> <name>small0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>small0</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>small0</name></expr></argument>, <argument><expr><name>SIZE_T_MAX</name> <operator>-</operator> <name>small0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>small0</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_extra_large</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><call><name>arena_ind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>smallmax</name></decl>, <decl><type ref="prev"/><name>large1</name></decl>, <decl><type ref="prev"/><name>large2</name></decl>, <decl><type ref="prev"/><name>large3</name></decl>, <decl><type ref="prev"/><name>largemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<comment type="block">/* Get size classes. */</comment>
	<expr_stmt><expr><name>smallmax</name> <operator>=</operator> <call><name>get_small_size</name><argument_list>(<argument><expr><call><name>get_nsmall</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>large1</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>large2</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>large3</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>large3</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large3</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Test size decrease with zero extra. */</comment>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large1</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>smallmax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large1</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>large3</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Test size decrease with non-zero extra. */</comment>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><name>large3</name> <operator>-</operator> <name>large1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large3</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large2</name></expr></argument>, <argument><expr><name>large3</name> <operator>-</operator> <name>large2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large3</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><name>large2</name> <operator>-</operator> <name>large1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large2</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>smallmax</name></expr></argument>, <argument><expr><name>large1</name> <operator>-</operator> <name>smallmax</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large1</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large1</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Test size increase with zero extra. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large3</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large3</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large1</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Test size increase with non-zero extra. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><name>SIZE_T_MAX</name> <operator>-</operator> <name>large1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large1</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Test size increase with non-zero extra. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large1</name></expr></argument>, <argument><expr><name>large3</name> <operator>-</operator> <name>large1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>large3</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>large3</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Test size+extra overflow. */</comment>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large3</name></expr></argument>, <argument><expr><name>largemax</name> <operator>-</operator> <name>large3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>largemax</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected xallocx() behavior"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>print_filled_extents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>range0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name>c0</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"  p=%p, c=%#x, len=%zu:"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>range0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>pc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>c0</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">" %#x[%zu..%zu)"</literal></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>range0</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>range0</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>pc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">" %#x[%zu..%zu)\n"</literal></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>range0</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>validate_fill</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>offset</name></expr><operator>,</operator> <expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset</name><operator>+</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>print_filled_extents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_zero</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>szmin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>szmax</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><call><name>arena_ind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_ZERO</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>nsz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_BYTE</name></cpp:macro> <cpp:value>0x7aU</cpp:value></cpp:define>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <name>szmax</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Memory not filled: sz=%zu"</literal></expr></argument>,
	    <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fill with non-zero so that non-debug builds are more likely to detect
	 * errors.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Memory not filled: sz=%zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Shrink in place so that we can expect growing in place to succeed. */</comment>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <name>szmin</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Memory not filled: sz=%zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <name>szmin</name></expr>;</init> <condition><expr><name>sz</name> <operator>&lt;</operator> <name>szmax</name></expr>;</condition> <incr><expr><name>sz</name> <operator>=</operator> <name>nsz</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nsz</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Memory not filled: sz=%zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>nsz</name><operator>-</operator><name>sz</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Memory not filled: sz=%zu, nsz-sz=%zu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>nsz</name><operator>-</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>+</operator> <name>sz</name><operator>)</operator></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><name>nsz</name><operator>-</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>validate_fill</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FILL_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Memory not filled: nsz=%zu"</literal></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_zero_large</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>large0</name></decl>, <decl><type ref="prev"/><name>large1</name></decl>;</decl_stmt>

	<comment type="block">/* Get size classes. */</comment>
	<expr_stmt><expr><name>large0</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>large1</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_zero</name><argument_list>(<argument><expr><name>large1</name></expr></argument>, <argument><expr><name>large0</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_same_size</name></expr></argument>,
	    <argument><expr><name>test_extra_no_move</name></expr></argument>,
	    <argument><expr><name>test_no_move_fail</name></expr></argument>,
	    <argument><expr><name>test_size</name></expr></argument>,
	    <argument><expr><name>test_size_extra_overflow</name></expr></argument>,
	    <argument><expr><name>test_extra_small</name></expr></argument>,
	    <argument><expr><name>test_extra_large</name></expr></argument>,
	    <argument><expr><name>test_zero_large</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
