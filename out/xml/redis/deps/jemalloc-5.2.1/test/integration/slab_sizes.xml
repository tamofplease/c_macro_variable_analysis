<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/slab_sizes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<comment type="block">/* Note that this test relies on the unusual slab sizes set in slab_sizes.sh. */</comment>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_slab_sizes</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nbins</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>sizemib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>slabmib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nbins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.nbins"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"nbins mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.page"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"page mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arenas.bin.0.size"</literal></expr></argument>, <argument><expr><name>sizemib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"bin size mallctlnametomib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arenas.bin.0.slab_size"</literal></expr></argument>, <argument><expr><name>slabmib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"slab size mallctlnametomib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>biggest_slab_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>bin_size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>slab_size</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sizemib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slabmib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>sizemib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bin_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
		    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bin size mallctlbymib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>slabmib</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>slab_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
		    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"slab size mallctlbymib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>bin_size</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * Then we should be as close to 17 as possible.  Since
			 * not all page sizes are valid (because of bitmap
			 * limitations on the number of items in a slab), we
			 * should at least make sure that the number of pages
			 * goes up.
			 */</comment>
			<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>slab_size</name></expr></argument>, <argument><expr><name>biggest_slab_seen</name></expr></argument>,
			    <argument><expr><literal type="string">"Slab sizes should go up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>biggest_slab_seen</name> <operator>=</operator> <name>slab_size</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(
		    <expr><operator>(</operator><literal type="number">100</literal> <operator>&lt;=</operator> <name>bin_size</name> <operator>&amp;&amp;</operator> <name>bin_size</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator>
		    <operator>||</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;</operator> <name>bin_size</name> <operator>&amp;&amp;</operator> <name>bin_size</name> <operator>&lt;=</operator> <literal type="number">200</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>slab_size</name></expr></argument>, <argument><expr><name>page</name></expr></argument>,
			    <argument><expr><literal type="string">"Forced-small slabs should be small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bin_size</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>slab_size</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>page</name></expr></argument>,
			    <argument><expr><literal type="string">"Forced-2-page slab should be 2 pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">200</literal> <operator>&lt;</operator> <name>bin_size</name> <operator>&amp;&amp;</operator> <name>bin_size</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>slab_size</name></expr></argument>, <argument><expr><name>biggest_slab_seen</name></expr></argument>,
			    <argument><expr><literal type="string">"Slab sizes should go up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>biggest_slab_seen</name> <operator>=</operator> <name>slab_size</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/*
	 * For any reasonable configuration, 17 pages should be a valid slab
	 * size for 4096-byte items.
	 */</comment>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>biggest_slab_seen</name></expr></argument>, <argument><expr><literal type="number">17</literal> <operator>*</operator> <name>page</name></expr></argument>, <argument><expr><literal type="string">"Didn't hit page target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_slab_sizes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
