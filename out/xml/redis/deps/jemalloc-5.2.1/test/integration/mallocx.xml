<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/mallocx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nsizes_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nlarge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_nsizes_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.nlextents"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_size_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib([\"%s\", %zu], ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_large_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_size_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * On systems which can't merge extents, tests that call this function generate
 * a lot of dirty memory very quickly.  Purging between cycles mitigates
 * potential OOM on e.g. 32-bit Windows.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>purge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arena.0.purge"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * GCC "-Walloc-size-larger-than" warning detects when one of the memory
 * allocation functions is called with a size larger than the maximum size that
 * they support. Here we want to explicitly test that the allocation functions
 * do indeed fail properly when this is the case, which triggers the warning.
 * Therefore we disable the warning for these tests.
 */</comment>
<function><type><name>JEMALLOC_DIAGNOSTIC_PUSH</name>
<name>JEMALLOC_DIAGNOSTIC_IGNORE_ALLOC_SIZE_LARGER_THAN</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_overflow</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>largemax</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx(size=%#zx, 0)"</literal></expr></argument>, <argument><expr><name>largemax</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx(size=%#zx, 0)"</literal></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx(size=%#zx, 0)"</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx(size=1, MALLOCX_ALIGN(%#zx))"</literal></expr></argument>,
	    <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>remote_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>large_sz</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>large_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
	    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>large_sz</name></expr></argument>, <argument><expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call>
	    <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_remote_free</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_t</name></type> <name>thd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thd</name></expr></argument>, <argument><expr><name>remote_alloc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid TCACHE_NONE to explicitly test tcache_flush(). */</comment>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.tcache.flush"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_oom</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>largemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>oom</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ptrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * It should be impossible to allocate three objects that each consume
	 * nearly half the virtual address space.
	 */</comment>
	<expr_stmt><expr><name>largemax</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oom</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ptrs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>largemax</name></expr></argument>, <argument><expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>oom</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>oom</name></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM during series of calls to mallocx(size=%zu, 0)"</literal></expr></argument>,
	    <argument><expr><name>largemax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ptrs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">0x8000000000000000ULL</literal></expr></argument>,
	    <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><literal type="number">0x8000000000000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">0x8000000000000000ULL</literal></expr></argument>,
	    <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">0x80000000UL</literal></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><literal type="number">0x80000000UL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected OOM for mallocx()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<comment type="block">/* Re-enable the "-Walloc-size-larger-than=" warning */</comment>
<name>JEMALLOC_DIAGNOSTIC_POP</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_basic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSZ</name></cpp:macro> <cpp:value>(((size_t)1) &lt;&lt; 23)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sz</name> <operator>&lt;</operator> <name>MAXSZ</name></expr>;</condition> <incr><expr><name>sz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>nsz</name></decl>, <decl><type ref="prev"/><name>rsz</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected nallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallocx(size=%zx, flags=0) error"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rsz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>rsz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"Real size smaller than expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>, <argument><expr><name>rsz</name></expr></argument>, <argument><expr><literal type="string">"nallocx()/sallocx() size mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallocx(size=%zx, flags=0) error"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected nallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MALLOCX_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallocx(size=%zx, flags=MALLOCX_ZERO) error"</literal></expr></argument>,
		    <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rsz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>, <argument><expr><name>rsz</name></expr></argument>, <argument><expr><literal type="string">"nallocx()/sallocx() rsize mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXSZ</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_alignment_and_size</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>percpu_arena</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>percpu_arena</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"opt.percpu_arena"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>percpu_arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	    <call><name>strcmp</name><argument_list>(<argument><expr><name>percpu_arena</name></expr></argument>, <argument><expr><literal type="string">"disabled"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_skip</name><argument_list>(<argument><expr><literal type="string">"test_alignment_and_size skipped: "</literal>
		    <literal type="string">"not working with percpu arena."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXALIGN</name></cpp:macro> <cpp:value>(((size_t)1) &lt;&lt; 23)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NITER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nsz</name></decl>, <decl><type ref="prev"/><name>rsz</name></decl>, <decl><type ref="prev"/><name>alignment</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ps</name><index>[<expr><name>NITER</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>alignment</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init>
	    <condition><expr><name>alignment</name> <operator>&lt;=</operator> <name>MAXALIGN</name></expr>;</condition>
	    <incr><expr><name>alignment</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
		    <condition><expr><name>sz</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>alignment</name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</condition>
		    <incr><expr><name>sz</name> <operator>+=</operator> <operator>(</operator><name>alignment</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>LG_SIZEOF_PTR</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>|</operator>
				    <name>MALLOCX_ZERO</name> <operator>|</operator> <call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				    <argument><expr><literal type="string">"nallocx() error for alignment=%zu, "</literal>
				    <literal type="string">"size=%zu (%#zx)"</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>MALLOCX_ALIGN</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>|</operator>
				    <name>MALLOCX_ZERO</name> <operator>|</operator> <call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
				    <argument><expr><literal type="string">"mallocx() error for alignment=%zu, "</literal>
				    <literal type="string">"size=%zu (%#zx)"</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rsz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>rsz</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
				    <argument><expr><literal type="string">"Real size smaller than expected for "</literal>
				    <literal type="string">"alignment=%zu, size=%zu"</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>nsz</name></expr></argument>, <argument><expr><name>rsz</name></expr></argument>,
				    <argument><expr><literal type="string">"nallocx()/sallocx() size mismatch for "</literal>
				    <literal type="string">"alignment=%zu, size=%zu"</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(
				    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>alignment</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
				    <argument><expr><literal type="string">"%p inadequately aligned for"</literal>
				    <literal type="string">" alignment=%zu, size=%zu"</literal></expr></argument>, <argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
				    <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>rsz</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <operator>(</operator><name>MAXALIGN</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXALIGN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NITER</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_overflow</name></expr></argument>,
	    <argument><expr><name>test_oom</name></expr></argument>,
	    <argument><expr><name>test_remote_free</name></expr></argument>,
	    <argument><expr><name>test_basic</name></expr></argument>,
	    <argument><expr><name>test_alignment_and_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
