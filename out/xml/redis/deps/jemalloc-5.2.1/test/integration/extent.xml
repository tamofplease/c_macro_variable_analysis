<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/extent.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/extent_hooks.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_background_thread_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"background_thread"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>enabled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>enabled</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_extent_body</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>large0</name></decl>, <decl><type ref="prev"/><name>large1</name></decl>, <decl><type ref="prev"/><name>large2</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>purge_mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>purge_miblen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>xallocx_success_a</name></decl>, <decl><type ref="prev"/><name>xallocx_success_b</name></decl>, <decl><type ref="prev"/><name>xallocx_success_c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name></expr>;</expr_stmt>

	<comment type="block">/* Get large size classes. */</comment>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>large0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected arenas.lextent.0.size failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.1.size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>large1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected arenas.lextent.1.size failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.2.size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>large2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected arenas.lextent.2.size failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test dalloc/decommit/purge cascade. */</comment>
	<expr_stmt><expr><name>purge_miblen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>purge_mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.purge"</literal></expr></argument>, <argument><expr><name>purge_mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>purge_miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>purge_mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>called_alloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_alloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>large0</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_alloc</name></expr></argument>, <argument><expr><literal type="string">"Expected alloc call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>called_dalloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>called_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>did_purge_lazy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>did_purge_forced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>called_split</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xallocx_success_a</name> <operator>=</operator> <operator>(</operator><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>large0</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>purge_mib</name></expr></argument>, <argument><expr><name>purge_miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected arena.%u.purge error"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xallocx_success_a</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_dalloc</name></expr></argument>, <argument><expr><literal type="string">"Expected dalloc call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_decommit</name></expr></argument>, <argument><expr><literal type="string">"Expected decommit call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>did_purge_lazy</name> <operator>||</operator> <name>did_purge_forced</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected purge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_split</name></expr></argument>, <argument><expr><literal type="string">"Expected split call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Test decommit/commit and observe split/merge. */</comment>
	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>large0</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>did_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>did_commit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>called_split</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>did_split</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>did_merge</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xallocx_success_b</name> <operator>=</operator> <operator>(</operator><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>large0</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>purge_mib</name></expr></argument>, <argument><expr><name>purge_miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected arena.%u.purge error"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xallocx_success_b</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>did_split</name></expr></argument>, <argument><expr><literal type="string">"Expected split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>xallocx_success_c</name> <operator>=</operator> <operator>(</operator><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large0</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>large0</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>did_split</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_b_eq</name><argument_list>(<argument><expr><name>did_decommit</name></expr></argument>, <argument><expr><name>did_commit</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected decommit/commit match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xallocx_success_b</name> <operator>&amp;&amp;</operator> <name>xallocx_success_c</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>did_merge</name></expr></argument>, <argument><expr><literal type="string">"Expected merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* Make sure non-large allocation succeeds. */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_manual_hook_auto_arena</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>narenas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name></decl>, <decl><type ref="prev"/><name>new_size</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>hooks_mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hooks_miblen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>new_hooks</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_hooks</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extent_hooks_prep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="block">/* Get number of auto arenas. */</comment>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"opt.narenas"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>narenas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>narenas</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Install custom extent hooks on arena 1 (might not be initialized). */</comment>
	<expr_stmt><expr><name>hooks_miblen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hooks_mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.extent_hooks"</literal></expr></argument>, <argument><expr><name>hooks_mib</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>hooks_miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hooks_mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_hooks</name> <operator>=</operator> <operator>&amp;</operator><name>hooks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>hooks_mib</name></expr></argument>, <argument><expr><name>hooks_miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_hooks</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>old_size</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>new_hooks</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_arena_created</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>old_hooks</name> <operator>!=</operator> <operator>&amp;</operator><name>hooks</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_b_eq</name><argument_list>(<argument><expr><name>auto_arena_created</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected auto arena 1 created only once."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>auto_arena_created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_manual_hook_body</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name></decl>, <decl><type ref="prev"/><name>new_size</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>hooks_mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hooks_miblen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>new_hooks</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_hooks</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extent_hooks_prep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Install custom extent hooks. */</comment>
	<expr_stmt><expr><name>hooks_miblen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hooks_mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.extent_hooks"</literal></expr></argument>, <argument><expr><name>hooks_mib</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>hooks_miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hooks_mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_hooks</name> <operator>=</operator> <operator>&amp;</operator><name>hooks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>hooks_mib</name></expr></argument>, <argument><expr><name>hooks_miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_hooks</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>old_size</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>new_hooks</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>extent_alloc_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>dalloc</name></name></expr></argument>, <argument><expr><name>extent_dalloc_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><name>extent_commit_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>decommit</name></name></expr></argument>, <argument><expr><name>extent_decommit_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name></expr></argument>, <argument><expr><name>extent_purge_lazy_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name></expr></argument>, <argument><expr><name>extent_purge_forced_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>split</name></name></expr></argument>, <argument><expr><name>extent_split_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>merge</name></name></expr></argument>, <argument><expr><name>extent_merge_hook</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_extent_body</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Restore extent hooks. */</comment>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>hooks_mib</name></expr></argument>, <argument><expr><name>hooks_miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_hooks</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>hooks_mib</name></expr></argument>, <argument><expr><name>hooks_miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_hooks</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>old_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>old_hooks</name></expr></argument>, <argument><expr><name>default_hooks</name></expr></argument>, <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>dalloc</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>dalloc</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>decommit</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>decommit</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>split</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>split</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>old_hooks</name><operator>-&gt;</operator><name>merge</name></name></expr></argument>, <argument><expr><name><name>default_hooks</name><operator>-&gt;</operator><name>merge</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected extent_hooks error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_extent_manual_hook</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_manual_hook_auto_arena</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_manual_hook_body</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test failure paths. */</comment>
	<expr_stmt><expr><name>try_split</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_manual_hook_body</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_merge</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_manual_hook_body</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_lazy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_forced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_manual_hook_body</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>try_split</name> <operator>=</operator> <name>try_merge</name> <operator>=</operator> <name>try_purge_lazy</name> <operator>=</operator> <name>try_purge_forced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_extent_auto_hook</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>new_hooks</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extent_hooks_prep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_hooks</name> <operator>=</operator> <operator>&amp;</operator><name>hooks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>new_hooks</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_extent_body</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_extent_manual_hook</name></expr></argument>,
	    <argument><expr><name>test_extent_auto_hook</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
