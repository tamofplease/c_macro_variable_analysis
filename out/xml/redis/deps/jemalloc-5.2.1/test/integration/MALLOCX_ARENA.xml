<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/integration/MALLOCX_ARENA.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTHREADS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>have_dss</name> <init>=
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_DSS</name></cpp:ifdef>
    <expr><name>true</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>false</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    ;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>thd_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>thread_ind</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Error in arenas.create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>thread_ind</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dss_precs</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"disabled"</literal></expr>, <expr><literal type="string">"primary"</literal></expr>, <expr><literal type="string">"secondary"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>prec_ind</name> <init>= <expr><name>thread_ind</name> <operator>%</operator>
		    <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dss_precs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dss</name> <init>= <expr><name><name>dss_precs</name><index>[<expr><name>prec_ind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>expected_err</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>have_dss</name> <operator>||</operator> <name>prec_ind</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>EFAULT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.dss"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Error in mallctlnametomib()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arena_ind</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dss</name></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected_err</name></expr></argument>,
		    <argument><expr><literal type="string">"Error in mallctlbymib()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_MALLOCX_ARENA</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_t</name></type> <name><name>thds</name><index>[<expr><name>NTHREADS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NTHREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>thd_start</name></expr></argument>,
		    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NTHREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name><name>thds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_MALLOCX_ARENA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
