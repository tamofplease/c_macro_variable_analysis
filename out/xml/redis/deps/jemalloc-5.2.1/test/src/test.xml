<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/src/test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<comment type="block">/* Test status state. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type>		<name>test_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>test_status_t</name></type>	<name><name>test_counts</name><index>[<expr><name>test_status_count</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>test_status_t</name></type>	<name>test_status</name> <init>= <expr><name>test_status_pass</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>	<name>test_name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Reentrancy testing helpers. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_REENTRANT_ALLOCS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
	<decl><name>non_reentrant</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>libc_reentrant</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>arena_new_reentrant</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>reentrancy_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>reentrancy_t</name></type> <name>reentrancy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>libc_hook_ran</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>arena_new_hook_ran</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>reentrancy_t_str</name><parameter_list>(<parameter><decl><type><name>reentrancy_t</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>non_reentrant</name></expr>:</case>
		<return>return <expr><literal type="string">"non-reentrant"</literal></expr>;</return>
	<case>case <expr><name>libc_reentrant</name></expr>:</case>
		<return>return <expr><literal type="string">"libc-reentrant"</literal></expr>;</return>
	<case>case <expr><name>arena_new_reentrant</name></expr>:</case>
		<return>return <expr><literal type="string">"arena_new-reentrant"</literal></expr>;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_hook</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hook_ran</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>hook</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>hook_ran</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>alloc_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_REENTRANT_ALLOCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alloc_size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>libc_reentrancy_hook</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_hook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>libc_hook_ran</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_hooks_libc_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arena_new_reentrancy_hook</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_hook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arena_new_hook_ran</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_hooks_arena_new_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Actual test infrastructure. */</comment>
<function><type><name>bool</name></type>
<name>test_is_reentrant</name><parameter_list>()</parameter_list> <block>{<block_content>
	<return>return <expr><name>reentrancy</name> <operator>!=</operator> <name>non_reentrant</name></expr>;</return>
</block_content>}</block></function>

<macro><name>JEMALLOC_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>test_skip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_vcprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_status</name> <operator>=</operator> <name>test_status_skip</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>JEMALLOC_FORMAT_PRINTF</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>test_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_vcprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_status</name> <operator>=</operator> <name>test_status_fail</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>test_status_string</name><parameter_list>(<parameter><decl><type><name>test_status_t</name></type> <name>test_status</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch <condition>(<expr><name>test_status</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>test_status_pass</name></expr>:</case> <return>return <expr><literal type="string">"pass"</literal></expr>;</return>
	<case>case <expr><name>test_status_skip</name></expr>:</case> <return>return <expr><literal type="string">"skip"</literal></expr>;</return>
	<case>case <expr><name>test_status_fail</name></expr>:</case> <return>return <expr><literal type="string">"fail"</literal></expr>;</return>
	<default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>p_test_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>test_count</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_status</name> <operator>=</operator> <name>test_status_pass</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>p_test_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>test_counts</name><index>[<expr><name>test_status</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"%s (%s): %s\n"</literal></expr></argument>, <argument><expr><name>test_name</name></expr></argument>, <argument><expr><call><name>reentrancy_t_str</name><argument_list>(<argument><expr><name>reentrancy</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><call><name>test_status_string</name><argument_list>(<argument><expr><name>test_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_global_slow</name><parameter_list>(<parameter><decl><type><name>test_status_t</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_UNIT_TEST</name></cpp:ifdef>
	<comment type="block">/*
	 * This check needs to peek into tsd internals, which is why it's only
	 * exposed in unit tests.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>tsd_global_slow</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"Testing increased global slow count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>test_status_fail</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>test_status_t</name></type>
<name>p_test_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>do_malloc_init</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_reentrant</name></decl></parameter>, <parameter><decl><type><name>test_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>test_status_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>do_malloc_init</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Make sure initialization occurs prior to running tests.
		 * Tests are special because they may use internal facilities
		 * prior to triggering initialization as a side effect of
		 * calling into the public API.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>nallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"Initialization error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>test_status_fail</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status_pass</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>test_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* Non-reentrant run. */</comment>
		<expr_stmt><expr><name>reentrancy</name> <operator>=</operator> <name>non_reentrant</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>test_hooks_arena_new_hook</name> <operator>=</operator> <name>test_hooks_libc_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>t</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>test_status</name> <operator>&gt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>check_global_slow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Reentrant run. */</comment>
		<if_stmt><if>if <condition>(<expr><name>do_reentrant</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>reentrancy</name> <operator>=</operator> <name>libc_reentrant</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>test_hooks_arena_new_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>test_hooks_libc_hook</name> <operator>=</operator> <operator>&amp;</operator><name>libc_reentrancy_hook</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>t</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>test_status</name> <operator>&gt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>check_global_slow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>reentrancy</name> <operator>=</operator> <name>arena_new_reentrant</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>test_hooks_libc_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>test_hooks_arena_new_hook</name> <operator>=</operator> <operator>&amp;</operator><name>arena_new_reentrancy_hook</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>t</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>test_status</name> <operator>&gt;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>check_global_slow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"--- %s: %u/%u, %s: %u/%u, %s: %u/%u ---\n"</literal></expr></argument>,
	    <argument><expr><call><name>test_status_string</name><argument_list>(<argument><expr><name>test_status_pass</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name><name>test_counts</name><index>[<expr><name>test_status_pass</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_count</name></expr></argument>,
	    <argument><expr><call><name>test_status_string</name><argument_list>(<argument><expr><name>test_status_skip</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name><name>test_counts</name><index>[<expr><name>test_status_skip</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_count</name></expr></argument>,
	    <argument><expr><call><name>test_status_string</name><argument_list>(<argument><expr><name>test_status_fail</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name><name>test_counts</name><index>[<expr><name>test_status_fail</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>test_status_t</name></type>
<name>p_test</name><parameter_list>(<parameter><decl><type><name>test_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>test_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status_pass</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>p_test_impl</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>test_status_t</name></type>
<name>p_test_no_reentrancy</name><parameter_list>(<parameter><decl><type><name>test_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>test_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status_pass</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>p_test_impl</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>test_status_t</name></type>
<name>p_test_no_malloc_init</name><parameter_list>(<parameter><decl><type><name>test_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>test_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>test_status_pass</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * We also omit reentrancy from bootstrapping tests, since we don't
	 * (yet) care about general reentrancy during bootstrapping.
	 */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>p_test_impl</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>p_test_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_cprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_status</name> <operator>=</operator> <name>test_status_fail</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
