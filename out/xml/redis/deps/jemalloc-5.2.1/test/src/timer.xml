<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/src/timer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>timer_start</name><parameter_list>(<parameter><decl><type><name>timedelta_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>timer_stop</name><parameter_list>(<parameter><decl><type><name>timedelta_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>timer_usec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>timedelta_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>delta</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_subtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timer</name><operator>-&gt;</operator><name>t0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>nstime_ns</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>timer_ratio</name><parameter_list>(<parameter><decl><type><name>timedelta_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>timedelta_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name> <init>= <expr><call><name>timer_usec</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t1</name> <init>= <expr><call><name>timer_usec</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>mult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/* Whole. */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buflen</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>FMTu64</name></expr></argument>, <argument><expr><name>t0</name> <operator>/</operator> <name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mult</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Decimal. */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buflen</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

	<comment type="block">/* Fraction. */</comment>
	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buflen</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>round</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name>buflen</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>*</operator> <name>mult</name> <operator>*</operator> <literal type="number">10</literal> <operator>/</operator> <name>t1</name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal>
		    <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>malloc_snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buflen</name><operator>-</operator><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"%"</literal><name>FMTu64</name></expr></argument>, <argument><expr><operator>(</operator><name>t0</name> <operator>*</operator> <name>mult</name> <operator>/</operator> <name>t1</name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <name>round</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mult</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
