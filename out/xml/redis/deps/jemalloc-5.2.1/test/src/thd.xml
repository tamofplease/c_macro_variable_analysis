<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/src/thd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>thd_create</name><parameter_list>(<parameter><decl><type><name>thd_t</name> <modifier>*</modifier></type><name>thd</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>LPTHREAD_START_ROUTINE</name></type> <name>routine</name> <init>= <expr><operator>(</operator><name>LPTHREAD_START_ROUTINE</name><operator>)</operator><name>proc</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>thd</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>routine</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>thd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Error in CreateThread()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>thd_join</name><parameter_list>(<parameter><decl><type><name>thd_t</name></type> <name>thd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>&amp;&amp;</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>exit_code</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>GetExitCodeThread</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><operator>(</operator><name>LPDWORD</name><operator>)</operator> <operator>&amp;</operator><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>exit_code</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type>
<name>thd_create</name><parameter_list>(<parameter><decl><type><name>thd_t</name> <modifier>*</modifier></type><name>thd</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Error in pthread_create()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>thd_join</name><parameter_list>(<parameter><decl><type><name>thd_t</name></type> <name>thd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
