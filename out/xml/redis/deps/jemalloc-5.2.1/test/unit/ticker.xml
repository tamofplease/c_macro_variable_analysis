<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/ticker.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ticker.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ticker_tick</argument>)</argument_list></macro> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NREPS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTICKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>ticker_t</name></type> <name>ticker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ticker_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NREPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NTICKS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name> <operator>-</operator> <name>j</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ticker value (i=%d, j=%d)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ticker_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ticker fire (i=%d, j=%d)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Expected ticker depletion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ticker_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Expected ticker fire (i=%d)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected ticker reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NTICKS</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_ticker_ticks</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTICKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>ticker_t</name></type> <name>ticker</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ticker_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker fire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected ticker fire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>, <argument><expr><name>NTICKS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected ticker fire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ticker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NTICKS</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_ticker_copy</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTICKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>ticker_t</name></type> <name>ta</name></decl>, <decl><type ref="prev"/><name>tb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ticker_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ticker_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><name>NTICKS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected ticker fire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ticker_tick</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ticker_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ticker_ticks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected ticker fire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>ticker_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NTICKS</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ticker value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NTICKS</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_ticker_tick</name></expr></argument>,
	    <argument><expr><name>test_ticker_ticks</name></expr></argument>,
	    <argument><expr><name>test_ticker_copy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
