<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/math.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REL_ERR</name></cpp:macro> <cpp:value>1.0e-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ABS_ERR</name></cpp:macro> <cpp:value>1.0e-9</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__PGI</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INFINITY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INFINITY</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFINITY</name></cpp:macro> <cpp:value>(DBL_MAX + DBL_MAX)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>double_eq_rel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max_rel_err</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max_abs_err</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>rel_err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>max_abs_err</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>rel_err</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator><operator>/</operator><name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator><operator>/</operator><name>a</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>rel_err</name> <operator>&lt;</operator> <name>max_rel_err</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>factorial</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>*=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ln_gamma_factorial</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

	<comment type="block">/* exp(ln_gamma(x)) == (x-1)! for integer x. */</comment>
	<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>double_eq_rel</name><argument_list>(<argument><expr><call><name>exp</name><argument_list>(<argument><expr><call><name>ln_gamma</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>factorial</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_REL_ERR</name></expr></argument>, <argument><expr><name>MAX_ABS_ERR</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Incorrect factorial result for x=%u"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<decl_stmt><decl><type><name>TEST_END</name>

<comment type="block">/* Expected ln_gamma([0.0..100.0] increment=0.25). */</comment>
<specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>ln_gamma_misc_expected</name><index>[]</index></name> <init>= <expr><block>{
	<expr><name>INFINITY</name></expr>,
	<expr><literal type="number">1.28802252469807743</literal></expr>, <expr><literal type="number">0.57236494292470008</literal></expr>, <expr><literal type="number">0.20328095143129538</literal></expr>,
	<expr><literal type="number">0.00000000000000000</literal></expr>, <expr><operator>-</operator><literal type="number">0.09827183642181320</literal></expr>, <expr><operator>-</operator><literal type="number">0.12078223763524518</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.08440112102048555</literal></expr>, <expr><literal type="number">0.00000000000000000</literal></expr>, <expr><literal type="number">0.12487171489239651</literal></expr>,
	<expr><literal type="number">0.28468287047291918</literal></expr>, <expr><literal type="number">0.47521466691493719</literal></expr>, <expr><literal type="number">0.69314718055994529</literal></expr>,
	<expr><literal type="number">0.93580193110872523</literal></expr>, <expr><literal type="number">1.20097360234707429</literal></expr>, <expr><literal type="number">1.48681557859341718</literal></expr>,
	<expr><literal type="number">1.79175946922805496</literal></expr>, <expr><literal type="number">2.11445692745037128</literal></expr>, <expr><literal type="number">2.45373657084244234</literal></expr>,
	<expr><literal type="number">2.80857141857573644</literal></expr>, <expr><literal type="number">3.17805383034794575</literal></expr>, <expr><literal type="number">3.56137591038669710</literal></expr>,
	<expr><literal type="number">3.95781396761871651</literal></expr>, <expr><literal type="number">4.36671603662228680</literal></expr>, <expr><literal type="number">4.78749174278204581</literal></expr>,
	<expr><literal type="number">5.21960398699022932</literal></expr>, <expr><literal type="number">5.66256205985714178</literal></expr>, <expr><literal type="number">6.11591589143154568</literal></expr>,
	<expr><literal type="number">6.57925121201010121</literal></expr>, <expr><literal type="number">7.05218545073853953</literal></expr>, <expr><literal type="number">7.53436423675873268</literal></expr>,
	<expr><literal type="number">8.02545839631598312</literal></expr>, <expr><literal type="number">8.52516136106541467</literal></expr>, <expr><literal type="number">9.03318691960512332</literal></expr>,
	<expr><literal type="number">9.54926725730099690</literal></expr>, <expr><literal type="number">10.07315123968123949</literal></expr>, <expr><literal type="number">10.60460290274525086</literal></expr>,
	<expr><literal type="number">11.14340011995171231</literal></expr>, <expr><literal type="number">11.68933342079726856</literal></expr>, <expr><literal type="number">12.24220494005076176</literal></expr>,
	<expr><literal type="number">12.80182748008146909</literal></expr>, <expr><literal type="number">13.36802367147604720</literal></expr>, <expr><literal type="number">13.94062521940376342</literal></expr>,
	<expr><literal type="number">14.51947222506051816</literal></expr>, <expr><literal type="number">15.10441257307551943</literal></expr>, <expr><literal type="number">15.69530137706046524</literal></expr>,
	<expr><literal type="number">16.29200047656724237</literal></expr>, <expr><literal type="number">16.89437797963419285</literal></expr>, <expr><literal type="number">17.50230784587389010</literal></expr>,
	<expr><literal type="number">18.11566950571089407</literal></expr>, <expr><literal type="number">18.73434751193644843</literal></expr>, <expr><literal type="number">19.35823122022435427</literal></expr>,
	<expr><literal type="number">19.98721449566188468</literal></expr>, <expr><literal type="number">20.62119544270163018</literal></expr>, <expr><literal type="number">21.26007615624470048</literal></expr>,
	<expr><literal type="number">21.90376249182879320</literal></expr>, <expr><literal type="number">22.55216385312342098</literal></expr>, <expr><literal type="number">23.20519299513386002</literal></expr>,
	<expr><literal type="number">23.86276584168908954</literal></expr>, <expr><literal type="number">24.52480131594137802</literal></expr>, <expr><literal type="number">25.19122118273868338</literal></expr>,
	<expr><literal type="number">25.86194990184851861</literal></expr>, <expr><literal type="number">26.53691449111561340</literal></expr>, <expr><literal type="number">27.21604439872720604</literal></expr>,
	<expr><literal type="number">27.89927138384089389</literal></expr>, <expr><literal type="number">28.58652940490193828</literal></expr>, <expr><literal type="number">29.27775451504081516</literal></expr>,
	<expr><literal type="number">29.97288476399884871</literal></expr>, <expr><literal type="number">30.67186010608067548</literal></expr>, <expr><literal type="number">31.37462231367769050</literal></expr>,
	<expr><literal type="number">32.08111489594735843</literal></expr>, <expr><literal type="number">32.79128302226991565</literal></expr>, <expr><literal type="number">33.50507345013689076</literal></expr>,
	<expr><literal type="number">34.22243445715505317</literal></expr>, <expr><literal type="number">34.94331577687681545</literal></expr>, <expr><literal type="number">35.66766853819134298</literal></expr>,
	<expr><literal type="number">36.39544520803305261</literal></expr>, <expr><literal type="number">37.12659953718355865</literal></expr>, <expr><literal type="number">37.86108650896109395</literal></expr>,
	<expr><literal type="number">38.59886229060776230</literal></expr>, <expr><literal type="number">39.33988418719949465</literal></expr>, <expr><literal type="number">40.08411059791735198</literal></expr>,
	<expr><literal type="number">40.83150097453079752</literal></expr>, <expr><literal type="number">41.58201578195490100</literal></expr>, <expr><literal type="number">42.33561646075348506</literal></expr>,
	<expr><literal type="number">43.09226539146988699</literal></expr>, <expr><literal type="number">43.85192586067515208</literal></expr>, <expr><literal type="number">44.61456202863158893</literal></expr>,
	<expr><literal type="number">45.38013889847690052</literal></expr>, <expr><literal type="number">46.14862228684032885</literal></expr>, <expr><literal type="number">46.91997879580877395</literal></expr>,
	<expr><literal type="number">47.69417578616628361</literal></expr>, <expr><literal type="number">48.47118135183522014</literal></expr>, <expr><literal type="number">49.25096429545256882</literal></expr>,
	<expr><literal type="number">50.03349410501914463</literal></expr>, <expr><literal type="number">50.81874093156324790</literal></expr>, <expr><literal type="number">51.60667556776436982</literal></expr>,
	<expr><literal type="number">52.39726942748592364</literal></expr>, <expr><literal type="number">53.19049452616926743</literal></expr>, <expr><literal type="number">53.98632346204390586</literal></expr>,
	<expr><literal type="number">54.78472939811231157</literal></expr>, <expr><literal type="number">55.58568604486942633</literal></expr>, <expr><literal type="number">56.38916764371992940</literal></expr>,
	<expr><literal type="number">57.19514895105859864</literal></expr>, <expr><literal type="number">58.00360522298051080</literal></expr>, <expr><literal type="number">58.81451220059079787</literal></expr>,
	<expr><literal type="number">59.62784609588432261</literal></expr>, <expr><literal type="number">60.44358357816834371</literal></expr>, <expr><literal type="number">61.26170176100199427</literal></expr>,
	<expr><literal type="number">62.08217818962842927</literal></expr>, <expr><literal type="number">62.90499082887649962</literal></expr>, <expr><literal type="number">63.73011805151035958</literal></expr>,
	<expr><literal type="number">64.55753862700632340</literal></expr>, <expr><literal type="number">65.38723171073768015</literal></expr>, <expr><literal type="number">66.21917683354901385</literal></expr>,
	<expr><literal type="number">67.05335389170279825</literal></expr>, <expr><literal type="number">67.88974313718154008</literal></expr>, <expr><literal type="number">68.72832516833013017</literal></expr>,
	<expr><literal type="number">69.56908092082363737</literal></expr>, <expr><literal type="number">70.41199165894616385</literal></expr>, <expr><literal type="number">71.25703896716800045</literal></expr>,
	<expr><literal type="number">72.10420474200799390</literal></expr>, <expr><literal type="number">72.95347118416940191</literal></expr>, <expr><literal type="number">73.80482079093779646</literal></expr>,
	<expr><literal type="number">74.65823634883015814</literal></expr>, <expr><literal type="number">75.51370092648485866</literal></expr>, <expr><literal type="number">76.37119786778275454</literal></expr>,
	<expr><literal type="number">77.23071078519033961</literal></expr>, <expr><literal type="number">78.09222355331530707</literal></expr>, <expr><literal type="number">78.95572030266725960</literal></expr>,
	<expr><literal type="number">79.82118541361435859</literal></expr>, <expr><literal type="number">80.68860351052903468</literal></expr>, <expr><literal type="number">81.55795945611502873</literal></expr>,
	<expr><literal type="number">82.42923834590904164</literal></expr>, <expr><literal type="number">83.30242550295004378</literal></expr>, <expr><literal type="number">84.17750647261028973</literal></expr>,
	<expr><literal type="number">85.05446701758152983</literal></expr>, <expr><literal type="number">85.93329311301090456</literal></expr>, <expr><literal type="number">86.81397094178107920</literal></expr>,
	<expr><literal type="number">87.69648688992882057</literal></expr>, <expr><literal type="number">88.58082754219766741</literal></expr>, <expr><literal type="number">89.46697967771913795</literal></expr>,
	<expr><literal type="number">90.35493026581838194</literal></expr>, <expr><literal type="number">91.24466646193963015</literal></expr>, <expr><literal type="number">92.13617560368709292</literal></expr>,
	<expr><literal type="number">93.02944520697742803</literal></expr>, <expr><literal type="number">93.92446296229978486</literal></expr>, <expr><literal type="number">94.82121673107967297</literal></expr>,
	<expr><literal type="number">95.71969454214321615</literal></expr>, <expr><literal type="number">96.61988458827809723</literal></expr>, <expr><literal type="number">97.52177522288820910</literal></expr>,
	<expr><literal type="number">98.42535495673848800</literal></expr>, <expr><literal type="number">99.33061245478741341</literal></expr>, <expr><literal type="number">100.23753653310367895</literal></expr>,
	<expr><literal type="number">101.14611615586458981</literal></expr>, <expr><literal type="number">102.05634043243354370</literal></expr>, <expr><literal type="number">102.96819861451382394</literal></expr>,
	<expr><literal type="number">103.88168009337621811</literal></expr>, <expr><literal type="number">104.79677439715833032</literal></expr>, <expr><literal type="number">105.71347118823287303</literal></expr>,
	<expr><literal type="number">106.63176026064346047</literal></expr>, <expr><literal type="number">107.55163153760463501</literal></expr>, <expr><literal type="number">108.47307506906540198</literal></expr>,
	<expr><literal type="number">109.39608102933323153</literal></expr>, <expr><literal type="number">110.32063971475740516</literal></expr>, <expr><literal type="number">111.24674154146920557</literal></expr>,
	<expr><literal type="number">112.17437704317786995</literal></expr>, <expr><literal type="number">113.10353686902013237</literal></expr>, <expr><literal type="number">114.03421178146170689</literal></expr>,
	<expr><literal type="number">114.96639265424990128</literal></expr>, <expr><literal type="number">115.90007047041454769</literal></expr>, <expr><literal type="number">116.83523632031698014</literal></expr>,
	<expr><literal type="number">117.77188139974506953</literal></expr>, <expr><literal type="number">118.70999700805310795</literal></expr>, <expr><literal type="number">119.64957454634490830</literal></expr>,
	<expr><literal type="number">120.59060551569974962</literal></expr>, <expr><literal type="number">121.53308151543865279</literal></expr>, <expr><literal type="number">122.47699424143097247</literal></expr>,
	<expr><literal type="number">123.42233548443955726</literal></expr>, <expr><literal type="number">124.36909712850338394</literal></expr>, <expr><literal type="number">125.31727114935689826</literal></expr>,
	<expr><literal type="number">126.26684961288492559</literal></expr>, <expr><literal type="number">127.21782467361175861</literal></expr>, <expr><literal type="number">128.17018857322420899</literal></expr>,
	<expr><literal type="number">129.12393363912724453</literal></expr>, <expr><literal type="number">130.07905228303084755</literal></expr>, <expr><literal type="number">131.03553699956862033</literal></expr>,
	<expr><literal type="number">131.99338036494577864</literal></expr>, <expr><literal type="number">132.95257503561629164</literal></expr>, <expr><literal type="number">133.91311374698926784</literal></expr>,
	<expr><literal type="number">134.87498931216194364</literal></expr>, <expr><literal type="number">135.83819462068046846</literal></expr>, <expr><literal type="number">136.80272263732638294</literal></expr>,
	<expr><literal type="number">137.76856640092901785</literal></expr>, <expr><literal type="number">138.73571902320256299</literal></expr>, <expr><literal type="number">139.70417368760718091</literal></expr>,
	<expr><literal type="number">140.67392364823425055</literal></expr>, <expr><literal type="number">141.64496222871400732</literal></expr>, <expr><literal type="number">142.61728282114600574</literal></expr>,
	<expr><literal type="number">143.59087888505104047</literal></expr>, <expr><literal type="number">144.56574394634486680</literal></expr>, <expr><literal type="number">145.54187159633210058</literal></expr>,
	<expr><literal type="number">146.51925549072063859</literal></expr>, <expr><literal type="number">147.49788934865566148</literal></expr>, <expr><literal type="number">148.47776695177302031</literal></expr>,
	<expr><literal type="number">149.45888214327129617</literal></expr>, <expr><literal type="number">150.44122882700193600</literal></expr>, <expr><literal type="number">151.42480096657754984</literal></expr>,
	<expr><literal type="number">152.40959258449737490</literal></expr>, <expr><literal type="number">153.39559776128982094</literal></expr>, <expr><literal type="number">154.38281063467164245</literal></expr>,
	<expr><literal type="number">155.37122539872302696</literal></expr>, <expr><literal type="number">156.36083630307879844</literal></expr>, <expr><literal type="number">157.35163765213474107</literal></expr>,
	<expr><literal type="number">158.34362380426921391</literal></expr>, <expr><literal type="number">159.33678917107920370</literal></expr>, <expr><literal type="number">160.33112821663092973</literal></expr>,
	<expr><literal type="number">161.32663545672428995</literal></expr>, <expr><literal type="number">162.32330545817117695</literal></expr>, <expr><literal type="number">163.32113283808695314</literal></expr>,
	<expr><literal type="number">164.32011226319519892</literal></expr>, <expr><literal type="number">165.32023844914485267</literal></expr>, <expr><literal type="number">166.32150615984036790</literal></expr>,
	<expr><literal type="number">167.32391020678358018</literal></expr>, <expr><literal type="number">168.32744544842768164</literal></expr>, <expr><literal type="number">169.33210678954270634</literal></expr>,
	<expr><literal type="number">170.33788918059275375</literal></expr>, <expr><literal type="number">171.34478761712384198</literal></expr>, <expr><literal type="number">172.35279713916281707</literal></expr>,
	<expr><literal type="number">173.36191283062726143</literal></expr>, <expr><literal type="number">174.37212981874515094</literal></expr>, <expr><literal type="number">175.38344327348534080</literal></expr>,
	<expr><literal type="number">176.39584840699734514</literal></expr>, <expr><literal type="number">177.40934047306160437</literal></expr>, <expr><literal type="number">178.42391476654847793</literal></expr>,
	<expr><literal type="number">179.43956662288721304</literal></expr>, <expr><literal type="number">180.45629141754378111</literal></expr>, <expr><literal type="number">181.47408456550741107</literal></expr>,
	<expr><literal type="number">182.49294152078630304</literal></expr>, <expr><literal type="number">183.51285777591152737</literal></expr>, <expr><literal type="number">184.53382886144947861</literal></expr>,
	<expr><literal type="number">185.55585034552262869</literal></expr>, <expr><literal type="number">186.57891783333786861</literal></expr>, <expr><literal type="number">187.60302696672312095</literal></expr>,
	<expr><literal type="number">188.62817342367162610</literal></expr>, <expr><literal type="number">189.65435291789341932</literal></expr>, <expr><literal type="number">190.68156119837468054</literal></expr>,
	<expr><literal type="number">191.70979404894376330</literal></expr>, <expr><literal type="number">192.73904728784492590</literal></expr>, <expr><literal type="number">193.76931676731820176</literal></expr>,
	<expr><literal type="number">194.80059837318714244</literal></expr>, <expr><literal type="number">195.83288802445184729</literal></expr>, <expr><literal type="number">196.86618167288995096</literal></expr>,
	<expr><literal type="number">197.90047530266301123</literal></expr>, <expr><literal type="number">198.93576492992946214</literal></expr>, <expr><literal type="number">199.97204660246373464</literal></expr>,
	<expr><literal type="number">201.00931639928148797</literal></expr>, <expr><literal type="number">202.04757043027063901</literal></expr>, <expr><literal type="number">203.08680483582807597</literal></expr>,
	<expr><literal type="number">204.12701578650228385</literal></expr>, <expr><literal type="number">205.16819948264117102</literal></expr>, <expr><literal type="number">206.21035215404597807</literal></expr>,
	<expr><literal type="number">207.25347005962987623</literal></expr>, <expr><literal type="number">208.29754948708190909</literal></expr>, <expr><literal type="number">209.34258675253678916</literal></expr>,
	<expr><literal type="number">210.38857820024875878</literal></expr>, <expr><literal type="number">211.43552020227099320</literal></expr>, <expr><literal type="number">212.48340915813977858</literal></expr>,
	<expr><literal type="number">213.53224149456323744</literal></expr>, <expr><literal type="number">214.58201366511514152</literal></expr>, <expr><literal type="number">215.63272214993284592</literal></expr>,
	<expr><literal type="number">216.68436345542014010</literal></expr>, <expr><literal type="number">217.73693411395422004</literal></expr>, <expr><literal type="number">218.79043068359703739</literal></expr>,
	<expr><literal type="number">219.84484974781133815</literal></expr>, <expr><literal type="number">220.90018791517996988</literal></expr>, <expr><literal type="number">221.95644181913033322</literal></expr>,
	<expr><literal type="number">223.01360811766215875</literal></expr>, <expr><literal type="number">224.07168349307951871</literal></expr>, <expr><literal type="number">225.13066465172661879</literal></expr>,
	<expr><literal type="number">226.19054832372759734</literal></expr>, <expr><literal type="number">227.25133126272962159</literal></expr>, <expr><literal type="number">228.31301024565024704</literal></expr>,
	<expr><literal type="number">229.37558207242807384</literal></expr>, <expr><literal type="number">230.43904356577689896</literal></expr>, <expr><literal type="number">231.50339157094342113</literal></expr>,
	<expr><literal type="number">232.56862295546847008</literal></expr>, <expr><literal type="number">233.63473460895144740</literal></expr>, <expr><literal type="number">234.70172344281823484</literal></expr>,
	<expr><literal type="number">235.76958639009222907</literal></expr>, <expr><literal type="number">236.83832040516844586</literal></expr>, <expr><literal type="number">237.90792246359117712</literal></expr>,
	<expr><literal type="number">238.97838956183431947</literal></expr>, <expr><literal type="number">240.04971871708477238</literal></expr>, <expr><literal type="number">241.12190696702904802</literal></expr>,
	<expr><literal type="number">242.19495136964280846</literal></expr>, <expr><literal type="number">243.26884900298270509</literal></expr>, <expr><literal type="number">244.34359696498191283</literal></expr>,
	<expr><literal type="number">245.41919237324782443</literal></expr>, <expr><literal type="number">246.49563236486270057</literal></expr>, <expr><literal type="number">247.57291409618682110</literal></expr>,
	<expr><literal type="number">248.65103474266476269</literal></expr>, <expr><literal type="number">249.72999149863338175</literal></expr>, <expr><literal type="number">250.80978157713354904</literal></expr>,
	<expr><literal type="number">251.89040220972316320</literal></expr>, <expr><literal type="number">252.97185064629374551</literal></expr>, <expr><literal type="number">254.05412415488834199</literal></expr>,
	<expr><literal type="number">255.13722002152300661</literal></expr>, <expr><literal type="number">256.22113555000953511</literal></expr>, <expr><literal type="number">257.30586806178126835</literal></expr>,
	<expr><literal type="number">258.39141489572085675</literal></expr>, <expr><literal type="number">259.47777340799029844</literal></expr>, <expr><literal type="number">260.56494097186322279</literal></expr>,
	<expr><literal type="number">261.65291497755913497</literal></expr>, <expr><literal type="number">262.74169283208021852</literal></expr>, <expr><literal type="number">263.83127195904967266</literal></expr>,
	<expr><literal type="number">264.92164979855277807</literal></expr>, <expr><literal type="number">266.01282380697938379</literal></expr>, <expr><literal type="number">267.10479145686849733</literal></expr>,
	<expr><literal type="number">268.19755023675537586</literal></expr>, <expr><literal type="number">269.29109765101975427</literal></expr>, <expr><literal type="number">270.38543121973674488</literal></expr>,
	<expr><literal type="number">271.48054847852881721</literal></expr>, <expr><literal type="number">272.57644697842033565</literal></expr>, <expr><literal type="number">273.67312428569374561</literal></expr>,
	<expr><literal type="number">274.77057798174683967</literal></expr>, <expr><literal type="number">275.86880566295326389</literal></expr>, <expr><literal type="number">276.96780494052313770</literal></expr>,
	<expr><literal type="number">278.06757344036617496</literal></expr>, <expr><literal type="number">279.16810880295668085</literal></expr>, <expr><literal type="number">280.26940868320008349</literal></expr>,
	<expr><literal type="number">281.37147075030043197</literal></expr>, <expr><literal type="number">282.47429268763045229</literal></expr>, <expr><literal type="number">283.57787219260217171</literal></expr>,
	<expr><literal type="number">284.68220697654078322</literal></expr>, <expr><literal type="number">285.78729476455760050</literal></expr>, <expr><literal type="number">286.89313329542699194</literal></expr>,
	<expr><literal type="number">287.99972032146268930</literal></expr>, <expr><literal type="number">289.10705360839756395</literal></expr>, <expr><literal type="number">290.21513093526289140</literal></expr>,
	<expr><literal type="number">291.32395009427028754</literal></expr>, <expr><literal type="number">292.43350889069523646</literal></expr>, <expr><literal type="number">293.54380514276073200</literal></expr>,
	<expr><literal type="number">294.65483668152336350</literal></expr>, <expr><literal type="number">295.76660135076059532</literal></expr>, <expr><literal type="number">296.87909700685889902</literal></expr>,
	<expr><literal type="number">297.99232151870342022</literal></expr>, <expr><literal type="number">299.10627276756946458</literal></expr>, <expr><literal type="number">300.22094864701409733</literal></expr>,
	<expr><literal type="number">301.33634706277030091</literal></expr>, <expr><literal type="number">302.45246593264130297</literal></expr>, <expr><literal type="number">303.56930318639643929</literal></expr>,
	<expr><literal type="number">304.68685676566872189</literal></expr>, <expr><literal type="number">305.80512462385280514</literal></expr>, <expr><literal type="number">306.92410472600477078</literal></expr>,
	<expr><literal type="number">308.04379504874236773</literal></expr>, <expr><literal type="number">309.16419358014690033</literal></expr>, <expr><literal type="number">310.28529831966631036</literal></expr>,
	<expr><literal type="number">311.40710727801865687</literal></expr>, <expr><literal type="number">312.52961847709792664</literal></expr>, <expr><literal type="number">313.65282994987899201</literal></expr>,
	<expr><literal type="number">314.77673974032603610</literal></expr>, <expr><literal type="number">315.90134590329950015</literal></expr>, <expr><literal type="number">317.02664650446632777</literal></expr>,
	<expr><literal type="number">318.15263962020929966</literal></expr>, <expr><literal type="number">319.27932333753892635</literal></expr>, <expr><literal type="number">320.40669575400545455</literal></expr>,
	<expr><literal type="number">321.53475497761127144</literal></expr>, <expr><literal type="number">322.66349912672620803</literal></expr>, <expr><literal type="number">323.79292633000159185</literal></expr>,
	<expr><literal type="number">324.92303472628691452</literal></expr>, <expr><literal type="number">326.05382246454587403</literal></expr>, <expr><literal type="number">327.18528770377525916</literal></expr>,
	<expr><literal type="number">328.31742861292224234</literal></expr>, <expr><literal type="number">329.45024337080525356</literal></expr>, <expr><literal type="number">330.58373016603343331</literal></expr>,
	<expr><literal type="number">331.71788719692847280</literal></expr>, <expr><literal type="number">332.85271267144611329</literal></expr>, <expr><literal type="number">333.98820480709991898</literal></expr>,
	<expr><literal type="number">335.12436183088397001</literal></expr>, <expr><literal type="number">336.26118197919845443</literal></expr>, <expr><literal type="number">337.39866349777429377</literal></expr>,
	<expr><literal type="number">338.53680464159958774</literal></expr>, <expr><literal type="number">339.67560367484657036</literal></expr>, <expr><literal type="number">340.81505887079896411</literal></expr>,
	<expr><literal type="number">341.95516851178109619</literal></expr>, <expr><literal type="number">343.09593088908627578</literal></expr>, <expr><literal type="number">344.23734430290727460</literal></expr>,
	<expr><literal type="number">345.37940706226686416</literal></expr>, <expr><literal type="number">346.52211748494903532</literal></expr>, <expr><literal type="number">347.66547389743118401</literal></expr>,
	<expr><literal type="number">348.80947463481720661</literal></expr>, <expr><literal type="number">349.95411804077025408</literal></expr>, <expr><literal type="number">351.09940246744753267</literal></expr>,
	<expr><literal type="number">352.24532627543504759</literal></expr>, <expr><literal type="number">353.39188783368263103</literal></expr>, <expr><literal type="number">354.53908551944078908</literal></expr>,
	<expr><literal type="number">355.68691771819692349</literal></expr>, <expr><literal type="number">356.83538282361303118</literal></expr>, <expr><literal type="number">357.98447923746385868</literal></expr>,
	<expr><literal type="number">359.13420536957539753</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ln_gamma_misc</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ln_gamma_misc_expected</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>i</name> <operator>*</operator> <literal type="number">0.25</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>double_eq_rel</name><argument_list>(<argument><expr><call><name>ln_gamma</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name><name>ln_gamma_misc_expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_REL_ERR</name></expr></argument>, <argument><expr><name>MAX_ABS_ERR</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Incorrect ln_gamma result for i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<decl_stmt><decl><type><name>TEST_END</name>

<comment type="block">/* Expected pt_norm([0.01..0.99] increment=0.01). */</comment>
<specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>pt_norm_expected</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>-</operator><name>INFINITY</name></expr>,
	<expr><operator>-</operator><literal type="number">2.32634787404084076</literal></expr>, <expr><operator>-</operator><literal type="number">2.05374891063182252</literal></expr>, <expr><operator>-</operator><literal type="number">1.88079360815125085</literal></expr>,
	<expr><operator>-</operator><literal type="number">1.75068607125216946</literal></expr>, <expr><operator>-</operator><literal type="number">1.64485362695147264</literal></expr>, <expr><operator>-</operator><literal type="number">1.55477359459685305</literal></expr>,
	<expr><operator>-</operator><literal type="number">1.47579102817917063</literal></expr>, <expr><operator>-</operator><literal type="number">1.40507156030963221</literal></expr>, <expr><operator>-</operator><literal type="number">1.34075503369021654</literal></expr>,
	<expr><operator>-</operator><literal type="number">1.28155156554460081</literal></expr>, <expr><operator>-</operator><literal type="number">1.22652812003661049</literal></expr>, <expr><operator>-</operator><literal type="number">1.17498679206608991</literal></expr>,
	<expr><operator>-</operator><literal type="number">1.12639112903880045</literal></expr>, <expr><operator>-</operator><literal type="number">1.08031934081495606</literal></expr>, <expr><operator>-</operator><literal type="number">1.03643338949378938</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.99445788320975281</literal></expr>, <expr><operator>-</operator><literal type="number">0.95416525314619416</literal></expr>, <expr><operator>-</operator><literal type="number">0.91536508784281390</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.87789629505122846</literal></expr>, <expr><operator>-</operator><literal type="number">0.84162123357291418</literal></expr>, <expr><operator>-</operator><literal type="number">0.80642124701824025</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.77219321418868492</literal></expr>, <expr><operator>-</operator><literal type="number">0.73884684918521371</literal></expr>, <expr><operator>-</operator><literal type="number">0.70630256284008752</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.67448975019608171</literal></expr>, <expr><operator>-</operator><literal type="number">0.64334540539291685</literal></expr>, <expr><operator>-</operator><literal type="number">0.61281299101662701</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.58284150727121620</literal></expr>, <expr><operator>-</operator><literal type="number">0.55338471955567281</literal></expr>, <expr><operator>-</operator><literal type="number">0.52440051270804067</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.49585034734745320</literal></expr>, <expr><operator>-</operator><literal type="number">0.46769879911450812</literal></expr>, <expr><operator>-</operator><literal type="number">0.43991316567323380</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.41246312944140462</literal></expr>, <expr><operator>-</operator><literal type="number">0.38532046640756751</literal></expr>, <expr><operator>-</operator><literal type="number">0.35845879325119373</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.33185334643681652</literal></expr>, <expr><operator>-</operator><literal type="number">0.30548078809939738</literal></expr>, <expr><operator>-</operator><literal type="number">0.27931903444745404</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.25334710313579978</literal></expr>, <expr><operator>-</operator><literal type="number">0.22754497664114931</literal></expr>, <expr><operator>-</operator><literal type="number">0.20189347914185077</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.17637416478086135</literal></expr>, <expr><operator>-</operator><literal type="number">0.15096921549677725</literal></expr>, <expr><operator>-</operator><literal type="number">0.12566134685507399</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.10043372051146975</literal></expr>, <expr><operator>-</operator><literal type="number">0.07526986209982976</literal></expr>, <expr><operator>-</operator><literal type="number">0.05015358346473352</literal></expr>,
	<expr><operator>-</operator><literal type="number">0.02506890825871106</literal></expr>, <expr><literal type="number">0.00000000000000000</literal></expr>, <expr><literal type="number">0.02506890825871106</literal></expr>,
	<expr><literal type="number">0.05015358346473366</literal></expr>, <expr><literal type="number">0.07526986209982990</literal></expr>, <expr><literal type="number">0.10043372051146990</literal></expr>,
	<expr><literal type="number">0.12566134685507413</literal></expr>, <expr><literal type="number">0.15096921549677739</literal></expr>, <expr><literal type="number">0.17637416478086146</literal></expr>,
	<expr><literal type="number">0.20189347914185105</literal></expr>, <expr><literal type="number">0.22754497664114931</literal></expr>, <expr><literal type="number">0.25334710313579978</literal></expr>,
	<expr><literal type="number">0.27931903444745404</literal></expr>, <expr><literal type="number">0.30548078809939738</literal></expr>, <expr><literal type="number">0.33185334643681652</literal></expr>,
	<expr><literal type="number">0.35845879325119373</literal></expr>, <expr><literal type="number">0.38532046640756762</literal></expr>, <expr><literal type="number">0.41246312944140484</literal></expr>,
	<expr><literal type="number">0.43991316567323391</literal></expr>, <expr><literal type="number">0.46769879911450835</literal></expr>, <expr><literal type="number">0.49585034734745348</literal></expr>,
	<expr><literal type="number">0.52440051270804111</literal></expr>, <expr><literal type="number">0.55338471955567303</literal></expr>, <expr><literal type="number">0.58284150727121620</literal></expr>,
	<expr><literal type="number">0.61281299101662701</literal></expr>, <expr><literal type="number">0.64334540539291685</literal></expr>, <expr><literal type="number">0.67448975019608171</literal></expr>,
	<expr><literal type="number">0.70630256284008752</literal></expr>, <expr><literal type="number">0.73884684918521371</literal></expr>, <expr><literal type="number">0.77219321418868492</literal></expr>,
	<expr><literal type="number">0.80642124701824036</literal></expr>, <expr><literal type="number">0.84162123357291441</literal></expr>, <expr><literal type="number">0.87789629505122879</literal></expr>,
	<expr><literal type="number">0.91536508784281423</literal></expr>, <expr><literal type="number">0.95416525314619460</literal></expr>, <expr><literal type="number">0.99445788320975348</literal></expr>,
	<expr><literal type="number">1.03643338949378938</literal></expr>, <expr><literal type="number">1.08031934081495606</literal></expr>, <expr><literal type="number">1.12639112903880045</literal></expr>,
	<expr><literal type="number">1.17498679206608991</literal></expr>, <expr><literal type="number">1.22652812003661049</literal></expr>, <expr><literal type="number">1.28155156554460081</literal></expr>,
	<expr><literal type="number">1.34075503369021654</literal></expr>, <expr><literal type="number">1.40507156030963265</literal></expr>, <expr><literal type="number">1.47579102817917085</literal></expr>,
	<expr><literal type="number">1.55477359459685394</literal></expr>, <expr><literal type="number">1.64485362695147308</literal></expr>, <expr><literal type="number">1.75068607125217102</literal></expr>,
	<expr><literal type="number">1.88079360815125041</literal></expr>, <expr><literal type="number">2.05374891063182208</literal></expr>, <expr><literal type="number">2.32634787404084076</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_pt_norm</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pt_norm_expected</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>i</name> <operator>*</operator> <literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>double_eq_rel</name><argument_list>(<argument><expr><call><name>pt_norm</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pt_norm_expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		    <argument><expr><name>MAX_REL_ERR</name></expr></argument>, <argument><expr><name>MAX_ABS_ERR</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Incorrect pt_norm result for i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<decl_stmt><decl><type><name>TEST_END</name>

<comment type="block">/*
 * Expected pt_chi2(p=[0.01..0.99] increment=0.07,
 *                  df={0.1, 1.1, 10.1, 100.1, 1000.1}).
 */</comment>
<specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>pt_chi2_df</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">1.1</literal></expr>, <expr><literal type="number">10.1</literal></expr>, <expr><literal type="number">100.1</literal></expr>, <expr><literal type="number">1000.1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>pt_chi2_expected</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">1.168926411457320e-40</literal></expr>, <expr><literal type="number">1.347680397072034e-22</literal></expr>, <expr><literal type="number">3.886980416666260e-17</literal></expr>,
	<expr><literal type="number">8.245951724356564e-14</literal></expr>, <expr><literal type="number">2.068936347497604e-11</literal></expr>, <expr><literal type="number">1.562561743309233e-09</literal></expr>,
	<expr><literal type="number">5.459543043426564e-08</literal></expr>, <expr><literal type="number">1.114775688149252e-06</literal></expr>, <expr><literal type="number">1.532101202364371e-05</literal></expr>,
	<expr><literal type="number">1.553884683726585e-04</literal></expr>, <expr><literal type="number">1.239396954915939e-03</literal></expr>, <expr><literal type="number">8.153872320255721e-03</literal></expr>,
	<expr><literal type="number">4.631183739647523e-02</literal></expr>, <expr><literal type="number">2.473187311701327e-01</literal></expr>, <expr><literal type="number">2.175254800183617e+00</literal></expr>,

	<expr><literal type="number">0.0003729887888876379</literal></expr>, <expr><literal type="number">0.0164409238228929513</literal></expr>, <expr><literal type="number">0.0521523015190650113</literal></expr>,
	<expr><literal type="number">0.1064701372271216612</literal></expr>, <expr><literal type="number">0.1800913735793082115</literal></expr>, <expr><literal type="number">0.2748704281195626931</literal></expr>,
	<expr><literal type="number">0.3939246282787986497</literal></expr>, <expr><literal type="number">0.5420727552260817816</literal></expr>, <expr><literal type="number">0.7267265822221973259</literal></expr>,
	<expr><literal type="number">0.9596554296000253670</literal></expr>, <expr><literal type="number">1.2607440376386165326</literal></expr>, <expr><literal type="number">1.6671185084541604304</literal></expr>,
	<expr><literal type="number">2.2604828984738705167</literal></expr>, <expr><literal type="number">3.2868613342148607082</literal></expr>, <expr><literal type="number">6.9298574921692139839</literal></expr>,

	<expr><literal type="number">2.606673548632508</literal></expr>, <expr><literal type="number">4.602913725294877</literal></expr>, <expr><literal type="number">5.646152813924212</literal></expr>,
	<expr><literal type="number">6.488971315540869</literal></expr>, <expr><literal type="number">7.249823275816285</literal></expr>, <expr><literal type="number">7.977314231410841</literal></expr>,
	<expr><literal type="number">8.700354939944047</literal></expr>, <expr><literal type="number">9.441728024225892</literal></expr>, <expr><literal type="number">10.224338321374127</literal></expr>,
	<expr><literal type="number">11.076435368801061</literal></expr>, <expr><literal type="number">12.039320937038386</literal></expr>, <expr><literal type="number">13.183878752697167</literal></expr>,
	<expr><literal type="number">14.657791935084575</literal></expr>, <expr><literal type="number">16.885728216339373</literal></expr>, <expr><literal type="number">23.361991680031817</literal></expr>,

	<expr><literal type="number">70.14844087392152</literal></expr>, <expr><literal type="number">80.92379498849355</literal></expr>, <expr><literal type="number">85.53325420085891</literal></expr>,
	<expr><literal type="number">88.94433120715347</literal></expr>, <expr><literal type="number">91.83732712857017</literal></expr>, <expr><literal type="number">94.46719943606301</literal></expr>,
	<expr><literal type="number">96.96896479994635</literal></expr>, <expr><literal type="number">99.43412843510363</literal></expr>, <expr><literal type="number">101.94074719829733</literal></expr>,
	<expr><literal type="number">104.57228644307247</literal></expr>, <expr><literal type="number">107.43900093448734</literal></expr>, <expr><literal type="number">110.71844673417287</literal></expr>,
	<expr><literal type="number">114.76616819871325</literal></expr>, <expr><literal type="number">120.57422505959563</literal></expr>, <expr><literal type="number">135.92318818757556</literal></expr>,

	<expr><literal type="number">899.0072447849649</literal></expr>, <expr><literal type="number">937.9271278858220</literal></expr>, <expr><literal type="number">953.8117189560207</literal></expr>,
	<expr><literal type="number">965.3079371501154</literal></expr>, <expr><literal type="number">974.8974061207954</literal></expr>, <expr><literal type="number">983.4936235182347</literal></expr>,
	<expr><literal type="number">991.5691170518946</literal></expr>, <expr><literal type="number">999.4334123954690</literal></expr>, <expr><literal type="number">1007.3391826856553</literal></expr>,
	<expr><literal type="number">1015.5445154999951</literal></expr>, <expr><literal type="number">1024.3777075619569</literal></expr>, <expr><literal type="number">1034.3538789836223</literal></expr>,
	<expr><literal type="number">1046.4872561869577</literal></expr>, <expr><literal type="number">1063.5717461999654</literal></expr>, <expr><literal type="number">1107.0741966053859</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_pt_chi2</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pt_chi2_df</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>df</name> <init>= <expr><name><name>pt_chi2_df</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>ln_gamma_df</name> <init>= <expr><call><name>ln_gamma</name><argument_list>(<argument><expr><name>df</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">7</literal></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>j</name> <operator>*</operator> <literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>double_eq_rel</name><argument_list>(<argument><expr><call><name>pt_chi2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>ln_gamma_df</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name><name>pt_chi2_expected</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_REL_ERR</name></expr></argument>, <argument><expr><name>MAX_ABS_ERR</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Incorrect pt_chi2 result for i=%u, j=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block>
<decl_stmt><decl><type><name>TEST_END</name>

<comment type="block">/*
 * Expected pt_gamma(p=[0.1..0.99] increment=0.07,
 *                   shape=[0.5..3.0] increment=0.5).
 */</comment>
<specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>pt_gamma_shape</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.5</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.5</literal></expr>, <expr><literal type="number">3.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>pt_gamma_expected</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">7.854392895485103e-05</literal></expr>, <expr><literal type="number">5.043466107888016e-03</literal></expr>, <expr><literal type="number">1.788288957794883e-02</literal></expr>,
	<expr><literal type="number">3.900956150232906e-02</literal></expr>, <expr><literal type="number">6.913847560638034e-02</literal></expr>, <expr><literal type="number">1.093710833465766e-01</literal></expr>,
	<expr><literal type="number">1.613412523825817e-01</literal></expr>, <expr><literal type="number">2.274682115597864e-01</literal></expr>, <expr><literal type="number">3.114117323127083e-01</literal></expr>,
	<expr><literal type="number">4.189466220207417e-01</literal></expr>, <expr><literal type="number">5.598106789059246e-01</literal></expr>, <expr><literal type="number">7.521856146202706e-01</literal></expr>,
	<expr><literal type="number">1.036125427911119e+00</literal></expr>, <expr><literal type="number">1.532450860038180e+00</literal></expr>, <expr><literal type="number">3.317448300510606e+00</literal></expr>,

	<expr><literal type="number">0.01005033585350144</literal></expr>, <expr><literal type="number">0.08338160893905107</literal></expr>, <expr><literal type="number">0.16251892949777497</literal></expr>,
	<expr><literal type="number">0.24846135929849966</literal></expr>, <expr><literal type="number">0.34249030894677596</literal></expr>, <expr><literal type="number">0.44628710262841947</literal></expr>,
	<expr><literal type="number">0.56211891815354142</literal></expr>, <expr><literal type="number">0.69314718055994529</literal></expr>, <expr><literal type="number">0.84397007029452920</literal></expr>,
	<expr><literal type="number">1.02165124753198167</literal></expr>, <expr><literal type="number">1.23787435600161766</literal></expr>, <expr><literal type="number">1.51412773262977574</literal></expr>,
	<expr><literal type="number">1.89711998488588196</literal></expr>, <expr><literal type="number">2.52572864430825783</literal></expr>, <expr><literal type="number">4.60517018598809091</literal></expr>,

	<expr><literal type="number">0.05741590094955853</literal></expr>, <expr><literal type="number">0.24747378084860744</literal></expr>, <expr><literal type="number">0.39888572212236084</literal></expr>,
	<expr><literal type="number">0.54394139997444901</literal></expr>, <expr><literal type="number">0.69048812513915159</literal></expr>, <expr><literal type="number">0.84311389861296104</literal></expr>,
	<expr><literal type="number">1.00580622221479898</literal></expr>, <expr><literal type="number">1.18298694218766931</literal></expr>, <expr><literal type="number">1.38038096305861213</literal></expr>,
	<expr><literal type="number">1.60627736383027453</literal></expr>, <expr><literal type="number">1.87396970522337947</literal></expr>, <expr><literal type="number">2.20749220408081070</literal></expr>,
	<expr><literal type="number">2.65852391865854942</literal></expr>, <expr><literal type="number">3.37934630984842244</literal></expr>, <expr><literal type="number">5.67243336507218476</literal></expr>,

	<expr><literal type="number">0.1485547402532659</literal></expr>, <expr><literal type="number">0.4657458011640391</literal></expr>, <expr><literal type="number">0.6832386130709406</literal></expr>,
	<expr><literal type="number">0.8794297834672100</literal></expr>, <expr><literal type="number">1.0700752852474524</literal></expr>, <expr><literal type="number">1.2629614217350744</literal></expr>,
	<expr><literal type="number">1.4638400448580779</literal></expr>, <expr><literal type="number">1.6783469900166610</literal></expr>, <expr><literal type="number">1.9132338090606940</literal></expr>,
	<expr><literal type="number">2.1778589228618777</literal></expr>, <expr><literal type="number">2.4868823970010991</literal></expr>, <expr><literal type="number">2.8664695666264195</literal></expr>,
	<expr><literal type="number">3.3724415436062114</literal></expr>, <expr><literal type="number">4.1682658512758071</literal></expr>, <expr><literal type="number">6.6383520679938108</literal></expr>,

	<expr><literal type="number">0.2771490383641385</literal></expr>, <expr><literal type="number">0.7195001279643727</literal></expr>, <expr><literal type="number">0.9969081732265243</literal></expr>,
	<expr><literal type="number">1.2383497880608061</literal></expr>, <expr><literal type="number">1.4675206597269927</literal></expr>, <expr><literal type="number">1.6953064251816552</literal></expr>,
	<expr><literal type="number">1.9291243435606809</literal></expr>, <expr><literal type="number">2.1757300955477641</literal></expr>, <expr><literal type="number">2.4428032131216391</literal></expr>,
	<expr><literal type="number">2.7406534569230616</literal></expr>, <expr><literal type="number">3.0851445039665513</literal></expr>, <expr><literal type="number">3.5043101122033367</literal></expr>,
	<expr><literal type="number">4.0575997065264637</literal></expr>, <expr><literal type="number">4.9182956424675286</literal></expr>, <expr><literal type="number">7.5431362346944937</literal></expr>,

	<expr><literal type="number">0.4360451650782932</literal></expr>, <expr><literal type="number">0.9983600902486267</literal></expr>, <expr><literal type="number">1.3306365880734528</literal></expr>,
	<expr><literal type="number">1.6129750834753802</literal></expr>, <expr><literal type="number">1.8767241606994294</literal></expr>, <expr><literal type="number">2.1357032436097660</literal></expr>,
	<expr><literal type="number">2.3988853336865565</literal></expr>, <expr><literal type="number">2.6740603137235603</literal></expr>, <expr><literal type="number">2.9697561737517959</literal></expr>,
	<expr><literal type="number">3.2971457713883265</literal></expr>, <expr><literal type="number">3.6731795898504660</literal></expr>, <expr><literal type="number">4.1275751617770631</literal></expr>,
	<expr><literal type="number">4.7230515633946677</literal></expr>, <expr><literal type="number">5.6417477865306020</literal></expr>, <expr><literal type="number">8.4059469148854635</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_pt_gamma_shape</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pt_gamma_shape</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>shape</name> <init>= <expr><name><name>pt_gamma_shape</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>ln_gamma_shape</name> <init>= <expr><call><name>ln_gamma</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">7</literal></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>j</name> <operator>*</operator> <literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>double_eq_rel</name><argument_list>(<argument><expr><call><name>pt_gamma</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
			    <argument><expr><name>ln_gamma_shape</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pt_gamma_expected</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_REL_ERR</name></expr></argument>,
			    <argument><expr><name>MAX_ABS_ERR</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Incorrect pt_gamma result for i=%u, j=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_pt_gamma_scale</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>shape</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>ln_gamma_shape</name> <init>= <expr><call><name>ln_gamma</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>double_eq_rel</name><argument_list>(
	    <argument><expr><call><name>pt_gamma</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>ln_gamma_shape</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10.0</literal></expr></argument>,
	    <argument><expr><call><name>pt_gamma</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>ln_gamma_shape</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_REL_ERR</name></expr></argument>,
	    <argument><expr><name>MAX_ABS_ERR</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Scale should be trivially equivalent to external multiplication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_ln_gamma_factorial</name></expr></argument>,
	    <argument><expr><name>test_ln_gamma_misc</name></expr></argument>,
	    <argument><expr><name>test_pt_norm</name></expr></argument>,
	    <argument><expr><name>test_pt_chi2</name></expr></argument>,
	    <argument><expr><name>test_pt_gamma_shape</name></expr></argument>,
	    <argument><expr><name>test_pt_gamma_scale</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
