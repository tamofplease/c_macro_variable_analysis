<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/zero.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_zero</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz_min</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz_max</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_prev</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC</name></cpp:macro>	<cpp:value>((uint8_t)0x61)</cpp:value></cpp:define>

	<expr_stmt><expr><name>sz_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>mallocx</name><argument_list>(<argument><expr><name>sz_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>sz</name> <operator>&lt;=</operator> <name>sz_max</name></expr>;</condition>
	    <incr><expr><name>sz_prev</name> <operator>=</operator> <name>sz</name></expr><operator>,</operator> <expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>sz_prev</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAGIC</name></expr></argument>,
			    <argument><expr><literal type="string">"Previously allocated byte %zu/%zu is corrupted"</literal></expr></argument>,
			    <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>sz_prev</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAGIC</name></expr></argument>,
			    <argument><expr><literal type="string">"Previously allocated byte %zu/%zu is corrupted"</literal></expr></argument>,
			    <argument><expr><name>sz_prev</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sz_prev</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
			    <argument><expr><literal type="string">"Newly allocated byte %zu/%zu isn't zero-filled"</literal></expr></argument>,
			    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>MAGIC</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><call><name>xallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>rallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAGIC</name></cpp:undef>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_zero_small</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_zero</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SC_SMALL_MAXCLASS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_zero_large</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_zero</name><argument_list>(<argument><expr><name>SC_SMALL_MAXCLASS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SC_LG_LARGE_MINCLASS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_zero_small</name></expr></argument>,
	    <argument><expr><name>test_zero_large</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
