<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/smoothstep.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>smoothstep_tab</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP</name><parameter_list>(<parameter><type><name>step</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>			\
	<cpp:value>h,</cpp:value></cpp:define>
	<expr><name>SMOOTHSTEP</name></expr>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STEP</name></cpp:undef>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_smoothstep_integral</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The integral of smoothstep in the [0..1] range equals 1/2.  Verify
	 * that the fixed point representation's integral is no more than
	 * rounding error distant from 1/2.  Regarding rounding, each table
	 * element is rounded down to the nearest fixed point value, so the
	 * integral may be off by as much as SMOOTHSTEP_NSTEPS ulps.
	 */</comment>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SMOOTHSTEP_NSTEPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>smoothstep_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><call><name>KQU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>SMOOTHSTEP_BFP</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>SMOOTHSTEP_NSTEPS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>min</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>SMOOTHSTEP_NSTEPS</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_u64_ge</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>min</name></expr></argument>,
	    <argument><expr><literal type="string">"Integral too small, even accounting for truncation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_le</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"Integral exceeds 1/2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>FMTu64</name><literal type="string">" ulps under 1/2 (limit %d)\n"</literal></expr></argument>,
		    <argument><expr><name>max</name> <operator>-</operator> <name>sum</name></expr></argument>, <argument><expr><name>SMOOTHSTEP_NSTEPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_smoothstep_monotonic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The smoothstep function is monotonic in [0..1], i.e. its slope is
	 * non-negative.  In practice we want to parametrize table generation
	 * such that piecewise slope is greater than zero, but do not require
	 * that here.
	 */</comment>
	<expr_stmt><expr><name>prev_h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SMOOTHSTEP_NSTEPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>h</name> <init>= <expr><name><name>smoothstep_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_u64_ge</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>prev_h</name></expr></argument>, <argument><expr><literal type="string">"Piecewise non-monotonic, i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name><name>smoothstep_tab</name><index>[<expr><name>SMOOTHSTEP_NSTEPS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
	    <argument><expr><operator>(</operator><call><name>KQU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SMOOTHSTEP_BFP</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Last step must equal 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_smoothstep_slope</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_h</name></decl>, <decl><type ref="prev"/><name>prev_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The smoothstep slope strictly increases until x=0.5, and then
	 * strictly decreases until x=1.0.  Verify the slightly weaker
	 * requirement of monotonicity, so that inadequate table precision does
	 * not cause false test failures.
	 */</comment>
	<expr_stmt><expr><name>prev_h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SMOOTHSTEP_NSTEPS</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>SMOOTHSTEP_NSTEPS</name> <operator>%</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>h</name> <init>= <expr><name><name>smoothstep_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><name>h</name> <operator>-</operator> <name>prev_h</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_u64_ge</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>prev_delta</name></expr></argument>,
		    <argument><expr><literal type="string">"Slope must monotonically increase in 0.0 &lt;= x &lt;= 0.5, "</literal>
		    <literal type="string">"i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_delta</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>prev_h</name> <operator>=</operator> <call><name>KQU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SMOOTHSTEP_BFP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SMOOTHSTEP_NSTEPS</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SMOOTHSTEP_NSTEPS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>h</name> <init>= <expr><name><name>smoothstep_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><name>prev_h</name> <operator>-</operator> <name>h</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_u64_ge</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>prev_delta</name></expr></argument>,
		    <argument><expr><literal type="string">"Slope must monotonically decrease in 0.5 &lt;= x &lt;= 1.0, "</literal>
		    <literal type="string">"i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_delta</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_smoothstep_integral</name></expr></argument>,
	    <argument><expr><name>test_smoothstep_monotonic</name></expr></argument>,
	    <argument><expr><name>test_smoothstep_slope</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
