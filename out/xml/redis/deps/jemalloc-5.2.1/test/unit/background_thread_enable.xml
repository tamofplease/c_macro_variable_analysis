<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/background_thread_enable.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>malloc_conf</name> <init>= <expr><literal type="string">"background_thread:false,narenas:1,max_background_threads:20"</literal></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_deferred</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>have_background_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_u</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * 10 here is somewhat arbitrary, except insofar as we want to ensure
	 * that the number of background threads is smaller than the number of
	 * arenas.  I'll ragequit long before we have to spin up 10 threads per
	 * cpu to handle background purging, so this is a conservative
	 * approximation.
	 */</comment>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>*</operator> <name>ncpus</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz_u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Failed to create arena"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>bool</name></type> <name>enable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_b</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"background_thread"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enable</name></expr></argument>, <argument><expr><name>sz_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Failed to enable background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"background_thread"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enable</name></expr></argument>, <argument><expr><name>sz_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Failed to disable background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_max_background_threads</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>have_background_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>max_n_thds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>opt_max_n_thds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_m</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>max_n_thds</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"opt.max_background_threads"</literal></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>opt_max_n_thds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz_m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Failed to get opt.max_background_threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"max_background_threads"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_n_thds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz_m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Failed to get max background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>opt_max_n_thds</name></expr></argument>, <argument><expr><name>max_n_thds</name></expr></argument>,
	    <argument><expr><literal type="string">"max_background_threads and "</literal>
	    <literal type="string">"opt.max_background_threads should match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"max_background_threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_n_thds</name></expr></argument>,
	    <argument><expr><name>sz_m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Failed to set max background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_u</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>*</operator> <name>ncpus</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz_u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Failed to create arena"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>bool</name></type> <name>enable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_b</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"background_thread"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enable</name></expr></argument>, <argument><expr><name>sz_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Failed to enable background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>n_background_threads</name></expr></argument>, <argument><expr><name>max_n_thds</name></expr></argument>,
	    <argument><expr><literal type="string">"Number of background threads should not change.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>new_max_thds</name> <init>= <expr><name>max_n_thds</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_max_thds</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"max_background_threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>new_max_thds</name></expr></argument>, <argument><expr><name>sz_m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Failed to set max background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>n_background_threads</name></expr></argument>, <argument><expr><name>new_max_thds</name></expr></argument>,
		    <argument><expr><literal type="string">"Number of background threads should decrease by 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>new_max_thds</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"max_background_threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_max_thds</name></expr></argument>,
	    <argument><expr><name>sz_m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Failed to set max background threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>n_background_threads</name></expr></argument>, <argument><expr><name>new_max_thds</name></expr></argument>,
	    <argument><expr><literal type="string">"Number of background threads should be 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
		<argument><expr><name>test_deferred</name></expr></argument>,
		<argument><expr><name>test_max_background_threads</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
