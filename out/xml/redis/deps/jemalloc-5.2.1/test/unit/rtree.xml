<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/rtree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rtree.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>rtree_node_alloc_t</name> <modifier>*</modifier></type><name>rtree_node_alloc_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_node_dalloc_t</name> <modifier>*</modifier></type><name>rtree_node_dalloc_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_leaf_alloc_t</name> <modifier>*</modifier></type><name>rtree_leaf_alloc_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rtree_leaf_dalloc_t</name> <modifier>*</modifier></type><name>rtree_leaf_dalloc_orig</name></decl>;</decl_stmt>

<comment type="block">/* Potentially too large to safely place on the stack. */</comment>
<decl_stmt><decl><type><name>rtree_t</name></type> <name>test_rtree</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_node_alloc_intercept</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nelms</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rtree</name> <operator>!=</operator> <operator>&amp;</operator><name>test_rtree</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>rtree_node_alloc_orig</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>nelms</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>rtree_node_elm_t</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>nelms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtree_node_elm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"Unexpected calloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rtree_node_dalloc_intercept</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>,
    <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>rtree</name> <operator>!=</operator> <operator>&amp;</operator><name>test_rtree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rtree_node_dalloc_orig</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_leaf_elm_t</name> <modifier>*</modifier></type>
<name>rtree_leaf_alloc_intercept</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nelms</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rtree</name> <operator>!=</operator> <operator>&amp;</operator><name>test_rtree</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>rtree_leaf_alloc_orig</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>nelms</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>(</operator><name>rtree_leaf_elm_t</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>nelms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtree_leaf_elm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>, <argument><expr><literal type="string">"Unexpected calloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>leaf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rtree_leaf_dalloc_intercept</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>,
    <parameter><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>rtree</name> <operator>!=</operator> <operator>&amp;</operator><name>test_rtree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rtree_leaf_dalloc_orig</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_rtree_read_empty</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tsdn</name> <operator>=</operator> <call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name> <init>= <expr><operator>&amp;</operator><name>test_rtree</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rtree_ctx_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_new</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected rtree_new() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name>PAGE</name></expr></argument>,
	    <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"rtree_extent_read() should return NULL for empty tree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rtree_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NTHREADS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NITERS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEED</name></cpp:undef>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_rtree_extrema</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_t</name></type> <name>extent_a</name></decl>, <decl><type ref="prev"/><name>extent_b</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_LARGE_MINCLASS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
	    <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>SC_LARGE_MINCLASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name> <init>= <expr><operator>&amp;</operator><name>test_rtree</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rtree_ctx_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_new</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected rtree_new() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_write</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name>PAGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>,
	    <argument><expr><call><name>extent_szind_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected rtree_write() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rtree_szind_slab_update</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name>PAGE</name></expr></argument>,
	    <argument><expr><call><name>extent_szind_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name>PAGE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>extent_a</name></expr></argument>,
	    <argument><expr><literal type="string">"rtree_extent_read() should return previously set value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_write</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>extent_b</name></expr></argument>, <argument><expr><call><name>extent_szind_get_maybe_invalid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_b</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><call><name>extent_slab_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent_b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected rtree_write() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
	    <argument><expr><operator>~</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_b</name></expr></argument>,
	    <argument><expr><literal type="string">"rtree_extent_read() should return previously set value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rtree_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_rtree_bits</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>keys</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PAGE</name></expr>, <expr><name>PAGE</name> <operator>+</operator> <literal type="number">1</literal></expr>,
	    <expr><name>PAGE</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>LG_PAGE</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>extent_t</name></type> <name>extent</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name> <init>= <expr><operator>&amp;</operator><name>test_rtree</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rtree_ctx_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_new</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected rtree_new() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_write</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected rtree_write() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
			    <argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>,
			    <argument><expr><literal type="string">"rtree_extent_read() should return previously set "</literal>
			    <literal type="string">"value and ignore insignificant key bits; i=%u, "</literal>
			    <literal type="string">"j=%u, set key=%#"</literal><name>FMTxPTR</name><literal type="string">", get key=%#"</literal><name>FMTxPTR</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
			    <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
		    <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>LG_PAGE</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Only leftmost rtree leaf should be set; i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rtree_clear</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>rtree_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_rtree_random</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSET</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEED</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>sfmt</name> <init>= <expr><call><name>init_gen_rand</name><argument_list>(<argument><expr><name>SEED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>keys</name><index>[<expr><name>NSET</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name> <init>= <expr><operator>&amp;</operator><name>test_rtree</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rtree_ctx_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>extent_t</name></type> <name>extent</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rtree_new</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected rtree_new() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>gen_rand64</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>elm</name> <init>= <expr><call><name>rtree_leaf_elm_lookup</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>elm</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected rtree_leaf_elm_lookup() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rtree_leaf_elm_write</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>elm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>,
		    <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
		    <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>,
		    <argument><expr><literal type="string">"rtree_extent_read() should return previously set value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
		    <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>,
		    <argument><expr><literal type="string">"rtree_extent_read() should return previously set value, "</literal>
		    <literal type="string">"i=%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rtree_clear</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
		    <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><literal type="string">"rtree_extent_read() should return previously set value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>rtree_extent_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx</name></expr></argument>,
		    <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"rtree_extent_read() should return previously set value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>rtree_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fini_gen_rand</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEED</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>rtree_node_alloc_orig</name> <operator>=</operator> <name>rtree_node_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_node_alloc</name> <operator>=</operator> <name>rtree_node_alloc_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_node_dalloc_orig</name> <operator>=</operator> <name>rtree_node_dalloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_node_dalloc</name> <operator>=</operator> <name>rtree_node_dalloc_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_leaf_alloc_orig</name> <operator>=</operator> <name>rtree_leaf_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_leaf_alloc</name> <operator>=</operator> <name>rtree_leaf_alloc_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_leaf_dalloc_orig</name> <operator>=</operator> <name>rtree_leaf_dalloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rtree_leaf_dalloc</name> <operator>=</operator> <name>rtree_leaf_dalloc_intercept</name></expr>;</expr_stmt>

	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_rtree_read_empty</name></expr></argument>,
	    <argument><expr><name>test_rtree_extrema</name></expr></argument>,
	    <argument><expr><name>test_rtree_bits</name></expr></argument>,
	    <argument><expr><name>test_rtree_random</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
