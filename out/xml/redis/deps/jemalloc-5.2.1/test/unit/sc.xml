<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/sc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_update_slab_size</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>sc_data_t</name></type> <name>data</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sc_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>tiny</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>sc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>tiny_size</name> <init>= <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>tiny</name><operator>-&gt;</operator><name>lg_base</name></name><operator>)</operator>
	    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name><name>tiny</name><operator>-&gt;</operator><name>ndelta</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>tiny</name><operator>-&gt;</operator><name>lg_delta</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pgs_too_big</name> <init>= <expr><operator>(</operator><name>tiny_size</name> <operator>*</operator> <name>BITMAP_MAXBITS</name> <operator>+</operator> <name>PAGE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>PAGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sc_data_update_slab_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>tiny_size</name></expr></argument>, <argument><expr><name>tiny_size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pgs_too_big</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_lt</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>tiny</name><operator>-&gt;</operator><name>pgs</name></name></expr></argument>, <argument><expr><name>pgs_too_big</name></expr></argument>, <argument><expr><literal type="string">"Allowed excessive pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sc_data_update_slab_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>PAGE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>.</operator><name>nbins</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>reg_size</name> <init>= <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name><operator>)</operator>
		    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>reg_size</name> <operator>&lt;=</operator> <name>PAGE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Ignored valid page size hint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>assert_d_gt</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
			    <argument><expr><literal type="string">"Allowed invalid page size hint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_update_slab_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
