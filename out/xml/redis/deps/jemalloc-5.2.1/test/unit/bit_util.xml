<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/bit_util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bit_util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_POW2_CEIL</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>suf</name></type></parameter>, <parameter><type><name>pri</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {				\
	unsigned i, pow2;						\
	t x;								\
									\
	assert_##suf##_eq(pow2_ceil_##suf(0), 0, "Unexpected result");	\
									\
	for (i = 0; i &lt; sizeof(t) * 8; i++) {				\
		assert_##suf##_eq(pow2_ceil_##suf(((t)1) &lt;&lt; i), ((t)1)	\
		    &lt;&lt; i, "Unexpected result");				\
	}								\
									\
	for (i = 2; i &lt; sizeof(t) * 8; i++) {				\
		assert_##suf##_eq(pow2_ceil_##suf((((t)1) &lt;&lt; i) - 1),	\
		    ((t)1) &lt;&lt; i, "Unexpected result");			\
	}								\
									\
	for (i = 0; i &lt; sizeof(t) * 8 - 1; i++) {			\
		assert_##suf##_eq(pow2_ceil_##suf((((t)1) &lt;&lt; i) + 1),	\
		    ((t)1) &lt;&lt; (i+1), "Unexpected result");		\
	}								\
									\
	for (pow2 = 1; pow2 &lt; 25; pow2++) {				\
		for (x = (((t)1) &lt;&lt; (pow2-1)) + 1; x &lt;= ((t)1) &lt;&lt; pow2;	\
		    x++) {						\
			assert_##suf##_eq(pow2_ceil_##suf(x),		\
			    ((t)1) &lt;&lt; pow2,				\
			    "Unexpected result, x=%"pri, x);		\
		}							\
	}								\
} while (0)</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_pow2_ceil_u64</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>TEST_POW2_CEIL</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><name>FMTu64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_pow2_ceil_u32</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>TEST_POW2_CEIL</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>u32</name></expr></argument>, <argument><expr><name>FMTu32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_pow2_ceil_zu</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>TEST_POW2_CEIL</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>zu</name></expr></argument>, <argument><expr><literal type="string">"zu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>void</name></type>
<name>assert_lg_ceil_range</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>answer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Got %u as lg_ceil of 1"</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>answer</name><operator>)</operator></expr></argument>,
	    <argument><expr><literal type="string">"Got %u as lg_ceil of %zu"</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_gt</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>answer</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
	    <argument><expr><literal type="string">"Got %u as lg_ceil of %zu"</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>assert_lg_floor_range</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>answer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"Got %u as lg_floor of 1"</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>answer</name><operator>)</operator></expr></argument>,
	    <argument><expr><literal type="string">"Got %u as lg_floor of %zu"</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_lt</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>answer</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
	    <argument><expr><literal type="string">"Got %u as lg_floor of %zu"</literal></expr></argument>, <argument><expr><name>answer</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_lg_ceil_floor</argument>)</argument_list></macro> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_lg_ceil_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>lg_ceil</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_lg_ceil_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>LG_CEIL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_lg_floor_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>lg_floor</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_lg_floor_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>LG_FLOOR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>num1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator>
			    <operator>-</operator> <name>j</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>num2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator>
			    <operator>+</operator> <name>j</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid lg argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name>num2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid lg argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_ceil_range</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><call><name>lg_ceil</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_ceil_range</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><call><name>LG_CEIL</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_ceil_range</name><argument_list>(<argument><expr><name>num2</name></expr></argument>, <argument><expr><call><name>lg_ceil</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_ceil_range</name><argument_list>(<argument><expr><name>num2</name></expr></argument>, <argument><expr><call><name>LG_CEIL</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>assert_lg_floor_range</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><call><name>lg_floor</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_floor_range</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><call><name>LG_FLOOR</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_floor_range</name><argument_list>(<argument><expr><name>num2</name></expr></argument>, <argument><expr><call><name>lg_floor</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_lg_floor_range</name><argument_list>(<argument><expr><name>num2</name></expr></argument>, <argument><expr><call><name>LG_FLOOR</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_pow2_ceil_u64</name></expr></argument>,
	    <argument><expr><name>test_pow2_ceil_u32</name></expr></argument>,
	    <argument><expr><name>test_pow2_ceil_zu</name></expr></argument>,
	    <argument><expr><name>test_lg_ceil_floor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
