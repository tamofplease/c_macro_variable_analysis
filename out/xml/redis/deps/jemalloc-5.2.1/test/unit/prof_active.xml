<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/prof_active.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallctl_bool_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>old</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"%s():%d: Unexpected mallctl failure reading %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_b_eq</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><literal type="string">"%s():%d: Unexpected %s value"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
	    <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallctl_bool_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>old_expected</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val_new</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>old</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val_new</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"%s():%d: Unexpected mallctl failure reading/writing %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
	    <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_b_eq</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>old_expected</name></expr></argument>, <argument><expr><literal type="string">"%s():%d: Unexpected %s value"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
	    <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallctl_prof_active_get_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prof_active_old_expected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>mallctl_bool_get</name><argument_list>(<argument><expr><literal type="string">"prof.active"</literal></expr></argument>, <argument><expr><name>prof_active_old_expected</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctl_prof_active_get</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>					\
	<cpp:value>mallctl_prof_active_get_impl(a, __func__, __LINE__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallctl_prof_active_set_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prof_active_old_expected</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>prof_active_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>mallctl_bool_set</name><argument_list>(<argument><expr><literal type="string">"prof.active"</literal></expr></argument>, <argument><expr><name>prof_active_old_expected</name></expr></argument>,
	    <argument><expr><name>prof_active_new</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctl_prof_active_set</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>					\
	<cpp:value>mallctl_prof_active_set_impl(a, b, __func__, __LINE__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallctl_thread_prof_active_get_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>thread_prof_active_old_expected</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>mallctl_bool_get</name><argument_list>(<argument><expr><literal type="string">"thread.prof.active"</literal></expr></argument>, <argument><expr><name>thread_prof_active_old_expected</name></expr></argument>,
	    <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctl_thread_prof_active_get</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>mallctl_thread_prof_active_get_impl(a, __func__, __LINE__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallctl_thread_prof_active_set_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>thread_prof_active_old_expected</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>thread_prof_active_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>mallctl_bool_set</name><argument_list>(<argument><expr><literal type="string">"thread.prof.active"</literal></expr></argument>, <argument><expr><name>thread_prof_active_old_expected</name></expr></argument>,
	    <argument><expr><name>thread_prof_active_new</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mallctl_thread_prof_active_set</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>mallctl_thread_prof_active_set_impl(a, b, __func__, __LINE__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prof_sampling_probe_impl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>expect_sample</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>expected_backtraces</name> <init>= <expr><ternary><condition><expr><name>expect_sample</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s():%d: Expected 0 backtraces"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>,
	    <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>expected_backtraces</name></expr></argument>,
	    <argument><expr><literal type="string">"%s():%d: Unexpected backtrace count"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prof_sampling_probe</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>						\
	<cpp:value>prof_sampling_probe_impl(a, __func__, __LINE__)</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prof_active</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mallctl_prof_active_get</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl_thread_prof_active_get</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mallctl_prof_active_set</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl_thread_prof_active_set</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* prof.active, !thread.prof.active. */</comment>
	<expr_stmt><expr><call><name>prof_sampling_probe</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mallctl_prof_active_set</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl_thread_prof_active_set</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* !prof.active, !thread.prof.active. */</comment>
	<expr_stmt><expr><call><name>prof_sampling_probe</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mallctl_prof_active_set</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl_thread_prof_active_set</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* !prof.active, thread.prof.active. */</comment>
	<expr_stmt><expr><call><name>prof_sampling_probe</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mallctl_prof_active_set</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl_thread_prof_active_set</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* prof.active, thread.prof.active. */</comment>
	<expr_stmt><expr><call><name>prof_sampling_probe</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Restore settings. */</comment>
	<expr_stmt><expr><call><name>mallctl_prof_active_set</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mallctl_thread_prof_active_set</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_prof_active</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
