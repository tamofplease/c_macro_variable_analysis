<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/huge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<comment type="block">/* Threshold: 2 &lt;&lt; 20 = 2097152. */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>malloc_conf</name> <init>= <expr><literal type="string">"oversize_threshold:2097152"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUGE_SZ</name></cpp:macro> <cpp:value>(2 &lt;&lt; 20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALL_SZ</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>huge_bind_thread</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena1</name></decl>, <decl><type ref="prev"/><name>arena2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Bind to a manual arena. */</comment>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Failed to create arena"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.arena"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena1</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arena1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Fail to bind thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>HUGE_SZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate huge size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="string">"Wrong arena used after binding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Switch back to arena 0. */</comment>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><name>have_percpu_arena</name> <operator>&amp;&amp;</operator>
	    <call><name>PERCPU_ARENA_ENABLED</name><argument_list>(<argument><expr><name>opt_percpu_arena</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>arena2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.arena"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arena2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Fail to bind thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>SMALL_SZ</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Wrong arena used after binding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then huge allocation should use the huge arena. */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>HUGE_SZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate huge size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_ne</name><argument_list>(<argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Wrong arena used after binding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_ne</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="string">"Wrong arena used after binding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>huge_mallocx</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena1</name></decl>, <decl><type ref="prev"/><name>arena2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Failed to create arena"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>huge</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>HUGE_SZ</name></expr></argument>, <argument><expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>huge</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate huge size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>huge</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>huge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="string">"Wrong arena used for mallocx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>huge</name></expr></argument>, <argument><expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>huge2</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>HUGE_SZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>huge</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate huge size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>huge2</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>huge2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_ne</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><name>arena2</name></expr></argument>,
	    <argument><expr><literal type="string">"Huge allocation should not come from the manual arena."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_ne</name><argument_list>(<argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Huge allocation should not come from the arena 0."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>huge2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>huge_allocation</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena1</name></decl>, <decl><type ref="prev"/><name>arena2</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>HUGE_SZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate huge size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_gt</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Huge allocation should not come from arena 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>HUGE_SZ</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate half huge size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_ne</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><name>arena2</name></expr></argument>, <argument><expr><literal type="string">"Wrong arena used for half huge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>SMALL_SZ</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Fail to allocate small size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lookup"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arena2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_ne</name><argument_list>(<argument><expr><name>arena1</name></expr></argument>, <argument><expr><name>arena2</name></expr></argument>,
	    <argument><expr><literal type="string">"Huge and small should be from different arenas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>huge_allocation</name></expr></argument>,
	    <argument><expr><name>huge_mallocx</name></expr></argument>,
	    <argument><expr><name>huge_bind_thread</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
