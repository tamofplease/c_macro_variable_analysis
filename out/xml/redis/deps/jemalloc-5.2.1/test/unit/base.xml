<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/base.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/extent_hooks.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>extent_hooks_t</name></type> <name>hooks_null</name> <init>= <expr><block>{
	<expr><name>extent_alloc_hook</name></expr>,
	<expr><name>NULL</name></expr>, <comment type="block">/* dalloc */</comment>
	<expr><name>NULL</name></expr>, <comment type="block">/* destroy */</comment>
	<expr><name>NULL</name></expr>, <comment type="block">/* commit */</comment>
	<expr><name>NULL</name></expr>, <comment type="block">/* decommit */</comment>
	<expr><name>NULL</name></expr>, <comment type="block">/* purge_lazy */</comment>
	<expr><name>NULL</name></expr>, <comment type="block">/* purge_forced */</comment>
	<expr><name>NULL</name></expr>, <comment type="block">/* split */</comment>
	<expr><name>NULL</name></expr> <comment type="block">/* merge */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>extent_hooks_t</name></type> <name>hooks_not_null</name> <init>= <expr><block>{
	<expr><name>extent_alloc_hook</name></expr>,
	<expr><name>extent_dalloc_hook</name></expr>,
	<expr><name>extent_destroy_hook</name></expr>,
	<expr><name>NULL</name></expr>, <comment type="block">/* commit */</comment>
	<expr><name>extent_decommit_hook</name></expr>,
	<expr><name>extent_purge_lazy_hook</name></expr>,
	<expr><name>extent_purge_forced_hook</name></expr>,
	<expr><name>NULL</name></expr>, <comment type="block">/* split */</comment>
	<expr><name>NULL</name></expr> <comment type="block">/* merge */</comment>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_base_hooks_default</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>allocated0</name></decl>, <decl><type ref="prev"/><name>allocated1</name></decl>, <decl><type ref="prev"/><name>resident</name></decl>, <decl><type ref="prev"/><name>mapped</name></decl>, <decl><type ref="prev"/><name>n_thp</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>base_new</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>extent_hooks_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>extent_hooks_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>base_stats_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapped</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>n_thp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>allocated0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		    <argument><expr><literal type="string">"Base header should count as allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_always</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_gt</name><argument_list>(<argument><expr><name>n_thp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			    <argument><expr><literal type="string">"Base should have 1 THP at least."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>base_stats_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapped</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>n_thp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>allocated1</name> <operator>-</operator> <name>allocated0</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>,
		    <argument><expr><literal type="string">"At least 42 bytes were allocated by base_alloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>base_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_base_hooks_null</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_hooks_t</name></type> <name>hooks_orig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>allocated0</name></decl>, <decl><type ref="prev"/><name>allocated1</name></decl>, <decl><type ref="prev"/><name>resident</name></decl>, <decl><type ref="prev"/><name>mapped</name></decl>, <decl><type ref="prev"/><name>n_thp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extent_hooks_prep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_lazy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_forced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks_orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_null</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>base_new</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"Unexpected base_new() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>base_stats_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapped</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>n_thp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>allocated0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		    <argument><expr><literal type="string">"Base header should count as allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_always</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_gt</name><argument_list>(<argument><expr><name>n_thp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			    <argument><expr><literal type="string">"Base should have 1 THP at least."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>base_stats_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocated1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapped</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>n_thp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>allocated1</name> <operator>-</operator> <name>allocated0</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>,
		    <argument><expr><literal type="string">"At least 42 bytes were allocated by base_alloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>base_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_orig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_base_hooks_not_null</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_hooks_t</name></type> <name>hooks_orig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r_exp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extent_hooks_prep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_lazy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_forced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks_orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_not_null</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>did_alloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>base_new</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="string">"Unexpected base_new() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>did_alloc</name></expr></argument>, <argument><expr><literal type="string">"Expected alloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for tight packing at specified alignment under simple
	 * conditions.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>alignments</name><index>[]</index></name> <init>= <expr><block>{
			<expr><literal type="number">1</literal></expr>,
			<expr><name>QUANTUM</name></expr>,
			<expr><name>QUANTUM</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
			<expr><name>CACHELINE</name></expr>,
			<expr><name>CACHELINE</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
		}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>alignments</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>alignment</name> <init>= <expr><name><name>alignments</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>align_ceil</name> <init>= <expr><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>,
			    <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name></expr></argument>,
			    <argument><expr><name>alignment</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Expected quantum alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>+</operator> <name>align_ceil</name><operator>)</operator></expr></argument>, <argument><expr><name>q</name></expr></argument>,
			    <argument><expr><literal type="string">"Minimal allocation should take up %zu bytes"</literal></expr></argument>,
			    <argument><expr><name>align_ceil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>q</name> <operator>+</operator> <name>align_ceil</name><operator>)</operator></expr></argument>, <argument><expr><name>r</name></expr></argument>,
			    <argument><expr><literal type="string">"Minimal allocation should take up %zu bytes"</literal></expr></argument>,
			    <argument><expr><name>align_ceil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>

	<comment type="block">/*
	 * Allocate an object that cannot fit in the first block, then verify
	 * that the first block's remaining space is considered for subsequent
	 * allocation.
	 */</comment>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>extent_bsize_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>blocks</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>,
	    <argument><expr><literal type="string">"Remainder insufficient for test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Use up all but one quantum of block. */</comment>
	<while>while <condition>(<expr><call><name>extent_bsize_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>blocks</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>QUANTUM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>r_exp</name> <operator>=</operator> <call><name>extent_addr_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>blocks</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>extent_sn_next</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"One extant block expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>QUANTUM</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>r_exp</name></expr></argument>, <argument><expr><literal type="string">"Expected allocation from new block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>extent_sn_next</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Two extant blocks expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r_exp</name></expr></argument>, <argument><expr><literal type="string">"Expected allocation from first block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>extent_sn_next</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Two extant blocks expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for proper alignment support when normal blocks are too small.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>alignments</name><index>[]</index></name> <init>= <expr><block>{
			<expr><name>HUGEPAGE</name></expr>,
			<expr><name>HUGEPAGE</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>
		}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>alignments</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>alignment</name> <init>= <expr><name><name>alignments</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected base_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name></expr></argument>,
			    <argument><expr><name>alignment</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Expected %zu-byte alignment"</literal></expr></argument>,
			    <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>

	<expr_stmt><expr><name>called_dalloc</name> <operator>=</operator> <name>called_destroy</name> <operator>=</operator> <name>called_decommit</name> <operator>=</operator> <name>called_purge_lazy</name> <operator>=</operator>
	    <name>called_purge_forced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>base_delete</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_dalloc</name></expr></argument>, <argument><expr><literal type="string">"Expected dalloc call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><name>called_destroy</name></expr></argument>, <argument><expr><literal type="string">"Unexpected destroy call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_decommit</name></expr></argument>, <argument><expr><literal type="string">"Expected decommit call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_purge_lazy</name></expr></argument>, <argument><expr><literal type="string">"Expected purge_lazy call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>called_purge_forced</name></expr></argument>, <argument><expr><literal type="string">"Expected purge_forced call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>try_dalloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_lazy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>try_purge_forced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_orig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_base_hooks_default</name></expr></argument>,
	    <argument><expr><name>test_base_hooks_null</name></expr></argument>,
	    <argument><expr><name>test_base_hooks_not_null</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
