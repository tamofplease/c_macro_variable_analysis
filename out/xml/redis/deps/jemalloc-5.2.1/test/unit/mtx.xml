<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/mtx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTHREADS</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NINCRS</name></cpp:macro>		<cpp:value>2000000</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_mtx_basic</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>mtx_t</name></type> <name>mtx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>mtx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected mtx_init() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mtx_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mtx_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mtx_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>TEST_END</name></macro>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>mtx_t</name></type>		<name>mtx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>x</name></decl>;</decl_stmt>
}</block></struct></type> <name>thd_start_arg_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>varg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_start_arg_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>thd_start_arg_t</name> <operator>*</operator><operator>)</operator><name>varg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NINCRS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>mtx_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>x</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mtx_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_mtx_race</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_start_arg_t</name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thd_t</name></type> <name><name>thds</name><index>[<expr><name>NTHREADS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>mtx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>.</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected mtx_init() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NTHREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>thd_start</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NTHREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name><name>thds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>NTHREADS</name> <operator>*</operator> <name>NINCRS</name></expr></argument>,
	    <argument><expr><literal type="string">"Race-related counter corruption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_mtx_basic</name></expr></argument>,
	    <argument><expr><name>test_mtx_race</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
