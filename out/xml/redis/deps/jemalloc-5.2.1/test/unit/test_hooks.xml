<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/test_hooks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>hook_called</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hook</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>hook_called</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>func_to_hook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>arg1</name> <operator>+</operator> <name>arg2</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>func_to_hook</name></cpp:macro> <cpp:value>JEMALLOC_HOOK(func_to_hook, test_hooks_libc_hook)</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>unhooked_call</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><name>test_hooks_libc_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hook_called</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>func_to_hook</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Hooking changed return value."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>hook_called</name></expr></argument>, <argument><expr><literal type="string">"Nulling out hook didn't take."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>hooked_call</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>test_hooks_libc_hook</name> <operator>=</operator> <operator>&amp;</operator><name>hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hook_called</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>func_to_hook</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Hooking changed return value."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>hook_called</name></expr></argument>, <argument><expr><literal type="string">"Hook should have executed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>unhooked_call</name></expr></argument>,
	    <argument><expr><name>hooked_call</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
