<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/hash.c"><comment type="block">/*
 * This file is based on code that is part of SMHasher
 * (https://code.google.com/p/smhasher/), and is subject to the MIT license
 * (http://www.opensource.org/licenses/mit-license.php).  Both email addresses
 * associated with the source code's revision history belong to Austin Appleby,
 * and the revision history ranges from 2010 to 2012.  Therefore the copyright
 * and license are here taken to be:
 *
 * Copyright (c) 2010-2012 Austin Appleby
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/hash.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
	<decl><name>hash_variant_x86_32</name></decl>,
	<decl><name>hash_variant_x86_128</name></decl>,
	<decl><name>hash_variant_x64_128</name></decl>
}</block></enum></type> <name>hash_variant_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hash_variant_bits</name><parameter_list>(<parameter><decl><type><name>hash_variant_t</name></type> <name>variant</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch <condition>(<expr><name>variant</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>hash_variant_x86_32</name></expr>:</case> <return>return <expr><literal type="number">32</literal></expr>;</return>
	<case>case <expr><name>hash_variant_x86_128</name></expr>:</case> <return>return <expr><literal type="number">128</literal></expr>;</return>
	<case>case <expr><name>hash_variant_x64_128</name></expr>:</case> <return>return <expr><literal type="number">128</literal></expr>;</return>
	<default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hash_variant_string</name><parameter_list>(<parameter><decl><type><name>hash_variant_t</name></type> <name>variant</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch <condition>(<expr><name>variant</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>hash_variant_x86_32</name></expr>:</case> <return>return <expr><literal type="string">"hash_x86_32"</literal></expr>;</return>
	<case>case <expr><name>hash_variant_x86_128</name></expr>:</case> <return>return <expr><literal type="string">"hash_x86_128"</literal></expr>;</return>
	<case>case <expr><name>hash_variant_x64_128</name></expr>:</case> <return>return <expr><literal type="string">"hash_x64_128"</literal></expr>;</return>
	<default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SIZE</name></cpp:macro>	<cpp:value>256</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_variant_verify_key</name><parameter_list>(<parameter><decl><type><name>hash_variant_t</name></type> <name>variant</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hashbytes</name> <init>= <expr><call><name>hash_variant_bits</name><argument_list>(<argument><expr><name>variant</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hashes_size</name> <init>= <expr><name>hashbytes</name> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>VARIABLE_ARRAY</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>hashes_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VARIABLE_ARRAY</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>final</name></expr></argument>, <argument><expr><name>hashbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>computed</name></decl>, <decl><type ref="prev"/><name>expected</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hashes_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>final</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hashbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Hash keys of the form {0}, {0,1}, {0,1,2}, ..., {0,1,...,255} as the
	 * seed.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>variant</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>hash_variant_x86_32</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>out</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>hash_x86_32</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">256</literal><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashes</name><index>[<expr><name>i</name><operator>*</operator><name>hashbytes</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>hashbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block> <case>case <expr><name>hash_variant_x86_128</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>hash_x86_128</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">256</literal><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashes</name><index>[<expr><name>i</name><operator>*</operator><name>hashbytes</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>hashbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block> <case>case <expr><name>hash_variant_x64_128</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>hash_x64_128</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">256</literal><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashes</name><index>[<expr><name>i</name><operator>*</operator><name>hashbytes</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>hashbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block> <default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<comment type="block">/* Hash the result array. */</comment>
	<switch>switch <condition>(<expr><name>variant</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>hash_variant_x86_32</name></expr>:</case> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>out</name> <init>= <expr><call><name>hash_x86_32</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>hashes_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>final</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block> <case>case <expr><name>hash_variant_x86_128</name></expr>:</case> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>hash_x86_128</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>hashes_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>final</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block> <case>case <expr><name>hash_variant_x64_128</name></expr>:</case> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>hash_x64_128</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>, <argument><expr><name>hashes_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>final</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block> <default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>computed</name> <operator>=</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
	    <operator>(</operator><name><name>final</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>variant</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_BIG_ENDIAN</name></cpp:ifdef>
	<case>case <expr><name>hash_variant_x86_32</name></expr>:</case> <expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0x6213303eU</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>hash_variant_x86_128</name></expr>:</case> <expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0x266820caU</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>hash_variant_x64_128</name></expr>:</case> <expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0xcc622b6fU</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<case>case <expr><name>hash_variant_x86_32</name></expr>:</case> <expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0xb0f57ee3U</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>hash_variant_x86_128</name></expr>:</case> <expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0xb3ece62aU</literal></expr>;</expr_stmt> <break>break;</break>
	<case>case <expr><name>hash_variant_x64_128</name></expr>:</case> <expr_stmt><expr><name>expected</name> <operator>=</operator> <literal type="number">0x6384ba69U</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<default>default:</default> <expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name>computed</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>,
	    <argument><expr><literal type="string">"Hash mismatch for %s(): expected %#x but got %#x"</literal></expr></argument>,
	    <argument><expr><call><name>hash_variant_string</name><argument_list>(<argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>computed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_variant_verify</name><parameter_list>(<parameter><decl><type><name>hash_variant_t</name></type> <name>variant</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALIGN</name></cpp:macro>	<cpp:value>16</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><name>KEY_SIZE</name> <operator>+</operator> <operator>(</operator><name>MAX_ALIGN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ALIGN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>hash_variant_verify_key</name><argument_list>(<argument><expr><name>variant</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX_ALIGN</name></cpp:undef>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KEY_SIZE</name></cpp:undef>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_hash_x86_32</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>hash_variant_verify</name><argument_list>(<argument><expr><name>hash_variant_x86_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hash_x86_128</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>hash_variant_verify</name><argument_list>(<argument><expr><name>hash_variant_x86_128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hash_x64_128</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>hash_variant_verify</name><argument_list>(<argument><expr><name>hash_variant_x64_128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_hash_x86_32</name></expr></argument>,
	    <argument><expr><name>test_hash_x86_128</name></expr></argument>,
	    <argument><expr><name>test_hash_x64_128</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
