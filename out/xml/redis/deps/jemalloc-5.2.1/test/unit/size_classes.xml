<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/size_classes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_max_size_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nlextents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>miblen</name></decl>, <decl><type ref="prev"/><name>max_size_class</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.nlextents"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nlextents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>miblen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>nlextents</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>max_size_class</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
	    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>max_size_class</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_size_classes</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size_class</name></decl>, <decl><type ref="prev"/><name>max_size_class</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>max_index</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>max_size_class</name> <operator>=</operator> <call><name>get_max_size_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_index</name> <operator>=</operator> <call><name>sz_size2index</name><argument_list>(<argument><expr><name>max_size_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size_class</name> <operator>=</operator> <call><name>sz_index2size</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>max_index</name> <operator>||</operator>
	    <name>size_class</name> <operator>&lt;</operator> <name>max_size_class</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr><operator>,</operator> <expr><name>size_class</name> <operator>=</operator>
	    <call><name>sz_index2size</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>max_index</name></expr></argument>,
		    <argument><expr><literal type="string">"Loop conditionals should be equivalent; index=%u, "</literal>
		    <literal type="string">"size_class=%zu (%#zx)"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>size_class</name> <operator>&lt;</operator> <name>max_size_class</name></expr></argument>,
		    <argument><expr><literal type="string">"Loop conditionals should be equivalent; index=%u, "</literal>
		    <literal type="string">"size_class=%zu (%#zx)"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_size2index() does not reverse sz_index2size(): index=%u"</literal>
		    <literal type="string">" --&gt; size_class=%zu --&gt; index=%u --&gt; size_class=%zu"</literal></expr></argument>,
		    <argument><expr><name>index</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>,
		    <argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_index2size() does not reverse sz_size2index(): index=%u"</literal>
		    <literal type="string">" --&gt; size_class=%zu --&gt; index=%u --&gt; size_class=%zu"</literal></expr></argument>,
		    <argument><expr><name>index</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Next size_class does not round up properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
		    <expr><call><name>sz_s2u</name><argument_list>(<argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sz_s2u</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		    <argument><expr><literal type="string">"sz_s2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>size_class</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_s2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_s2u() does not compute same size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_s2u() does not round up to next size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_size2index() does not reverse sz_index2size()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>max_size_class</name></expr></argument>, <argument><expr><call><name>sz_index2size</name><argument_list>(
	    <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>max_size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_index2size() does not reverse sz_size2index()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_s2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>size_class</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_s2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_s2u() does not compute same size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_psize_classes</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size_class</name></decl>, <decl><type ref="prev"/><name>max_psz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pszind_t</name></type> <name>pind</name></decl>, <decl><type ref="prev"/><name>max_pind</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>max_psz</name> <operator>=</operator> <call><name>get_max_size_class</name><argument_list>()</argument_list></call> <operator>+</operator> <name>PAGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_pind</name> <operator>=</operator> <call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>max_psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>pind</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size_class</name> <operator>=</operator> <call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind</name></expr></argument>)</argument_list></call></expr>;</init>
	    <condition><expr><name>pind</name> <operator>&lt;</operator> <name>max_pind</name> <operator>||</operator> <name>size_class</name> <operator>&lt;</operator> <name>max_psz</name></expr>;</condition>
	    <incr><expr><name>pind</name><operator>++</operator></expr><operator>,</operator> <expr><name>size_class</name> <operator>=</operator> <call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>pind</name> <operator>&lt;</operator> <name>max_pind</name></expr></argument>,
		    <argument><expr><literal type="string">"Loop conditionals should be equivalent; pind=%u, "</literal>
		    <literal type="string">"size_class=%zu (%#zx)"</literal></expr></argument>, <argument><expr><name>pind</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>size_class</name> <operator>&lt;</operator> <name>max_psz</name></expr></argument>,
		    <argument><expr><literal type="string">"Loop conditionals should be equivalent; pind=%u, "</literal>
		    <literal type="string">"size_class=%zu (%#zx)"</literal></expr></argument>, <argument><expr><name>pind</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>, <argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>pind</name></expr></argument>, <argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_psz2ind() does not reverse sz_pind2sz(): pind=%u --&gt;"</literal>
		    <literal type="string">" size_class=%zu --&gt; pind=%u --&gt; size_class=%zu"</literal></expr></argument>, <argument><expr><name>pind</name></expr></argument>,
		    <argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_pind2sz() does not reverse sz_psz2ind(): pind=%u --&gt;"</literal>
		    <literal type="string">" size_class=%zu --&gt; pind=%u --&gt; size_class=%zu"</literal></expr></argument>, <argument><expr><name>pind</name></expr></argument>,
		    <argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>size_class</name> <operator>==</operator> <name>SC_LARGE_MAXCLASS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>SC_NPSIZES</name></expr></argument>, <argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Next size_class does not round up properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>pind</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>size_class</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Next size_class does not round up properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>pind</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
		    <expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		    <argument><expr><literal type="string">"sz_psz2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>size_class</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_psz2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_psz2u() does not compute same size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"sz_psz2u() does not round up to next size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>pind</name></expr></argument>, <argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2ind() does not reverse sz_pind2sz()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>max_psz</name></expr></argument>, <argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>max_psz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_pind2sz() does not reverse sz_psz2ind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>size_class</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2u() does not round up to size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>, <argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>size_class</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2u() does not compute same size class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_overflow</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>max_size_class</name></decl>, <decl><type ref="prev"/><name>max_psz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>max_size_class</name> <operator>=</operator> <call><name>get_max_size_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_psz</name> <operator>=</operator> <name>max_size_class</name> <operator>+</operator> <name>PAGE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>max_size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_size2index() should return NSIZES on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_size2index() should return NSIZES on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_size2index() should return NSIZES on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>max_size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"sz_s2u() should return 0 for unsupported size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"sz_s2u() should return 0 for unsupported size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_s2u</name><argument_list>(<argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"sz_s2u() should return 0 on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>max_size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_NPSIZES</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2ind() should return NPSIZES on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_NPSIZES</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2ind() should return NPSIZES on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SC_NPSIZES</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2ind() should return NPSIZES on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>max_size_class</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_psz</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2u() should return (LARGE_MAXCLASS + PAGE) for unsupported"</literal>
	    <literal type="string">" size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><call><name>ZU</name><argument_list>(<argument><expr><name>PTRDIFF_MAX</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_psz</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2u() should return (LARGE_MAXCLASS + PAGE) for unsupported "</literal>
	    <literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_psz</name></expr></argument>,
	    <argument><expr><literal type="string">"sz_psz2u() should return (LARGE_MAXCLASS + PAGE) on overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_size_classes</name></expr></argument>,
	    <argument><expr><name>test_psize_classes</name></expr></argument>,
	    <argument><expr><name>test_overflow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
