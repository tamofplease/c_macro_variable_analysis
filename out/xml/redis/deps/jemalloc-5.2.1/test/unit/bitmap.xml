<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/bitmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBITS_TAB</name></cpp:macro> \
    <cpp:value>NB( 1) \
    NB( 2) \
    NB( 3) \
    NB( 4) \
    NB( 5) \
    NB( 6) \
    NB( 7) \
    NB( 8) \
    NB( 9) \
    NB(10) \
    NB(11) \
    NB(12) \
    NB(13) \
    NB(14) \
    NB(15) \
    NB(16) \
    NB(17) \
    NB(18) \
    NB(19) \
    NB(20) \
    NB(21) \
    NB(22) \
    NB(23) \
    NB(24) \
    NB(25) \
    NB(26) \
    NB(27) \
    NB(28) \
    NB(29) \
    NB(30) \
    NB(31) \
    NB(32) \
    \
    NB(33) \
    NB(34) \
    NB(35) \
    NB(36) \
    NB(37) \
    NB(38) \
    NB(39) \
    NB(40) \
    NB(41) \
    NB(42) \
    NB(43) \
    NB(44) \
    NB(45) \
    NB(46) \
    NB(47) \
    NB(48) \
    NB(49) \
    NB(50) \
    NB(51) \
    NB(52) \
    NB(53) \
    NB(54) \
    NB(55) \
    NB(56) \
    NB(57) \
    NB(58) \
    NB(59) \
    NB(60) \
    NB(61) \
    NB(62) \
    NB(63) \
    NB(64) \
    NB(65) \
    \
    NB(126) \
    NB(127) \
    NB(128) \
    NB(129) \
    NB(130) \
    \
    NB(254) \
    NB(255) \
    NB(256) \
    NB(257) \
    NB(258) \
    \
    NB(510) \
    NB(511) \
    NB(512) \
    NB(513) \
    NB(514) \
    \
    NB(1024) \
    NB(2048) \
    NB(4096) \
    NB(8192) \
    NB(16384) \

static void</cpp:value></cpp:define>
<macro><name>test_bitmap_initializer_body</name><argument_list>(<argument>const bitmap_info_t *binfo</argument>, <argument>size_t nbits</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>binfo_dyn</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>bitmap_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo_dyn</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo_dyn</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected difference between static and dynamic initialization, "</literal>
	    <literal type="string">"nbits=%zu"</literal></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>, <argument><expr><name><name>binfo_dyn</name><operator>.</operator><name>nbits</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected difference between static and dynamic initialization, "</literal>
	    <literal type="string">"nbits=%zu"</literal></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BITMAP_USE_TREE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr></argument>, <argument><expr><name><name>binfo_dyn</name><operator>.</operator><name>nlevels</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected difference between static and dynamic initialization, "</literal>
	    <literal type="string">"nbits=%zu"</literal></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name></expr></argument>,
			    <argument><expr><name><name>binfo_dyn</name><operator>.</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected difference between static and dynamic "</literal>
			    <literal type="string">"initialization, nbits=%zu, level=%u"</literal></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name></expr></argument>, <argument><expr><name><name>binfo_dyn</name><operator>.</operator><name>ngroups</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected difference between static and dynamic initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_bitmap_initializer</argument>)</argument_list></macro> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
		if (nbits &lt;= BITMAP_MAXBITS) {				\
			bitmap_info_t binfo =				\
			    BITMAP_INFO_INITIALIZER(nbits);		\
			test_bitmap_initializer_body(&amp;binfo, nbits);	\
		}							\
	}</cpp:value></cpp:define>
	<expr_stmt><expr><name>NBITS_TAB</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NB</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>size_t</name></type>
<name>test_bitmap_size_body</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>prev_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>nbits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>,
	    <argument><expr><literal type="string">"Bitmap size is smaller than expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>prev_size</name></expr></argument>, <argument><expr><literal type="string">"Bitmap size is smaller than expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_bitmap_size</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>, <decl><type ref="prev"/><name>prev_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prev_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>nbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nbits</name> <operator>&lt;=</operator> <name>BITMAP_MAXBITS</name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>binfo</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>bitmap_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_size</name> <operator>=</operator> <call><name>test_bitmap_size_body</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>prev_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
		bitmap_info_t binfo = BITMAP_INFO_INITIALIZER(nbits);	\
		prev_size = test_bitmap_size_body(&amp;binfo, nbits,	\
		    prev_size);						\
	}</cpp:value></cpp:define>
	<expr_stmt><expr><name>prev_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>NBITS_TAB</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NB</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>test_bitmap_init_body</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>(</operator><name>bitmap_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Bit should be unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bit should be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_bitmap_init</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>nbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nbits</name> <operator>&lt;=</operator> <name>BITMAP_MAXBITS</name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>binfo</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>bitmap_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_bitmap_init_body</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
		bitmap_info_t binfo = BITMAP_INFO_INITIALIZER(nbits);	\
		test_bitmap_init_body(&amp;binfo, nbits);			\
	}</cpp:value></cpp:define>
	<expr_stmt><expr><name>NBITS_TAB</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NB</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>test_bitmap_set_body</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>(</operator><name>bitmap_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"All bits should be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_bitmap_set</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>nbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nbits</name> <operator>&lt;=</operator> <name>BITMAP_MAXBITS</name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>binfo</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>bitmap_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_bitmap_set_body</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
		bitmap_info_t binfo = BITMAP_INFO_INITIALIZER(nbits);	\
		test_bitmap_set_body(&amp;binfo, nbits);			\
	}</cpp:value></cpp:define>
	<expr_stmt><expr><name>NBITS_TAB</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NB</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>test_bitmap_unset_body</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>(</operator><name>bitmap_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"All bits should be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"All bits should be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_bitmap_unset</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>nbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nbits</name> <operator>&lt;=</operator> <name>BITMAP_MAXBITS</name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>binfo</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>bitmap_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_bitmap_unset_body</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
		bitmap_info_t binfo = BITMAP_INFO_INITIALIZER(nbits);	\
		test_bitmap_unset_body(&amp;binfo, nbits);			\
	}</cpp:value></cpp:define>
	<expr_stmt><expr><name>NBITS_TAB</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NB</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>test_bitmap_xfu_body</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>(</operator><name>bitmap_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Iteratively set bits starting at the beginning. */</comment>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after previous first unset "</literal>
		    <literal type="string">"bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after previous first unset "</literal>
		    <literal type="string">"bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after previous first unset "</literal>
		    <literal type="string">"bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after previous first unset "</literal>
		    <literal type="string">"bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"All bits should be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Iteratively unset bits starting at the end, and verify that
	 * bitmap_sfu() reaches the unset bits.
	 */</comment>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content> <comment type="block">/* (nbits..0] */</comment>
		<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should the bit previously unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should the bit previously unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should the bit previously unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should the bit previously unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>bitmap_get</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bit should be unset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Iteratively set bits starting at the beginning, and verify that
	 * bitmap_sfu() looks past them.
	 */</comment>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after the bit previously "</literal>
		    <literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after the bit previously "</literal>
		    <literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after the bit previously "</literal>
		    <literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><literal type="string">"First unset bit should be just after the bit previously "</literal>
		    <literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"First unset bit should be the last bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nbits</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>nbits</name><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"First unset bit should be the last bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"First unset bit should be the last bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"First unset bit should be the last bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>bitmap_full</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"All bits should be set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Bubble a "usu" pattern through the bitmap and verify that
	 * bitmap_ffu() finds the correct bit for all five min_bit cases.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
				    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>nbits</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><name>nbits</name></expr></argument>, <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Unset the last bit, bubble another unset bit through the bitmap, and
	 * verify that bitmap_ffu() finds the correct bit for all four min_bit
	 * cases.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>bitmap_unset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
				    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_ffu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>bitmap_sfu</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected first unset bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_bitmap_xfu</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nbits</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>nbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nbits</name> <operator>&lt;=</operator> <name>BITMAP_MAXBITS</name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>binfo</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>bitmap_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_bitmap_xfu_body</name><argument_list>(<argument><expr><operator>&amp;</operator><name>binfo</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
		bitmap_info_t binfo = BITMAP_INFO_INITIALIZER(nbits);	\
		test_bitmap_xfu_body(&amp;binfo, nbits);			\
	}</cpp:value></cpp:define>
	<expr_stmt><expr><name>NBITS_TAB</name></expr></expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NB</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_bitmap_initializer</name></expr></argument>,
	    <argument><expr><name>test_bitmap_size</name></expr></argument>,
	    <argument><expr><name>test_bitmap_init</name></expr></argument>,
	    <argument><expr><name>test_bitmap_set</name></expr></argument>,
	    <argument><expr><name>test_bitmap_unset</name></expr></argument>,
	    <argument><expr><name>test_bitmap_xfu</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
