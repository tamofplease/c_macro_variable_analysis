<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/div.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/div.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_div_exhaustive</argument>)</argument_list></macro> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>divisor</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>divisor</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>divisor</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>div_info_t</name></type> <name>div_info</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>div_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>div_info</name></expr></argument>, <argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <name>divisor</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>dividend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dividend</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <name>divisor</name></expr>;</condition>
		    <incr><expr><name>dividend</name> <operator>+=</operator> <name>divisor</name></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>quotient</name> <init>= <expr><call><name>div_compute</name><argument_list>(
			    <argument><expr><operator>&amp;</operator><name>div_info</name></expr></argument>, <argument><expr><name>dividend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>dividend</name></expr></argument>, <argument><expr><name>quotient</name> <operator>*</operator> <name>divisor</name></expr></argument>,
			    <argument><expr><literal type="string">"With divisor = %zu, dividend = %zu, "</literal>
			    <literal type="string">"got quotient %zu"</literal></expr></argument>, <argument><expr><name>divisor</name></expr></argument>, <argument><expr><name>dividend</name></expr></argument>, <argument><expr><name>quotient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_div_exhaustive</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
