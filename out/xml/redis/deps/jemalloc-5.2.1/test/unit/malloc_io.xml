<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/malloc_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_malloc_strtoumax_no_endptr</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ju_eq</name><argument_list>(<argument><expr><call><name>malloc_strtoumax</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>get_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_malloc_strtoumax</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<struct>struct <name>test_s</name> <block>{
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected_remainder</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>expected_errno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected_errno_name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uintmax_t</name></type> <name>expected_x</name></decl>;</decl_stmt>
	}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>e, #e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KUMAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((uintmax_t)x##ULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KSMAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((uintmax_t)(intmax_t)x##LL)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name><name>struct</name> <name>test_s</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"0"</literal></expr>,		<expr><literal type="string">"0"</literal></expr>,	<expr><operator>-</operator><literal type="number">1</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0"</literal></expr>,		<expr><literal type="string">"0"</literal></expr>,	<expr><literal type="number">1</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0"</literal></expr>,		<expr><literal type="string">"0"</literal></expr>,	<expr><literal type="number">37</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,

		<expr><block>{<expr><literal type="string">""</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"+"</literal></expr>,		<expr><literal type="string">"+"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"++3"</literal></expr>,		<expr><literal type="string">"++3"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"-"</literal></expr>,		<expr><literal type="string">"-"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>,	<expr><name>UINTMAX_MAX</name></expr>}</block></expr>,

		<expr><block>{<expr><literal type="string">"42"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"+42"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"-42"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KSMAX</name><argument_list>(<argument>-<literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"042"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">042</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"+042"</literal></expr>,	<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">042</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"-042"</literal></expr>,	<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KSMAX</name><argument_list>(<argument>-<literal type="number">042</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0x42"</literal></expr>,	<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0x42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"+0x42"</literal></expr>,	<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0x42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"-0x42"</literal></expr>,	<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KSMAX</name><argument_list>(<argument>-<literal type="number">0x42</literal></argument>)</argument_list></macro>}</block></expr>,

		<expr><block>{<expr><literal type="string">"0"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"1"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>}</block></expr>,

		<expr><block>{<expr><literal type="string">"42"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">" 42"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"42 "</literal></expr>,		<expr><literal type="string">" "</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0x"</literal></expr>,		<expr><literal type="string">"x"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"42x"</literal></expr>,		<expr><literal type="string">"x"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">42</literal></argument>)</argument_list></macro>}</block></expr>,

		<expr><block>{<expr><literal type="string">"07"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"010"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"08"</literal></expr>,		<expr><literal type="string">"8"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0_"</literal></expr>,		<expr><literal type="string">"_"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,

		<expr><block>{<expr><literal type="string">"0x"</literal></expr>,		<expr><literal type="string">"x"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0X"</literal></expr>,		<expr><literal type="string">"X"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0xg"</literal></expr>,		<expr><literal type="string">"xg"</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0XA"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">0</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>}</block></expr>,

		<expr><block>{<expr><literal type="string">"010"</literal></expr>,		<expr><literal type="string">""</literal></expr>,	<expr><literal type="number">10</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0x3"</literal></expr>,		<expr><literal type="string">"x3"</literal></expr>,	<expr><literal type="number">10</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr>,

		<expr><block>{<expr><literal type="string">"12"</literal></expr>,		<expr><literal type="string">"2"</literal></expr>,	<expr><literal type="number">2</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"78"</literal></expr>,		<expr><literal type="string">"8"</literal></expr>,	<expr><literal type="number">8</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"9a"</literal></expr>,		<expr><literal type="string">"a"</literal></expr>,	<expr><literal type="number">10</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">9</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"9A"</literal></expr>,		<expr><literal type="string">"A"</literal></expr>,	<expr><literal type="number">10</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">9</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"fg"</literal></expr>,		<expr><literal type="string">"g"</literal></expr>,	<expr><literal type="number">16</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"FG"</literal></expr>,		<expr><literal type="string">"G"</literal></expr>,	<expr><literal type="number">16</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0xfg"</literal></expr>,	<expr><literal type="string">"g"</literal></expr>,	<expr><literal type="number">16</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"0XFG"</literal></expr>,	<expr><literal type="string">"G"</literal></expr>,	<expr><literal type="number">16</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"z_"</literal></expr>,		<expr><literal type="string">"_"</literal></expr>,	<expr><literal type="number">36</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">35</literal></argument>)</argument_list></macro>}</block></expr>,
		<expr><block>{<expr><literal type="string">"Z_"</literal></expr>,		<expr><literal type="string">"_"</literal></expr>,	<expr><literal type="number">36</literal></expr>,	<expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,		<macro><name>KUMAX</name><argument_list>(<argument><literal type="number">35</literal></argument>)</argument_list></macro>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KUMAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KSMAX</name></cpp:undef>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>test_s</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>test_s</name></name> <modifier>*</modifier></type><name>test</name> <init>= <expr><operator>&amp;</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uintmax_t</name></type> <name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>remainder</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>set_errno</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>malloc_strtoumax</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remainder</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>get_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>expected_errno</name></name></expr></argument>,
		    <argument><expr><literal type="string">"Expected errno %s for \"%s\", base %d"</literal></expr></argument>,
		    <argument><expr><name><name>test</name><operator>-&gt;</operator><name>expected_errno_name</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_str_eq</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>expected_remainder</name></name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected remainder for \"%s\", base %d"</literal></expr></argument>,
		    <argument><expr><name><name>test</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_ju_eq</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>expected_x</name></name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected result for \"%s\", base %d"</literal></expr></argument>,
			    <argument><expr><name><name>test</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_malloc_snprintf_truncated</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFLEN</name></cpp:macro>	<cpp:value>15</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>expected_str_untruncated</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {			\
	result = malloc_snprintf(buf, len, __VA_ARGS__);		\
	assert_d_eq(strncmp(buf, expected_str_untruncated, len-1), 0,	\
	    "Unexpected string inequality (\"%s\" vs \"%s\")",		\
	    buf, expected_str_untruncated);				\
	assert_zu_eq(result, strlen(expected_str_untruncated),		\
	    "Unexpected result");					\
} while (0)</cpp:value></cpp:define>

	<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>BUFLEN</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"012346789"</literal></expr></argument>,	<argument><expr><literal type="string">"012346789"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123b"</literal></expr></argument>,		<argument><expr><literal type="string">"a%sb"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a01234567"</literal></expr></argument>,	<argument><expr><literal type="string">"a%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>, <argument><expr><literal type="string">"4567"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123  "</literal></expr></argument>,		<argument><expr><literal type="string">"a%-6s"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a  0123"</literal></expr></argument>,		<argument><expr><literal type="string">"a%6s"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a   012"</literal></expr></argument>,		<argument><expr><literal type="string">"a%6.3s"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a   012"</literal></expr></argument>,		<argument><expr><literal type="string">"a%*.*s"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a 123b"</literal></expr></argument>,		<argument><expr><literal type="string">"a% db"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a123b"</literal></expr></argument>,		<argument><expr><literal type="string">"a%-db"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a-123b"</literal></expr></argument>,		<argument><expr><literal type="string">"a%-db"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a+123b"</literal></expr></argument>,		<argument><expr><literal type="string">"a%+db"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUFLEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_malloc_snprintf</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFLEN</name></cpp:macro>	<cpp:value>128</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>expected_str</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {					\
	result = malloc_snprintf(buf, sizeof(buf), __VA_ARGS__);	\
	assert_str_eq(buf, expected_str, "Unexpected output");		\
	assert_zu_eq(result, strlen(expected_str), "Unexpected result");\
} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"50%, 100%"</literal></expr></argument>, <argument><expr><literal type="string">"50%%, %d%%"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123b"</literal></expr></argument>, <argument><expr><literal type="string">"a%sb"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a 0123b"</literal></expr></argument>, <argument><expr><literal type="string">"a%5sb"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a 0123b"</literal></expr></argument>, <argument><expr><literal type="string">"a%*sb"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123 b"</literal></expr></argument>, <argument><expr><literal type="string">"a%-5sb"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123b"</literal></expr></argument>, <argument><expr><literal type="string">"a%*sb"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123 b"</literal></expr></argument>, <argument><expr><literal type="string">"a%*sb"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123 b"</literal></expr></argument>, <argument><expr><literal type="string">"a%-*sb"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a012b"</literal></expr></argument>, <argument><expr><literal type="string">"a%.3sb"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a012b"</literal></expr></argument>, <argument><expr><literal type="string">"a%.*sb"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a0123b"</literal></expr></argument>, <argument><expr><literal type="string">"a%.*sb"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a  012b"</literal></expr></argument>, <argument><expr><literal type="string">"a%5.3sb"</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a  012b"</literal></expr></argument>, <argument><expr><literal type="string">"a%5.*sb"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a  012b"</literal></expr></argument>, <argument><expr><literal type="string">"a%*.3sb"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a  012b"</literal></expr></argument>, <argument><expr><literal type="string">"a%*.*sb"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"a 0123b"</literal></expr></argument>, <argument><expr><literal type="string">"a%*.*sb"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"0123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_abcd_"</literal></expr></argument>, <argument><expr><literal type="string">"_%x_"</literal></expr></argument>, <argument><expr><literal type="number">0xabcd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0xabcd_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#x_"</literal></expr></argument>, <argument><expr><literal type="number">0xabcd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%o_"</literal></expr></argument>, <argument><expr><literal type="number">01234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#o_"</literal></expr></argument>, <argument><expr><literal type="number">01234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%u_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%d_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_ 1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_% d_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_+1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%+d_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%d_"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_% d_"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%+d_"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%d_"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%d_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%i_"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%i_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#o_"</literal></expr></argument>, <argument><expr><literal type="number">01234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%u_"</literal></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x1234abc_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#x_"</literal></expr></argument>, <argument><expr><literal type="number">0x1234abc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0X1234ABC_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#X_"</literal></expr></argument>, <argument><expr><literal type="number">0x1234abc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_c_"</literal></expr></argument>, <argument><expr><literal type="string">"_%c_"</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_string_"</literal></expr></argument>, <argument><expr><literal type="string">"_%s_"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x42_"</literal></expr></argument>, <argument><expr><literal type="string">"_%p_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x42</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ld_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ld_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%li_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%li_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#lo_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">01234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%lu_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x1234abc_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#lx_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0x1234abc</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0X1234ABC_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#lX_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0x1234ABC</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%lld_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%lld_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%lli_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%lli_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#llo_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">01234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%llu_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x1234abc_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#llx_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">0x1234abc</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0X1234ABC_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#llX_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">0x1234ABC</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%qd_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%qd_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%qi_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%qi_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#qo_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">01234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%qu_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x1234abc_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#qx_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">0x1234abc</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0X1234ABC_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#qX_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">0x1234ABC</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%jd_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%jd_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ji_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ji_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#jo_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><literal type="number">01234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ju_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x1234abc_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#jx_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><literal type="number">0x1234abc</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0X1234ABC_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#jX_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>intmax_t</name><operator>)</operator><literal type="number">0x1234ABC</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%td_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%td_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ti_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%ti_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%zd_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%zd_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_-1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%zi_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><operator>-</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%zi_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_01234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#zo_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><literal type="number">01234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_1234_"</literal></expr></argument>, <argument><expr><literal type="string">"_%zu_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><literal type="number">1234</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0x1234abc_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#zx_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><literal type="number">0x1234abc</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><literal type="string">"_0X1234ABC_"</literal></expr></argument>, <argument><expr><literal type="string">"_%#zX_"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><literal type="number">0x1234ABC</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUFLEN</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_malloc_strtoumax_no_endptr</name></expr></argument>,
	    <argument><expr><name>test_malloc_strtoumax</name></expr></argument>,
	    <argument><expr><name>test_malloc_snprintf_truncated</name></expr></argument>,
	    <argument><expr><name>test_malloc_snprintf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
