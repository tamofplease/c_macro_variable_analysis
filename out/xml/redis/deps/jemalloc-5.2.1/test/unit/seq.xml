<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/seq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/seq.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>data_s</name></name></type> <name>data_t</name>;</typedef>
<struct>struct <name>data_s</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_data</name><parameter_list>(<parameter><decl><type><name>data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>assert_data</name><parameter_list>(<parameter><decl><type><name>data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Data consistency error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>seq_define</name><argument_list>(<argument>data_t</argument>, <argument>data</argument>)</argument_list></macro>

<typedef>typedef <type><name><name>struct</name> <name>thd_data_s</name></name></type> <name>thd_data_t</name>;</typedef>
<struct>struct <name>thd_data_s</name> <block>{
	<decl_stmt><decl><type><name>seq_data_t</name></type> <name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>seq_reader_thd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_data_t</name> <modifier>*</modifier></type><name>thd_data</name> <init>= <expr><operator>(</operator><name>thd_data_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>data_t</name></type> <name>local_data</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>iter</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>seq_try_load_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thd_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_d_le</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>local_data</name><operator>.</operator><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
			    <argument><expr><literal type="string">"Seq read went back in time."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>local_data</name><operator>.</operator><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>seq_writer_thd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_data_t</name> <modifier>*</modifier></type><name>thd_data</name> <init>= <expr><operator>(</operator><name>thd_data_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>data_t</name></type> <name>local_data</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>set_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>seq_store_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thd_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_seq_threaded</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_data_t</name></type> <name>thd_data</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thd_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>thd_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>thd_t</name></type> <name>reader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thd_t</name></type> <name>writer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>seq_reader_thd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thd_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>seq_writer_thd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thd_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_seq_simple</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>data_t</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>seq_data_t</name></type> <name>seq</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>set_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>seq_store_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>seq_try_load_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_b_eq</name><argument_list>(<argument><expr><name>success</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"Failed non-racing read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_seq_simple</name></expr></argument>,
	    <argument><expr><name>test_seq_threaded</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
