<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/ql.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ql.h"</cpp:file></cpp:include>

<comment type="block">/* Number of ring entries, in [2..26]. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NENTRIES</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>list_s</name></name></type> <name>list_t</name>;</typedef>
<typedef>typedef <macro><name>ql_head</name><argument_list>(<argument>list_t</argument>)</argument_list></macro> <expr_stmt><expr><name>list_head_t</name></expr>;</expr_stmt></typedef>

<struct>struct <name>list_s</name> <block>{
	<macro><name>ql_elm</name><argument_list>(<argument>list_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>id</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_empty_list</name><parameter_list>(<parameter><decl><type><name>list_head_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>ql_first</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected element for empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>ql_last</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected element for empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>ql_foreach</name><argument_list>(<argument>t</argument>, <argument>head</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected element for empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>ql_reverse_foreach</name><argument_list>(<argument>t</argument>, <argument>head</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected element for empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ql_empty</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>list_head_t</name></type> <name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_empty_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>init_entries</name><parameter_list>(<parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nentries</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ql_elm_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_entries_list</name><parameter_list>(<parameter><decl><type><name>list_head_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nentries</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_c_eq</name><argument_list>(<argument><expr><call><name>ql_first</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><literal type="string">"Element id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_c_eq</name><argument_list>(<argument><expr><call><name>ql_last</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>nentries</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>,
	    <argument><expr><literal type="string">"Element id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>ql_foreach</name><argument_list>(<argument>t</argument>, <argument>head</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_c_eq</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><literal type="string">"Element id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>ql_reverse_foreach</name><argument_list>(<argument>t</argument>, <argument>head</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_c_eq</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>nentries</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>,
		    <argument><expr><literal type="string">"Element id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentries</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ql_next</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_c_eq</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><literal type="string">"Element id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>ql_next</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>nentries</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>ql_prev</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ql_prev</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_c_eq</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><literal type="string">"Element id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ql_tail_insert</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>list_head_t</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_t</name></type> <name><name>entries</name><index>[<expr><name>NENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_entries</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>test_entries_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>NENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_ql_tail_remove</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>list_head_t</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_t</name></type> <name><name>entries</name><index>[<expr><name>NENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_entries</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>test_entries_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>NENTRIES</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ql_tail_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>list_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>test_empty_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_ql_head_insert</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>list_head_t</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_t</name></type> <name><name>entries</name><index>[<expr><name>NENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_entries</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ql_head_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>NENTRIES</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>test_entries_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>NENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_ql_head_remove</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>list_head_t</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_t</name></type> <name><name>entries</name><index>[<expr><name>NENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_entries</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ql_head_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>NENTRIES</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>test_entries_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NENTRIES</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ql_head_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>list_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>test_empty_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_ql_insert</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>list_head_t</name></type> <name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_t</name></type> <name><name>entries</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>list_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_entries</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * ql_remove(), ql_before_insert(), and ql_after_insert() are used
	 * internally by other macros that are already tested, so there's no
	 * need to test them completely.  However, insertion/deletion from the
	 * middle of lists is not otherwise tested; do so here.
	 */</comment>
	<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_before_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_before_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_after_insert</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_after_insert</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_before_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_after_insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_before_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_entries_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>list_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_ql_empty</name></expr></argument>,
	    <argument><expr><name>test_ql_tail_insert</name></expr></argument>,
	    <argument><expr><name>test_ql_tail_remove</name></expr></argument>,
	    <argument><expr><name>test_ql_head_insert</name></expr></argument>,
	    <argument><expr><name>test_ql_head_remove</name></expr></argument>,
	    <argument><expr><name>test_ql_insert</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
