<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/extent_quantize.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_small_extent_size</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nbins</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>extent_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Iterate over all small size classes, get their extent sizes, and
	 * verify that the quantized size is the same as the extent size.
	 */</comment>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.nbins"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nbins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arenas.bin.0.slab_size"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>extent_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
		    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>,
		    <argument><expr><call><name>extent_size_quantize_floor</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Small extent quantization should be a no-op "</literal>
		    <literal type="string">"(extent_size=%zu)"</literal></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>,
		    <argument><expr><call><name>extent_size_quantize_ceil</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Small extent quantization should be a no-op "</literal>
		    <literal type="string">"(extent_size=%zu)"</literal></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_large_extent_size</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>cache_oblivious</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nlextents</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>extent_size_prev</name></decl>, <decl><type ref="prev"/><name>ceil_prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Iterate over all large size classes, get their extent sizes, and
	 * verify that the quantized size is the same as the extent size.
	 */</comment>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"config.cache_oblivious"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cache_oblivious</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.nlextents"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nlextents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlextents</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lextent_size</name></decl>, <decl><type ref="prev"/><name>extent_size</name></decl>, <decl><type ref="prev"/><name>floor</name></decl>, <decl><type ref="prev"/><name>ceil</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lextent_size</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>extent_size</name> <operator>=</operator> <ternary><condition><expr><name>cache_oblivious</name></expr> ?</condition><then> <expr><name>lextent_size</name> <operator>+</operator> <name>PAGE</name></expr> </then><else>:
		    <expr><name>lextent_size</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>floor</name> <operator>=</operator> <call><name>extent_size_quantize_floor</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ceil</name> <operator>=</operator> <call><name>extent_size_quantize_ceil</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>, <argument><expr><name>floor</name></expr></argument>,
		    <argument><expr><literal type="string">"Extent quantization should be a no-op for precise size "</literal>
		    <literal type="string">"(lextent_size=%zu, extent_size=%zu)"</literal></expr></argument>, <argument><expr><name>lextent_size</name></expr></argument>,
		    <argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>, <argument><expr><name>ceil</name></expr></argument>,
		    <argument><expr><literal type="string">"Extent quantization should be a no-op for precise size "</literal>
		    <literal type="string">"(lextent_size=%zu, extent_size=%zu)"</literal></expr></argument>, <argument><expr><name>lextent_size</name></expr></argument>,
		    <argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>extent_size_prev</name></expr></argument>,
			    <argument><expr><call><name>extent_size_quantize_floor</name><argument_list>(<argument><expr><name>extent_size</name> <operator>-</operator> <name>PAGE</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Floor should be a precise size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>extent_size_prev</name> <operator>&lt;</operator> <name>ceil_prev</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>ceil_prev</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>,
				    <argument><expr><literal type="string">"Ceiling should be a precise size "</literal>
				    <literal type="string">"(extent_size_prev=%zu, ceil_prev=%zu, "</literal>
				    <literal type="string">"extent_size=%zu)"</literal></expr></argument>, <argument><expr><name>extent_size_prev</name></expr></argument>,
				    <argument><expr><name>ceil_prev</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nlextents</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>extent_size_prev</name> <operator>=</operator> <name>floor</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ceil_prev</name> <operator>=</operator> <call><name>extent_size_quantize_ceil</name><argument_list>(<argument><expr><name>extent_size</name> <operator>+</operator>
			    <name>PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_monotonic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ_MAX</name></cpp:macro>	<cpp:value>ZU(4 * 1024 * 1024)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>floor_prev</name></decl>, <decl><type ref="prev"/><name>ceil_prev</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>floor_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ceil_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SZ_MAX</name> <operator>&gt;&gt;</operator> <name>LG_PAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>extent_size</name></decl>, <decl><type ref="prev"/><name>floor</name></decl>, <decl><type ref="prev"/><name>ceil</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>extent_size</name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <name>LG_PAGE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>floor</name> <operator>=</operator> <call><name>extent_size_quantize_floor</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ceil</name> <operator>=</operator> <call><name>extent_size_quantize_ceil</name><argument_list>(<argument><expr><name>extent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><name>floor</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>,
		    <argument><expr><literal type="string">"Floor should be &lt;= (floor=%zu, extent_size=%zu, ceil=%zu)"</literal></expr></argument>,
		    <argument><expr><name>floor</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>, <argument><expr><name>ceil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><name>ceil</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>,
		    <argument><expr><literal type="string">"Ceiling should be &gt;= (floor=%zu, extent_size=%zu, "</literal>
		    <literal type="string">"ceil=%zu)"</literal></expr></argument>, <argument><expr><name>floor</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>, <argument><expr><name>ceil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><name>floor_prev</name></expr></argument>, <argument><expr><name>floor</name></expr></argument>, <argument><expr><literal type="string">"Floor should be monotonic "</literal>
		    <literal type="string">"(floor_prev=%zu, floor=%zu, extent_size=%zu, ceil=%zu)"</literal></expr></argument>,
		    <argument><expr><name>floor_prev</name></expr></argument>, <argument><expr><name>floor</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>, <argument><expr><name>ceil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><name>ceil_prev</name></expr></argument>, <argument><expr><name>ceil</name></expr></argument>, <argument><expr><literal type="string">"Ceiling should be monotonic "</literal>
		    <literal type="string">"(floor=%zu, extent_size=%zu, ceil_prev=%zu, ceil=%zu)"</literal></expr></argument>,
		    <argument><expr><name>floor</name></expr></argument>, <argument><expr><name>extent_size</name></expr></argument>, <argument><expr><name>ceil_prev</name></expr></argument>, <argument><expr><name>ceil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>floor_prev</name> <operator>=</operator> <name>floor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ceil_prev</name> <operator>=</operator> <name>ceil</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_small_extent_size</name></expr></argument>,
	    <argument><expr><name>test_large_extent_size</name></expr></argument>,
	    <argument><expr><name>test_monotonic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
