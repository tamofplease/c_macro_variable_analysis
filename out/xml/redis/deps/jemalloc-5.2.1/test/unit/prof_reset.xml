<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/prof_reset.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prof_dump_open_intercept</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>propagate_err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_ne</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected open() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_prof_active</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.active"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>active</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_lg_prof_sample</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lg_prof_sample</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.lg_sample"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lg_prof_sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
	    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl failure while reading profiling sample rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>lg_prof_sample</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_prof_reset</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>lg_prof_sample</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.reset"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lg_prof_sample</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl failure while resetting profile data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>lg_prof_sample</name></expr></argument>, <argument><expr><call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Expected profile sample rate change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prof_reset_basic</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lg_prof_sample_orig</name></decl>, <decl><type ref="prev"/><name>lg_prof_sample</name></decl>, <decl><type ref="prev"/><name>lg_prof_sample_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"opt.lg_prof_sample"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lg_prof_sample_orig</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl failure while reading profiling sample rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>lg_prof_sample_orig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected profiling sample rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lg_prof_sample</name> <operator>=</operator> <call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>lg_prof_sample_orig</name></expr></argument>, <argument><expr><name>lg_prof_sample</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected disagreement between \"opt.lg_prof_sample\" and "</literal>
	    <literal type="string">"\"prof.lg_sample\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test simple resets. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.reset"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallctl failure while resetting profile data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_prof_sample</name> <operator>=</operator> <call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>lg_prof_sample_orig</name></expr></argument>, <argument><expr><name>lg_prof_sample</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected profile sample rate change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Test resets with prof.lg_sample changes. */</comment>
	<expr_stmt><expr><name>lg_prof_sample_next</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><name>lg_prof_sample_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_prof_sample</name> <operator>=</operator> <call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>lg_prof_sample</name></expr></argument>, <argument><expr><name>lg_prof_sample_next</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected profile sample rate change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_prof_sample_next</name> <operator>=</operator> <name>lg_prof_sample_orig</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Make sure the test code restored prof.lg_sample. */</comment>
	<expr_stmt><expr><name>lg_prof_sample</name> <operator>=</operator> <call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>lg_prof_sample_orig</name></expr></argument>, <argument><expr><name>lg_prof_sample</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected disagreement between \"opt.lg_prof_sample\" and "</literal>
	    <literal type="string">"\"prof.lg_sample\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<decl_stmt><decl><type><name>TEST_END</name>

<name>bool</name></type> <name>prof_dump_header_intercepted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prof_cnt_t</name></type> <name>cnt_all_copy</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>prof_dump_header_intercept</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>propagate_err</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>prof_cnt_t</name> <modifier>*</modifier></type><name>cnt_all</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>prof_dump_header_intercepted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cnt_all_copy</name></expr></argument>, <argument><expr><name>cnt_all</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prof_cnt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prof_reset_cleanup</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>prof_dump_header_t</name> <modifier>*</modifier></type><name>prof_dump_header_orig</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_prof_active</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Expected 0 backtraces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Expected 1 backtrace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prof_dump_header_orig</name> <operator>=</operator> <name>prof_dump_header</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prof_dump_header</name> <operator>=</operator> <name>prof_dump_header_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>prof_dump_header_intercepted</name></expr></argument>, <argument><expr><literal type="string">"Unexpected intercept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.dump"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected error while dumping heap profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>prof_dump_header_intercepted</name></expr></argument>, <argument><expr><literal type="string">"Expected intercept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name><name>cnt_all_copy</name><operator>.</operator><name>curobjs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Expected 1 allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.reset"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected error while resetting heap profile data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.dump"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected error while dumping heap profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name><name>cnt_all_copy</name><operator>.</operator><name>curobjs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Expected 0 allocations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Expected 1 backtrace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prof_dump_header</name> <operator>=</operator> <name>prof_dump_header_orig</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Expected 0 backtraces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_prof_active</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTHREADS</name></cpp:macro>		<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NALLOCS_PER_THREAD</name></cpp:macro>	<cpp:value>(1U &lt;&lt; 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_RING_BUF_COUNT</name></cpp:macro>	<cpp:value>1531</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_INTERVAL</name></cpp:macro>		<cpp:value>(1U &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_INTERVAL</name></cpp:macro>		<cpp:value>3677</cpp:value></cpp:define>
<specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>varg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>thd_ind</name> <init>= <expr><operator>*</operator><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><name>varg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>objs</name><index>[<expr><name>OBJ_RING_BUF_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>objs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>objs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NALLOCS_PER_THREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>RESET_INTERVAL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.reset"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected error while resetting heap profile "</literal>
			    <literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>DUMP_INTERVAL</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"prof.dump"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected error while dumping heap profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>objs</name><index>[<expr><name>i</name> <operator>%</operator> <name>OBJ_RING_BUF_COUNT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>btalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>thd_ind</name><operator>*</operator><name>NALLOCS_PER_THREAD</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected btalloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></for>

	<comment type="block">/* Clean up any remaining objects. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OBJ_RING_BUF_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>objs</name><index>[<expr><name>i</name> <operator>%</operator> <name>OBJ_RING_BUF_COUNT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prof_reset</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lg_prof_sample_orig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thd_t</name></type> <name><name>thds</name><index>[<expr><name>NTHREADS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name><name>thd_args</name><index>[<expr><name>NTHREADS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bt_count</name></decl>, <decl><type ref="prev"/><name>tdata_count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bt_count</name> <operator>=</operator> <call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>bt_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected pre-existing tdata structures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tdata_count</name> <operator>=</operator> <call><name>prof_tdata_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lg_prof_sample_orig</name> <operator>=</operator> <call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_prof_active</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NTHREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>thd_args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>thd_start</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>thd_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NTHREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name><name>thds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_bt_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bt_count</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected bactrace count change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>prof_tdata_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tdata_count</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected remaining tdata structures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_prof_active</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><name>lg_prof_sample_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NTHREADS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NALLOCS_PER_THREAD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OBJ_RING_BUF_COUNT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESET_INTERVAL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DUMP_INTERVAL</name></cpp:undef>

<comment type="block">/* Test sampling at the same allocation site across resets. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NITER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_xallocx</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lg_prof_sample_orig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ptrs</name><index>[<expr><name>NITER</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lg_prof_sample_orig</name> <operator>=</operator> <call><name>get_lg_prof_sample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_prof_active</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reset profiling. */</comment>
	<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>nsz</name></decl>;</decl_stmt>

		<comment type="block">/* Reset profiling. */</comment>
		<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Allocate small object (which will be promoted). */</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Reset profiling. */</comment>
		<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Perform successful xallocx(). */</comment>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected xallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Perform unsuccessful xallocx(). */</comment>
		<expr_stmt><expr><name>nsz</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected xallocx() success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* dallocx. */</comment>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>set_prof_active</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_prof_reset</name><argument_list>(<argument><expr><name>lg_prof_sample_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NITER</name></cpp:undef>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Intercept dumping prior to running any tests. */</comment>
	<expr_stmt><expr><name>prof_dump_open</name> <operator>=</operator> <name>prof_dump_open_intercept</name></expr>;</expr_stmt>

	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_prof_reset_basic</name></expr></argument>,
	    <argument><expr><name>test_prof_reset_cleanup</name></expr></argument>,
	    <argument><expr><name>test_prof_reset</name></expr></argument>,
	    <argument><expr><name>test_xallocx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
