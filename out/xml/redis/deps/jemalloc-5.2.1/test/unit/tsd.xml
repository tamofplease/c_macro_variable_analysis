<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/tsd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<comment type="block">/*
 * If we're e.g. in debug mode, we *never* enter the fast path, and so shouldn't
 * be asserting that we're on one.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>originally_fast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>data_cleanup_count</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>data_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>data_cleanup_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_x_eq</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>MALLOC_TSD_TEST_DATA_INIT</name></expr></argument>,
		    <argument><expr><literal type="string">"Argument passed into cleanup function should match tsd "</literal>
		    <literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>++</operator><name>data_cleanup_count</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Allocate during cleanup for two rounds, in order to assure that
	 * jemalloc's internal tsd reinitialization happens.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>reincarnate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>MALLOC_TSD_TEST_DATA_INIT</name></expr>:</case>
		<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>reincarnate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">1</literal></expr>:</case>
		<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>reincarnate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">2</literal></expr>:</case>
		<return>return;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>reincarnate</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpeced mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_x_eq</name><argument_list>(<argument><expr><call><name>tsd_test_data_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MALLOC_TSD_TEST_DATA_INIT</name></expr></argument>,
	    <argument><expr><literal type="string">"Initial tsd get should return initialization value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tsd_test_data_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_x_eq</name><argument_list>(<argument><expr><call><name>tsd_test_data_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>,
	    <argument><expr><literal type="string">"After tsd set, tsd get should return value that was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_x_eq</name><argument_list>(<argument><expr><call><name>tsd_test_data_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg</name></expr></argument>,
	    <argument><expr><literal type="string">"Resetting local data should have no effect on tsd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tsd_test_callback_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_tsd_main_thread</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>thd_start</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0xa5f3e329</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_tsd_sub_thread</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_t</name></type> <name>thd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data_cleanup_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thd</name></expr></argument>, <argument><expr><name>thd_start</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>MALLOC_TSD_TEST_DATA_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * We reincarnate twice in the data cleanup, so it should execute at
	 * least 3 times.
	 */</comment>
	<expr_stmt><expr><call><name>assert_x_ge</name><argument_list>(<argument><expr><name>data_cleanup_count</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
	    <argument><expr><literal type="string">"Cleanup function should have executed multiple times."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_start_reincarnated</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Manually trigger reincarnation. */</comment>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>tsd_arena_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Should have tsd arena set."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_cleanup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><operator>*</operator><call><name>tsd_arenap_get_unsafe</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"TSD arena should have been cleared."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>tsd_state_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tsd_state_purgatory</name></expr></argument>,
	    <argument><expr><literal type="string">"TSD state should be purgatory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>tsd_state_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tsd_state_reincarnated</name></expr></argument>,
	    <argument><expr><literal type="string">"TSD state should be reincarnated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><operator>*</operator><call><name>tsd_arenap_get_unsafe</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Should not have tsd arena set after reincarnation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_cleanup</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><operator>*</operator><call><name>tsd_arenap_get_unsafe</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"TSD arena should have been cleared after 2nd cleanup."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_tsd_reincarnation</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>thd_t</name></type> <name>thd</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thd</name></expr></argument>, <argument><expr><name>thd_start_reincarnated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>TEST_END</name></macro>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>atomic_u32_t</name></type> <name>phase</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>atomic_b_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block></struct></type> <name>global_slow_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_start_global_slow</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* PHASE 0 */</comment>
	<decl_stmt><decl><type><name>global_slow_data_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>global_slow_data_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * No global slowness has happened yet; there was an error if we were
	 * originally fast but aren't now.
	 */</comment>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name>originally_fast</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 2 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 4 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 6 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Only one decrement so far. */</comment>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 8 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Both decrements happened; we should be fast again (if we ever
	 * were)
	 */</comment>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name>originally_fast</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_tsd_global_slow</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>global_slow_data_t</name></type> <name>data</name> <init>= <expr><block>{<expr><call><name>ATOMIC_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>ATOMIC_INIT</name><argument_list>(<argument>false</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * Note that the "mallocx" here (vs. malloc) is important, since the
	 * compiler is allowed to optimize away free(malloc(1)) but not
	 * free(mallocx(1)).
	 */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>originally_fast</name> <operator>=</operator> <call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>thd_t</name></type> <name>thd</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thd</name></expr></argument>, <argument><expr><name>thd_start_global_slow</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* PHASE 1 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * We don't have a portable condvar/semaphore mechanism.
		 * Spin-wait.
		 */</comment>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_global_slow_inc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 3 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Increase again, so that we can test multiple fast/slow changes. */</comment>
	<expr_stmt><expr><call><name>tsd_global_slow_inc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 5 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_global_slow_dec</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We only decreased once; things should still be slow. */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 7 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_global_slow_dec</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* We incremented and then decremented twice; we should be fast now. */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><name>originally_fast</name> <operator>||</operator> <call><name>tsd_fast</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* PHASE 9 */</comment>
	<while>while <condition>(<expr><call><name>atomic_load_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>phase</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name>ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>thd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Ensure tsd bootstrapped. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>nallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"Initialization error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>test_status_fail</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_tsd_main_thread</name></expr></argument>,
	    <argument><expr><name>test_tsd_sub_thread</name></expr></argument>,
	    <argument><expr><name>test_tsd_reincarnation</name></expr></argument>,
	    <argument><expr><name>test_tsd_global_slow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
