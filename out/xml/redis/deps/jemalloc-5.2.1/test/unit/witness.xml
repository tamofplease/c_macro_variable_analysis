<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/witness.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>witness_lock_error_t</name> <modifier>*</modifier></type><name>witness_lock_error_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>witness_owner_error_t</name> <modifier>*</modifier></type><name>witness_owner_error_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>witness_not_owner_error_t</name> <modifier>*</modifier></type><name>witness_not_owner_error_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>witness_depth_error_t</name> <modifier>*</modifier></type><name>witness_depth_error_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saw_lock_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saw_owner_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saw_not_owner_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saw_depth_error</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_lock_error_intercept</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>saw_lock_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_owner_error_intercept</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>saw_owner_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_not_owner_error_intercept</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>saw_not_owner_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_depth_error_intercept</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl></parameter>,
    <parameter><decl><type><name>witness_rank_t</name></type> <name>rank_inclusive</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>saw_depth_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>witness_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>, <argument><expr><literal type="string">"Witnesses should have equal rank"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oa</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ob</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>witness_comp_reverse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>, <argument><expr><literal type="string">"Witnesses should have equal rank"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oa</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ob</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_witness</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>witness_tsdn_t</name></type> <name>witness_tsdn</name> <init>= <expr><block>{ <expr><name>WITNESS_TSD_INITIALIZER</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">2U</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">2U</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">3U</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">2U</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">3U</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth_to_rank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>(</operator><name>witness_rank_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_witness_comp</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>witness_tsdn_t</name></type> <name>witness_tsdn</name> <init>= <expr><block>{ <expr><name>WITNESS_TSD_INITIALIZER</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>witness_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>witness_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_lock_error_orig</name> <operator>=</operator> <name>witness_lock_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_lock_error</name> <operator>=</operator> <name>witness_lock_error_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_lock_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>witness_comp_reverse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Expected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>saw_lock_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_not_owner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Expected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_lock_error</name> <operator>=</operator> <name>witness_lock_error_orig</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_witness_reversal</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>witness_tsdn_t</name></type> <name>witness_tsdn</name> <init>= <expr><block>{ <expr><name>WITNESS_TSD_INITIALIZER</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_lock_error_orig</name> <operator>=</operator> <name>witness_lock_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_lock_error</name> <operator>=</operator> <name>witness_lock_error_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_lock_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Expected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_lock_error</name> <operator>=</operator> <name>witness_lock_error_orig</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_witness_recursive</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>witness_tsdn_t</name></type> <name>witness_tsdn</name> <init>= <expr><block>{ <expr><name>WITNESS_TSD_INITIALIZER</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_not_owner_error_orig</name> <operator>=</operator> <name>witness_not_owner_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_not_owner_error</name> <operator>=</operator> <name>witness_not_owner_error_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_not_owner_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_lock_error_orig</name> <operator>=</operator> <name>witness_lock_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_lock_error</name> <operator>=</operator> <name>witness_lock_error_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_lock_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_not_owner_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected witness not owner error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_lock_error</name></expr></argument>, <argument><expr><literal type="string">"Expected witness lock error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_not_owner_error</name></expr></argument>, <argument><expr><literal type="string">"Expected witness not owner error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_owner_error</name> <operator>=</operator> <name>witness_owner_error_orig</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_lock_error</name> <operator>=</operator> <name>witness_lock_error_orig</name></expr>;</expr_stmt>

</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_witness_unlock_not_owned</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>witness_tsdn_t</name></type> <name>witness_tsdn</name> <init>= <expr><block>{ <expr><name>WITNESS_TSD_INITIALIZER</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_owner_error_orig</name> <operator>=</operator> <name>witness_owner_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_owner_error</name> <operator>=</operator> <name>witness_owner_error_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_owner_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_owner_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected owner error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_owner_error</name></expr></argument>, <argument><expr><literal type="string">"Expected owner error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_owner_error</name> <operator>=</operator> <name>witness_owner_error_orig</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_witness_depth</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>witness_tsdn_t</name></type> <name>witness_tsdn</name> <init>= <expr><block>{ <expr><name>WITNESS_TSD_INITIALIZER</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_depth_error_orig</name> <operator>=</operator> <name>witness_depth_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>witness_depth_error</name> <operator>=</operator> <name>witness_depth_error_intercept</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_depth_error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>saw_depth_error</name></expr></argument>, <argument><expr><literal type="string">"Unexpected depth error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>saw_depth_error</name></expr></argument>, <argument><expr><literal type="string">"Expected depth error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><operator>&amp;</operator><name>witness_tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>witness_depth_error</name> <operator>=</operator> <name>witness_depth_error_orig</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_witness</name></expr></argument>,
	    <argument><expr><name>test_witness_comp</name></expr></argument>,
	    <argument><expr><name>test_witness_reversal</name></expr></argument>,
	    <argument><expr><name>test_witness_recursive</name></expr></argument>,
	    <argument><expr><name>test_witness_unlock_not_owned</name></expr></argument>,
	    <argument><expr><name>test_witness_depth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
