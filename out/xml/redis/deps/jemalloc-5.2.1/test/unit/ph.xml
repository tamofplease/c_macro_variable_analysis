<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/ph.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ph.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>node_s</name></name></type> <name>node_t</name>;</typedef>

<struct>struct <name>node_s</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_MAGIC</name></cpp:macro> <cpp:value>0x9823af7e</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
	<macro><name>phn</name><argument_list>(<argument>node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>key</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>node_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>key</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>key</name></name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Duplicates are not allowed in the heap, so force an
		 * arbitrary ordering for non-identical items with equal keys.
		 */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>a</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name><operator>)</operator><operator>)</operator>
		    <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>a</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>node_cmp_magic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>NODE_MAGIC</name></expr></argument>, <argument><expr><literal type="string">"Bad magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>NODE_MAGIC</name></expr></argument>, <argument><expr><literal type="string">"Bad magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>node_cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <macro><name>ph</name><argument_list>(<argument>node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>heap_t</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><call><name>ph_gen</name><argument_list>(<argument><expr><specifier>static</specifier></expr></argument>, <argument><expr><name>heap_</name></expr></argument>, <argument><expr><name>heap_t</name></expr></argument>, <argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node_cmp_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>node_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>leftmost_child</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sibling</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"%2"</literal><name>FMTu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>leftmost_child</name> <operator>=</operator> <call><name>phn_lchild_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>leftmost_child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>node_print</name><argument_list>(<argument><expr><name>leftmost_child</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>sibling</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>leftmost_child</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>sibling</name> <operator>!=</operator>
	    <name>NULL</name></expr>;</condition> <incr><expr><name>sibling</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>node_print</name><argument_list>(<argument><expr><name>sibling</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>heap_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>auxelm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"vvv heap %p vvv\n"</literal></expr></argument>, <argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>node_print</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>auxelm</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>auxelm</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
	    <incr><expr><name>auxelm</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>auxelm</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><call><name>phn_prev_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>,
		    <argument><expr><name>link</name></expr></argument>, <argument><expr><name>auxelm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>auxelm</name></expr></argument>,
		    <argument><expr><literal type="string">"auxelm's prev doesn't link to auxelm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>node_print</name><argument_list>(<argument><expr><name>auxelm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>label_return</name>:</label>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"^^^ heap %p ^^^\n"</literal></expr></argument>, <argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>node_validate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nnodes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>leftmost_child</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sibling</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_ge</name><argument_list>(<argument><expr><call><name>node_cmp_magic</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Child is less than parent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>leftmost_child</name> <operator>=</operator> <call><name>phn_lchild_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>leftmost_child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>nnodes</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>phn_prev_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>leftmost_child</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><literal type="string">"Leftmost child does not link to node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nnodes</name> <operator>+=</operator> <call><name>node_validate</name><argument_list>(<argument><expr><name>leftmost_child</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>sibling</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>leftmost_child</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>sibling</name> <operator>!=</operator>
	    <name>NULL</name></expr>;</condition> <incr><expr><name>sibling</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><call><name>phn_prev_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>,
		    <argument><expr><name>link</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sibling</name></expr></argument>,
		    <argument><expr><literal type="string">"sibling's prev doesn't link to sibling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nnodes</name> <operator>+=</operator> <call><name>node_validate</name><argument_list>(<argument><expr><name>sibling</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>nnodes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>heap_validate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>auxelm</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>nnodes</name> <operator>+=</operator> <call><name>node_validate</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>auxelm</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>auxelm</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
	    <incr><expr><name>auxelm</name> <operator>=</operator> <call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>auxelm</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>phn_next_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><call><name>phn_prev_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>,
		    <argument><expr><name>link</name></expr></argument>, <argument><expr><name>auxelm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>auxelm</name></expr></argument>,
		    <argument><expr><literal type="string">"auxelm's prev doesn't link to auxelm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nnodes</name> <operator>+=</operator> <call><name>node_validate</name><argument_list>(<argument><expr><name>auxelm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>label_return</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>heap_print</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>nnodes</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ph_empty</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>heap_t</name></type> <name>heap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>heap_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>heap_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Heap should be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>heap_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>heap_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>node_remove</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>heap_remove</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>node_t</name> <modifier>*</modifier></type>
<name>node_remove_first</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>heap_remove_first</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>node_t</name> <modifier>*</modifier></type>
<name>node_remove_any</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>heap_remove_any</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_ph_random</argument>)</argument_list></macro> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NNODES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBAGS</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEED</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>sfmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bag</name><index>[<expr><name>NNODES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>heap_t</name></type> <name>heap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name></type> <name><name>nodes</name><index>[<expr><name>NNODES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sfmt</name> <operator>=</operator> <call><name>init_gen_rand</name><argument_list>(<argument><expr><name>SEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBAGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<comment type="block">/* Insert in order. */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<comment type="block">/* Insert in reverse order. */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NNODES</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<default>default:</default>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>gen_rand64_range</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>, <argument><expr><name>NNODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></switch>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/* Initialize heap and nodes. */</comment>
			<expr_stmt><expr><call><name>heap_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			    <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>magic</name> <operator>=</operator> <name>NODE_MAGIC</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name><name>bag</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="block">/* Insert nodes. */</comment>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>heap_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">13</literal> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>heap_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>,
					    <argument><expr><literal type="string">"Heap should not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Trigger merging. */</comment>
					<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>heap_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>,
					    <argument><expr><literal type="string">"Heap should not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
				    <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>heap_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Heap should not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Remove nodes. */</comment>
			<switch>switch <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name></expr></argument>,
					    <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name>
					    <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
					    <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>node_remove_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name>
					    <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>assert_d_ge</name><argument_list>(<argument><expr><call><name>node_cmp</name><argument_list>(<argument><expr><name>node</name></expr></argument>,
						    <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						    <argument><expr><literal type="string">"Bad removal order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			</block_content>}</block> <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>heap_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name></expr></argument>,
					    <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>assert_d_ge</name><argument_list>(<argument><expr><call><name>node_cmp</name><argument_list>(<argument><expr><name>node</name></expr></argument>,
						    <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						    <argument><expr><literal type="string">"Bad removal order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name>
					    <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			</block_content>}</block> <case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><call><name>node_remove_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name>
					    <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			</block_content>}</block> <case>case <expr><literal type="number">5</literal></expr>:</case> <block>{<block_content>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>heap_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name></expr></argument>,
					    <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>heap_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name>
					    <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Incorrect node count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			</block_content>}</block> <default>default:</default>
				<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>

			<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>heap_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Heap should be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>heap_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Heap should be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>heap_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Heap should be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fini_gen_rand</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NNODES</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEED</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_ph_empty</name></expr></argument>,
	    <argument><expr><name>test_ph_random</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
