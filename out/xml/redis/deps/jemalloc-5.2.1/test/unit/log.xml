<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/log.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>expect_no_logging</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>names</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2_a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2.a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>log_var_names</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2_a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2_a</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Disabled logging not ignored!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_log_disabled</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_init_done</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_no_logging</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_no_logging</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_no_logging</name><argument_list>(<argument><expr><literal type="string">"a.b.c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_no_logging</name><argument_list>(<argument><expr><literal type="string">"l12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_no_logging</name><argument_list>(<argument><expr><literal type="string">"l123|a456|b789"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_no_logging</name><argument_list>(<argument><expr><literal type="string">"|||"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_log_enabled_direct</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_init_done</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1_a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1.a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>log_var_names</name></expr></argument>, <argument><expr><literal type="string">"l1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"Mis-logged!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>log_var_names</name></expr></argument>, <argument><expr><literal type="string">"l1.a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1_a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1_a</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"Mis-logged!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>log_var_names</name></expr></argument>, <argument><expr><literal type="string">"l1.a|abc|l2|def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1_a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1_a</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"Mis-logged!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_log_enabled_indirect</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_init_done</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>log_var_names</name></expr></argument>, <argument><expr><literal type="string">"l0|l1|abc|l2.b|def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* On. */</comment>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Off. */</comment>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* On. */</comment>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1_a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1.a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Off. */</comment>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2_a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2.a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* On. */</comment>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2_b_a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2.b.a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* On. */</comment>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2_b_b</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2.b.b"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* 4 are on total, so should sum to 40. */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1a</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1_a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1_a</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2_a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2_a</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2_b_a</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2_b_a</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2_b_b</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2_b_b</argument>)</argument_list></macro>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"Mis-logged!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_log_enabled_global</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_init_done</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>log_var_names</name></expr></argument>, <argument><expr><literal type="string">"abc|.|def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l1</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_var_t</name></type> <name>log_l2_a_a</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"l2.a.a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>
		    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l1</argument>)</argument_list></macro>

		<macro><name>log_do_begin</name><argument_list>(<argument>log_l2_a_a</argument>)</argument_list></macro>
		    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>log_l2_a_a</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"Mis-logged!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_logs_if_no_init</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_init_done</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>log_var_t</name></type> <name>l</name> <init>= <expr><call><name>LOG_VAR_INIT</name><argument_list>(<argument><expr><literal type="string">"definitely.not.enabled"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<macro><name>log_do_begin</name><argument_list>(<argument>l</argument>)</argument_list></macro>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		<macro><name>log_do_end</name><argument_list>(<argument>l</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Logging shouldn't happen if not initialized."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<comment type="block">/*
 * This really just checks to make sure that this usage compiles; we don't have
 * any test code to run.
 */</comment>
<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_log_only_format_string</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>false</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><literal type="string">"log_str"</literal></expr></argument>, <argument><expr><literal type="string">"No arguments follow this format string."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_log_disabled</name></expr></argument>,
	    <argument><expr><name>test_log_enabled_direct</name></expr></argument>,
	    <argument><expr><name>test_log_enabled_indirect</name></expr></argument>,
	    <argument><expr><name>test_log_enabled_global</name></expr></argument>,
	    <argument><expr><name>test_logs_if_no_init</name></expr></argument>,
	    <argument><expr><name>test_log_only_format_string</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
