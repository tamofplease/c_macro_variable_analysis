<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/nstime.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BILLION</name></cpp:macro>	<cpp:value>UINT64_C(1000000000)</cpp:value></cpp:define>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_nstime_init</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>, <argument><expr><literal type="number">42000000043</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_ns</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42000000043</literal></expr></argument>, <argument><expr><literal type="string">"ns incorrectly read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_sec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"sec incorrectly read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="string">"nsec incorrectly read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_init2</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_sec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"sec incorrectly read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="string">"nsec incorrectly read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_copy</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_sec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"sec incorrectly copied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="string">"nsec incorrectly copied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_compare</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Times should be equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Times should be equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nsta should be greater than nstb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nstb should be less than nsta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nsta should be less than nstb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nstb should be greater than nsta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><name>BILLION</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nsta should be greater than nstb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nstb should be less than nsta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nsta should be less than nstb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"nstb should be greater than nsta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_add</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">86</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect addition result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>BILLION</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">85</literal></expr></argument>, <argument><expr><name>BILLION</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect addition result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_iadd</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>BILLION</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_iadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect addition result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_iadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><name>BILLION</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect addition result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_subtract</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_subtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect subtraction result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_subtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BILLION</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect subtraction result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_isubtract</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_isubtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal><operator>*</operator><name>BILLION</name> <operator>+</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect subtraction result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_isubtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">41</literal><operator>*</operator><name>BILLION</name> <operator>+</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BILLION</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect subtraction result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_imultiply</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">420</literal></expr></argument>, <argument><expr><literal type="number">430</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect multiplication result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">666666666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">999999998</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect multiplication result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_idivide</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_idivide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect division result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">666666666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_idivide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect division result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_divide</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nsta</name></decl>, <decl><type ref="prev"/><name>nstb</name></decl>, <decl><type ref="prev"/><name>nstc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_divide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect division result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_divide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect division result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_imultiply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nstc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_subtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><call><name>nstime_divide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nsta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,
	    <argument><expr><literal type="string">"Incorrect division result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_monotonic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>nstime_monotonic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_nstime_update</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>nst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Basic time update failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Only Rip Van Winkle sleeps this long. */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>nstime_t</name></type> <name>addend</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addend</name></expr></argument>, <argument><expr><literal type="number">631152000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>nstime_t</name></type> <name>nst0</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Update should detect time roll-back."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nst0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Time should not have been modified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_nstime_init</name></expr></argument>,
	    <argument><expr><name>test_nstime_init2</name></expr></argument>,
	    <argument><expr><name>test_nstime_copy</name></expr></argument>,
	    <argument><expr><name>test_nstime_compare</name></expr></argument>,
	    <argument><expr><name>test_nstime_add</name></expr></argument>,
	    <argument><expr><name>test_nstime_iadd</name></expr></argument>,
	    <argument><expr><name>test_nstime_subtract</name></expr></argument>,
	    <argument><expr><name>test_nstime_isubtract</name></expr></argument>,
	    <argument><expr><name>test_nstime_imultiply</name></expr></argument>,
	    <argument><expr><name>test_nstime_idivide</name></expr></argument>,
	    <argument><expr><name>test_nstime_divide</name></expr></argument>,
	    <argument><expr><name>test_nstime_monotonic</name></expr></argument>,
	    <argument><expr><name>test_nstime_update</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
