<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/junk.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/util.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>arena_dalloc_junk_small_t</name> <modifier>*</modifier></type><name>arena_dalloc_junk_small_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>large_dalloc_junk_t</name> <modifier>*</modifier></type><name>large_dalloc_junk_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>large_dalloc_maybe_junk_t</name> <modifier>*</modifier></type><name>large_dalloc_maybe_junk_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>watch_for_junking</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>saw_junking</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>watch_junking</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>watch_for_junking</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saw_junking</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arena_dalloc_junk_small_intercept</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>arena_dalloc_junk_small_orig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>bin_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>reg_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>JEMALLOC_FREE_JUNK</name></expr></argument>,
		    <argument><expr><literal type="string">"Missing junk fill for byte %zu/%zu of deallocated region"</literal></expr></argument>,
		    <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>bin_info</name><operator>-&gt;</operator><name>reg_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>watch_for_junking</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>saw_junking</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>large_dalloc_junk_intercept</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>large_dalloc_junk_orig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>usize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>JEMALLOC_FREE_JUNK</name></expr></argument>,
		    <argument><expr><literal type="string">"Missing junk fill for byte %zu/%zu of deallocated region"</literal></expr></argument>,
		    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>watch_for_junking</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>saw_junking</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>large_dalloc_maybe_junk_intercept</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>large_dalloc_maybe_junk_orig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>watch_for_junking</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>saw_junking</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_junk</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz_min</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz_max</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_prev</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>opt_junk_free</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>arena_dalloc_junk_small_orig</name> <operator>=</operator> <name>arena_dalloc_junk_small</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>arena_dalloc_junk_small</name> <operator>=</operator> <name>arena_dalloc_junk_small_intercept</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>large_dalloc_junk_orig</name> <operator>=</operator> <name>large_dalloc_junk</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>large_dalloc_junk</name> <operator>=</operator> <name>large_dalloc_junk_intercept</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>large_dalloc_maybe_junk_orig</name> <operator>=</operator> <name>large_dalloc_maybe_junk</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>large_dalloc_maybe_junk</name> <operator>=</operator> <name>large_dalloc_maybe_junk_intercept</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>sz_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>mallocx</name><argument_list>(<argument><expr><name>sz_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>sz</name> <operator>&lt;=</operator> <name>sz_max</name></expr>;</condition>
	    <incr><expr><name>sz_prev</name> <operator>=</operator> <name>sz</name></expr><operator>,</operator> <expr><name>sz</name> <operator>=</operator> <call><name>sallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>sz_prev</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>,
			    <argument><expr><literal type="string">"Previously allocated byte %zu/%zu is corrupted"</literal></expr></argument>,
			    <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>sz_prev</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>,
			    <argument><expr><literal type="string">"Previously allocated byte %zu/%zu is corrupted"</literal></expr></argument>,
			    <argument><expr><name>sz_prev</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sz_prev</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>opt_junk_alloc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JEMALLOC_ALLOC_JUNK</name></expr></argument>,
				    <argument><expr><literal type="string">"Newly allocated byte %zu/%zu isn't "</literal>
				    <literal type="string">"junk-filled"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><call><name>xallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>watch_junking</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>rallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>t</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_zu_ge</name><argument_list>(<argument><expr><call><name>sallocx</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
			    <argument><expr><literal type="string">"Unexpectedly small rallocx() result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>background_thread_enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>,
				    <argument><expr><literal type="string">"Unexpected in-place rallocx()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><name>opt_junk_free</name> <operator>||</operator> <name>saw_junking</name></expr></argument>,
				    <argument><expr><literal type="string">"Expected region of size %zu to be "</literal>
				    <literal type="string">"junk-filled"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>watch_junking</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>!</operator><name>opt_junk_free</name> <operator>||</operator> <name>saw_junking</name></expr></argument>,
	    <argument><expr><literal type="string">"Expected region of size %zu to be junk-filled"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>opt_junk_free</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>arena_dalloc_junk_small</name> <operator>=</operator> <name>arena_dalloc_junk_small_orig</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>large_dalloc_junk</name> <operator>=</operator> <name>large_dalloc_junk_orig</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>large_dalloc_maybe_junk</name> <operator>=</operator> <name>large_dalloc_maybe_junk_orig</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_junk_small</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_junk</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SC_SMALL_MAXCLASS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_junk_large</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_junk</name><argument_list>(<argument><expr><name>SC_SMALL_MAXCLASS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SC_LG_LARGE_MINCLASS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_junk_small</name></expr></argument>,
	    <argument><expr><name>test_junk_large</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
