<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/slab.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_arena_slab_regind</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>binind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>binind</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>binind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>regind</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>extent_t</name></type> <name>slab</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name> <init>= <expr><operator>&amp;</operator><name><name>bin_infos</name><index>[<expr><name>binind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><name><name>bin_info</name><operator>-&gt;</operator><name>slab_size</name></name></expr></argument>,
		    <argument><expr><call><name>MALLOCX_LG_ALIGN</name><argument_list>(<argument><expr><name>LG_PAGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bin_info</name><operator>-&gt;</operator><name>slab_size</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
		    <argument><expr><name>binind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
		    <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>regind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>regind</name> <operator>&lt;</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>nregs</name></name></expr>;</condition> <incr><expr><name>regind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reg</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call> <operator>+</operator>
			    <operator>(</operator><name><name>bin_info</name><operator>-&gt;</operator><name>reg_size</name></name> <operator>*</operator> <name>regind</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>arena_slab_regind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name>regind</name></expr></argument>,
			    <argument><expr><literal type="string">"Incorrect region index computed for size %zu"</literal></expr></argument>,
			    <argument><expr><name><name>bin_info</name><operator>-&gt;</operator><name>reg_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_arena_slab_regind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
