<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/rb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbtn_black_height</name><parameter_list>(<parameter><type><name>a_type</name></type></parameter>, <parameter><type><name>a_field</name></type></parameter>, <parameter><type><name>a_rbt</name></type></parameter>, <parameter><type><name>r_height</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {	\
	a_type *rbp_bh_t;						\
	for (rbp_bh_t = (a_rbt)-&gt;rbt_root, (r_height) = 0; rbp_bh_t !=	\
	    NULL; rbp_bh_t = rbtn_left_get(a_type, a_field,		\
	    rbp_bh_t)) {						\
		if (!rbtn_red_get(a_type, a_field, rbp_bh_t)) {		\
		(r_height)++;						\
		}							\
	}								\
} while (0)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>node_s</name></name></type> <name>node_t</name>;</typedef>

<struct>struct <name>node_s</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_MAGIC</name></cpp:macro> <cpp:value>0x9823af7e</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
	<macro><name>rb_node</name><argument_list>(<argument>node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>key</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>node_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>node_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>NODE_MAGIC</name></expr></argument>, <argument><expr><literal type="string">"Bad magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>NODE_MAGIC</name></expr></argument>, <argument><expr><literal type="string">"Bad magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>key</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>key</name></name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Duplicates are not allowed in the tree, so force an
		 * arbitrary ordering for non-identical items with equal keys.
		 */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>a</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name><operator>)</operator><operator>)</operator>
		    <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>a</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>b</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <macro><name>rb_tree</name><argument_list>(<argument>node_t</argument>)</argument_list></macro> <expr_stmt><expr><name>tree_t</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><call><name>rb_gen</name><argument_list>(<argument><expr><specifier>static</specifier></expr></argument>, <argument><expr><name>tree_</name></expr></argument>, <argument><expr><name>tree_t</name></expr></argument>, <argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_rb_empty</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>tree_t</name></type> <name>tree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name></type> <name>key</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tree_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>tree_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Tree should be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>tree_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>tree_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>NODE_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>tree_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>NODE_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>tree_nsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>NODE_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>tree_psearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>unsigned</name></type>
<name>tree_recurse</name><parameter_list>(<parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>black_height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>black_depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>left_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>right_node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>left_node</name> <operator>=</operator> <call><name>rbtn_left_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>right_node</name> <operator>=</operator> <call><name>rbtn_right_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rbtn_red_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>black_depth</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Red nodes must be interleaved with black nodes. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>rbtn_red_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>left_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rbtn_red_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>left_node</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><literal type="string">"Node should be black"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>right_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>rbtn_red_get</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>right_node</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Node should be black"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Self. */</comment>
	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>NODE_MAGIC</name></expr></argument>, <argument><expr><literal type="string">"Bad magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Left subtree. */</comment>
	<if_stmt><if>if <condition>(<expr><name>left_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>tree_recurse</name><argument_list>(<argument><expr><name>left_node</name></expr></argument>, <argument><expr><name>black_height</name></expr></argument>, <argument><expr><name>black_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>black_depth</name> <operator>!=</operator> <name>black_height</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Right subtree. */</comment>
	<if_stmt><if>if <condition>(<expr><name>right_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>tree_recurse</name><argument_list>(<argument><expr><name>right_node</name></expr></argument>, <argument><expr><name>black_height</name></expr></argument>, <argument><expr><name>black_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>black_depth</name> <operator>!=</operator> <name>black_height</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>node_t</name> <modifier>*</modifier></type>
<name>tree_iterate_cb</name><parameter_list>(<parameter><decl><type><name>tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>search_node</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>NODE_MAGIC</name></expr></argument>, <argument><expr><literal type="string">"Bad magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test rb_search(). */</comment>
	<expr_stmt><expr><name>search_node</name> <operator>=</operator> <call><name>tree_search</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>search_node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>,
	    <argument><expr><literal type="string">"tree_search() returned unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test rb_nsearch(). */</comment>
	<expr_stmt><expr><name>search_node</name> <operator>=</operator> <call><name>tree_nsearch</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>search_node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>,
	    <argument><expr><literal type="string">"tree_nsearch() returned unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test rb_psearch(). */</comment>
	<expr_stmt><expr><name>search_node</name> <operator>=</operator> <call><name>tree_psearch</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>search_node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>,
	    <argument><expr><literal type="string">"tree_psearch() returned unexpected node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>tree_iterate</name><parameter_list>(<parameter><decl><type><name>tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tree_iter</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tree_iterate_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>tree_iterate_reverse</name><parameter_list>(<parameter><decl><type><name>tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tree_reverse_iter</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tree_iterate_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>node_remove</name><parameter_list>(<parameter><decl><type><name>tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nnodes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>search_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>black_height</name></decl>, <decl><type ref="prev"/><name>imbalances</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tree_remove</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test rb_nsearch(). */</comment>
	<expr_stmt><expr><name>search_node</name> <operator>=</operator> <call><name>tree_nsearch</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>search_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u64_ge</name><argument_list>(<argument><expr><name><name>search_node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
		    <argument><expr><literal type="string">"Key ordering error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Test rb_psearch(). */</comment>
	<expr_stmt><expr><name>search_node</name> <operator>=</operator> <call><name>tree_psearch</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>search_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u64_le</name><argument_list>(<argument><expr><name><name>search_node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
		    <argument><expr><literal type="string">"Key ordering error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rbtn_black_height</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>black_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>imbalances</name> <operator>=</operator> <call><name>tree_recurse</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rbt_root</name></name></expr></argument>, <argument><expr><name>black_height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>imbalances</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Tree is unbalanced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>tree_iterate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nnodes</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected node iteration count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>tree_iterate_reverse</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nnodes</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected node iteration count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>node_t</name> <modifier>*</modifier></type>
<name>remove_iterate_cb</name><parameter_list>(<parameter><decl><type><name>tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nnodes</name> <init>= <expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>tree_next</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><operator>*</operator><name>nnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>node_t</name> <modifier>*</modifier></type>
<name>remove_reverse_iterate_cb</name><parameter_list>(<parameter><decl><type><name>tree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nnodes</name> <init>= <expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>tree_prev</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><operator>*</operator><name>nnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_cb</name><parameter_list>(<parameter><decl><type><name>node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nnodes</name> <init>= <expr><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_u_gt</name><argument_list>(<argument><expr><operator>*</operator><name>nnodes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Destruction removed too many nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nnodes</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_rb_random</argument>)</argument_list></macro> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NNODES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBAGS</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEED</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>sfmt_t</name> <modifier>*</modifier></type><name>sfmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bag</name><index>[<expr><name>NNODES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tree_t</name></type> <name>tree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node_t</name></type> <name><name>nodes</name><index>[<expr><name>NNODES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>black_height</name></decl>, <decl><type ref="prev"/><name>imbalances</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sfmt</name> <operator>=</operator> <call><name>init_gen_rand</name><argument_list>(<argument><expr><name>SEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBAGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<comment type="block">/* Insert in order. */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<comment type="block">/* Insert in reverse order. */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NNODES</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<default>default:</default>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>gen_rand64_range</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>, <argument><expr><name>NNODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></switch>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>NNODES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/* Initialize tree and nodes. */</comment>
			<expr_stmt><expr><call><name>tree_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>magic</name> <operator>=</operator> <name>NODE_MAGIC</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name><name>bag</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="block">/* Insert nodes. */</comment>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>tree_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>rbtn_black_height</name><argument_list>(<argument><expr><name>node_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>,
				    <argument><expr><name>black_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>imbalances</name> <operator>=</operator> <call><name>tree_recurse</name><argument_list>(<argument><expr><name><name>tree</name><operator>.</operator><name>rbt_root</name></name></expr></argument>,
				    <argument><expr><name>black_height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>imbalances</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				    <argument><expr><literal type="string">"Tree is unbalanced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>tree_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
				    <argument><expr><literal type="string">"Unexpected node iteration count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>tree_iterate_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
				    <argument><expr><literal type="string">"Unexpected node iteration count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>tree_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><literal type="string">"Tree should not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>tree_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><literal type="string">"Tree should not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><call><name>tree_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><literal type="string">"Tree should not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>tree_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>tree_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="block">/* Remove nodes. */</comment>
			<switch>switch <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><call><name>node_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>nnodes</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<do>do <block>{<block_content>
					<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>tree_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
					    <argument><expr><name>remove_iterate_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>nnodes</name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block> while <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>nnodes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				    <argument><expr><literal type="string">"Removal terminated early"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block> <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>node_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>nnodes</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<do>do <block>{<block_content>
					<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>tree_reverse_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
					    <argument><expr><name>remove_reverse_iterate_cb</name></expr></argument>,
					    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>nnodes</name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block> while <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>nnodes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				    <argument><expr><literal type="string">"Removal terminated early"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block> <case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>nnodes</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>tree_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>destroy_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>nnodes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				    <argument><expr><literal type="string">"Destruction terminated early"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block> <default>default:</default>
				<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></switch>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fini_gen_rand</name><argument_list>(<argument><expr><name>sfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NNODES</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NBAGS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEED</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_rb_empty</name></expr></argument>,
	    <argument><expr><name>test_rb_random</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
