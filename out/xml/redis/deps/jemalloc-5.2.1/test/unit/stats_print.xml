<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/stats_print.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/util.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
	<decl><name>TOKEN_TYPE_NONE</name></decl>,
	<decl><name>TOKEN_TYPE_ERROR</name></decl>,
	<decl><name>TOKEN_TYPE_EOI</name></decl>,
	<decl><name>TOKEN_TYPE_NULL</name></decl>,
	<decl><name>TOKEN_TYPE_FALSE</name></decl>,
	<decl><name>TOKEN_TYPE_TRUE</name></decl>,
	<decl><name>TOKEN_TYPE_LBRACKET</name></decl>,
	<decl><name>TOKEN_TYPE_RBRACKET</name></decl>,
	<decl><name>TOKEN_TYPE_LBRACE</name></decl>,
	<decl><name>TOKEN_TYPE_RBRACE</name></decl>,
	<decl><name>TOKEN_TYPE_COLON</name></decl>,
	<decl><name>TOKEN_TYPE_COMMA</name></decl>,
	<decl><name>TOKEN_TYPE_STRING</name></decl>,
	<decl><name>TOKEN_TYPE_NUMBER</name></decl>
}</block></enum></type> <name>token_type_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>parser_s</name></name></type> <name>parser_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>parser_t</name>	<modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>token_type_t</name></type>	<name>token_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>col</name></decl>;</decl_stmt>
}</block></struct></type> <name>token_t</name>;</typedef>

<struct>struct <name>parser_s</name> <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>verbose</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	<modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> <comment type="block">/* '\0'-terminated. */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>	<name>len</name></decl>;</decl_stmt> <comment type="block">/* Number of characters preceding '\0' in buf. */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>	<name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>	<name>line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>	<name>col</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>token_t</name></type>	<name>token</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>token_init</name><parameter_list>(<parameter><decl><type><name>token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>token_type_t</name></type> <name>token_type</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <name>parser</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>token_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>token_error</name><parameter_list>(<parameter><decl><type><name>token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>token</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>TOKEN_TYPE_NONE</name></expr>:</case>
		<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<case>case <expr><name>TOKEN_TYPE_ERROR</name></expr>:</case>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"%zu:%zu: Unexpected character in token: "</literal></expr></argument>,
		    <argument><expr><name><name>token</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"%zu:%zu: Unexpected token: "</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,
		    <argument><expr><name><name>token</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<decl_stmt><decl><type><name>UNUSED</name> <name>ssize_t</name></type> <name>err</name> <init>= <expr><call><name>malloc_write_fd</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name><name>token</name><operator>-&gt;</operator><name>parser</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>token</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parser_init</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parser_fini</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_append</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
	    <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rallocx</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
	    <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_tokenize</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<enum>enum <block>{
		<decl><name>STATE_START</name></decl>,
		<decl><name>STATE_EOI</name></decl>,
		<decl><name>STATE_N</name></decl>, <decl><name>STATE_NU</name></decl>, <decl><name>STATE_NUL</name></decl>, <decl><name>STATE_NULL</name></decl>,
		<decl><name>STATE_F</name></decl>, <decl><name>STATE_FA</name></decl>, <decl><name>STATE_FAL</name></decl>, <decl><name>STATE_FALS</name></decl>, <decl><name>STATE_FALSE</name></decl>,
		<decl><name>STATE_T</name></decl>, <decl><name>STATE_TR</name></decl>, <decl><name>STATE_TRU</name></decl>, <decl><name>STATE_TRUE</name></decl>,
		<decl><name>STATE_LBRACKET</name></decl>,
		<decl><name>STATE_RBRACKET</name></decl>,
		<decl><name>STATE_LBRACE</name></decl>,
		<decl><name>STATE_RBRACE</name></decl>,
		<decl><name>STATE_COLON</name></decl>,
		<decl><name>STATE_COMMA</name></decl>,
		<decl><name>STATE_CHARS</name></decl>,
		<decl><name>STATE_CHAR_ESCAPE</name></decl>,
		<decl><name>STATE_CHAR_U</name></decl>, <decl><name>STATE_CHAR_UD</name></decl>, <decl><name>STATE_CHAR_UDD</name></decl>, <decl><name>STATE_CHAR_UDDD</name></decl>,
		<decl><name>STATE_STRING</name></decl>,
		<decl><name>STATE_MINUS</name></decl>,
		<decl><name>STATE_LEADING_ZERO</name></decl>,
		<decl><name>STATE_DIGITS</name></decl>,
		<decl><name>STATE_DECIMAL</name></decl>,
		<decl><name>STATE_FRAC_DIGITS</name></decl>,
		<decl><name>STATE_EXP</name></decl>,
		<decl><name>STATE_EXP_SIGN</name></decl>,
		<decl><name>STATE_EXP_DIGITS</name></decl>,
		<decl><name>STATE_ACCEPT</name></decl>
	}</block> <decl><name>state</name> <init>= <expr><name>STATE_START</name></expr></init></decl>;</enum>
	<decl_stmt><decl><type><name>size_t</name> <name>token_pos</name></type> <name>JEMALLOC_CC_SILENCE_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <name>token_line</name></type> <name>JEMALLOC_CC_SILENCE_INIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <name>token_col</name></type> <name>JEMALLOC_CC_SILENCE_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_zu_le</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
	    <argument><expr><literal type="string">"Position is past end of buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>state</name> <operator>!=</operator> <name>STATE_ACCEPT</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>STATE_START</name></expr>:</case>
			<expr_stmt><expr><name>token_pos</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>token_line</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>token_col</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
				<break>break;</break>
			<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EOI</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_N</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_F</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_T</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'['</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_LBRACKET</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">']'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_RBRACKET</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'{'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_LBRACE</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'}'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_RBRACE</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">':'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_COLON</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">','</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_COMMA</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'"'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHARS</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'-'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_MINUS</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_LEADING_ZERO</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_DIGITS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_EOI</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
			    <argument><expr><name>TOKEN_TYPE_EOI</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator>
			    <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_N</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'u'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_NU</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_NU</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_NUL</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_NUL</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_NULL</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
			<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
			<case>case <expr><literal type="char">'['</literal></expr>:</case> <case>case <expr><literal type="char">']'</literal></expr>:</case> <case>case <expr><literal type="char">'{'</literal></expr>:</case> <case>case <expr><literal type="char">'}'</literal></expr>:</case> <case>case <expr><literal type="char">':'</literal></expr>:</case>
			<case>case <expr><literal type="char">','</literal></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_NULL</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_F</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_FA</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_FA</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_FAL</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_FAL</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_FALS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_FALS</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'e'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_FALSE</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_FALSE</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
			<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
			<case>case <expr><literal type="char">'['</literal></expr>:</case> <case>case <expr><literal type="char">']'</literal></expr>:</case> <case>case <expr><literal type="char">'{'</literal></expr>:</case> <case>case <expr><literal type="char">'}'</literal></expr>:</case> <case>case <expr><literal type="char">':'</literal></expr>:</case>
			<case>case <expr><literal type="char">','</literal></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
			    <argument><expr><name>TOKEN_TYPE_FALSE</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator>
			    <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_T</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'r'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_TR</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_TR</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'u'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_TRU</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_TRU</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'e'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_TRUE</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_TRUE</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
			<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
			<case>case <expr><literal type="char">'['</literal></expr>:</case> <case>case <expr><literal type="char">']'</literal></expr>:</case> <case>case <expr><literal type="char">'{'</literal></expr>:</case> <case>case <expr><literal type="char">'}'</literal></expr>:</case> <case>case <expr><literal type="char">':'</literal></expr>:</case>
			<case>case <expr><literal type="char">','</literal></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_TRUE</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_LBRACKET</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_LBRACKET</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_RBRACKET</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_RBRACKET</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_LBRACE</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_LBRACE</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_RBRACE</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_RBRACE</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_COLON</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_COLON</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_COMMA</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_COMMA</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_CHARS</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHAR_ESCAPE</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'"'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_STRING</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">0x00</literal></expr>:</case> <case>case <expr><literal type="number">0x01</literal></expr>:</case> <case>case <expr><literal type="number">0x02</literal></expr>:</case> <case>case <expr><literal type="number">0x03</literal></expr>:</case> <case>case <expr><literal type="number">0x04</literal></expr>:</case>
			<case>case <expr><literal type="number">0x05</literal></expr>:</case> <case>case <expr><literal type="number">0x06</literal></expr>:</case> <case>case <expr><literal type="number">0x07</literal></expr>:</case> <case>case <expr><literal type="number">0x08</literal></expr>:</case> <case>case <expr><literal type="number">0x09</literal></expr>:</case>
			<case>case <expr><literal type="number">0x0a</literal></expr>:</case> <case>case <expr><literal type="number">0x0b</literal></expr>:</case> <case>case <expr><literal type="number">0x0c</literal></expr>:</case> <case>case <expr><literal type="number">0x0d</literal></expr>:</case> <case>case <expr><literal type="number">0x0e</literal></expr>:</case>
			<case>case <expr><literal type="number">0x0f</literal></expr>:</case> <case>case <expr><literal type="number">0x10</literal></expr>:</case> <case>case <expr><literal type="number">0x11</literal></expr>:</case> <case>case <expr><literal type="number">0x12</literal></expr>:</case> <case>case <expr><literal type="number">0x13</literal></expr>:</case>
			<case>case <expr><literal type="number">0x14</literal></expr>:</case> <case>case <expr><literal type="number">0x15</literal></expr>:</case> <case>case <expr><literal type="number">0x16</literal></expr>:</case> <case>case <expr><literal type="number">0x17</literal></expr>:</case> <case>case <expr><literal type="number">0x18</literal></expr>:</case>
			<case>case <expr><literal type="number">0x19</literal></expr>:</case> <case>case <expr><literal type="number">0x1a</literal></expr>:</case> <case>case <expr><literal type="number">0x1b</literal></expr>:</case> <case>case <expr><literal type="number">0x1c</literal></expr>:</case> <case>case <expr><literal type="number">0x1d</literal></expr>:</case>
			<case>case <expr><literal type="number">0x1e</literal></expr>:</case> <case>case <expr><literal type="number">0x1f</literal></expr>:</case>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			<default>default:</default>
				<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_CHAR_ESCAPE</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <case>case <expr><literal type="char">'/'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHARS</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'u'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHAR_U</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_CHAR_U</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>
			<case>case <expr><literal type="char">'F'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHAR_UD</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_CHAR_UD</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>
			<case>case <expr><literal type="char">'F'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHAR_UDD</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_CHAR_UDD</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>
			<case>case <expr><literal type="char">'F'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHAR_UDDD</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_CHAR_UDDD</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>
			<case>case <expr><literal type="char">'F'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_CHARS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_STRING</name></expr>:</case>
			<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>TOKEN_TYPE_STRING</name></expr></argument>,
			    <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>,
			    <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>STATE_MINUS</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_LEADING_ZERO</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_DIGITS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_LEADING_ZERO</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'.'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_DECIMAL</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_NUMBER</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator>
				    <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_DIGITS</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<break>break;</break>
			<case>case <expr><literal type="char">'.'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_DECIMAL</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_NUMBER</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator>
				    <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_DECIMAL</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_FRAC_DIGITS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_FRAC_DIGITS</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<break>break;</break>
			<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EXP</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_NUMBER</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator>
				    <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_EXP</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'+'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EXP_SIGN</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EXP_DIGITS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_EXP_SIGN</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EXP_DIGITS</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_ERROR</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal>
				    <operator>-</operator> <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>STATE_EXP_DIGITS</name></expr>:</case>
			<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>token_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><name>parser</name></expr></argument>,
				    <argument><expr><name>TOKEN_TYPE_NUMBER</name></expr></argument>, <argument><expr><name>token_pos</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator>
				    <name>token_pos</name></expr></argument>, <argument><expr><name>token_line</name></expr></argument>, <argument><expr><name>token_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ACCEPT</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>STATE_ACCEPT</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>	<name>parser_parse_array</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>	<name>parser_parse_object</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse_value</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>TOKEN_TYPE_NULL</name></expr>:</case>
	<case>case <expr><name>TOKEN_TYPE_FALSE</name></expr>:</case>
	<case>case <expr><name>TOKEN_TYPE_TRUE</name></expr>:</case>
	<case>case <expr><name>TOKEN_TYPE_STRING</name></expr>:</case>
	<case>case <expr><name>TOKEN_TYPE_NUMBER</name></expr>:</case>
		<return>return <expr><name>false</name></expr>;</return>
	<case>case <expr><name>TOKEN_TYPE_LBRACE</name></expr>:</case>
		<return>return <expr><call><name>parser_parse_object</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>TOKEN_TYPE_LBRACKET</name></expr>:</case>
		<return>return <expr><call><name>parser_parse_array</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
	<default>default:</default>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse_pair</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr></argument>, <argument><expr><name>TOKEN_TYPE_STRING</name></expr></argument>,
	    <argument><expr><literal type="string">"Pair should start with string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>TOKEN_TYPE_COLON</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>parser_parse_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
	<default>default:</default>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse_values</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>parser_parse_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>TOKEN_TYPE_COMMA</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>parser_parse_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>TOKEN_TYPE_RBRACKET</name></expr>:</case>
			<return>return <expr><name>false</name></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse_array</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr></argument>, <argument><expr><name>TOKEN_TYPE_LBRACKET</name></expr></argument>,
	    <argument><expr><literal type="string">"Array should start with ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>TOKEN_TYPE_RBRACKET</name></expr>:</case>
		<return>return <expr><name>false</name></expr>;</return>
	<default>default:</default>
		<return>return <expr><call><name>parser_parse_values</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse_pairs</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr></argument>, <argument><expr><name>TOKEN_TYPE_STRING</name></expr></argument>,
	    <argument><expr><literal type="string">"Object should start with string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parser_parse_pair</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>TOKEN_TYPE_COMMA</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>TOKEN_TYPE_STRING</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>parser_parse_pair</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>TOKEN_TYPE_RBRACE</name></expr>:</case>
			<return>return <expr><name>false</name></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse_object</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr></argument>, <argument><expr><name>TOKEN_TYPE_LBRACE</name></expr></argument>,
	    <argument><expr><literal type="string">"Object should start with {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>TOKEN_TYPE_STRING</name></expr>:</case>
		<return>return <expr><call><name>parser_parse_pairs</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>TOKEN_TYPE_RBRACE</name></expr>:</case>
		<return>return <expr><name>false</name></expr>;</return>
	<default>default:</default>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>parser_parse</name><parameter_list>(<parameter><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<goto>goto <name>label_error</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parser_parse_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<goto>goto <name>label_error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>parser_tokenize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<goto>goto <name>label_error</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>token_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>TOKEN_TYPE_EOI</name></expr>:</case>
		<return>return <expr><name>false</name></expr>;</return>
	<default>default:</default>
		<goto>goto <name>label_error</name>;</goto>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>label_error</name>:</label>
	<expr_stmt><expr><call><name>token_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_json_parser</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>invalid_inputs</name><index>[]</index></name> <init>= <expr><block>{
		<comment type="block">/* Tokenizer error case tests. */</comment>
		<expr><literal type="string">"{ \"string\": X }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": nXll }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": nuXl }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": nulX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": nullX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": fXlse }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": faXse }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": falXe }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": falsX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": falseX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": tXue }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": trXe }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": truX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": trueX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": \"\n\" }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": \"\\z\" }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": \"\\uX000\" }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": \"\\u0X00\" }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": \"\\u00X0\" }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": \"\\u000X\" }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": -X }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": 0.X }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": 0.0eX }"</literal></expr>,
		<expr><literal type="string">"{ \"string\": 0.0e+X }"</literal></expr>,

		<comment type="block">/* Parser error test cases. */</comment>
		<expr><literal type="string">"{\"string\": }"</literal></expr>,
		<expr><literal type="string">"{\"string\" }"</literal></expr>,
		<expr><literal type="string">"{\"string\": [ 0 }"</literal></expr>,
		<expr><literal type="string">"{\"string\": {\"a\":0, 1 } }"</literal></expr>,
		<expr><literal type="string">"{\"string\": {\"a\":0: } }"</literal></expr>,
		<expr><literal type="string">"{"</literal></expr>,
		<expr><literal type="string">"{}{"</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>valid_inputs</name><index>[]</index></name> <init>= <expr><block>{
		<comment type="block">/* Token tests. */</comment>
		<expr><literal type="string">"null"</literal></expr>,
		<expr><literal type="string">"false"</literal></expr>,
		<expr><literal type="string">"true"</literal></expr>,
		<expr><literal type="string">"{}"</literal></expr>,
		<expr><literal type="string">"{\"a\": 0}"</literal></expr>,
		<expr><literal type="string">"[]"</literal></expr>,
		<expr><literal type="string">"[0, 1]"</literal></expr>,
		<expr><literal type="string">"0"</literal></expr>,
		<expr><literal type="string">"1"</literal></expr>,
		<expr><literal type="string">"10"</literal></expr>,
		<expr><literal type="string">"-10"</literal></expr>,
		<expr><literal type="string">"10.23"</literal></expr>,
		<expr><literal type="string">"10.23e4"</literal></expr>,
		<expr><literal type="string">"10.23e-4"</literal></expr>,
		<expr><literal type="string">"10.23e+4"</literal></expr>,
		<expr><literal type="string">"10.23E4"</literal></expr>,
		<expr><literal type="string">"10.23E-4"</literal></expr>,
		<expr><literal type="string">"10.23E+4"</literal></expr>,
		<expr><literal type="string">"-10.23"</literal></expr>,
		<expr><literal type="string">"-10.23e4"</literal></expr>,
		<expr><literal type="string">"-10.23e-4"</literal></expr>,
		<expr><literal type="string">"-10.23e+4"</literal></expr>,
		<expr><literal type="string">"-10.23E4"</literal></expr>,
		<expr><literal type="string">"-10.23E-4"</literal></expr>,
		<expr><literal type="string">"-10.23E+4"</literal></expr>,
		<expr><literal type="string">"\"value\""</literal></expr>,
		<expr><literal type="string">"\" \\\" \\/ \\b \\n \\r \\t \\u0abc \\u1DEF \""</literal></expr>,

		<comment type="block">/* Parser test with various nesting. */</comment>
		<expr><literal type="string">"{\"a\":null, \"b\":[1,[{\"c\":2},3]], \"d\":{\"e\":true}}"</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid_inputs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>invalid_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>parser_t</name></type> <name>parser</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>parser_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected input appending failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>parser_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected parse success for input: %s"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>parser_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>valid_inputs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>valid_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>parser_t</name></type> <name>parser</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>parser_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected input appending failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>parser_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected parse error for input: %s"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>parser_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>void</name></type>
<name>write_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>parser_t</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><operator>(</operator><name>parser_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>parser_append</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected input appending failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_stats_print_json</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opts</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"J"</literal></expr>,
		<expr><literal type="string">"Jg"</literal></expr>,
		<expr><literal type="string">"Jm"</literal></expr>,
		<expr><literal type="string">"Jd"</literal></expr>,
		<expr><literal type="string">"Jmd"</literal></expr>,
		<expr><literal type="string">"Jgd"</literal></expr>,
		<expr><literal type="string">"Jgm"</literal></expr>,
		<expr><literal type="string">"Jgmd"</literal></expr>,
		<expr><literal type="string">"Ja"</literal></expr>,
		<expr><literal type="string">"Jb"</literal></expr>,
		<expr><literal type="string">"Jl"</literal></expr>,
		<expr><literal type="string">"Jx"</literal></expr>,
		<expr><literal type="string">"Jbl"</literal></expr>,
		<expr><literal type="string">"Jal"</literal></expr>,
		<expr><literal type="string">"Jab"</literal></expr>,
		<expr><literal type="string">"Jabl"</literal></expr>,
		<expr><literal type="string">"Jax"</literal></expr>,
		<expr><literal type="string">"Jbx"</literal></expr>,
		<expr><literal type="string">"Jlx"</literal></expr>,
		<expr><literal type="string">"Jablx"</literal></expr>,
		<expr><literal type="string">"Jgmdablx"</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>,
			    <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block> <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.destroy"</literal></expr></argument>,
			    <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected mallctlnametomib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arena_ind</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block> <default>default:</default>
			<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>parser_t</name></type> <name>parser</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>malloc_stats_print</name><argument_list>(<argument><expr><name>write_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>parser_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected parse error, opts=\"%s\""</literal></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>parser_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_json_parser</name></expr></argument>,
	    <argument><expr><name>test_stats_print_json</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
