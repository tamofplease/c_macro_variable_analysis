<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/prng.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prng_lg_range_u32</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>atomic_u32_t</name></type> <name>sa</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>ra</name></decl>, <decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Repeated generation should produce repeated results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Equivalent generation should produce equivalent results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Full-width results must not immediately repeat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>lg_range</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>lg_range</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>lg_range</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><operator>(</operator><name>rb</name> <operator>&amp;</operator> <operator>(</operator><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_range</name><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"High order bits should be 0, lg_range=%u"</literal></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>(</operator><name>ra</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>lg_range</name><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="string">"Expected high order bits of full-width result, "</literal>
		    <literal type="string">"lg_range=%u"</literal></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prng_lg_range_u64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>sa</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ra</name></decl>, <decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sa</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sa</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Repeated generation should produce repeated results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sb</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Equivalent generation should produce equivalent results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sa</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_ne</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Full-width results must not immediately repeat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sa</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>lg_range</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>lg_range</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>lg_range</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sb</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>rb</name> <operator>&amp;</operator> <operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffff</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_range</name><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"High order bits should be 0, lg_range=%u"</literal></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>(</operator><name>ra</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>lg_range</name><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="string">"Expected high order bits of full-width result, "</literal>
		    <literal type="string">"lg_range=%u"</literal></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prng_lg_range_zu</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>sa</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ra</name></decl>, <decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_range</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Repeated generation should produce repeated results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Equivalent generation should produce equivalent results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_ne</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>,
	    <argument><expr><literal type="string">"Full-width results must not immediately repeat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ra</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>lg_range</name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lg_range</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
	    <incr><expr><name>lg_range</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>prng_lg_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><operator>(</operator><name>rb</name> <operator>&amp;</operator> <operator>(</operator><name>SIZE_T_MAX</name> <operator>&lt;&lt;</operator> <name>lg_range</name><operator>)</operator><operator>)</operator></expr></argument>,
		    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"High order bits should be 0, lg_range=%u"</literal></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>(</operator><name>ra</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>LG_SIZEOF_PTR</name><operator>)</operator><operator>)</operator> <operator>-</operator>
		    <name>lg_range</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Expected high order bits of full-width "</literal>
		    <literal type="string">"result, lg_range=%u"</literal></expr></argument>, <argument><expr><name>lg_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prng_lg_range_u32_nonatomic</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_lg_range_u32</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_lg_range_u32_atomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_lg_range_u32</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_lg_range_u64_nonatomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_lg_range_u64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_lg_range_zu_nonatomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_lg_range_zu</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_lg_range_zu_atomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_lg_range_zu</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>test_prng_range_u32</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RANGE</name></cpp:macro>	<cpp:value>10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_STEP</name></cpp:macro>	<cpp:value>97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NREPS</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>

	<for>for <control>(<init><expr><name>range</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>range</name> <operator>&lt;</operator> <name>MAX_RANGE</name></expr>;</condition> <incr><expr><name>range</name> <operator>+=</operator> <name>RANGE_STEP</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>atomic_u32_t</name></type> <name>s</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>rep</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>atomic_store_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rep</name> <operator>&lt;</operator> <name>NREPS</name></expr>;</condition> <incr><expr><name>rep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><call><name>prng_range_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>assert_u32_lt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"Out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prng_range_u64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>range</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RANGE</name></cpp:macro>	<cpp:value>10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_STEP</name></cpp:macro>	<cpp:value>97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NREPS</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>

	<for>for <control>(<init><expr><name>range</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>range</name> <operator>&lt;</operator> <name>MAX_RANGE</name></expr>;</condition> <incr><expr><name>range</name> <operator>+=</operator> <name>RANGE_STEP</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>s</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>rep</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rep</name> <operator>&lt;</operator> <name>NREPS</name></expr>;</condition> <incr><expr><name>rep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><call><name>prng_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>assert_u64_lt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"Out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_prng_range_zu</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>atomic</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>range</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RANGE</name></cpp:macro>	<cpp:value>10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_STEP</name></cpp:macro>	<cpp:value>97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NREPS</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>

	<for>for <control>(<init><expr><name>range</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>range</name> <operator>&lt;</operator> <name>MAX_RANGE</name></expr>;</condition> <incr><expr><name>range</name> <operator>+=</operator> <name>RANGE_STEP</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>atomic_zu_t</name></type> <name>s</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>rep</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>atomic_store_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rep</name> <operator>&lt;</operator> <name>NREPS</name></expr>;</condition> <incr><expr><name>rep</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><call><name>prng_range_zu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>atomic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>assert_zu_lt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"Out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prng_range_u32_nonatomic</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_range_u32</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_range_u32_atomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_range_u32</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_range_u64_nonatomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_range_u64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_range_zu_nonatomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_range_zu</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_prng_range_zu_atomic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_prng_range_zu</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_prng_lg_range_u32_nonatomic</name></expr></argument>,
	    <argument><expr><name>test_prng_lg_range_u32_atomic</name></expr></argument>,
	    <argument><expr><name>test_prng_lg_range_u64_nonatomic</name></expr></argument>,
	    <argument><expr><name>test_prng_lg_range_zu_nonatomic</name></expr></argument>,
	    <argument><expr><name>test_prng_lg_range_zu_atomic</name></expr></argument>,
	    <argument><expr><name>test_prng_range_u32_nonatomic</name></expr></argument>,
	    <argument><expr><name>test_prng_range_u32_atomic</name></expr></argument>,
	    <argument><expr><name>test_prng_range_u64_nonatomic</name></expr></argument>,
	    <argument><expr><name>test_prng_range_zu_nonatomic</name></expr></argument>,
	    <argument><expr><name>test_prng_range_zu_atomic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
