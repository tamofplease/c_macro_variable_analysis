<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/arena_reset.c"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ARENA_RESET_PROF_C_</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/extent_mmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rtree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/extent_hooks.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nsizes_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nsmall</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_nsizes_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.nbins"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_nlarge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_nsizes_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.nlextents"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_size_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib(\"%s\", ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib([\"%s\", %zu], ...) failure"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_small_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_size_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.bin.0.size"</literal></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_large_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>get_size_impl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like ivsalloc(), but safe to call on discarded allocations. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>vsalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rtree_extent_szind_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>extent_state_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>extent_state_active</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>szind</name> <operator>==</operator> <name>SC_NSIZES</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>sz_index2size</name><argument_list>(<argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>do_arena_create</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>h</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>arena_ind</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arena_reset_pre</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ptrs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>nptrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLARGE</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nsmall</name></decl>, <decl><type ref="prev"/><name>nlarge</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>nsmall</name> <operator>=</operator> <call><name>get_nsmall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nlarge</name> <operator>=</operator> <ternary><condition><expr><call><name>get_nlarge</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>NLARGE</name></expr> ?</condition><then> <expr><name>NLARGE</name></expr> </then><else>: <expr><call><name>get_nlarge</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>nptrs</name> <operator>=</operator> <name>nsmall</name> <operator>+</operator> <name>nlarge</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptrs</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>*</operator><name>nptrs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>*</operator><name>ptrs</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Allocate objects with a wide range of sizes. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsmall</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>get_small_size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptrs</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ptrs</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallocx(%zu, %#x) failure"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlarge</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>get_large_size</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptrs</name><operator>)</operator><index>[<expr><name>nsmall</name> <operator>+</operator> <name>i</name></expr>]</index> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ptrs</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallocx(%zu, %#x) failure"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>tsdn</name> <operator>=</operator> <call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify allocations. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nptrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_zu_gt</name><argument_list>(<argument><expr><call><name>ivsalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptrs</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Allocation should have queryable size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arena_reset_post</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nptrs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tsdn</name> <operator>=</operator> <call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>have_background_thread</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><call><name>background_thread_info_get</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Verify allocations no longer exist. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nptrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>vsalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Allocation should no longer exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>have_background_thread</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><call><name>background_thread_info_get</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arena_reset_destroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>miblen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arena_reset</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_arena_reset_destroy</name><argument_list>(<argument><expr><literal type="string">"arena.0.reset"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arena_destroy</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_arena_reset_destroy</name><argument_list>(<argument><expr><literal type="string">"arena.0.destroy"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_arena_reset</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nptrs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>arena_ind</name> <operator>=</operator> <call><name>do_arena_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset_pre</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset_post</name><argument_list>(<argument><expr><name>ptrs</name></expr></argument>, <argument><expr><name>nptrs</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>bool</name></type>
<name>arena_i_initialized</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>refresh</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>refresh</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>epoch</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"epoch"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>epoch</name></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>epoch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>miblen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.initialized"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>initialized</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initialized</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>initialized</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_arena_destroy_initial</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>MALLCTL_ARENAS_DESTROYED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Destroyed arena stats should not be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_arena_destroy_hooks_default</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>, <decl><type ref="prev"/><name>arena_ind_another</name></decl>, <decl><type ref="prev"/><name>arena_ind_prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nptrs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>arena_ind</name> <operator>=</operator> <call><name>do_arena_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset_pre</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Arena stats should not be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Arena stats should be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create another arena before destroying one, to better verify arena
	 * index reuse.
	 */</comment>
	<expr_stmt><expr><name>arena_ind_another</name> <operator>=</operator> <call><name>do_arena_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Arena stats should not be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>MALLCTL_ARENAS_DESTROYED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Destroyed arena stats should be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_arena_reset_post</name><argument_list>(<argument><expr><name>ptrs</name></expr></argument>, <argument><expr><name>nptrs</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>arena_ind_prev</name> <operator>=</operator> <name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arena_ind</name> <operator>=</operator> <call><name>do_arena_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset_pre</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>arena_ind_prev</name></expr></argument>,
	    <argument><expr><literal type="string">"Arena index should have been recycled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset_post</name><argument_list>(<argument><expr><name>ptrs</name></expr></argument>, <argument><expr><name>nptrs</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind_another</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<comment type="block">/*
 * Actually unmap extents, regardless of opt_retain, so that attempts to access
 * a destroyed arena's memory will segfault.
 */</comment>
<specifier>static</specifier> <name>bool</name></type>
<name>extent_dalloc_unmap</name><parameter_list>(<parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>committed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>TRACE_HOOK</name><argument_list>(<argument><expr><literal type="string">"%s(extent_hooks=%p, addr=%p, size=%zu, committed=%s, "</literal>
	    <literal type="string">"arena_ind=%u)\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><ternary><condition><expr><name>committed</name></expr> ?</condition><then>
	    <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>,
	    <argument><expr><literal type="string">"extent_hooks should be same as pointer used to set hooks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>dalloc</name></name></expr></argument>, <argument><expr><name>extent_dalloc_unmap</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong hook function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>called_dalloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_dalloc</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>did_dalloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maps_coalesce</name> <operator>&amp;&amp;</operator> <name>opt_retain</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pages_unmap</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>extent_hooks_t</name></type> <name>hooks_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>extent_hooks_t</name></type> <name>hooks_unmap</name> <init>= <expr><block>{
	<expr><name>extent_alloc_hook</name></expr>,
	<expr><name>extent_dalloc_unmap</name></expr>, <comment type="block">/* dalloc */</comment>
	<expr><name>extent_destroy_hook</name></expr>,
	<expr><name>extent_commit_hook</name></expr>,
	<expr><name>extent_decommit_hook</name></expr>,
	<expr><name>extent_purge_lazy_hook</name></expr>,
	<expr><name>extent_purge_forced_hook</name></expr>,
	<expr><name>extent_split_hook</name></expr>,
	<expr><name>extent_merge_hook</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_arena_destroy_hooks_unmap</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nptrs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>extent_hooks_prep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>maps_coalesce</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>try_decommit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks_orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_unmap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>did_alloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arena_ind</name> <operator>=</operator> <call><name>do_arena_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_reset_pre</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>did_alloc</name></expr></argument>, <argument><expr><literal type="string">"Expected alloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Arena stats should not be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Arena stats should be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>did_dalloc</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>did_dalloc</name></expr></argument>, <argument><expr><literal type="string">"Expected dalloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Arena stats should not be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>arena_i_initialized</name><argument_list>(<argument><expr><name>MALLCTL_ARENAS_DESTROYED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Destroyed arena stats should be initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_arena_reset_post</name><argument_list>(<argument><expr><name>ptrs</name></expr></argument>, <argument><expr><name>nptrs</name></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_orig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_hooks_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_arena_reset</name></expr></argument>,
	    <argument><expr><name>test_arena_destroy_initial</name></expr></argument>,
	    <argument><expr><name>test_arena_destroy_hooks_default</name></expr></argument>,
	    <argument><expr><name>test_arena_destroy_hooks_unmap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
