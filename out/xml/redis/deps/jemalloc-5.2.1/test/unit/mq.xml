<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/mq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSENDERS</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMSGS</name></cpp:macro>		<cpp:value>100000</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>mq_msg_s</name></name></type> <name>mq_msg_t</name>;</typedef>
<struct>struct <name>mq_msg_s</name> <block>{
	<macro><name>mq_msg</name><argument_list>(<argument>mq_msg_t</argument>)</argument_list></macro>	<expr_stmt><expr><name>link</name></expr>;</expr_stmt>
}</block>;</struct>
<macro><name>mq_gen</name><argument_list>(<argument>static</argument>, <argument>mq_</argument>, <argument>mq_t</argument>, <argument>mq_msg_t</argument>, <argument>link</argument>)</argument_list></macro>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_mq_basic</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>mq_t</name></type> <name>mq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mq_msg_t</name></type> <name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>mq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected mq_init() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>mq_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"mq should be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_null</name><argument_list>(<argument><expr><call><name>mq_tryget</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"mq_tryget() should fail when the queue is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mq_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u_eq</name><argument_list>(<argument><expr><call><name>mq_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mq should contain one message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>mq_tryget</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"mq_tryget() should return msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mq_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><call><name>mq_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"mq_get() should return msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mq_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_receiver_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>mq_t</name> <modifier>*</modifier></type><name>mq</name> <init>= <expr><operator>(</operator><name>mq_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>NSENDERS</name> <operator>*</operator> <name>NMSGS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>mq_msg_t</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>mq_get</name><argument_list>(<argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"mq_get() should never return NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>thd_sender_start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>mq_t</name> <modifier>*</modifier></type><name>mq</name> <init>= <expr><operator>(</operator><name>mq_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMSGS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>mq_msg_t</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mq_msg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>mq_msg_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mq_put</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_mq_threaded</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>mq_t</name></type> <name>mq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thd_t</name></type> <name>receiver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>thd_t</name></type> <name><name>senders</name><index>[<expr><name>NSENDERS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>mq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected mq_init() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>receiver</name></expr></argument>, <argument><expr><name>thd_receiver_start</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSENDERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>senders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>thd_sender_start</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSENDERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thd_join</name><argument_list>(<argument><expr><name><name>senders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>mq_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_mq_basic</name></expr></argument>,
	    <argument><expr><name>test_mq_threaded</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
