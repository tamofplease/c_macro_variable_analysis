<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/atomic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We *almost* have consistent short names (e.g. "u32" for uint32_t, "b" for
 * bool, etc.  The one exception is that the short name for void * is "p" in
 * some places and "ptr" in others.  In the long run it would be nice to unify
 * these, but in the short run we'll use this shim.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_p_eq</name></cpp:macro> <cpp:value>assert_ptr_eq</cpp:value></cpp:define>

<comment type="block">/*
 * t: the non-atomic type, like "uint32_t".
 * ta: the short name for the type, like "u32".
 * val[1,2,3]: Values of the given type.  The CAS tests use val2 for expected,
 * and val3 for desired.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_TESTS</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>ta</name></type></parameter>, <parameter><type><name>val1</name></type></parameter>, <parameter><type><name>val2</name></type></parameter>, <parameter><type><name>val3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {				\
	t val;								\
	t expected;							\
	bool success;							\
	<comment type="block">/* This (along with the load below) also tests ATOMIC_LOAD. */</comment>	\
	atomic_##ta##_t atom = ATOMIC_INIT(val1);			\
									\
	<comment type="block">/* ATOMIC_INIT and load. */</comment>					\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val1, val, "Load or init failed");		\
									\
	<comment type="block">/* Store. */</comment>							\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	atomic_store_##ta(&amp;atom, val2, ATOMIC_RELAXED);			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val2, val, "Store failed");			\
									\
	<comment type="block">/* Exchange. */</comment>							\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	val = atomic_exchange_##ta(&amp;atom, val2, ATOMIC_RELAXED);	\
	assert_##ta##_eq(val1, val, "Exchange returned invalid value");	\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val2, val, "Exchange store invalid value");	\
									\
	<comment type="block">/* 								\
	 * Weak CAS.  Spurious failures are allowed, so we loop a few	\
	 * times.							\
	 */</comment>								\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	success = false;						\
	for (int i = 0; i &lt; 10 &amp;&amp; !success; i++) {			\
		expected = val2;					\
		success = atomic_compare_exchange_weak_##ta(&amp;atom,	\
		    &amp;expected, val3, ATOMIC_RELAXED, ATOMIC_RELAXED);	\
		assert_##ta##_eq(val1, expected, 			\
		    "CAS should update expected");			\
	}								\
	assert_b_eq(val1 == val2, success,				\
	    "Weak CAS did the wrong state update");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	if (success) {							\
		assert_##ta##_eq(val3, val,				\
		    "Successful CAS should update atomic");		\
	} else {							\
		assert_##ta##_eq(val1, val,				\
		    "Unsuccessful CAS should not update atomic");	\
	}								\
									\
	<comment type="block">/* Strong CAS. */</comment>						\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	expected = val2;						\
	success = atomic_compare_exchange_strong_##ta(&amp;atom, &amp;expected,	\
	    val3, ATOMIC_RELAXED, ATOMIC_RELAXED);			\
	assert_b_eq(val1 == val2, success,				\
	    "Strong CAS did the wrong state update");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	if (success) {							\
		assert_##ta##_eq(val3, val,				\
		    "Successful CAS should update atomic");		\
	} else {							\
		assert_##ta##_eq(val1, val,				\
		    "Unsuccessful CAS should not update atomic");	\
	}								\
									\
									\
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_INTEGER_TESTS</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>ta</name></type></parameter>, <parameter><type><name>val1</name></type></parameter>, <parameter><type><name>val2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {			\
	atomic_##ta##_t atom;						\
	t val;								\
									\
	<comment type="block">/* Fetch-add. */</comment>						\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	val = atomic_fetch_add_##ta(&amp;atom, val2, ATOMIC_RELAXED);	\
	assert_##ta##_eq(val1, val,					\
	    "Fetch-add should return previous value");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val1 + val2, val,				\
	    "Fetch-add should update atomic");				\
									\
	<comment type="block">/* Fetch-sub. */</comment>						\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	val = atomic_fetch_sub_##ta(&amp;atom, val2, ATOMIC_RELAXED);	\
	assert_##ta##_eq(val1, val,					\
	    "Fetch-sub should return previous value");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val1 - val2, val,				\
	    "Fetch-sub should update atomic");				\
									\
	<comment type="block">/* Fetch-and. */</comment>						\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	val = atomic_fetch_and_##ta(&amp;atom, val2, ATOMIC_RELAXED);	\
	assert_##ta##_eq(val1, val,					\
	    "Fetch-and should return previous value");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val1 &amp; val2, val,				\
	    "Fetch-and should update atomic");				\
									\
	<comment type="block">/* Fetch-or. */</comment>							\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	val = atomic_fetch_or_##ta(&amp;atom, val2, ATOMIC_RELAXED);	\
	assert_##ta##_eq(val1, val,					\
	    "Fetch-or should return previous value");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val1 | val2, val,				\
	    "Fetch-or should update atomic");				\
									\
	<comment type="block">/* Fetch-xor. */</comment>						\
	atomic_store_##ta(&amp;atom, val1, ATOMIC_RELAXED);			\
	val = atomic_fetch_xor_##ta(&amp;atom, val2, ATOMIC_RELAXED);	\
	assert_##ta##_eq(val1, val,					\
	    "Fetch-xor should return previous value");			\
	val = atomic_load_##ta(&amp;atom, ATOMIC_RELAXED);			\
	assert_##ta##_eq(val1 ^ val2, val,				\
	    "Fetch-xor should update atomic");				\
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STRUCT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>ta</name></type></parameter>)</parameter_list></cpp:macro>						\
<cpp:value>typedef struct {							\
	t val1;								\
	t val2;								\
	t val3;								\
} ta##_test_t;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CASES</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{							\
	{(t)-1, (t)-1, (t)-2},						\
	{(t)-1, (t) 0, (t)-2},						\
	{(t)-1, (t) 1, (t)-2},						\
									\
	{(t) 0, (t)-1, (t)-2},						\
	{(t) 0, (t) 0, (t)-2},						\
	{(t) 0, (t) 1, (t)-2},						\
									\
	{(t) 1, (t)-1, (t)-2},						\
	{(t) 1, (t) 0, (t)-2},						\
	{(t) 1, (t) 1, (t)-2},						\
									\
	{(t)0, (t)-(1 &lt;&lt; 22), (t)-2},					\
	{(t)0, (t)(1 &lt;&lt; 22), (t)-2},					\
	{(t)(1 &lt;&lt; 22), (t)-(1 &lt;&lt; 22), (t)-2},				\
	{(t)(1 &lt;&lt; 22), (t)(1 &lt;&lt; 22), (t)-2}				\
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BODY</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>ta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {						\
	const ta##_test_t tests[] = TEST_CASES(t);			\
	for (unsigned i = 0; i &lt; sizeof(tests)/sizeof(tests[0]); i++) {	\
		ta##_test_t test = tests[i];				\
		DO_TESTS(t, ta, test.val1, test.val2, test.val3);	\
	}								\
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEGER_TEST_BODY</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>ta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {					\
	const ta##_test_t tests[] = TEST_CASES(t);			\
	for (unsigned i = 0; i &lt; sizeof(tests)/sizeof(tests[0]); i++) {	\
		ta##_test_t test = tests[i];				\
		DO_TESTS(t, ta, test.val1, test.val2, test.val3);	\
		DO_INTEGER_TESTS(t, ta, test.val1, test.val2);		\
	}								\
} while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>TEST_STRUCT</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_atomic_u64</argument>)</argument_list></macro> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>LG_SIZEOF_PTR</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>LG_SIZEOF_INT</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>test_skip</name><argument_list>(<argument><expr><literal type="string">"64-bit atomic operations not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>INTEGER_TEST_BODY</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<function_decl><type><name>TEST_END</name></type>


<name>TEST_STRUCT</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>u32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_atomic_u32</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>INTEGER_TEST_BODY</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>u32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function_decl><type><name>TEST_END</name></type>

<name>TEST_STRUCT</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_atomic_p</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>TEST_BODY</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function_decl><type><name>TEST_END</name></type>

<name>TEST_STRUCT</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>zu</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_atomic_zu</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>INTEGER_TEST_BODY</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>zu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function_decl><type><name>TEST_END</name></type>

<name>TEST_STRUCT</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>zd</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_atomic_zd</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>INTEGER_TEST_BODY</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>zd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function_decl><type><name>TEST_END</name></type>


<name>TEST_STRUCT</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>u</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_atomic_u</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>INTEGER_TEST_BODY</name><argument_list>(<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_atomic_u64</name></expr></argument>,
	    <argument><expr><name>test_atomic_u32</name></expr></argument>,
	    <argument><expr><name>test_atomic_p</name></expr></argument>,
	    <argument><expr><name>test_atomic_zu</name></expr></argument>,
	    <argument><expr><name>test_atomic_zd</name></expr></argument>,
	    <argument><expr><name>test_atomic_u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
