<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/ckh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_new_delete</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ckh_t</name></type> <name>ckh</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_new</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ckh_string_hash</name></expr></argument>,
	    <argument><expr><name>ckh_string_keycomp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected ckh_new() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ckh_delete</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_new</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ckh_pointer_hash</name></expr></argument>,
	    <argument><expr><name>ckh_pointer_keycomp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected ckh_new() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ckh_delete</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_count_insert_search_remove</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ckh_t</name></type> <name>ckh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>strs</name><index>[]</index></name> <init>= <expr><block>{
	    <expr><literal type="string">"a string"</literal></expr>,
	    <expr><literal type="string">"A string"</literal></expr>,
	    <expr><literal type="string">"a string."</literal></expr>,
	    <expr><literal type="string">"A string."</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>missing</name> <init>= <expr><literal type="string">"A string not in the hash table."</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_new</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ckh_string_hash</name></expr></argument>,
	    <argument><expr><name>ckh_string_keycomp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected ckh_new() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"ckh_count() should return %zu, but it returned %zu"</literal></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Insert. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ckh_insert</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
		    <argument><expr><literal type="string">"ckh_count() should return %zu, but it returned %zu"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
		    <argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Search. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<union>union <block>{
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
		}</block> <decl><name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</union>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ks</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vs</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>kp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>k</name><operator>.</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>k</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected ckh_search() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>vs</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ks</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>k</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"Key mismatch, i=%zu"</literal></expr></argument>,
		    <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>vs</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"Value mismatch, i=%zu"</literal></expr></argument>,
		    <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name>missing</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected ckh_search() success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Remove. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<union>union <block>{
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
		}</block> <decl><name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</union>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>kp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ks</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vs</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>kp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>k</name><operator>.</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>k</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected ckh_remove() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>vs</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ks</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>k</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"Key mismatch, i=%zu"</literal></expr></argument>,
		    <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>vs</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"Value mismatch, i=%zu"</literal></expr></argument>,
		    <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
		    <argument><expr><literal type="string">"ckh_count() should return %zu, but it returned %zu"</literal></expr></argument>,
		        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
		    <argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ckh_delete</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_insert_iter_remove</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NITEMS</name></cpp:macro> <cpp:value>ZU(1000)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ckh_t</name></type> <name>ckh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name><name>p</name><index>[<expr><name>NITEMS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tsd</name> <operator>=</operator> <call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_new</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ckh_pointer_hash</name></expr></argument>,
	    <argument><expr><name>ckh_pointer_keycomp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected ckh_new() error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_insert</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ckh_insert() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ckh_search() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"Key pointer mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Value pointer mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NITEMS</name></expr></argument>,
		    <argument><expr><literal type="string">"ckh_count() should return %zu, but it returned %zu"</literal></expr></argument>,
		    <argument><expr><name>NITEMS</name></expr></argument>, <argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ckh_search() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ckh_remove() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"Key pointer mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Value pointer mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ckh_search() success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ckh_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ckh_remove() success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name><name>seen</name><index>[<expr><name>NITEMS</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>tabind</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>seen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>tabind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>ckh_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tabind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Key and val not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>q</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>seen</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,
						    <argument><expr><literal type="string">"Item %zu already seen"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>seen</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>seen</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Item %zu not seen"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name><name>seen</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Item %zu seen"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NITEMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected ckh_search() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>ckh_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected ckh_remove() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"Key pointer mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Value pointer mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected ckh_search() success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>ckh_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected ckh_remove() success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"ckh_count() should return %zu, but it returned %zu"</literal></expr></argument>,
	    <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ckh_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ckh_delete</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ckh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NITEMS</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_new_delete</name></expr></argument>,
	    <argument><expr><name>test_count_insert_search_remove</name></expr></argument>,
	    <argument><expr><name>test_insert_iter_remove</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
