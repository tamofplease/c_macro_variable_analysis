<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/prof_tctx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_prof_realloc</argument>)</argument_list></macro> <block>{<block_content>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx_p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tctx_q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>curobjs_0</name></decl>, <decl><type ref="prev"/><name>curobjs_1</name></decl>, <decl><type ref="prev"/><name>curobjs_2</name></decl>, <decl><type ref="prev"/><name>curobjs_3</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><operator>!</operator><name>config_prof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tsdn</name> <operator>=</operator> <call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>MALLOCX_TCACHE_NONE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>prof_cnt_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curobjs_0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tctx_p</name> <operator>=</operator> <call><name>prof_tctx_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>tctx_p</name></expr></argument>, <argument><expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>,
	    <argument><expr><literal type="string">"Expected valid tctx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prof_cnt_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curobjs_1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>curobjs_0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curobjs_1</name></expr></argument>,
	    <argument><expr><literal type="string">"Allocation should have increased sample size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"Expected move"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rmallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tctx_q</name> <operator>=</operator> <call><name>prof_tctx_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>tctx_q</name></expr></argument>, <argument><expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>,
	    <argument><expr><literal type="string">"Expected valid tctx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prof_cnt_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curobjs_2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>curobjs_1</name></expr></argument>, <argument><expr><name>curobjs_2</name></expr></argument>,
	    <argument><expr><literal type="string">"Reallocation should not have changed sample size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prof_cnt_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>curobjs_3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>curobjs_0</name></expr></argument>, <argument><expr><name>curobjs_3</name></expr></argument>,
	    <argument><expr><literal type="string">"Sample size should have returned to base level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_prof_realloc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
