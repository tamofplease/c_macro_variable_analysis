<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/decay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ticker.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>nstime_monotonic_t</name> <modifier>*</modifier></type><name>nstime_monotonic_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>nstime_update_t</name> <modifier>*</modifier></type><name>nstime_update_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>nupdates_mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>nstime_t</name></type> <name>time_mock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>monotonic_mock</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_background_thread_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"background_thread"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>enabled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>enabled</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nstime_monotonic_mock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>monotonic_mock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nstime_update_mock</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>nupdates_mock</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>monotonic_mock</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_mock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>!</operator><name>monotonic_mock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>do_arena_create</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>dirty_decay_ms</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>muzzy_decay_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.dirty_decay_ms"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dirty_decay_ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dirty_decay_ms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.muzzy_decay_ms"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>muzzy_decay_ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>muzzy_decay_ms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>arena_ind</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arena_destroy</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.destroy"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>do_epoch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>epoch</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"epoch"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>epoch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>epoch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>do_purge</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.purge"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>do_decay</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"arena.0.decay"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>get_arena_npurge_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mibname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><name>mibname</name></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>npurge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>npurge</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>npurge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><ternary><condition><expr><name>config_stats</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ENOENT</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>npurge</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>get_arena_dirty_npurge</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_arena_npurge_impl</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.dirty_npurge"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>get_arena_dirty_purged</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_arena_npurge_impl</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.dirty_purged"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>get_arena_muzzy_npurge</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_arena_npurge_impl</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.muzzy_npurge"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>get_arena_npurge</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_arena_npurge_impl</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.dirty_npurge"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call> <operator>+</operator>
	    <call><name>get_arena_npurge_impl</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.muzzy_npurge"</literal></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_arena_pdirty</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.pdirty"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pdirty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pdirty</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pdirty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pdirty</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>get_arena_pmuzzy</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>miblen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlnametomib</name><argument_list>(<argument><expr><literal type="string">"stats.arenas.0.pmuzzy"</literal></expr></argument>, <argument><expr><name>mib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>miblen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlnametomib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>arena_ind</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pmuzzy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmuzzy</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctlbymib</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>miblen</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pmuzzy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctlbymib() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pmuzzy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>do_mallocx</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>generate_dirty</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>do_mallocx</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_decay_ticks</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ticker_t</name> <modifier>*</modifier></type><name>decay_ticker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>tick0</name></decl>, <decl><type ref="prev"/><name>tick1</name></decl>, <decl><type ref="prev"/><name>arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>large0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>large0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up a manually managed arena for test. */</comment>
	<expr_stmt><expr><name>arena_ind</name> <operator>=</operator> <call><name>do_arena_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Migrate to the new arena, and get the ticker. */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>old_arena_ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_arena_ind</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>old_arena_ind</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"thread.arena"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_arena_ind</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>sz_arena_ind</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>arena_ind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>decay_ticker</name> <operator>=</operator> <call><name>decay_ticker_get</name><argument_list>(<argument><expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected failure getting decay ticker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Test the standard APIs using a large size class, since we can't
	 * control tcache interactions for small size classes (except by
	 * completely disabling tcache for the entire test program).
	 */</comment>

	<comment type="block">/* malloc(). */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>large0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>, <argument><expr><literal type="string">"Expected ticker to tick during malloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* free(). */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>, <argument><expr><literal type="string">"Expected ticker to tick during free()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* calloc(). */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>large0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected calloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>, <argument><expr><literal type="string">"Expected ticker to tick during calloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* posix_memalign(). */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>posix_memalign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>large0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected posix_memalign() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
	    <argument><expr><literal type="string">"Expected ticker to tick during posix_memalign()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* aligned_alloc(). */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>aligned_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>large0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected aligned_alloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
	    <argument><expr><literal type="string">"Expected ticker to tick during aligned_alloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* realloc(). */</comment>
	<comment type="block">/* Allocate. */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>large0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected realloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>, <argument><expr><literal type="string">"Expected ticker to tick during realloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Reallocate. */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>large0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected realloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>, <argument><expr><literal type="string">"Expected ticker to tick during realloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Deallocate. */</comment>
	<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>, <argument><expr><literal type="string">"Expected ticker to tick during realloc()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Test the *allocx() APIs using large and small size classes, with
	 * tcache explicitly disabled.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name><name>allocx_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>allocx_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>large0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>allocx_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>allocx_sizes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>allocx_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/* mallocx(). */</comment>
			<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Expected ticker to tick during mallocx() (sz=%zu)"</literal></expr></argument>,
			    <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* rallocx(). */</comment>
			<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected rallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Expected ticker to tick during rallocx() (sz=%zu)"</literal></expr></argument>,
			    <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* xallocx(). */</comment>
			<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>xallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Expected ticker to tick during xallocx() (sz=%zu)"</literal></expr></argument>,
			    <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* dallocx(). */</comment>
			<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Expected ticker to tick during dallocx() (sz=%zu)"</literal></expr></argument>,
			    <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* sdallocx(). */</comment>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sdallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Expected ticker to tick during sdallocx() "</literal>
			    <literal type="string">"(sz=%zu)"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>

	<comment type="block">/*
	 * Test tcache fill/flush interactions for large and small size classes,
	 * using an explicit tcache.
	 */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>tcache_ind</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>tcache_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tcache_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>large0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcache_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>tcache_max</name></decl>, <decl><type ref="prev"/><name>sz_tcache_max</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>sz_tcache_max</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tcache_max</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.tcache_max"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_max</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>sz_tcache_max</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"tcache.create"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_ind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>,
	    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tcache_sizes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>tcache_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* tcache fill. */</comment>
		<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>MALLOCX_TCACHE</name><argument_list>(<argument><expr><name>tcache_ind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected ticker to tick during tcache fill "</literal>
		    <literal type="string">"(sz=%zu)"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* tcache flush. */</comment>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>MALLOCX_TCACHE</name><argument_list>(<argument><expr><name>tcache_ind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tick0</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"tcache.flush"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_ind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tick1</name> <operator>=</operator> <call><name>ticker_read</name><argument_list>(<argument><expr><name>decay_ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Will only tick if it's in tcache. */</comment>
		<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <name>tcache_max</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u32_ne</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Expected ticker to tick during tcache "</literal>
			    <literal type="string">"flush (sz=%zu)"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>assert_u32_eq</name><argument_list>(<argument><expr><name>tick1</name></expr></argument>, <argument><expr><name>tick0</name></expr></argument>,
			    <argument><expr><literal type="string">"Unexpected ticker tick during tcache "</literal>
			    <literal type="string">"flush (sz=%zu)"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>decay_ticker_helper</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>arena_ind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dirty</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>dt</name></decl></parameter>,
    <parameter><decl><type><name>uint64_t</name></type> <name>dirty_npurge0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>muzzy_npurge0</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>terminate_asap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NINTERVALS</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>time</name></decl>, <decl><type ref="prev"/><name>update_interval</name></decl>, <decl><type ref="prev"/><name>decay_ms</name></decl>, <decl><type ref="prev"/><name>deadline</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decay_ms</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>deadline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>deadline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decay_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>update_interval</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_idivide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>update_interval</name></expr></argument>, <argument><expr><name>NINTERVALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Keep q's slab from being deallocated during the looping below.  If a
	 * cached slab were to repeatedly come and go during looping, it could
	 * prevent the decay backlog ever becoming empty.
	 */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>do_mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>dirty_npurge1</name></decl>, <decl><type ref="prev"/><name>muzzy_npurge1</name></decl>;</decl_stmt>
	<do>do <block>{<block_content>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DECAY_NTICKS_PER_UPDATE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition>
		    <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>do_mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>dirty_npurge1</name> <operator>=</operator> <call><name>get_arena_dirty_npurge</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>muzzy_npurge1</name> <operator>=</operator> <call><name>get_arena_muzzy_npurge</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>update_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deadline</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dirty_npurge1</name> <operator>==</operator>
	    <name>dirty_npurge0</name> <operator>&amp;&amp;</operator> <name>muzzy_npurge1</name> <operator>==</operator> <name>muzzy_npurge0</name><operator>)</operator> <operator>||</operator>
	    <operator>!</operator><name>terminate_asap</name><operator>)</operator></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u64_gt</name><argument_list>(<argument><expr><name>dirty_npurge1</name> <operator>+</operator> <name>muzzy_npurge1</name></expr></argument>, <argument><expr><name>dirty_npurge0</name> <operator>+</operator>
		    <name>muzzy_npurge0</name></expr></argument>, <argument><expr><literal type="string">"Expected purging to occur"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NINTERVALS</name></cpp:undef>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_decay_ticker</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NPS</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>ddt</name> <init>= <expr><name>opt_dirty_decay_ms</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>mdt</name> <init>= <expr><name>opt_muzzy_decay_ms</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name> <init>= <expr><call><name>do_arena_create</name><argument_list>(<argument><expr><name>ddt</name></expr></argument>, <argument><expr><name>mdt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ps</name><index>[<expr><name>NPS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>large</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Allocate a bunch of large objects, pause the clock, deallocate every
	 * other object (to fragment virtual memory), restore the clock, then
	 * [md]allocx() in a tight loop while advancing time rapidly to verify
	 * the ticker triggers purging.
	 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>tcache_max</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.tcache_max"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcache_max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>large</name> <operator>=</operator> <call><name>nallocx</name><argument_list>(<argument><expr><name>tcache_max</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_purge</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>dirty_npurge0</name> <init>= <expr><call><name>get_arena_dirty_npurge</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>muzzy_npurge0</name> <init>= <expr><call><name>get_arena_muzzy_npurge</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>do_mallocx</name><argument_list>(<argument><expr><name>large</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>nupdates_mock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>monotonic_mock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>nstime_monotonic_orig</name> <operator>=</operator> <name>nstime_monotonic</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_update_orig</name> <operator>=</operator> <name>nstime_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_monotonic</name> <operator>=</operator> <name>nstime_monotonic_mock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_update</name> <operator>=</operator> <name>nstime_update_mock</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NPS</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>nupdates0</name> <init>= <expr><name>nupdates_mock</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>do_decay</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u_gt</name><argument_list>(<argument><expr><name>nupdates_mock</name></expr></argument>, <argument><expr><name>nupdates0</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected nstime_update() to be called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>decay_ticker_helper</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ddt</name></expr></argument>, <argument><expr><name>dirty_npurge0</name></expr></argument>,
	    <argument><expr><name>muzzy_npurge0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>decay_ticker_helper</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ddt</name><operator>+</operator><name>mdt</name></expr></argument>, <argument><expr><name>dirty_npurge0</name></expr></argument>,
	    <argument><expr><name>muzzy_npurge0</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nstime_monotonic</name> <operator>=</operator> <name>nstime_monotonic_orig</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_update</name> <operator>=</operator> <name>nstime_update_orig</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NPS</name></cpp:undef>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_decay_nonmonotonic</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NPS</name></cpp:macro> <cpp:value>(SMOOTHSTEP_NSTEPS + 1)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ps</name><index>[<expr><name>NPS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>npurge0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>npurge1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>large0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nupdates0</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arenas.lextent.0.size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>large0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arena.0.purge"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><literal type="string">"Unexpected mallctl failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>npurge0</name> <operator>=</operator> <call><name>get_arena_npurge</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nupdates_mock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_mock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>monotonic_mock</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>nstime_monotonic_orig</name> <operator>=</operator> <name>nstime_monotonic</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_update_orig</name> <operator>=</operator> <name>nstime_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_monotonic</name> <operator>=</operator> <name>nstime_monotonic_mock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_update</name> <operator>=</operator> <name>nstime_update_mock</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><name>large0</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_not_null</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nupdates0</name> <operator>=</operator> <name>nupdates_mock</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"arena.0.decay"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected arena.0.decay failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_u_gt</name><argument_list>(<argument><expr><name>nupdates_mock</name></expr></argument>, <argument><expr><name>nupdates0</name></expr></argument>,
		    <argument><expr><literal type="string">"Expected nstime_update() to be called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>do_epoch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>npurge1</name> <operator>=</operator> <call><name>get_arena_npurge</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>npurge0</name></expr></argument>, <argument><expr><name>npurge1</name></expr></argument>, <argument><expr><literal type="string">"Unexpected purging occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>nstime_monotonic</name> <operator>=</operator> <name>nstime_monotonic_orig</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nstime_update</name> <operator>=</operator> <name>nstime_update_orig</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NPS</name></cpp:undef>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_decay_now</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name> <init>= <expr><call><name>do_arena_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>get_arena_pdirty</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected dirty pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>get_arena_pmuzzy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected muzzy pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><name>PAGE</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>, <expr><name>HUGEPAGE</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Verify that dirty/muzzy pages never linger after deallocation. */</comment>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>generate_dirty</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>get_arena_pdirty</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected dirty pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>get_arena_pmuzzy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><literal type="string">"Unexpected muzzy pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_decay_never</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>test_skip_if</name><argument_list>(<argument><expr><call><name>check_background_thread_enabled</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>config_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>arena_ind</name> <init>= <expr><call><name>do_arena_create</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>MALLOCX_ARENA</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>MALLOCX_TCACHE_NONE</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>get_arena_pdirty</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected dirty pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><call><name>get_arena_pmuzzy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected muzzy pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">16</literal></expr>, <expr><name>PAGE</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>, <expr><name>HUGEPAGE</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ptrs</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>do_mallocx</name><argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* Verify that each deallocation generates additional dirty pages. */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pdirty_prev</name> <init>= <expr><call><name>get_arena_pdirty</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pmuzzy_prev</name> <init>= <expr><call><name>get_arena_pmuzzy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>pdirty_prev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected dirty pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>pmuzzy_prev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected muzzy pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name><name>ptrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>pdirty</name> <init>= <expr><call><name>get_arena_pdirty</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>pmuzzy</name> <init>= <expr><call><name>get_arena_pmuzzy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert_zu_gt</name><argument_list>(<argument><expr><name>pdirty</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>get_arena_dirty_purged</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name>pdirty_prev</name></expr></argument>, <argument><expr><literal type="string">"Expected dirty pages to increase."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><name>pmuzzy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Unexpected muzzy pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pdirty_prev</name> <operator>=</operator> <name>pdirty</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>do_arena_destroy</name><argument_list>(<argument><expr><name>arena_ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test</name><argument_list>(
	    <argument><expr><name>test_decay_ticks</name></expr></argument>,
	    <argument><expr><name>test_decay_ticker</name></expr></argument>,
	    <argument><expr><name>test_decay_nonmonotonic</name></expr></argument>,
	    <argument><expr><name>test_decay_now</name></expr></argument>,
	    <argument><expr><name>test_decay_never</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
