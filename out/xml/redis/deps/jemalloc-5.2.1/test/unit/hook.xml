<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/unit/hook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/hook.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>arg_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>arg_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>arg_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>arg_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>arg_old_usize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>arg_new_usize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>arg_result_raw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uintptr_t</name></type> <name><name>arg_args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>call_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>reset_args</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>arg_extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_type</name> <operator>=</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_address</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_old_usize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_new_usize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_result_raw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>arg_args_raw</name></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arg_args_raw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>alloc_free_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * We want to support a degree of user reentrancy.  This tests a variety of
 * allocation scenarios.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>be_reentrant</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="block">/* Let's make sure the tcache is non-empty if enabled. */</comment>
	<expr_stmt><expr><call><name>alloc_free_size</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alloc_free_size</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alloc_free_size</name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alloc_free_size</name><argument_list>(<argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alloc_free_size</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Some reallocation. */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>rallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_args_raw</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>args_raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>arg_args_raw</name></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>assert_args_raw</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>args_raw_expected</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>args_raw_expected</name></expr></argument>, <argument><expr><name>arg_args_raw</name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Raw args mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>call_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset_args</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_alloc_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>hook_alloc_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name>result_raw</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>call_count</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_type</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_result</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_result_raw</name> <operator>=</operator> <name>result_raw</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_args_raw</name><argument_list>(<argument><expr><name>args_raw</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>be_reentrant</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_dalloc_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>hook_dalloc_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>call_count</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_type</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_address</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_args_raw</name><argument_list>(<argument><expr><name>args_raw</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>be_reentrant</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_expand_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>hook_expand_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>old_usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_usize</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>result_raw</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>call_count</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_type</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_address</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_old_usize</name> <operator>=</operator> <name>old_usize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_new_usize</name> <operator>=</operator> <name>new_usize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_result_raw</name> <operator>=</operator> <name>result_raw</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_args_raw</name><argument_list>(<argument><expr><name>args_raw</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>be_reentrant</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_hooks_basic</argument>)</argument_list></macro> <block>{<block_content>
	<comment type="block">/* Just verify that the record their arguments correctly. */</comment>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{
		<expr><operator>&amp;</operator><name>test_alloc_hook</name></expr>, <expr><operator>&amp;</operator><name>test_dalloc_hook</name></expr>, <expr><operator>&amp;</operator><name>test_expand_hook</name></expr>,
		<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">111</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Alloc */</comment>
	<expr_stmt><expr><call><name>reset_args</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_alloc</name><argument_list>(<argument><expr><name>hook_alloc_posix_memalign</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>, <argument><expr><literal type="number">333</literal></expr></argument>,
	    <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="string">"Passed wrong user pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_posix_memalign</name></expr></argument>, <argument><expr><name>arg_type</name></expr></argument>,
	    <argument><expr><literal type="string">"Passed wrong alloc type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong result address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><literal type="number">333</literal></expr></argument>, <argument><expr><name>arg_result_raw</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_args_raw</name><argument_list>(<argument><expr><name>args_raw</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Dalloc */</comment>
	<expr_stmt><expr><call><name>reset_args</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_dalloc</name><argument_list>(<argument><expr><name>hook_dalloc_sdallocx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_dalloc_sdallocx</name></expr></argument>, <argument><expr><name>arg_type</name></expr></argument>,
	    <argument><expr><literal type="string">"Passed wrong dalloc type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">111</literal></expr></argument>, <argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong user pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_args_raw</name><argument_list>(<argument><expr><name>args_raw</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Expand */</comment>
	<expr_stmt><expr><call><name>reset_args</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_expand</name><argument_list>(<argument><expr><name>hook_expand_xallocx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>, <argument><expr><literal type="number">333</literal></expr></argument>, <argument><expr><literal type="number">444</literal></expr></argument>, <argument><expr><literal type="number">555</literal></expr></argument>,
	    <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_expand_xallocx</name></expr></argument>, <argument><expr><name>arg_type</name></expr></argument>,
	    <argument><expr><literal type="string">"Passed wrong expand type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">111</literal></expr></argument>, <argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong user pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">222</literal></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><literal type="number">333</literal></expr></argument>, <argument><expr><name>arg_old_usize</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong old usize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><literal type="number">444</literal></expr></argument>, <argument><expr><name>arg_new_usize</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong new usize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_zu_eq</name><argument_list>(<argument><expr><literal type="number">555</literal></expr></argument>, <argument><expr><name>arg_result_raw</name></expr></argument>, <argument><expr><literal type="string">"Passed wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_args_raw</name><argument_list>(<argument><expr><name>args_raw</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_null</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Null hooks should be ignored, not crash. */</comment>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks1</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks2</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>test_alloc_hook</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks3</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>test_dalloc_hook</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks4</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>test_expand_hook</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle1</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle2</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle3</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle4</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>call_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_alloc</name><argument_list>(<argument><expr><name>hook_alloc_malloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Called wrong number of times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>call_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_dalloc</name><argument_list>(<argument><expr><name>hook_dalloc_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Called wrong number of times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>call_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_expand</name><argument_list>(<argument><expr><name>hook_expand_realloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Called wrong number of times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_remove</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>test_alloc_hook</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>call_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>hook_invoke_alloc</name><argument_list>(<argument><expr><name>hook_alloc_malloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not invoked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>call_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_alloc</name><argument_list>(<argument><expr><name>hook_alloc_malloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Hook invoked after removal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_alloc_simple</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* "Simple" in the sense that we're not in a realloc variant. */</comment>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>test_alloc_hook</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Stop malloc from being optimized away. */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* malloc */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_malloc</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* posix_memalign */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>posix_memalign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_posix_memalign</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>err</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* aligned_alloc */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>aligned_alloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_aligned_alloc</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* calloc */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_calloc</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">11</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* memalign */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_OVERRIDE_MEMALIGN</name></cpp:ifdef>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>memalign</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_memalign</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JEMALLOC_OVERRIDE_MEMALIGN */</comment>

	<comment type="block">/* valloc */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_OVERRIDE_VALLOC</name></cpp:ifdef>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>valloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_valloc</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JEMALLOC_OVERRIDE_VALLOC */</comment>

	<comment type="block">/* mallocx */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MALLOCX_LG_ALIGN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_mallocx</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>MALLOCX_LG_ALIGN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_dalloc_simple</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* "Simple" in the sense that we're not in a realloc variant. */</comment>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>test_dalloc_hook</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* free() */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_dalloc_free</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong pointer freed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* dallocx() */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_dalloc_dallocx</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong pointer freed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>MALLOCX_TCACHE_NONE</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* sdallocx() */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sdallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_dalloc_sdallocx</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong pointer freed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>MALLOCX_TCACHE_NONE</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_expand_simple</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* "Simple" in the sense that we're not in a realloc variant. */</comment>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>test_expand_hook</name></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* xallocx() */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>new_usize</name> <init>= <expr><call><name>xallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_expand_xallocx</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong pointer expanded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>arg_old_usize</name></expr></argument>, <argument><expr><call><name>nallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Wrong old usize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>arg_new_usize</name></expr></argument>, <argument><expr><call><name>sallocx</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Wrong new usize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>new_usize</name></expr></argument>, <argument><expr><name>arg_result_raw</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_realloc_as_malloc_or_free</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>test_alloc_hook</name></expr>, <expr><operator>&amp;</operator><name>test_dalloc_hook</name></expr>,
		<expr><operator>&amp;</operator><name>test_expand_hook</name></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* realloc(NULL, size) as malloc */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_realloc</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* realloc(ptr, 0) as free */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_dalloc_realloc</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong pointer freed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong raw arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* realloc(NULL, 0) as malloc(0) */</comment>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hook_alloc_realloc</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>do_realloc_test</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ralloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>expand_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dalloc_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>test_alloc_hook</name></expr>, <expr><operator>&amp;</operator><name>test_dalloc_hook</name></expr>,
		<expr><operator>&amp;</operator><name>test_expand_hook</name></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>hook_install</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Hook installation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>ptr2</name></decl>;</decl_stmt>

	<comment type="block">/* Realloc in-place, small. */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>ralloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="string">"Small realloc moved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><name>expand_type</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">130</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Realloc in-place, large.  Since we can't guarantee the large case
	 * across all platforms, we stay resilient to moving results.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ralloc</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ptr is the new address, ptr2 is the old address. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>ptr2</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><name>expand_type</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Wrong hooks called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><name>dalloc_type</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr2</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Realloc with move, small. */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>ralloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="string">"Small realloc didn't move"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><name>dalloc_type</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr2</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Realloc with move, large. */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>ralloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_ne</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="string">"Large realloc didn't move"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>call_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Hook not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>arg_extra</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Wrong extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_d_eq</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>, <argument><expr><name>dalloc_type</name></expr></argument>, <argument><expr><literal type="string">"Wrong hook type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>arg_address</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_ptr_eq</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>arg_result</name></expr></argument>, <argument><expr><literal type="string">"Wrong address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr2</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>arg_result_raw</name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong raw result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_u64_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>arg_args_raw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
	    <argument><expr><literal type="string">"Wrong argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hook_remove</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>realloc_wrapper</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>UNUSED</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_hooks_realloc</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>do_realloc_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>realloc_wrapper</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hook_expand_realloc</name></expr></argument>,
	    <argument><expr><name>hook_dalloc_realloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_hooks_rallocx</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>do_realloc_test</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rallocx</name></expr></argument>, <argument><expr><name>MALLOCX_TCACHE_NONE</name></expr></argument>, <argument><expr><name>hook_expand_rallocx</name></expr></argument>,
	    <argument><expr><name>hook_dalloc_rallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* We assert on call counts. */</comment>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_hooks_basic</name></expr></argument>,
	    <argument><expr><name>test_hooks_null</name></expr></argument>,
	    <argument><expr><name>test_hooks_remove</name></expr></argument>,
	    <argument><expr><name>test_hooks_alloc_simple</name></expr></argument>,
	    <argument><expr><name>test_hooks_dalloc_simple</name></expr></argument>,
	    <argument><expr><name>test_hooks_expand_simple</name></expr></argument>,
	    <argument><expr><name>test_hooks_realloc_as_malloc_or_free</name></expr></argument>,
	    <argument><expr><name>test_hooks_realloc</name></expr></argument>,
	    <argument><expr><name>test_hooks_rallocx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
