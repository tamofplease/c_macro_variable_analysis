<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/stress/microbench.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>time_func</name><parameter_list>(<parameter><decl><type><name>timedelta_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nwarmup</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>niter</name></decl></parameter>,
    <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nwarmup</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>niter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>
<name>compare_funcs</name><argument_list>(<argument><expr><name>uint64_t</name> <name>nwarmup</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>niter</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name_a</name></expr></argument>,
    <argument><expr><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>func_a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name_b</name></expr></argument>, <argument><expr><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>func_b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
	<decl_stmt><decl><type><name>timedelta_t</name></type> <name>timer_a</name></decl>, <decl><type ref="prev"/><name>timer_b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ratio_buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>time_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_a</name></expr></argument>, <argument><expr><name>nwarmup</name></expr></argument>, <argument><expr><name>niter</name></expr></argument>, <argument><expr><name>func_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>time_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_b</name></expr></argument>, <argument><expr><name>nwarmup</name></expr></argument>, <argument><expr><name>niter</name></expr></argument>, <argument><expr><name>func_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>timer_ratio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer_b</name></expr></argument>, <argument><expr><name>ratio_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ratio_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>FMTu64</name><literal type="string">" iterations, %s=%"</literal><name>FMTu64</name><literal type="string">"us, "</literal>
	    <literal type="string">"%s=%"</literal><name>FMTu64</name><literal type="string">"us, ratio=1:%s\n"</literal></expr></argument>,
	    <argument><expr><name>niter</name></expr></argument>, <argument><expr><name>name_a</name></expr></argument>, <argument><expr><call><name>timer_usec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name_b</name></expr></argument>, <argument><expr><call><name>timer_usec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_b</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name>ratio_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>malloc_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* The compiler can optimize away free(malloc(1))! */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mallocx_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected mallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_malloc_vs_mallocx</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>compare_funcs</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>,
	    <argument><expr><name>malloc_free</name></expr></argument>, <argument><expr><literal type="string">"mallocx"</literal></expr></argument>, <argument><expr><name>mallocx_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>malloc_dallocx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>malloc_sdallocx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>sdallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_free_vs_dallocx</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>compare_funcs</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>, <argument><expr><name>malloc_free</name></expr></argument>,
	    <argument><expr><literal type="string">"dallocx"</literal></expr></argument>, <argument><expr><name>malloc_dallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name></type>

<name>TEST_BEGIN</name><parameter_list>(<parameter><decl><type><name>test_dallocx_vs_sdallocx</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>compare_funcs</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"dallocx"</literal></expr></argument>, <argument><expr><name>malloc_dallocx</name></expr></argument>,
	    <argument><expr><literal type="string">"sdallocx"</literal></expr></argument>, <argument><expr><name>malloc_sdallocx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>malloc_mus_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>malloc_usable_size</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>malloc_sallocx_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>sallocx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected sallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_mus_vs_sallocx</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>compare_funcs</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"malloc_usable_size"</literal></expr></argument>,
	    <argument><expr><name>malloc_mus_free</name></expr></argument>, <argument><expr><literal type="string">"sallocx"</literal></expr></argument>, <argument><expr><name>malloc_sallocx_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<specifier>static</specifier> <name>void</name></type>
<name>malloc_nallocx_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected malloc() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>nallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected nallocx() failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>TEST_BEGIN</name><argument_list>(<argument>test_sallocx_vs_nallocx</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>compare_funcs</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"sallocx"</literal></expr></argument>,
	    <argument><expr><name>malloc_sallocx_free</name></expr></argument>, <argument><expr><literal type="string">"nallocx"</literal></expr></argument>, <argument><expr><name>malloc_nallocx_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<function><type><name>TEST_END</name>

<name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>test_no_reentrancy</name><argument_list>(
	    <argument><expr><name>test_malloc_vs_mallocx</name></expr></argument>,
	    <argument><expr><name>test_free_vs_dallocx</name></expr></argument>,
	    <argument><expr><name>test_dallocx_vs_sdallocx</name></expr></argument>,
	    <argument><expr><name>test_mus_vs_sallocx</name></expr></argument>,
	    <argument><expr><name>test_sallocx_vs_nallocx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
