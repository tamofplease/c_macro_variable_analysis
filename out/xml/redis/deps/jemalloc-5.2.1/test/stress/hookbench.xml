<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/test/stress/hookbench.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test/jemalloc_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>noop_alloc_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>hook_alloc_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name>result_raw</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>noop_dalloc_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>hook_dalloc_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>noop_expand_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>hook_expand_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>old_usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_usize</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>result_raw</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>malloc_free_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iters</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_hooked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iters</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>noop_alloc_hook</name></expr>, <expr><operator>&amp;</operator><name>noop_dalloc_hook</name></expr>, <expr><operator>&amp;</operator><name>noop_expand_hook</name></expr>,
		<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>handles</name><index>[<expr><name>HOOK_MAX</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HOOK_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"experimental.hooks.install"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hooks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>timedelta_t</name></type> <name>timer</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>malloc_free_loop</name><argument_list>(<argument><expr><name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"With %d hook%s: %"</literal><name>FMTu64</name><literal type="string">"us\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
		    <argument><expr><ternary><condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>timer_usec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HOOK_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mallctl</name><argument_list>(<argument><expr><literal type="string">"experimental.hooks.remove"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_unhooked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iters</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>timedelta_t</name></type> <name>timer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_free_loop</name><argument_list>(<argument><expr><name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>timer_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"Without hooks: %"</literal><name>FMTu64</name><literal type="string">"us\n"</literal></expr></argument>, <argument><expr><call><name>timer_usec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Initialize */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>mallocx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iters</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"Benchmarking hooks with %d iterations:\n"</literal></expr></argument>, <argument><expr><name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_hooked</name><argument_list>(<argument><expr><name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_unhooked</name><argument_list>(<argument><expr><name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
