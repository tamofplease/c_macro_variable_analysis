<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/bitmap.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_BITMAP_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BITMAP_USE_TREE</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>bitmap_info_init</name><parameter_list>(<parameter><decl><type><name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>group_count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nbits</name> <operator>&lt;=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>LG_BITMAP_MAXBITS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute the number of groups necessary to store nbits bits, and
	 * progressively work upward through the levels until reaching a level
	 * that requires only one group.
	 */</comment>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>group_count</name> <operator>=</operator> <call><name>BITMAP_BITS2GROUPS</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>group_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>BITMAP_MAX_LEVELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>group_offset</name>
		    <operator>+</operator> <name>group_count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>group_count</name> <operator>=</operator> <call><name>BITMAP_BITS2GROUPS</name><argument_list>(<argument><expr><name>group_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>group_offset</name>
	    <operator>+</operator> <name>group_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>&lt;=</operator> <name>BITMAP_GROUPS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>bitmap_info_ngroups</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>]</index></name><operator>.</operator><name>group_offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bitmap_init</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fill</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>extra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Bits are actually inverted with regard to the external bitmap
	 * interface.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* The "filled" bitmap starts out with all 0 bits. */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The "empty" bitmap starts out with all 1 bits, except for trailing
	 * unused bits (if any).  Note that each group uses bit 0 to correspond
	 * to the first logical bit in the group, so extra bits are the most
	 * significant bits of the last group.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0xffU</literal></expr></argument>, <argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name>BITMAP_GROUP_NBITS</name> <operator>-</operator> <operator>(</operator><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator>
	    <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>extra</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>binfo</name><operator>-&gt;</operator><name>nlevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>group_count</name> <init>= <expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>-</operator>
		    <name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>group_offset</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name>BITMAP_GROUP_NBITS</name> <operator>-</operator> <operator>(</operator><name>group_count</name> <operator>&amp;</operator>
		    <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>group_offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>extra</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* BITMAP_USE_TREE */</comment>

<function><type><name>void</name></type>
<name>bitmap_info_init</name><parameter_list>(<parameter><decl><type><name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nbits</name> <operator>&lt;=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>LG_BITMAP_MAXBITS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name> <operator>=</operator> <call><name>BITMAP_BITS2GROUPS</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>bitmap_info_ngroups</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bitmap_init</name><parameter_list>(<parameter><decl><type><name>bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fill</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>extra</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0xffU</literal></expr></argument>, <argument><expr><call><name>bitmap_size</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name>BITMAP_GROUP_NBITS</name> <operator>-</operator> <operator>(</operator><name><name>binfo</name><operator>-&gt;</operator><name>nbits</name></name> <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name><operator>)</operator><operator>)</operator>
	    <operator>&amp;</operator> <name>BITMAP_GROUP_NBITS_MASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name><name>binfo</name><operator>-&gt;</operator><name>ngroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>extra</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BITMAP_USE_TREE */</comment>

<function><type><name>size_t</name></type>
<name>bitmap_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bitmap_info_t</name> <modifier>*</modifier></type><name>binfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>bitmap_info_ngroups</name><argument_list>(<argument><expr><name>binfo</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>LG_SIZEOF_BITMAP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
