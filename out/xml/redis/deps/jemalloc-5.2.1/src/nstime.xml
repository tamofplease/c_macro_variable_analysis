<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/nstime.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/nstime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BILLION</name></cpp:macro>	<cpp:value>UINT64_C(1000000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MILLION</name></cpp:macro>	<cpp:value>UINT64_C(1000000)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>nstime_init</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_init2</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nsec</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>sec</name> <operator>*</operator> <name>BILLION</name> <operator>+</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>nstime_ns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>nstime_msec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>/</operator> <name>MILLION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>nstime_sec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>/</operator> <name>BILLION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>nstime_nsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>%</operator> <name>BILLION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_copy</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <operator>*</operator><name>source</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>nstime_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>ns</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ns</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>ns</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ns</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_add</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>addend</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>UINT64_MAX</name> <operator>-</operator> <name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>&gt;=</operator> <name><name>addend</name><operator>-&gt;</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>+=</operator> <name><name>addend</name><operator>-&gt;</operator><name>ns</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_iadd</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>addend</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>UINT64_MAX</name> <operator>-</operator> <name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>&gt;=</operator> <name>addend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>+=</operator> <name>addend</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_subtract</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>subtrahend</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>subtrahend</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>-=</operator> <name><name>subtrahend</name><operator>-&gt;</operator><name>ns</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_isubtract</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>subtrahend</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>&gt;=</operator> <name>subtrahend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>-=</operator> <name>subtrahend</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_imultiply</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>multiplier</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>|</operator> <name>multiplier</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>UINT64_MAX</name> <operator>&lt;&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator>
	    <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>*</operator> <name>multiplier</name><operator>)</operator> <operator>/</operator> <name>multiplier</name> <operator>==</operator> <name><name>time</name><operator>-&gt;</operator><name>ns</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>*=</operator> <name>multiplier</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nstime_idivide</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>divisor</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>divisor</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>/=</operator> <name>divisor</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>nstime_divide</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nstime_t</name> <modifier>*</modifier></type><name>divisor</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>divisor</name><operator>-&gt;</operator><name>ns</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>time</name><operator>-&gt;</operator><name>ns</name></name> <operator>/</operator> <name><name>divisor</name><operator>-&gt;</operator><name>ns</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_MONOTONIC</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>nstime_get</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>ticks_100ns</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ticks_100ns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>ticks_100ns</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_CLOCK_MONOTONIC_COARSE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_MONOTONIC</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>nstime_get</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_MONOTONIC</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>nstime_get</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_HAVE_MACH_ABSOLUTE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_MONOTONIC</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>nstime_get</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><call><name>mach_absolute_time</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>NSTIME_MONOTONIC</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>nstime_get</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init2</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nstime_monotonic_impl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>NSTIME_MONOTONIC</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSTIME_MONOTONIC</name></cpp:undef>
</block_content>}</block></function>
<decl_stmt><decl><type><name>nstime_monotonic_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>nstime_monotonic</name> <init>= <expr><name>nstime_monotonic_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>nstime_update_impl</name><parameter_list>(<parameter><decl><type><name>nstime_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>old_time</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_time</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_get</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Handle non-monotonic clocks. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_time</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>nstime_update_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>nstime_update</name> <init>= <expr><name>nstime_update_impl</name></expr></init></decl>;</decl_stmt>
</unit>
