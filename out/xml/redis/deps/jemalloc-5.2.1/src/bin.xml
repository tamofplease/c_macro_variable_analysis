<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/bin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/witness.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bin_info_t</name></type> <name><name>bin_infos</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bin_infos_init</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name><name>bin_shard_sizes</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><name>bin_info_t</name></type> <name><name>bin_infos</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bin_info_t</name> <modifier>*</modifier></type><name>bin_info</name> <init>= <expr><operator>&amp;</operator><name><name>bin_infos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>bin_info</name><operator>-&gt;</operator><name>reg_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name><operator>)</operator>
		    <operator>+</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bin_info</name><operator>-&gt;</operator><name>slab_size</name></name> <operator>=</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name> <operator>&lt;&lt;</operator> <name>LG_PAGE</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bin_info</name><operator>-&gt;</operator><name>nregs</name></name> <operator>=</operator>
		    <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>bin_info</name><operator>-&gt;</operator><name>slab_size</name></name> <operator>/</operator> <name><name>bin_info</name><operator>-&gt;</operator><name>reg_size</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bin_info</name><operator>-&gt;</operator><name>n_shards</name></name> <operator>=</operator> <name><name>bin_shard_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>bitmap_info_t</name></type> <name>bitmap_info</name> <init>= <expr><call><name>BITMAP_INFO_INITIALIZER</name><argument_list>(
		    <argument><expr><name><name>bin_info</name><operator>-&gt;</operator><name>nregs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>bin_info</name><operator>-&gt;</operator><name>bitmap_info</name></name> <operator>=</operator> <name>bitmap_info</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>bin_update_shard_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name><name>bin_shard_sizes</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start_size</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>end_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nshards</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>nshards</name> <operator>&gt;</operator> <name>BIN_SHARDS_MAX</name> <operator>||</operator> <name>nshards</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>start_size</name> <operator>&gt;</operator> <name>SC_SMALL_MAXCLASS</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>end_size</name> <operator>&gt;</operator> <name>SC_SMALL_MAXCLASS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>end_size</name> <operator>=</operator> <name>SC_SMALL_MAXCLASS</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Compute the index since this may happen before sz init. */</comment>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>ind1</name> <init>= <expr><call><name>sz_size2index_compute</name><argument_list>(<argument><expr><name>start_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>ind2</name> <init>= <expr><call><name>sz_size2index_compute</name><argument_list>(<argument><expr><name>end_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>ind1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ind2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>bin_shard_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>nshards</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bin_shard_sizes_boot</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name><name>bin_shard_sizes</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Load the default number of shards. */</comment>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>bin_shard_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>N_BIN_SHARDS_DEFAULT</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bin_boot</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name><name>bin_shard_sizes</name><index>[<expr><name>SC_NBINS</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bin_infos_init</name><argument_list>(<argument><expr><name>sc_data</name></expr></argument>, <argument><expr><name>bin_shard_sizes</name></expr></argument>, <argument><expr><name>bin_infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>bin_init</name><parameter_list>(<parameter><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>, <argument><expr><name>WITNESS_RANK_BIN</name></expr></argument>,
	    <argument><expr><name>malloc_mutex_rank_exclusive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>slabcur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>extent_heap_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>slabs_nonfull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>extent_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>slabs_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin_stats_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bin_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_prefork</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bin_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_postfork_parent</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bin_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_postfork_child</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
