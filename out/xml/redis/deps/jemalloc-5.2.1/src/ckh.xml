<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/ckh.c"><comment type="block">/*
 *******************************************************************************
 * Implementation of (2^1+,2) cuckoo hashing, where 2^1+ indicates that each
 * hash bucket contains 2^n cells, for n &gt;= 1, and 2 indicates that two hash
 * functions are employed.  The original cuckoo hashing algorithm was described
 * in:
 *
 *   Pagh, R., F.F. Rodler (2004) Cuckoo Hashing.  Journal of Algorithms
 *     51(2):122-144.
 *
 * Generalization of cuckoo hashing was discussed in:
 *
 *   Erlingsson, U., M. Manasse, F. McSherry (2006) A cool and practical
 *     alternative to traditional hash tables.  In Proceedings of the 7th
 *     Workshop on Distributed Data and Structures (WDAS'06), Santa Clara, CA,
 *     January 2006.
 *
 * This implementation uses precisely two hash functions because that is the
 * fewest that can work, and supporting multiple hashes is an implementation
 * burden.  Here is a reproduction of Figure 1 from Erlingsson et al. (2006)
 * that shows approximate expected maximum load factors for various
 * configurations:
 *
 *           |         #cells/bucket         |
 *   #hashes |   1   |   2   |   4   |   8   |
 *   --------+-------+-------+-------+-------+
 *         1 | 0.006 | 0.006 | 0.03  | 0.12  |
 *         2 | 0.49  | 0.86  |&gt;0.93&lt; |&gt;0.96&lt; |
 *         3 | 0.91  | 0.97  | 0.98  | 0.999 |
 *         4 | 0.97  | 0.99  | 0.999 |       |
 *
 * The number of cells per bucket is chosen such that a bucket fits in one cache
 * line.  So, on 32- and 64-bit systems, we use (8,2) and (4,2) cuckoo hashing,
 * respectively.
 *
 ******************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_CKH_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/ckh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/malloc_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/prng.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
<comment type="block">/* Function prototypes for non-inline static functions. */</comment>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>	<name>ckh_grow</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>	<name>ckh_shrink</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<comment type="block">/*
 * Search bucket for key and return the cell number if found; SIZE_T_MAX
 * otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>ckh_bucket_search</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bucket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ckhc_t</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>cell</name> <operator>=</operator> <operator>&amp;</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><operator>(</operator><name>bucket</name> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name><name>ckh</name><operator>-&gt;</operator><name>keycomp</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>cell</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>bucket</name> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>SIZE_T_MAX</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Search table for key and return cell number if found; SIZE_T_MAX otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>ckh_isearch</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>hashes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>bucket</name></decl>, <decl><type ref="prev"/><name>cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ckh</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>ckh</name><operator>-&gt;</operator><name>hash</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Search primary bucket. */</comment>
	<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>ckh_bucket_search</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cell</name> <operator>!=</operator> <name>SIZE_T_MAX</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>cell</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Search secondary bucket. */</comment>
	<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>ckh_bucket_search</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>cell</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ckh_try_bucket_insert</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bucket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ckhc_t</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Cycle through the cells in the bucket, starting at a random position.
	 * The randomness avoids worst-case search overhead as buckets fill up.
	 */</comment>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ckh</name><operator>-&gt;</operator><name>prng_state</name></name></expr></argument>,
	    <argument><expr><name>LG_CKH_BUCKET_CELLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>cell</name> <operator>=</operator> <operator>&amp;</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><operator>(</operator><name>bucket</name> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator> <operator>+</operator>
		    <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * No space is available in bucket.  Randomly evict an item, then try to find an
 * alternate location for that item.  Iteratively repeat this
 * eviction/relocation procedure until either success or detection of an
 * eviction/relocation bucket cycle.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ckh_evict_reloc_insert</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>argbucket</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>argkey</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>argdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tkey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ckhc_t</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>hashes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>bucket</name></decl>, <decl><type ref="prev"/><name>tbucket</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name>argbucket</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>*</operator><name>argkey</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><name>argdata</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Choose a random item within the bucket to evict.  This is
		 * critical to correct function, because without (eventually)
		 * evicting all items within a bucket during iteration, it
		 * would be possible to get stuck in an infinite loop if there
		 * were an item for which both hashes indicated the same
		 * bucket.
		 */</comment>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>prng_lg_range_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ckh</name><operator>-&gt;</operator><name>prng_state</name></name></expr></argument>,
		    <argument><expr><name>LG_CKH_BUCKET_CELLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cell</name> <operator>=</operator> <operator>&amp;</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><operator>(</operator><name>bucket</name> <operator>&lt;&lt;</operator> <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cell</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Swap cell-&gt;{key,data} and {key,data} (evict). */</comment>
		<expr_stmt><expr><name>tkey</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>tdata</name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>tkey</name></expr>;</expr_stmt> <expr_stmt><expr><name>data</name> <operator>=</operator> <name>tdata</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_COUNT</name></cpp:ifdef>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>nrelocs</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* Find the alternate bucket for the evicted item. */</comment>
		<expr_stmt><expr><call><name><name>ckh</name><operator>-&gt;</operator><name>hash</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tbucket</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tbucket</name> <operator>==</operator> <name>bucket</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tbucket</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name><operator>)</operator>
			    <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<comment type="block">/*
			 * It may be that (tbucket == bucket) still, if the
			 * item's hashes both indicate this bucket.  However,
			 * we are guaranteed to eventually escape this bucket
			 * during iteration, assuming pseudo-random item
			 * selection (true randomness would make infinite
			 * looping a remote possibility).  The reason we can
			 * never get trapped forever is that there are two
			 * cases:
			 *
			 * 1) This bucket == argbucket, so we will quickly
			 *    detect an eviction cycle and terminate.
			 * 2) An item was evicted to this bucket from another,
			 *    which means that at least one item in this bucket
			 *    has hashes that indicate distinct buckets.
			 */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Check for a cycle. */</comment>
		<if_stmt><if>if <condition>(<expr><name>tbucket</name> <operator>==</operator> <name>argbucket</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>argkey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>argdata</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name>tbucket</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ckh_try_bucket_insert</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ckh_try_insert</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type><name>argkey</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type><name>argdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>hashes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>bucket</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>*</operator><name>argkey</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>*</operator><name>argdata</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>ckh</name><operator>-&gt;</operator><name>hash</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>hashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Try to insert in primary bucket. */</comment>
	<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ckh_try_bucket_insert</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Try to insert in secondary bucket. */</comment>
	<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ckh_try_bucket_insert</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Try to find a place for this item via iterative eviction/relocation.
	 */</comment>
	<return>return <expr><call><name>ckh_evict_reloc_insert</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>argkey</name></expr></argument>, <argument><expr><name>argdata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Try to rebuild the hash table from scratch by inserting all items from the
 * old table into the new.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ckh_rebuild</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>ckhc_t</name> <modifier>*</modifier></type><name>aTab</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nins</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nins</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nins</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>aTab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>aTab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>aTab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ckh_try_insert</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nins</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ckh_grow</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ckhc_t</name> <modifier>*</modifier></type><name>tab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ttab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_prevbuckets</name></decl>, <decl><type ref="prev"/><name>lg_curcells</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_COUNT</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>ngrows</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * It is possible (though unlikely, given well behaved hashes) that the
	 * table will have to be doubled more than once in order to create a
	 * usable table.
	 */</comment>
	<expr_stmt><expr><name>lg_prevbuckets</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lg_curcells</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>+</operator> <name>LG_CKH_BUCKET_CELLS</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>lg_curcells</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>sz_sa2u</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ckhc_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <name>lg_curcells</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <literal type="number">0</literal>
		    <operator>||</operator> <name>usize</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<goto>goto <name>label_return</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>tab</name> <operator>=</operator> <operator>(</operator><name>ckhc_t</name> <operator>*</operator><operator>)</operator><call><name>ipallocztm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>,
		    <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>arena_ichoose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<goto>goto <name>label_return</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Swap in new table. */</comment>
		<expr_stmt><expr><name>ttab</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>ttab</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>=</operator> <name>lg_curcells</name> <operator>-</operator> <name>LG_CKH_BUCKET_CELLS</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ckh_rebuild</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Rebuilding failed, so back out partially rebuilt table. */</comment>
		<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>=</operator> <name>lg_prevbuckets</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<label><name>label_return</name>:</label>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ckh_shrink</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ckhc_t</name> <modifier>*</modifier></type><name>tab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ttab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_prevbuckets</name></decl>, <decl><type ref="prev"/><name>lg_curcells</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * It is possible (though unlikely, given well behaved hashes) that the
	 * table rebuild will fail.
	 */</comment>
	<expr_stmt><expr><name>lg_prevbuckets</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lg_curcells</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>+</operator> <name>LG_CKH_BUCKET_CELLS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>sz_sa2u</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ckhc_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <name>lg_curcells</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>usize</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tab</name> <operator>=</operator> <operator>(</operator><name>ckhc_t</name> <operator>*</operator><operator>)</operator><call><name>ipallocztm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
	    <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>arena_ichoose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * An OOM error isn't worth propagating, since it doesn't
		 * prevent this or future operations from proceeding.
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Swap in new table. */</comment>
	<expr_stmt><expr><name>ttab</name> <operator>=</operator> <name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>ttab</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>=</operator> <name>lg_curcells</name> <operator>-</operator> <name>LG_CKH_BUCKET_CELLS</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ckh_rebuild</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_COUNT</name></cpp:ifdef>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>nshrinks</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Rebuilding failed, so back out partially rebuilt table. */</comment>
	<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>=</operator> <name>lg_prevbuckets</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_COUNT</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>nshrinkfails</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_new</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>minitems</name></decl></parameter>, <parameter><decl><type><name>ckh_hash_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,
    <parameter><decl><type><name>ckh_keycomp_t</name> <modifier>*</modifier></type><name>keycomp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>mincells</name></decl>, <decl><type ref="prev"/><name>usize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_mincells</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>minitems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>keycomp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_COUNT</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>ngrows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>nshrinks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>nshrinkfails</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>ninserts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>nrelocs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>prng_state</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt> <comment type="block">/* Value doesn't really matter. */</comment>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Find the minimum power of 2 that is large enough to fit minitems
	 * entries.  We are using (2+,2) cuckoo hashing, which has an expected
	 * maximum load factor of at least ~0.86, so 0.75 is a conservative load
	 * factor that will typically allow mincells items to fit without ever
	 * growing the table.
	 */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>LG_CKH_BUCKET_CELLS</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mincells</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>minitems</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>minitems</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>lg_mincells</name> <operator>=</operator> <name>LG_CKH_BUCKET_CELLS</name></expr>;</init>
	    <condition><expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_mincells</name><operator>)</operator> <operator>&lt;</operator> <name>mincells</name></expr>;</condition>
	    <incr><expr><name>lg_mincells</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* Do nothing. */</comment>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>lg_minbuckets</name></name> <operator>=</operator> <name>lg_mincells</name> <operator>-</operator> <name>LG_CKH_BUCKET_CELLS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>=</operator> <name>lg_mincells</name> <operator>-</operator> <name>LG_CKH_BUCKET_CELLS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>keycomp</name></name> <operator>=</operator> <name>keycomp</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>usize</name> <operator>=</operator> <call><name>sz_sa2u</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ckhc_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <name>lg_mincells</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>usize</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <operator>(</operator><name>ckhc_t</name> <operator>*</operator><operator>)</operator><call><name>ipallocztm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
	    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>arena_ichoose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<label><name>label_return</name>:</label>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ckh_delete</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ckh</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_VERBOSE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(
	    <argument><expr><literal type="string">"%s(%p): ngrows: %"</literal><name>FMTu64</name><literal type="string">", nshrinks: %"</literal><name>FMTu64</name><literal type="string">","</literal>
	    <literal type="string">" nshrinkfails: %"</literal><name>FMTu64</name><literal type="string">", ninserts: %"</literal><name>FMTu64</name><literal type="string">","</literal>
	    <literal type="string">" nrelocs: %"</literal><name>FMTu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ckh</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>ngrows</name></name></expr></argument>,
	    <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>nshrinks</name></name></expr></argument>,
	    <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>nshrinkfails</name></name></expr></argument>,
	    <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>ninserts</name></name></expr></argument>,
	    <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>nrelocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>JEMALLOC_FREE_JUNK</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ckh_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>ckh_count</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ckh</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_iter</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>tabind</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ncells</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>tabind</name></expr><operator>,</operator> <expr><name>ncells</name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name> <operator>+</operator>
	    <name>LG_CKH_BUCKET_CELLS</name><operator>)</operator><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncells</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>tabind</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_insert</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ckh</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ckh_search</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CKH_COUNT</name></cpp:ifdef>
	<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>ninserts</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<while>while <condition>(<expr><call><name>ckh_try_insert</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ckh_grow</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>ckh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<goto>goto <name>label_return</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<label><name>label_return</name>:</label>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_remove</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>searchkey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ckh</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>ckh_isearch</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>searchkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cell</name> <operator>!=</operator> <name>SIZE_T_MAX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>cell</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>cell</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>cell</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>cell</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* Not necessary. */</comment>

		<expr_stmt><expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
		<comment type="block">/* Try to halve the table if it is less than 1/4 full. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ckh</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name>
		    <operator>+</operator> <name>LG_CKH_BUCKET_CELLS</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_curbuckets</name></name>
		    <operator>&gt;</operator> <name><name>ckh</name><operator>-&gt;</operator><name>lg_minbuckets</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Ignore error due to OOM. */</comment>
			<expr_stmt><expr><call><name>ckh_shrink</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>ckh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_search</name><parameter_list>(<parameter><decl><type><name>ckh_t</name> <modifier>*</modifier></type><name>ckh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>searchkey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ckh</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>ckh_isearch</name><argument_list>(<argument><expr><name>ckh</name></expr></argument>, <argument><expr><name>searchkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cell</name> <operator>!=</operator> <name>SIZE_T_MAX</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>cell</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ckh</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>cell</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ckh_string_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name><name>r_hash</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x94122f33U</literal></expr></argument>, <argument><expr><name>r_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_string_keycomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>k1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>k2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ckh_pointer_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name><name>r_hash</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<union>union <block>{
		<decl_stmt><decl><type><specifier>const</specifier> <name>void</name>	<modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name></decl>;</decl_stmt>
	}</block> <decl><name>u</name></decl>;</union>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>u</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>u</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0xd983396eU</literal></expr></argument>, <argument><expr><name>r_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ckh_pointer_keycomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>k1</name> <operator>==</operator> <name>k2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
