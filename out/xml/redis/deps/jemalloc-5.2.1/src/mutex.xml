<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/mutex.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_MUTEX_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/malloc_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/spin.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_CRT_SPINCOUNT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SPINCOUNT</name></cpp:macro> <cpp:value>4000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
<comment type="block">/* Data. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_LAZY_LOCK</name></cpp:ifdef>
<decl_stmt><decl><type><name>bool</name></type> <name>isthreaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_MUTEX_INIT_CB</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>		<name>postpone_init</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>malloc_mutex_t</name>	<modifier>*</modifier></type><name>postponed_mutexes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
<comment type="block">/*
 * We intercept pthread_create() calls in order to toggle isthreaded if the
 * process goes multi-threaded.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_LAZY_LOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>JEMALLOC_EXPORT</name> <name>int</name></type>
<name>pthread_create</name><parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier><name>__restrict</name></type> <name>thread</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier><name>__restrict</name></type> <name>attr</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><name>__restrict</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>pthread_create_wrapper</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>start_routine</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_MUTEX_INIT_CB</name></cpp:ifdef>
<function_decl><type><name>JEMALLOC_EXPORT</name> <name>int</name></type>	<name>_pthread_mutex_init_calloc_cb</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,
    <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<name>calloc_cb</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>malloc_mutex_lock_slow</name><parameter_list>(<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>prof_data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>before</name> <init>= <expr><name>NSTIME_ZERO_INITIALIZER</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ncpus</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>label_spin_done</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_cnt</name> <init>= <expr><name>MALLOC_MUTEX_MAX_SPIN</name></expr></init></decl>;</decl_stmt>
	<do>do <block>{<block_content>
		<expr_stmt><expr><call><name>spin_cpu_spinwait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>locked</name></name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>malloc_mutex_trylock_final</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_spin_acquired</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>cnt</name><operator>++</operator> <operator>&lt;</operator> <name>max_cnt</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Only spin is useful when stats is off. */</comment>
		<expr_stmt><expr><call><name>malloc_mutex_lock_final</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
<label><name>label_spin_done</name>:</label>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Copy before to after to avoid clock skews. */</comment>
	<decl_stmt><decl><type><name>nstime_t</name></type> <name>after</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>after</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_thds</name> <init>= <expr><call><name>atomic_fetch_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
	    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* One last try as above two calls may take quite some cycles. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>malloc_mutex_trylock_final</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>atomic_fetch_sub_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_spin_acquired</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* True slow path. */</comment>
	<expr_stmt><expr><call><name>malloc_mutex_lock_final</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Update more slow-path only counters. */</comment>
	<expr_stmt><expr><call><name>atomic_fetch_sub_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>n_waiting_thds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>nstime_t</name></type> <name>delta</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_subtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>n_wait_times</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tot_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>nstime_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>nstime_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>n_thds</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>max_n_thds</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>max_n_thds</name></name> <operator>=</operator> <name>n_thds</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mutex_prof_data_init</name><parameter_list>(<parameter><decl><type><name>mutex_prof_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mutex_prof_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>max_wait_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nstime_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tot_wait_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>prev_owner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>malloc_mutex_prof_data_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mutex_prof_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>prof_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mutex_addr_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mutex1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mutex2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mutex1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mutex2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name>mu1int</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mutex1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name>mu2int</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mutex2</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>mu1int</name> <operator>&lt;</operator> <name>mu2int</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mu1int</name> <operator>==</operator> <name>mu2int</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>malloc_mutex_init</name><parameter_list>(<parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
    <parameter><decl><type><name>witness_rank_t</name></type> <name>rank</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_lock_order_t</name></type> <name>lock_order</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>mutex_prof_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>prof_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&gt;=</operator> <literal type="number">0x0600</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>InitializeSRWLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitializeCriticalSectionAndSpinCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
	    <argument><expr><name>_CRT_SPINCOUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_OS_UNFAIR_LOCK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
       <expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>OS_UNFAIR_LOCK_INIT</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>JEMALLOC_MUTEX_INIT_CB</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name>postpone_init</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>postponed_next</name></name> <operator>=</operator> <name>postponed_mutexes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>postponed_mutexes</name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>_pthread_mutex_init_calloc_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
		    <argument><expr><name>bootstrap_calloc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>MALLOC_MUTEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>lock_order</name></name> <operator>=</operator> <name>lock_order</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>lock_order</name> <operator>==</operator> <name>malloc_mutex_address_ordered</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rank</name></expr></argument>,
			    <argument><expr><name>mutex_addr_comp</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>witness_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>witness</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rank</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>malloc_mutex_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>malloc_mutex_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>malloc_mutex_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>malloc_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_MUTEX_INIT_CB</name></cpp:ifdef>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>witness</name><operator>.</operator><name>name</name></name></expr></argument>,
	    <argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>witness</name><operator>.</operator><name>rank</name></name></expr></argument>, <argument><expr><name><name>mutex</name><operator>-&gt;</operator><name>lock_order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: Error re-initializing mutex in "</literal>
		    <literal type="string">"child\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>opt_abort</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>malloc_mutex_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_MUTEX_INIT_CB</name></cpp:ifdef>
	<expr_stmt><expr><name>postpone_init</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>postponed_mutexes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>_pthread_mutex_init_calloc_cb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>postponed_mutexes</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
		    <argument><expr><name>bootstrap_calloc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>postponed_mutexes</name> <operator>=</operator> <name><name>postponed_mutexes</name><operator>-&gt;</operator><name>postponed_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
