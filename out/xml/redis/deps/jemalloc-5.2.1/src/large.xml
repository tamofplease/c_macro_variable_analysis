<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/large.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_LARGE_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/extent_mmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/rtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>large_malloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>==</operator> <call><name>sz_s2u</name><argument_list>(<argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>large_palloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>large_palloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ausize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_zeroed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UNUSED</name> <name>bool</name> <name>idump</name></type> <name>JEMALLOC_CC_SILENCE_INIT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>arena</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ausize</name> <operator>=</operator> <call><name>sz_sa2u</name><argument_list>(<argument><expr><name>usize</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ausize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ausize</name> <operator>&gt;</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * Copy zero into is_zeroed and pass the copy when allocating the
	 * extent, so that it is possible to make correct junk/zero fill
	 * decisions below, even if is_zeroed ends up true when zero is false.
	 */</comment>
	<expr_stmt><expr><name>is_zeroed</name> <operator>=</operator> <name>zero</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>arena_choose_maybe_huge</name><argument_list>(<argument><expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>arena</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>extent</name> <operator>=</operator> <call><name>arena_extent_alloc_large</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
	    <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_zeroed</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* See comments in arena_bin_slabs_full_insert(). */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>arena_is_auto</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Insert extent into large. */</comment>
		<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>extent_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large</name></name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <call><name>arena_prof_accum</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>prof_idump</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>zero</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>is_zeroed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_alloc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JEMALLOC_ALLOC_JUNK</name></expr></argument>,
		    <argument><expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>arena_decay_tick</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>large_dalloc_junk_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>JEMALLOC_FREE_JUNK</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>large_dalloc_junk_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>large_dalloc_junk</name> <init>= <expr><name>large_dalloc_junk_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>large_dalloc_maybe_junk_impl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>config_fill</name> <operator>&amp;&amp;</operator> <name>have_dss</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_free</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Only bother junk filling if the extent isn't about to be
		 * unmapped.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>opt_retain</name> <operator>||</operator> <operator>(</operator><name>have_dss</name> <operator>&amp;&amp;</operator> <call><name>extent_in_dss</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>large_dalloc_junk</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>large_dalloc_maybe_junk_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>large_dalloc_maybe_junk</name> <init>=
    <expr><name>large_dalloc_maybe_junk_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>large_ralloc_no_move_shrink</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>oldusize</name> <init>= <expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name> <init>= <expr><call><name>extent_hooks_get</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>diff</name> <init>= <expr><call><name>extent_size_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>usize</name> <operator>+</operator> <name>sz_large_pad</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oldusize</name> <operator>&gt;</operator> <name>usize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>split</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Split excess pages. */</comment>
	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>trail</name> <init>= <expr><call><name>extent_split_wrapper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>usize</name> <operator>+</operator> <name>sz_large_pad</name></expr></argument>,
		    <argument><expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>trail</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_free</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>large_dalloc_maybe_junk</name><argument_list>(<argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><call><name>extent_size_get</name><argument_list>(<argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>arena_extents_dirty_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>arena_extent_ralloc_large_shrink</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>oldusize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>large_ralloc_no_move_expand</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>oldusize</name> <init>= <expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name> <init>= <expr><call><name>extent_hooks_get</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>trailsize</name> <init>= <expr><name>usize</name> <operator>-</operator> <name>oldusize</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>merge</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * Copy zero into is_zeroed_trail and pass the copy when allocating the
	 * extent, so that it is possible to make correct junk/zero fill
	 * decisions below, even if is_zeroed_trail ends up true when zero is
	 * false.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_zeroed_trail</name> <init>= <expr><name>zero</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>commit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>trail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>new_mapping</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trail</name> <operator>=</operator> <call><name>extents_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>extents_dirty</name></name></expr></argument>, <argument><expr><call><name>extent_past_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trailsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_zeroed_trail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commit</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>
	    <operator>||</operator> <operator>(</operator><name>trail</name> <operator>=</operator> <call><name>extents_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>extents_muzzy</name></name></expr></argument>, <argument><expr><call><name>extent_past_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trailsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
	    <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_zeroed_trail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commit</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_mapping</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trail</name> <operator>=</operator> <call><name>extent_alloc_wrapper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>,
		    <argument><expr><call><name>extent_past_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trailsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
		    <argument><expr><name>SC_NSIZES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_zeroed_trail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commit</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_mapping</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>extent_merge_wrapper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>extent_dalloc_wrapper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name> <init>= <expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>usize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>extent_szind_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>szind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rtree_szind_slab_update</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>, <argument><expr><name>rtree_ctx</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>szind</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name> <operator>&amp;&amp;</operator> <name>new_mapping</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>arena_stats_mapped_add</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>trailsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>zero</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>config_cache_oblivious</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * Zero the trailing bytes of the original allocation's
			 * last page, since they are in an indeterminate state.
			 * There will always be trailing bytes, because ptr's
			 * offset from the beginning of the extent is a multiple
			 * of CACHELINE in [0 .. PAGE).
			 */</comment>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>zbase</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
			    <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>oldusize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>zpast</name> <init>= <expr><call><name>PAGE_ADDR2BASE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>zbase</name> <operator>+</operator>
			    <name>PAGE</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>nzero</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>zpast</name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>zbase</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nzero</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zbase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>is_zeroed_trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>config_fill</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>opt_junk_alloc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>oldusize</name><operator>)</operator></expr></argument>,
		    <argument><expr><name>JEMALLOC_ALLOC_JUNK</name></expr></argument>, <argument><expr><name>usize</name> <operator>-</operator> <name>oldusize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>arena_extent_ralloc_large_expand</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>oldusize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>large_ralloc_no_move</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize_min</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>usize_max</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>oldusize</name> <init>= <expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* The following should have been caught by callers. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize_min</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>usize_max</name> <operator>&lt;=</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Both allocation sizes must be large to avoid a move. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oldusize</name> <operator>&gt;=</operator> <name>SC_LARGE_MINCLASS</name>
	    <operator>&amp;&amp;</operator> <name>usize_max</name> <operator>&gt;=</operator> <name>SC_LARGE_MINCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>usize_max</name> <operator>&gt;</operator> <name>oldusize</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Attempt to expand the allocation in-place. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>large_ralloc_no_move_expand</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>usize_max</name></expr></argument>,
		    <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>arena_decay_tick</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Try again, this time with usize_min. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>usize_min</name> <argument_list type="generic">&lt; <argument><expr><name>usize_max</name> <operator>&amp;&amp;</operator> <name>usize_min</name></expr></argument> &gt;</argument_list></name> <name>oldusize</name> <operator>&amp;&amp;</operator>
		    <call><name>large_ralloc_no_move_expand</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>usize_min</name></expr></argument>,
		    <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>arena_decay_tick</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Avoid moving the allocation if the existing extent size accommodates
	 * the new size.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>oldusize</name> <operator>&gt;=</operator> <name>usize_min</name> <operator>&amp;&amp;</operator> <name>oldusize</name> <operator>&lt;=</operator> <name>usize_max</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>arena_decay_tick</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Attempt to shrink the allocation in-place. */</comment>
	<if_stmt><if>if <condition>(<expr><name>oldusize</name> <operator>&gt;</operator> <name>usize_max</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>large_ralloc_no_move_shrink</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>usize_max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>arena_decay_tick</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>large_ralloc_move_helper</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>&lt;=</operator> <name>CACHELINE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>large_malloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>large_palloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>large_ralloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zero</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,
    <parameter><decl><type><name>hook_ralloc_args_t</name> <modifier>*</modifier></type><name>hook_args</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>iealloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>oldusize</name> <init>= <expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* The following should have been caught by callers. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>usize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>usize</name> <operator>&lt;=</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Both allocation sizes must be large to avoid a move. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>oldusize</name> <operator>&gt;=</operator> <name>SC_LARGE_MINCLASS</name>
	    <operator>&amp;&amp;</operator> <name>usize</name> <operator>&gt;=</operator> <name>SC_LARGE_MINCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Try to avoid moving the allocation. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>large_ralloc_no_move</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>hook_invoke_expand</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hook_args</name><operator>-&gt;</operator><name>is_realloc</name></name></expr>
		    ?</condition><then> <expr><name>hook_expand_realloc</name></expr> </then><else>: <expr><name>hook_expand_rallocx</name></expr></else></ternary></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldusize</name></expr></argument>,
		    <argument><expr><name>usize</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>hook_args</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * usize and old size are different enough that we need to use a
	 * different size class.  In that case, fall back to allocating new
	 * space and copying.
	 */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>large_ralloc_move_helper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>,
	    <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>hook_invoke_alloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hook_args</name><operator>-&gt;</operator><name>is_realloc</name></name></expr>
	    ?</condition><then> <expr><name>hook_alloc_realloc</name></expr> </then><else>: <expr><name>hook_alloc_rallocx</name></expr></else></ternary></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name></expr></argument>,
	    <argument><expr><name><name>hook_args</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_invoke_dalloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hook_args</name><operator>-&gt;</operator><name>is_realloc</name></name></expr>
	    ?</condition><then> <expr><name>hook_dalloc_realloc</name></expr> </then><else>: <expr><name>hook_dalloc_rallocx</name></expr></else></ternary></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>hook_args</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>copysize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>usize</name> <operator>&lt;</operator> <name>oldusize</name><operator>)</operator></expr> ?</condition><then> <expr><name>usize</name></expr> </then><else>: <expr><name>oldusize</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>copysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>isdalloct</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oldusize</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * junked_locked indicates whether the extent's data have been junk-filled, and
 * whether the arena's large_mtx is currently held.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>large_dalloc_prep_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>junked_locked</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>junked_locked</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* See comments in arena_bin_slabs_full_insert(). */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>arena_is_auto</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>extent_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large</name></name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>large_dalloc_maybe_junk</name><argument_list>(<argument><expr><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Only hold the large_mtx if necessary. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>arena_is_auto</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>extent_list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>large</name></name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>arena_extent_dalloc_large_prep</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>large_dalloc_finish_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name> <init>= <expr><name>EXTENT_HOOKS_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>arena_extents_dirty_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>large_dalloc_prep_junked_locked</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>large_dalloc_prep_impl</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>large_dalloc_finish</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>large_dalloc_finish_impl</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>large_dalloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><call><name>extent_arena_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>large_dalloc_prep_impl</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>large_dalloc_finish_impl</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>arena_decay_tick</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>large_salloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>extent_usize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>prof_tctx_t</name> <modifier>*</modifier></type>
<name>large_prof_tctx_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>extent_prof_tctx_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>large_prof_tctx_set</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>prof_tctx_t</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>extent_prof_tctx_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>large_prof_tctx_reset</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>large_prof_tctx_set</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><operator>(</operator><name>prof_tctx_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>nstime_t</name></type>
<name>large_prof_alloc_time_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>extent_prof_alloc_time_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>large_prof_alloc_time_set</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>nstime_t</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>extent_prof_alloc_time_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
