<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/sc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bit_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/bitmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/pages.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This module computes the size classes used to satisfy allocations.  The logic
 * here was ported more or less line-by-line from a shell script, and because of
 * that is not the most idiomatic C.  Eventually we should fix this, but for now
 * at least the damage is compartmentalized to this file.
 */</comment>

<decl_stmt><decl><type><name>sc_data_t</name></type> <name>sc_data_global</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>reg_size_compute</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lg_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndelta</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_base</name><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name>ndelta</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns the number of pages in the slab. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>slab_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lg_page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndelta</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>page</name> <init>= <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_page</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>reg_size</name> <init>= <expr><call><name>reg_size_compute</name><argument_list>(<argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>try_slab_size</name> <init>= <expr><name>page</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>try_nregs</name> <init>= <expr><name>try_slab_size</name> <operator>/</operator> <name>reg_size</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>perfect_slab_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>perfect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * This loop continues until we find the least common multiple of the
	 * page size and size class size.  Size classes are all of the form
	 * base + ndelta * delta == (ndelta + base/ndelta) * delta, which is
	 * (ndelta + ngroup) * delta.  The way we choose slabbing strategies
	 * means that delta is at most the page size and ndelta &lt; ngroup.  So
	 * the loop executes for at most 2 * ngroup - 1 iterations, which is
	 * also the bound on the number of pages in a slab chosen by default.
	 * With the current default settings, this is at most 7.
	 */</comment>
	<while>while <condition>(<expr><operator>!</operator><name>perfect</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>perfect_slab_size</name> <operator>=</operator> <name>try_slab_size</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>perfect_nregs</name> <init>= <expr><name>try_nregs</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>try_slab_size</name> <operator>+=</operator> <name>page</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>try_nregs</name> <operator>=</operator> <name>try_slab_size</name> <operator>/</operator> <name>reg_size</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>perfect_slab_size</name> <operator>==</operator> <name>perfect_nregs</name> <operator>*</operator> <name>reg_size</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>perfect</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>perfect_slab_size</name> <operator>/</operator> <name>page</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>size_class</name><parameter_list>(
    <comment type="block">/* Output. */</comment>
    <parameter><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>,
    <comment type="block">/* Configuration decisions. */</comment>
    <parameter><decl><type><name>int</name></type> <name>lg_max_lookup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_ngroup</name></decl></parameter>,
    <comment type="block">/* Inputs specific to the size class. */</comment>
    <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndelta</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name> <operator>=</operator> <name>lg_base</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name> <operator>=</operator> <name>lg_delta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name> <operator>=</operator> <name>ndelta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name> <operator>=</operator> <operator>(</operator><call><name>reg_size_compute</name><argument_list>(<argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call>
	    <operator>%</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_page</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_base</name><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name>ndelta</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>lg_page</name> <operator>+</operator> <name>lg_ngroup</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name> <operator>=</operator> <call><name>slab_size</name><argument_list>(<argument><expr><name>lg_page</name></expr></argument>, <argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_max_lookup</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>lg_delta_lookup</name></name> <operator>=</operator> <name>lg_delta</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>lg_delta_lookup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>size_classes</name><parameter_list>(
    <comment type="block">/* Output. */</comment>
    <parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>,
    <comment type="block">/* Determined by the system. */</comment>
    <parameter><decl><type><name>size_t</name></type> <name>lg_ptr_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_quantum</name></decl></parameter>,
    <comment type="block">/* Configuration decisions. */</comment>
    <parameter><decl><type><name>int</name></type> <name>lg_tiny_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_max_lookup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lg_ngroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ptr_bits</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lg_ptr_size</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ngroup</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lg_ngroup</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ntiny</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nlbins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lg_tiny_maxclass</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nbins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>npsizes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ndelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lg_base</name> <init>= <expr><name>lg_tiny_min</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lg_delta</name> <init>= <expr><name>lg_base</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Outputs that we update as we go. */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lookup_maxclass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>small_maxclass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lg_large_minclass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>large_maxclass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Tiny size classes. */</comment>
	<while>while <condition>(<expr><name>lg_base</name> <operator>&lt;</operator> <name>lg_quantum</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>size_class</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>lg_max_lookup</name></expr></argument>, <argument><expr><name>lg_page</name></expr></argument>, <argument><expr><name>lg_ngroup</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
		    <argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>lg_delta_lookup</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nlbins</name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>npsizes</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nbins</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ntiny</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Final written value is correct. */</comment>
		<expr_stmt><expr><name>lg_tiny_maxclass</name> <operator>=</operator> <name>lg_base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_delta</name> <operator>=</operator> <name>lg_base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_base</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* First non-tiny (pseudo) group. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ntiny</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/*
		 * See the note in sc.h; the first non-tiny size class has an
		 * unusual encoding.
		 */</comment>
		<expr_stmt><expr><name>lg_base</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ndelta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>size_class</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>lg_max_lookup</name></expr></argument>, <argument><expr><name>lg_page</name></expr></argument>, <argument><expr><name>lg_ngroup</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
		    <argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_base</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_delta</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>npsizes</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nbins</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><name>ndelta</name> <operator>&lt;</operator> <name>ngroup</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>size_class</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>lg_max_lookup</name></expr></argument>, <argument><expr><name>lg_page</name></expr></argument>, <argument><expr><name>lg_ngroup</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
		    <argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ndelta</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>npsizes</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nbins</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* All remaining groups. */</comment>
	<expr_stmt><expr><name>lg_base</name> <operator>=</operator> <name>lg_base</name> <operator>+</operator> <name>lg_ngroup</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>lg_base</name> <operator>&lt;</operator> <name>ptr_bits</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ndelta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ndelta_limit</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>lg_base</name> <operator>==</operator> <name>ptr_bits</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ndelta_limit</name> <operator>=</operator> <name>ngroup</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>ndelta_limit</name> <operator>=</operator> <name>ngroup</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<while>while <condition>(<expr><name>ndelta</name> <operator>&lt;=</operator> <name>ndelta_limit</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>size_class</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>lg_max_lookup</name></expr></argument>, <argument><expr><name>lg_page</name></expr></argument>, <argument><expr><name>lg_ngroup</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
			    <argument><expr><name>lg_base</name></expr></argument>, <argument><expr><name>lg_delta</name></expr></argument>, <argument><expr><name>ndelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>lg_delta_lookup</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>nlbins</name> <operator>=</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="block">/* Final written value is correct. */</comment>
				<expr_stmt><expr><name>lookup_maxclass</name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_base</name><operator>)</operator>
				    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name>ndelta</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>npsizes</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>nbins</name><operator>++</operator></expr>;</expr_stmt>
				<comment type="block">/* Final written value is correct. */</comment>
				<expr_stmt><expr><name>small_maxclass</name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_base</name><operator>)</operator>
				    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name>ndelta</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>lg_ngroup</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>lg_large_minclass</name> <operator>=</operator> <name>lg_base</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><name>lg_large_minclass</name> <operator>=</operator> <name>lg_base</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>large_maxclass</name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_base</name><operator>)</operator>
			    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name>ndelta</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_delta</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ndelta</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>lg_base</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>lg_delta</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* Additional outputs. */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nsizes</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>lg_ceil_nsizes</name> <init>= <expr><call><name>lg_ceil</name><argument_list>(<argument><expr><name>nsizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Fill in the output data. */</comment>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>ntiny</name></name> <operator>=</operator> <name>ntiny</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>nlbins</name></name> <operator>=</operator> <name>nlbins</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>nbins</name></name> <operator>=</operator> <name>nbins</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>nsizes</name></name> <operator>=</operator> <name>nsizes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>lg_ceil_nsizes</name></name> <operator>=</operator> <name>lg_ceil_nsizes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>npsizes</name></name> <operator>=</operator> <name>npsizes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>lg_tiny_maxclass</name></name> <operator>=</operator> <name>lg_tiny_maxclass</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>lookup_maxclass</name></name> <operator>=</operator> <name>lookup_maxclass</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>small_maxclass</name></name> <operator>=</operator> <name>small_maxclass</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>lg_large_minclass</name></name> <operator>=</operator> <name>lg_large_minclass</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>large_minclass</name></name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>lg_large_minclass</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>large_maxclass</name></name> <operator>=</operator> <name>large_maxclass</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We compute these values in two ways:
	 *   - Incrementally, as above.
	 *   - In macros, in sc.h.
	 * The computation is easier when done incrementally, but putting it in
	 * a constant makes it available to the fast paths without having to
	 * touch the extra global cacheline.  We assert, however, that the two
	 * computations are equivalent.
	 */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>npsizes</name></name> <operator>==</operator> <name>SC_NPSIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>lg_tiny_maxclass</name></name> <operator>==</operator> <name>SC_LG_TINY_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>small_maxclass</name></name> <operator>==</operator> <name>SC_SMALL_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>large_minclass</name></name> <operator>==</operator> <name>SC_LARGE_MINCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>lg_large_minclass</name></name> <operator>==</operator> <name>SC_LG_LARGE_MINCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sc_data</name><operator>-&gt;</operator><name>large_maxclass</name></name> <operator>==</operator> <name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* 
	 * In the allocation fastpath, we want to assume that we can
	 * unconditionally subtract the requested allocation size from
	 * a ssize_t, and detect passing through 0 correctly.  This
	 * results in optimal generated code.  For this to work, the
	 * maximum allocation size must be less than SSIZE_MAX.
	 */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>SC_LARGE_MAXCLASS</name> <operator>&lt;</operator> <name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sc_data_init</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sc_data</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>lg_max_lookup</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>size_classes</name><argument_list>(<argument><expr><name>sc_data</name></expr></argument>, <argument><expr><name>LG_SIZEOF_PTR</name></expr></argument>, <argument><expr><name>LG_QUANTUM</name></expr></argument>, <argument><expr><name>SC_LG_TINY_MIN</name></expr></argument>,
	    <argument><expr><name>lg_max_lookup</name></expr></argument>, <argument><expr><name>LG_PAGE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sc_data</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sc_data_update_sc_slab_size</name><parameter_list>(<parameter><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>reg_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pgs_guess</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>min_pgs</name> <init>= <expr><name>reg_size</name> <operator>/</operator> <name>PAGE</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>reg_size</name> <operator>%</operator> <name>PAGE</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>min_pgs</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * BITMAP_MAXBITS is actually determined by putting the smallest
	 * possible size-class on one page, so this can never be 0.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>max_pgs</name> <init>= <expr><name>BITMAP_MAXBITS</name> <operator>*</operator> <name>reg_size</name> <operator>/</operator> <name>PAGE</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>min_pgs</name> <operator>&lt;=</operator> <name>max_pgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>min_pgs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>max_pgs</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pgs_guess</name> <operator>&lt;</operator> <name>min_pgs</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>min_pgs</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pgs_guess</name> <operator>&gt;</operator> <name>max_pgs</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>max_pgs</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>pgs</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pgs_guess</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sc_data_update_slab_size</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nsizes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>reg_size</name> <init>= <expr><call><name>reg_size_compute</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name></expr></argument>,
		    <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;=</operator> <name>reg_size</name> <operator>&amp;&amp;</operator> <name>reg_size</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>sc_data_update_sc_slab_size</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>reg_size</name></expr></argument>, <argument><expr><name>pgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sc_boot</name><parameter_list>(<parameter><decl><type><name>sc_data_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>sc_data_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
