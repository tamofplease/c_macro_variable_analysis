<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name></type> <name><name>log_var_names</name><index>[<expr><name>JEMALLOC_LOG_VAR_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_b_t</name></type> <name>log_init_done</name> <init>= <expr><call><name>ATOMIC_INIT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Returns true if we were able to pick out a segment.  Fills in r_segment_end
 * with a pointer to the first character after the end of the string.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>log_var_extract_segment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>segment_begin</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>segment_begin</name></expr>;</init> <condition><expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>;</condition> <incr><expr><name>end</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	</block_content>}</block></for>
	<return>return <expr><name>end</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>log_var_matches_segment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>segment_begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>segment_end</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>log_var_begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>log_var_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>segment_begin</name> <operator>&lt;=</operator> <name>segment_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>log_var_begin</name> <operator>&lt;</operator> <name>log_var_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>segment_len</name> <init>= <expr><name>segment_end</name> <operator>-</operator> <name>segment_begin</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>log_var_len</name> <init>= <expr><name>log_var_end</name> <operator>-</operator> <name>log_var_begin</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* The special '.' segment matches everything. */</comment>
	<if_stmt><if>if <condition>(<expr><name>segment_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>segment_begin</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>segment_len</name> <operator>==</operator> <name>log_var_len</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>segment_begin</name></expr></argument>, <argument><expr><name>log_var_begin</name></expr></argument>, <argument><expr><name>segment_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>segment_len</name> <operator>&lt;</operator> <name>log_var_len</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>segment_begin</name></expr></argument>, <argument><expr><name>log_var_begin</name></expr></argument>, <argument><expr><name>segment_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
		    <operator>&amp;&amp;</operator> <name><name>log_var_begin</name><index>[<expr><name>segment_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name></type>
<name>log_var_update_state</name><parameter_list>(<parameter><decl><type><name>log_var_t</name> <modifier>*</modifier></type><name>log_var</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>log_var_begin</name> <init>= <expr><name><name>log_var</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>log_var_end</name> <init>= <expr><name><name>log_var</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>log_var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Pointer to one before the beginning of the current segment. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>segment_begin</name> <init>= <expr><name>log_var_names</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If log_init done is false, we haven't parsed the malloc conf yet.  To
	 * avoid log-spew, we default to not displaying anything.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_init_done</name></expr></argument>, <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>LOG_INITIALIZED_NOT_ENABLED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>segment_end</name> <init>= <expr><call><name>log_var_extract_segment</name><argument_list>(
		    <argument><expr><name>segment_begin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>segment_end</name> <operator>&lt;</operator> <name>log_var_names</name> <operator>+</operator> <name>JEMALLOC_LOG_VAR_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>log_var_matches_segment</name><argument_list>(<argument><expr><name>segment_begin</name></expr></argument>, <argument><expr><name>segment_end</name></expr></argument>,
		    <argument><expr><name>log_var_begin</name></expr></argument>, <argument><expr><name>log_var_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>atomic_store_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log_var</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>LOG_ENABLED</name></expr></argument>,
			    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>LOG_ENABLED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>segment_end</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Hit the end of the segment string with no match. */</comment>
			<expr_stmt><expr><call><name>atomic_store_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log_var</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
			    <argument><expr><name>LOG_INITIALIZED_NOT_ENABLED</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>LOG_INITIALIZED_NOT_ENABLED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Otherwise, skip the delimiter and continue. */</comment>
		<expr_stmt><expr><name>segment_begin</name> <operator>=</operator> <name>segment_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
