<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/witness.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_WITNESS_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/malloc_io.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>witness_init</name><parameter_list>(<parameter><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>witness_rank_t</name></type> <name>rank</name></decl></parameter>,
    <parameter><decl><type><name>witness_comp_t</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>witness</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name> <operator>=</operator> <name>rank</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>witness</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>witness</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_lock_error_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: Lock rank order reversal:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>ql_foreach</name><argument_list>(<argument>w</argument>, <argument>witnesses</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">" %s(%u)"</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">" %s(%u)\n"</literal></expr></argument>, <argument><expr><name><name>witness</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>witness_lock_error_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>witness_lock_error</name> <init>= <expr><name>witness_lock_error_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_owner_error_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: Should own %s(%u)\n"</literal></expr></argument>, <argument><expr><name><name>witness</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
	    <argument><expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>witness_owner_error_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>witness_owner_error</name> <init>=
    <expr><name>witness_owner_error_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_not_owner_error_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_t</name> <modifier>*</modifier></type><name>witness</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: Should not own %s(%u)\n"</literal></expr></argument>, <argument><expr><name><name>witness</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
	    <argument><expr><name><name>witness</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>witness_not_owner_error_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>witness_not_owner_error</name> <init>=
    <expr><name>witness_not_owner_error_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>witness_depth_error_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl></parameter>,
    <parameter><decl><type><name>witness_rank_t</name></type> <name>rank_inclusive</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>witness_t</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: Should own %u lock%s of rank &gt;= %u:"</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
	    <argument><expr><ternary><condition><expr><operator>(</operator><name>depth</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>  <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>rank_inclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>ql_foreach</name><argument_list>(<argument>w</argument>, <argument>witnesses</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">" %s(%u)"</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>malloc_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>witness_depth_error_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>witness_depth_error</name> <init>=
    <expr><name>witness_depth_error_impl</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>witnesses_cleanup</name><parameter_list>(<parameter><decl><type><name>witness_tsd_t</name> <modifier>*</modifier></type><name>witness_tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>witness_assert_lockless</name><argument_list>(<argument><expr><call><name>witness_tsd_tsdn</name><argument_list>(<argument><expr><name>witness_tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Do nothing. */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>witness_prefork</name><parameter_list>(<parameter><decl><type><name>witness_tsd_t</name> <modifier>*</modifier></type><name>witness_tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>witness_tsd</name><operator>-&gt;</operator><name>forking</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>witness_postfork_parent</name><parameter_list>(<parameter><decl><type><name>witness_tsd_t</name> <modifier>*</modifier></type><name>witness_tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>witness_tsd</name><operator>-&gt;</operator><name>forking</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>witness_postfork_child</name><parameter_list>(<parameter><decl><type><name>witness_tsd_t</name> <modifier>*</modifier></type><name>witness_tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JEMALLOC_MUTEX_INIT_CB</name></cpp:ifndef>
	<decl_stmt><decl><type><name>witness_list_t</name> <modifier>*</modifier></type><name>witnesses</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>witnesses</name> <operator>=</operator> <operator>&amp;</operator><name><name>witness_tsd</name><operator>-&gt;</operator><name>witnesses</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ql_new</name><argument_list>(<argument><expr><name>witnesses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>witness_tsd</name><operator>-&gt;</operator><name>forking</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
