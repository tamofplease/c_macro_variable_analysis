<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/sz.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sz.h"</cpp:file></cpp:include>

<macro><name>JEMALLOC_ALIGNED</name><argument_list>(<argument>CACHELINE</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>sz_pind2sz_tab</name><index>[<expr><name>SC_NPSIZES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sz_boot_pind2sz_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>pind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>psz</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>sz_pind2sz_tab</name><index>[<expr><name>pind</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name><operator>)</operator>
			    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>pind</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>pind</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>SC_NPSIZES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>sz_pind2sz_tab</name><index>[<expr><name>pind</name></expr>]</index></name> <operator>=</operator> <name><name>sc_data</name><operator>-&gt;</operator><name>large_maxclass</name></name> <operator>+</operator> <name>PAGE</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>JEMALLOC_ALIGNED</name><argument_list>(<argument>CACHELINE</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>sz_index2size_tab</name><index>[<expr><name>SC_NSIZES</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sz_boot_index2size_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>sz_index2size_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name><operator>)</operator>
		    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * To keep this table small, we divide sizes by the tiny min size, which gives
 * the smallest interval for which the result can change.
 */</comment>
<macro><name>JEMALLOC_ALIGNED</name><argument_list>(<argument>CACHELINE</argument>)</argument_list></macro>
<expr_stmt><expr><name>uint8_t</name> <name><name>sz_size2index_tab</name><index>[<expr><operator>(</operator><name>SC_LOOKUP_MAXCLASS</name> <operator>&gt;&gt;</operator> <name>SC_LG_TINY_MIN</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sz_boot_size2index_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dst_max</name> <init>= <expr><operator>(</operator><name>SC_LOOKUP_MAXCLASS</name> <operator>&gt;&gt;</operator> <name>SC_LG_TINY_MIN</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dst_ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>sc_ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sc_ind</name> <operator>&lt;</operator> <name>SC_NSIZES</name> <operator>&amp;&amp;</operator> <name>dst_ind</name> <operator>&lt;</operator> <name>dst_max</name></expr>;</condition>
	    <incr><expr><name>sc_ind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>sc_t</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><name><name>sc_data</name><operator>-&gt;</operator><name>sc</name><index>[<expr><name>sc_ind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_base</name></name><operator>)</operator>
		    <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>ndelta</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>sc</name><operator>-&gt;</operator><name>lg_delta</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>max_ind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>sz</name> <operator>+</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>SC_LG_TINY_MIN</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
				   <operator>&gt;&gt;</operator> <name>SC_LG_TINY_MIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init>;</init> <condition><expr><name>dst_ind</name> <operator>&lt;=</operator> <name>max_ind</name> <operator>&amp;&amp;</operator> <name>dst_ind</name> <operator>&lt;</operator> <name>dst_max</name></expr>;</condition> <incr><expr><name>dst_ind</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>sz_size2index_tab</name><index>[<expr><name>dst_ind</name></expr>]</index></name> <operator>=</operator> <name>sc_ind</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sz_boot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sc_data_t</name> <modifier>*</modifier></type><name>sc_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>sz_boot_pind2sz_tab</name><argument_list>(<argument><expr><name>sc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sz_boot_index2size_tab</name><argument_list>(<argument><expr><name>sc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sz_boot_size2index_tab</name><argument_list>(<argument><expr><name>sc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
