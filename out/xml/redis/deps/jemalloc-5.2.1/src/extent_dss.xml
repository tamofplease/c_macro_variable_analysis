<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/extent_dss.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_EXTENT_DSS_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/extent_dss.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/spin.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
<comment type="block">/* Data. */</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name>opt_dss</name> <init>= <expr><name>DSS_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>	<modifier>*</modifier></type><name><name>dss_prec_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"disabled"</literal></expr>,
	<expr><literal type="string">"primary"</literal></expr>,
	<expr><literal type="string">"secondary"</literal></expr>,
	<expr><literal type="string">"N/A"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Current dss precedence default, used when creating new arenas.  NB: This is
 * stored as unsigned rather than dss_prec_t because in principle there's no
 * guarantee that sizeof(dss_prec_t) is the same as sizeof(unsigned), and we use
 * atomic operations to synchronize the setting.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_u_t</name></type>	<name>dss_prec_default</name> <init>= <expr><call><name>ATOMIC_INIT</name><argument_list>(
    <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>DSS_PREC_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="block">/* Base address of the DSS. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name>		<modifier>*</modifier></type><name>dss_base</name></decl>;</decl_stmt>
<comment type="block">/* Atomic boolean indicating whether a thread is currently extending DSS. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_b_t</name></type>	<name>dss_extending</name></decl>;</decl_stmt>
<comment type="block">/* Atomic boolean indicating whether the DSS is exhausted. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_b_t</name></type>	<name>dss_exhausted</name></decl>;</decl_stmt>
<comment type="block">/* Atomic current upper limit on DSS addresses. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_p_t</name></type>	<name>dss_max</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_dss_sbrk</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>increment</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_DSS</name></cpp:ifdef>
	<return>return <expr><call><name>sbrk</name><argument_list>(<argument><expr><name>increment</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>not_implemented</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>dss_prec_t</name></type>
<name>extent_dss_prec_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>dss_prec_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_dss</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>dss_prec_disabled</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>dss_prec_t</name><operator>)</operator><call><name>atomic_load_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_prec_default</name></expr></argument>, <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>extent_dss_prec_set</name><parameter_list>(<parameter><decl><type><name>dss_prec_t</name></type> <name>dss_prec</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_dss</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>dss_prec</name> <operator>!=</operator> <name>dss_prec_disabled</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>atomic_store_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_prec_default</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>dss_prec</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_dss_extending_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>spin_t</name></type> <name>spinner</name> <init>= <expr><name>SPIN_INITIALIZER</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>expected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_weak_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_extending</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expected</name></expr></argument>,
		    <argument><expr><name>true</name></expr></argument>, <argument><expr><name>ATOMIC_ACQ_REL</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>spin_adaptive</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spinner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_dss_extending_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_extending</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_extending</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>extent_dss_max_update</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/*
	 * Get the current end of the DSS as max_cur and assure that dss_max is
	 * up to date.
	 */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>max_cur</name> <init>= <expr><call><name>extent_dss_sbrk</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>max_cur</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_max</name></expr></argument>, <argument><expr><name>max_cur</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fixed new_addr can only be supported if it is at the edge of DSS. */</comment>
	<if_stmt><if>if <condition>(<expr><name>new_addr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>max_cur</name> <operator>!=</operator> <name>new_addr</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>max_cur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>extent_alloc_dss</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>zero</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>have_dss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>alignment</name> <operator>==</operator> <call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>PAGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * sbrk() uses a signed increment argument, so take care not to
	 * interpret a large allocation request as a negative increment.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>gap</name> <operator>=</operator> <call><name>extent_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>gap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>extent_dss_extending_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_load_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_exhausted</name></expr></argument>, <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * The loop is necessary to recover from races with other
		 * threads that are using the DSS for something other than
		 * malloc.
		 */</comment>
		<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>max_cur</name> <init>= <expr><call><name>extent_dss_max_update</name><argument_list>(<argument><expr><name>new_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>max_cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>label_oom</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Compute how much page-aligned gap space (if any) is
			 * necessary to satisfy alignment.  This space can be
			 * recycled for later use.
			 */</comment>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>gap_addr_page</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>PAGE_CEILING</name><argument_list>(
			    <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>max_cur</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>ALIGNMENT_CEILING</name><argument_list>(
			    <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>gap_addr_page</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>gap_size_page</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name> <operator>-</operator>
			    <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>gap_addr_page</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>gap_size_page</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>gap_addr_page</name></expr></argument>,
				    <argument><expr><name>gap_size_page</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>,
				    <argument><expr><call><name>arena_extent_sn_next</name><argument_list>(<argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
				    <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/*
			 * Compute the address just past the end of the desired
			 * allocation space.
			 */</comment>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dss_next</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name> <operator>+</operator> <name>size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>max_cur</name> <operator>||</operator>
			    <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dss_next</name> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>max_cur</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>label_oom</name>;</goto> <comment type="block">/* Wrap-around. */</comment>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Compute the increment, including subpage bytes. */</comment>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>gap_addr_subpage</name> <init>= <expr><name>max_cur</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>gap_size_subpage</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name> <operator>-</operator>
			    <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>gap_addr_subpage</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>intptr_t</name></type> <name>incr</name> <init>= <expr><name>gap_size_subpage</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>max_cur</name> <operator>+</operator> <name>incr</name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ret</name> <operator>+</operator>
			    <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Try to allocate. */</comment>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dss_prev</name> <init>= <expr><call><name>extent_dss_sbrk</name><argument_list>(<argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>dss_prev</name> <operator>==</operator> <name>max_cur</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* Success. */</comment>
				<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_max</name></expr></argument>, <argument><expr><name>dss_next</name></expr></argument>,
				    <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>extent_dss_extending_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>gap_size_page</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>extent_dalloc_gap</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>extent_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>commit</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>commit</name> <operator>=</operator> <call><name>pages_decommit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>zero</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>commit</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name> <init>=
					    <expr><name>EXTENT_HOOKS_INITIALIZER</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>extent_t</name></type> <name>extent</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>extent_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
					    <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>SC_NSIZES</name></expr></argument>,
					    <argument><expr><name>extent_state_active</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
					    <argument><expr><name>true</name></expr></argument>, <argument><expr><name>EXTENT_NOT_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>extent_purge_forced_wrapper</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>,
					    <argument><expr><name>arena</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_hooks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
					    <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><name>ret</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/*
			 * Failure, whether due to OOM or a race with a raw
			 * sbrk() call from outside the allocator.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>dss_prev</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* OOM. */</comment>
				<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_exhausted</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
				    <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>label_oom</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
<label><name>label_oom</name>:</label>
	<expr_stmt><expr><call><name>extent_dss_extending_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>extent_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extent_in_dss_helper</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>&gt;=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dss_base</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>&lt;</operator>
	    <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>max</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>extent_in_dss</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>have_dss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>extent_in_dss_helper</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_max</name></expr></argument>,
	    <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>extent_dss_mergeable</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr_a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr_b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>max</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>have_dss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr_a</name> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dss_base</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr_b</name> <operator>&lt;</operator>
	    <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dss_base</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_max</name></expr></argument>, <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name>extent_in_dss_helper</name><argument_list>(<argument><expr><name>addr_a</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>==</operator>
	    <call><name>extent_in_dss_helper</name><argument_list>(<argument><expr><name>addr_b</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>extent_dss_boot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>have_dss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dss_base</name> <operator>=</operator> <call><name>extent_dss_sbrk</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_extending</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_exhausted</name></expr></argument>, <argument><expr><name>dss_base</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dss_max</name></expr></argument>, <argument><expr><name>dss_base</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
</unit>
