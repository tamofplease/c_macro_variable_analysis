<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/hook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/hook.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/seq.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>hooks_internal_s</name></name></type> <name>hooks_internal_t</name>;</typedef>
<struct>struct <name>hooks_internal_s</name> <block>{
	<decl_stmt><decl><type><name>hooks_t</name></type> <name>hooks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>in_use</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>seq_define</name><argument_list>(<argument>hooks_internal_t</argument>, <argument>hooks</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_u_t</name></type> <name>nhooks</name> <init>= <expr><call><name>ATOMIC_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>seq_hooks_t</name></type> <name><name>hooks</name><index>[<expr><name>HOOK_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>malloc_mutex_t</name></type> <name>hooks_mu</name></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>hook_boot</name><parameter_list>()</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks_mu</name></expr></argument>, <argument><expr><literal type="string">"hooks"</literal></expr></argument>, <argument><expr><name>WITNESS_RANK_HOOK</name></expr></argument>,
	    <argument><expr><name>malloc_mutex_rank_exclusive</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>hook_install_locked</name><parameter_list>(<parameter><decl><type><name>hooks_t</name> <modifier>*</modifier></type><name>to_install</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>hooks_internal_t</name></type> <name>hooks_internal</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HOOK_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>seq_try_load_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks_internal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hooks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* We hold mu; no concurrent access. */</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hooks_internal</name><operator>.</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>hooks_internal</name><operator>.</operator><name>hooks</name></name> <operator>=</operator> <operator>*</operator><name>to_install</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hooks_internal</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>seq_store_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hooks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>atomic_store_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nhooks</name></expr></argument>,
			    <argument><expr><call><name>atomic_load_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nhooks</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
			    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>hooks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>hook_install</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>hooks_t</name> <modifier>*</modifier></type><name>to_install</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_mu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>hook_install_locked</name><argument_list>(<argument><expr><name>to_install</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tsd_global_slow_inc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_mu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hook_remove_locked</name><parameter_list>(<parameter><decl><type><name>seq_hooks_t</name> <modifier>*</modifier></type><name>to_remove</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>hooks_internal_t</name></type> <name>hooks_internal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>seq_try_load_hooks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hooks_internal</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* We hold mu; no concurrent access. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Should only remove hooks that were added. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hooks_internal</name><operator>.</operator><name>in_use</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hooks_internal</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>seq_store_hooks</name><argument_list>(<argument><expr><name>to_remove</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nhooks</name></expr></argument>, <argument><expr><call><name>atomic_load_u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nhooks</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
	    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hook_remove</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hooks_begin</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hooks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hooks_end</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hooks</name><index>[<expr><name>HOOK_MAX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hook</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hooks_begin</name> <operator>&lt;=</operator> <name>hook</name> <operator>&amp;&amp;</operator> <name>hook</name> <operator>&lt;</operator> <name>hooks_end</name>
		    <operator>&amp;&amp;</operator> <operator>(</operator><name>hook</name> <operator>-</operator> <name>hooks_begin</name><operator>)</operator> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>seq_hooks_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_mu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hook_remove_locked</name><argument_list>(<argument><expr><operator>(</operator><name>seq_hooks_t</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_global_slow_dec</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hooks_mu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_EACH_HOOK_BEGIN</name><parameter_list>(<parameter><type><name>hooks_internal_ptr</name></type></parameter>)</parameter_list></cpp:macro>				\
<cpp:value>for (int for_each_hook_counter = 0;					\
    for_each_hook_counter &lt; HOOK_MAX;					\
    for_each_hook_counter++) {						\
	bool for_each_hook_success = seq_try_load_hooks(		\
	    (hooks_internal_ptr), &amp;hooks[for_each_hook_counter]);	\
	if (!for_each_hook_success) {					\
		continue;						\
	}								\
	if (!(hooks_internal_ptr)-&gt;in_use) {				\
		continue;						\
	}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_EACH_HOOK_END</name></cpp:macro>						\
<cpp:value>}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name> <modifier>*</modifier></type>
<name>hook_reentrantp</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="block">/*
	 * We prevent user reentrancy within hooks.  This is basically just a
	 * thread-local bool that triggers an early-exit.
	 *
	 * We don't fold in_hook into reentrancy.  There are two reasons for
	 * this:
	 * - Right now, we turn on reentrancy during things like extent hook
	 *   execution.  Allocating during extent hooks is not officially
	 *   supported, but we don't want to break it for the time being.  These
	 *   sorts of allocations should probably still be hooked, though.
	 * - If a hook allocates, we may want it to be relatively fast (after
	 *   all, it executes on every allocator operation).  Turning on
	 *   reentrancy is a fairly heavyweight mode (disabling tcache,
	 *   redirecting to arena 0, etc.).  It's possible we may one day want
	 *   to turn on reentrant mode here, if it proves too difficult to keep
	 *   this working.  But that's fairly easy for us to see; OTOH, people
	 *   not using hooks because they're too slow is easy for us to miss.
	 *
	 * The tricky part is
	 * that this code might get invoked even if we don't have access to tsd.
	 * This function mimics getting a pointer to thread-local data, except
	 * that it might secretly return a pointer to some global data if we
	 * know that the caller will take the early-exit path.
	 * If we return a bool that indicates that we are reentrant, then the
	 * caller will go down the early exit path, leaving the global
	 * untouched.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>in_hook_global</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name> <init>= <expr><call><name>tsdn_fetch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><call><name>tsdn_tcachep_get</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>in_hook</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>&amp;</operator><name>in_hook_global</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOOK_PROLOGUE</name></cpp:macro>							\
	<cpp:value>if (likely(atomic_load_u(&amp;nhooks, ATOMIC_RELAXED) == 0)) {	\
		return;							\
	}								\
	bool *in_hook = hook_reentrantp();				\
	if (*in_hook) {							\
		return;							\
	}								\
	*in_hook = true;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOOK_EPILOGUE</name></cpp:macro>							\
	<cpp:value>*in_hook = false;</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>hook_invoke_alloc</name><parameter_list>(<parameter><decl><type><name>hook_alloc_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>result_raw</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>HOOK_PROLOGUE</name>

	<name>hooks_internal_t</name></type> <name>hook</name></decl>;</decl_stmt>
	<macro><name>FOR_EACH_HOOK_BEGIN</name><argument_list>(<argument>&amp;hook</argument>)</argument_list></macro>
		<decl_stmt><decl><type><name>hook_alloc</name></type> <name>h</name> <init>= <expr><name><name>hook</name><operator>.</operator><name>hooks</name><operator>.</operator><name>alloc_hook</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>h</name><argument_list>(<argument><expr><name><name>hook</name><operator>.</operator><name>hooks</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_raw</name></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>FOR_EACH_HOOK_END</name>

	<name>HOOK_EPILOGUE</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hook_invoke_dalloc</name><parameter_list>(<parameter><decl><type><name>hook_dalloc_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>HOOK_PROLOGUE</name>
	<name>hooks_internal_t</name></type> <name>hook</name></decl>;</decl_stmt>
	<macro><name>FOR_EACH_HOOK_BEGIN</name><argument_list>(<argument>&amp;hook</argument>)</argument_list></macro>
		<decl_stmt><decl><type><name>hook_dalloc</name></type> <name>h</name> <init>= <expr><name><name>hook</name><operator>.</operator><name>hooks</name><operator>.</operator><name>dalloc_hook</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>h</name><argument_list>(<argument><expr><name><name>hook</name><operator>.</operator><name>hooks</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>FOR_EACH_HOOK_END</name>
	<name>HOOK_EPILOGUE</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hook_invoke_expand</name><parameter_list>(<parameter><decl><type><name>hook_expand_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>old_usize</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>new_usize</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>result_raw</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name><name>args_raw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>HOOK_PROLOGUE</name>
	<name>hooks_internal_t</name></type> <name>hook</name></decl>;</decl_stmt>
	<macro><name>FOR_EACH_HOOK_BEGIN</name><argument_list>(<argument>&amp;hook</argument>)</argument_list></macro>
		<decl_stmt><decl><type><name>hook_expand</name></type> <name>h</name> <init>= <expr><name><name>hook</name><operator>.</operator><name>hooks</name><operator>.</operator><name>expand_hook</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>h</name><argument_list>(<argument><expr><name><name>hook</name><operator>.</operator><name>hooks</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>old_usize</name></expr></argument>, <argument><expr><name>new_usize</name></expr></argument>,
			    <argument><expr><name>result_raw</name></expr></argument>, <argument><expr><name>args_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>FOR_EACH_HOOK_END</name>
	<name>HOOK_EPILOGUE</name></expr></expr_stmt>
</block_content>}</block></function>
</unit>
