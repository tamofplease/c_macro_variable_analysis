<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/tcache.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_TCACHE_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/safety_check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sc.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
<comment type="block">/* Data. */</comment>

<decl_stmt><decl><type><name>bool</name></type>	<name>opt_tcache</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type>	<name>opt_lg_tcache_max</name> <init>= <expr><name>LG_TCACHE_MAXCLASS_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cache_bin_info_t</name>	<modifier>*</modifier></type><name>tcache_bin_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type>		<name>stack_nelms</name></decl>;</decl_stmt> <comment type="block">/* Total stack elms per tcache. */</comment>

<decl_stmt><decl><type><name>unsigned</name></type>		<name>nhbins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type>			<name>tcache_maxclass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tcaches_t</name>		<modifier>*</modifier></type><name>tcaches</name></decl>;</decl_stmt>

<comment type="block">/* Index of first element within tcaches that has never been used. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type>		<name>tcaches_past</name></decl>;</decl_stmt>

<comment type="block">/* Head of singly linked list tracking available tcaches elements. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>tcaches_t</name>	<modifier>*</modifier></type><name>tcaches_avail</name></decl>;</decl_stmt>

<comment type="block">/* Protects tcaches{,_past,_avail}. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>malloc_mutex_t</name></type>	<name>tcaches_mtx</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<function><type><name>size_t</name></type>
<name>tcache_salloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>arena_salloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_event_hard</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>binind</name> <init>= <expr><name><name>tcache</name><operator>-&gt;</operator><name>next_gc_bin</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>binind</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tbin</name> <operator>=</operator> <call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>tbin</name> <operator>=</operator> <call><name>tcache_large_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Flush (ceiling) 3/4 of the objects below the low water mark.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>binind</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tcache_bin_flush_small</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,
			    <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>+</operator> <operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name>
			    <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			 * Reduce fill count by 2X.  Limit lg_fill_div such that
			 * the fill count is always at least 1.
			 */</comment>
			<decl_stmt><decl><type><name>cache_bin_info_t</name> <modifier>*</modifier></type><name>tbin_info</name> <init>= <expr><operator>&amp;</operator><name><name>tcache_bin_info</name><index>[<expr><name>binind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tbin_info</name><operator>-&gt;</operator><name>ncached_max</name></name> <operator>&gt;&gt;</operator>
			     <operator>(</operator><name><name>tcache</name><operator>-&gt;</operator><name>lg_fill_div</name><index>[<expr><name>binind</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>lg_fill_div</name><index>[<expr><name>binind</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>tcache_bin_flush_large</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name>
			    <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>+</operator> <operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Increase fill count by 2X for small bins.  Make sure
		 * lg_fill_div stays greater than 0.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>binind</name> <argument_list type="generic">&lt; <argument><expr><name>SC_NBINS</name> <operator>&amp;&amp;</operator> <name><name>tcache</name><operator>-&gt;</operator><name>lg_fill_div</name><index>[<expr><name>binind</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>lg_fill_div</name><index>[<expr><name>binind</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>next_gc_bin</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tcache</name><operator>-&gt;</operator><name>next_gc_bin</name></name> <operator>==</operator> <name>nhbins</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>next_gc_bin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>tcache_alloc_small_hard</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>,
    <parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>tcache_success</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>arena_tcache_fill_small</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,
	    <argument><expr><ternary><condition><expr><name>config_prof</name></expr> ?</condition><then> <expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_prof</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cache_bin_alloc_easy</name><argument_list>(<argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>tcache_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Enabled with --enable-extra-size-check. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tbin_extents_lookup_size_check</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>nflush</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>extents</name></decl></parameter>)</parameter_list><block>{<block_content>
	<decl_stmt><decl><type><name>rtree_ctx_t</name></type> <name>rtree_ctx_fallback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name> <init>= <expr><call><name>tsdn_rtree_ctx</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtree_ctx_fallback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Verify that the items in the tcache all have the correct size; this
	 * is useful for catching sized deallocation bugs, also to fail early
	 * instead of corrupting metadata.  Since this can be turned on for opt
	 * builds, avoid the branch in the loop.
	 */</comment>
	<decl_stmt><decl><type><name>szind_t</name></type> <name>szind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sz_sum</name> <init>= <expr><name>binind</name> <operator>*</operator> <name>nflush</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nflush</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rtree_extent_szind_read</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extents_rtree</name></expr></argument>,
		    <argument><expr><name>rtree_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name><name>extents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sz_sum</name> <operator>-=</operator> <name>szind</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>sz_sum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>safety_check_fail</name><argument_list>(<argument><expr><literal type="string">"&lt;jemalloc&gt;: size mismatch in thread cache "</literal>
		    <literal type="string">"detected, likely caused by sized deallocation bugs by "</literal>
		    <literal type="string">"application. Abort.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_bin_flush_small</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>,
    <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>rem</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>merged_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>cache_bin_sz_t</name><operator>)</operator><name>rem</name> <operator>&lt;=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arena</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nflush</name> <init>= <expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>-</operator> <name>rem</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>VARIABLE_ARRAY</name><argument_list>(<argument><expr><name>extent_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>item_extent</name></expr></argument>, <argument><expr><name>nflush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Look up extent once per item. */</comment>
	<if_stmt><if>if <condition>(<expr><name>config_opt_safety_checks</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tbin_extents_lookup_size_check</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,
		    <argument><expr><name>nflush</name></expr></argument>, <argument><expr><name>item_extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nflush</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>item_extent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iealloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<while>while <condition>(<expr><name>nflush</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Lock the arena bin associated with the first object. */</comment>
		<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><name><name>item_extent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>bin_arena_ind</name> <init>= <expr><call><name>extent_arena_ind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>bin_arena</name> <init>= <expr><call><name>arena_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bin_arena_ind</name></expr></argument>,
		    <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>binshard</name> <init>= <expr><call><name>extent_binshard_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binshard</name> <operator>&lt;</operator> <name><name>bin_infos</name><index>[<expr><name>binind</name></expr>]</index></name><operator>.</operator><name>n_shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><operator>&amp;</operator><name><name>bin_arena</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>binind</name></expr>]</index></name><operator>.</operator><name><name>bin_shards</name><index>[<expr><name>binshard</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <name>bin_arena</name> <operator>==</operator> <name>arena</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>arena_prof_accum</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>,
			    <argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>prof_idump</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>config_stats</name> <operator>&amp;&amp;</operator> <name>bin_arena</name> <operator>==</operator> <name>arena</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>merged_stats</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>merged_stats</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>nflushes</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>nrequests</name></name> <operator>+=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>ndeferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nflush</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>item_extent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>extent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>extent_arena_ind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>bin_arena_ind</name>
			    <operator>&amp;&amp;</operator> <call><name>extent_binshard_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>binshard</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>arena_dalloc_bin_junked_locked</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><name>bin_arena</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/*
				 * This object was allocated via a different
				 * arena bin than the one that is currently
				 * locked.  Stash the object, so that it can be
				 * handled in a future pass.
				 */</comment>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ndeferred</name><operator>)</operator> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>item_extent</name><index>[<expr><name>ndeferred</name></expr>]</index></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ndeferred</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>arena_decay_ticks</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bin_arena</name></expr></argument>, <argument><expr><name>nflush</name> <operator>-</operator> <name>ndeferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nflush</name> <operator>=</operator> <name>ndeferred</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>config_stats</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>merged_stats</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * The flush loop didn't happen to flush to this thread's
		 * arena, so the stats didn't get merged.  Manually do so now.
		 */</comment>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>binshard</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>arena_bin_choose_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>binshard</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>nflushes</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>nrequests</name></name> <operator>+=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name>rem</name></expr></argument>, <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr></argument>, <argument><expr><name>rem</name> <operator>*</operator>
	    <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>=</operator> <name>rem</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;</operator> <name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_bin_flush_large</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name></decl></parameter>, <parameter><decl><type><name>szind_t</name></type> <name>binind</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name></type> <name>rem</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>merged_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>binind</name> <operator>&lt;</operator> <name>nhbins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>cache_bin_sz_t</name><operator>)</operator><name>rem</name> <operator>&lt;=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>tcache_arena</name> <init>= <expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tcache_arena</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nflush</name> <init>= <expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>-</operator> <name>rem</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>VARIABLE_ARRAY</name><argument_list>(<argument><expr><name>extent_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>item_extent</name></expr></argument>, <argument><expr><name>nflush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JEMALLOC_EXTRA_SIZE_CHECK</name></cpp:ifndef>
	<comment type="block">/* Look up extent once per item. */</comment>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nflush</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>item_extent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iealloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>tbin_extents_lookup_size_check</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><name>nflush</name></expr></argument>,
	    <argument><expr><name>item_extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<while>while <condition>(<expr><name>nflush</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Lock the arena associated with the first object. */</comment>
		<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><name><name>item_extent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>locked_arena_ind</name> <init>= <expr><call><name>extent_arena_ind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>locked_arena</name> <init>= <expr><call><name>arena_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name>locked_arena_ind</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>idump</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>config_prof</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>idump</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>lock_large</name> <init>= <expr><operator>!</operator><call><name>arena_is_auto</name><argument_list>(<argument><expr><name>locked_arena</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>lock_large</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>locked_arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nflush</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>item_extent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>extent_arena_ind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>locked_arena_ind</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>large_dalloc_prep_junked_locked</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>config_prof</name> <operator>||</operator> <name>config_stats</name><operator>)</operator> <operator>&amp;&amp;</operator>
		    <operator>(</operator><name>locked_arena</name> <operator>==</operator> <name>tcache_arena</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>config_prof</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>idump</name> <operator>=</operator> <call><name>arena_prof_accum</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr><name>tcache_arena</name></expr></argument>, <argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>merged_stats</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>arena_stats_large_flush_nrequests_add</name><argument_list>(
				    <argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tcache_arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>binind</name></expr></argument>,
				    <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>lock_large</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>locked_arena</name><operator>-&gt;</operator><name>large_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>unsigned</name></type> <name>ndeferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nflush</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>item_extent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>extent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>extent_arena_ind_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>locked_arena_ind</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>large_dalloc_finish</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/*
				 * This object was allocated via a different
				 * arena than the one that is currently locked.
				 * Stash the object, so that it can be handled
				 * in a future pass.
				 */</comment>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ndeferred</name><operator>)</operator> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>item_extent</name><index>[<expr><name>ndeferred</name></expr>]</index></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ndeferred</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <name>idump</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>prof_idump</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>arena_decay_ticks</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>locked_arena</name></expr></argument>, <argument><expr><name>nflush</name> <operator>-</operator>
		    <name>ndeferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nflush</name> <operator>=</operator> <name>ndeferred</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>config_stats</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>merged_stats</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * The flush loop didn't happen to flush to this thread's
		 * arena, so the stats didn't get merged.  Manually do so now.
		 */</comment>
		<expr_stmt><expr><call><name>arena_stats_large_flush_nrequests_add</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name><name>tcache_arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>binind</name></expr></argument>, <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name>rem</name></expr></argument>, <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr></argument>, <argument><expr><name>rem</name> <operator>*</operator>
	    <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>=</operator> <name>rem</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name> <operator>&lt;</operator> <name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>low_water</name></name> <operator>=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>ncached</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_arena_associate</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>=</operator> <name>arena</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Link into list of extant tcaches. */</comment>
		<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>tcache_ql_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ql_elm_new</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>tcache_ql</name></name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cache_bin_array_descriptor_init</name><argument_list>(
		    <argument><expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>cache_bin_array_descriptor</name></name></expr></argument>, <argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>bins_small</name></name></expr></argument>,
		    <argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>bins_large</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ql_tail_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>cache_bin_array_descriptor_ql</name></name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>cache_bin_array_descriptor</name></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>tcache_ql_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tcache_arena_dissociate</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arena</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Unlink from list of extant tcaches. */</comment>
		<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>tcache_ql_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>in_ql</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
			<macro><name>ql_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;arena-&gt;tcache_ql</argument>, <argument>link</argument>)</argument_list></macro> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>tcache</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>in_ql</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in_ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ql_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>tcache_ql</name></name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ql_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>cache_bin_array_descriptor_ql</name></name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>cache_bin_array_descriptor</name></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tcache_stats_merge</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>tcache_ql_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_arena_reassociate</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>tcache_arena_dissociate</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tcache_arena_associate</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tsd_tcache_enabled_data_init</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Called upon tsd initialization. */</comment>
	<expr_stmt><expr><call><name>tsd_tcache_enabled_set</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>opt_tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsd_slow_update</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>opt_tcache</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Trigger tcache init. */</comment>
		<expr_stmt><expr><call><name>tsd_tcache_data_init</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize auto tcache (embedded in TSD). */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tcache_init</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avail_stack</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>link</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>ql_elm</name><argument_list>(<argument><expr><name>tcache_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>next_gc_bin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ticker_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tcache</name><operator>-&gt;</operator><name>gc_ticker</name></name></expr></argument>, <argument><expr><name>TCACHE_GC_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>stack_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>TCACHE_NSLOTS_SMALL_MAX</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>bins_small</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_bin_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SC_NBINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>bins_large</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_bin_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nhbins</name> <operator>-</operator> <name>SC_NBINS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>lg_fill_div</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<comment type="block">/*
		 * avail points past the available space.  Allocations will
		 * access the slots toward higher addresses (for the benefit of
		 * prefetch).
		 */</comment>
		<expr_stmt><expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>=</operator>
		    <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>avail_stack</name> <operator>+</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>stack_offset</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhbins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tcache_large_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>=</operator>
		    <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>avail_stack</name> <operator>+</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>stack_offset</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stack_offset</name> <operator>==</operator> <name>stack_nelms</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialize auto tcache (embedded in TSD). */</comment>
<function><type><name>bool</name></type>
<name>tsd_tcache_data_init</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><call><name>tsd_tcachep_get_unsafe</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>stack_nelms</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Avoid false cacheline sharing. */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>sz_sa2u</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>avail_array</name> <init>= <expr><call><name>ipallocztm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
	    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>arena_get</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>avail_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>tcache_init</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>avail_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Initialization is a bit tricky here.  After malloc init is done, all
	 * threads can rely on arena_choose and associate tcache accordingly.
	 * However, the thread that does actual malloc bootstrapping relies on
	 * functional tsd, and it can only rely on a0.  In that case, we
	 * associate its tcache to a0 temporarily, and later on
	 * arena_choose_hard() will re-associate properly.
	 */</comment>
	<expr_stmt><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>malloc_initialized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If in initialization, assign to a0. */</comment>
		<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>arena_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tcache_arena_associate</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>arena</name> <operator>=</operator> <call><name>arena_choose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* This may happen if thread.tcache.enabled is used. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tcache_arena_associate</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arena</name> <operator>==</operator> <name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Created manual tcache for tcache.create mallctl. */</comment>
<function><type><name>tcache_t</name> <modifier>*</modifier></type>
<name>tcache_create_explicit</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>stack_offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tcache_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="block">/* Naturally align the pointer stacks. */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>PTR_CEILING</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>stack_nelms</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="block">/* Avoid false cacheline sharing. */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>sz_sa2u</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tcache</name> <operator>=</operator> <call><name>ipallocztm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
	    <argument><expr><call><name>arena_get</name><argument_list>(<argument><expr><name>TSDN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>tcache_init</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>tcache</name> <operator>+</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>stack_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tcache_arena_associate</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><call><name>arena_ichoose</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tcache</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tcache_flush_cache</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name> <init>= <expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>tcache_bin_flush_small</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>SC_NBINS</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhbins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name> <init>= <expr><call><name>tcache_large_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>tcache_bin_flush_large</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tbin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>config_prof</name> <operator>&amp;&amp;</operator> <name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	    <call><name>arena_prof_accum</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name></expr></argument>,
	    <argument><expr><name><name>tcache</name><operator>-&gt;</operator><name>prof_accumbytes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>prof_idump</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_flush</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_available</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tcache_flush_cache</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><call><name>tsd_tcachep_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tcache_destroy</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsd_tcache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>tcache_flush_cache</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name> <init>= <expr><name><name>tcache</name><operator>-&gt;</operator><name>arena</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>tcache_arena_dissociate</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tsd_tcache</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Release the avail array for the TSD embedded auto tcache. */</comment>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>avail_array</name> <init>=
		    <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>-</operator>
		    <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>tcache_bin_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>avail_array</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Release both the tcache struct and avail array. */</comment>
		<expr_stmt><expr><call><name>idalloctm</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * The deallocation and tcache flush above may not trigger decay since
	 * we are on the tcache shutdown path (potentially with non-nominal
	 * tsd).  Manually trigger decay to avoid pathological cases.  Also
	 * include arena 0 because the tcache array is allocated from it.
	 */</comment>
	<expr_stmt><expr><call><name>arena_decay</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>arena_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>arena_nthreads_get</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	    <operator>!</operator><call><name>background_thread_enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Force purging when no threads assigned to the arena anymore. */</comment>
		<expr_stmt><expr><call><name>arena_decay</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>arena_decay</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* For auto tcache (embedded in TSD) only. */</comment>
<function><type><name>void</name></type>
<name>tcache_cleanup</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><call><name>tsd_tcachep_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tcache_available</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tsd_tcache_enabled_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tsd_tcache_enabled_get</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tcache_destroy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avail</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_stats_merge</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name></decl></parameter>, <parameter><decl><type><name>arena_t</name> <modifier>*</modifier></type><name>arena</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Merge and reset tcache stats. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name> <init>= <expr><call><name>tcache_small_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>binshard</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bin_t</name> <modifier>*</modifier></type><name>bin</name> <init>= <expr><call><name>arena_bin_choose_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>arena</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binshard</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>bin</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>nrequests</name></name> <operator>+=</operator> <name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bin</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhbins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>cache_bin_t</name> <modifier>*</modifier></type><name>tbin</name> <init>= <expr><call><name>tcache_large_bin_get</name><argument_list>(<argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>arena_stats_large_flush_nrequests_add</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arena</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
		    <argument><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tbin</name><operator>-&gt;</operator><name>tstats</name><operator>.</operator><name>nrequests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tcaches_create_prep</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tcaches</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tcaches</name> <operator>=</operator> <call><name>base_alloc</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>b0get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcache_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof>
		    <operator>*</operator> <operator>(</operator><name>MALLOCX_TCACHE_MAX</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tcaches</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<goto>goto <name>label_return</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tcaches_avail</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tcaches_past</name> <operator>&gt;</operator> <name>MALLOCX_TCACHE_MAX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<label><name>label_return</name>:</label>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tcaches_create</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>r_ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>tcaches_create_prep</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><call><name>tcache_create_explicit</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>tcaches_t</name> <modifier>*</modifier></type><name>elm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcaches_avail</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>elm</name> <operator>=</operator> <name>tcaches_avail</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tcaches_avail</name> <operator>=</operator> <name><name>tcaches_avail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>=</operator> <name>tcache</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>r_ind</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>elm</name> <operator>-</operator> <name>tcaches</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>elm</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcaches</name><index>[<expr><name>tcaches_past</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>=</operator> <name>tcache</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>r_ind</name> <operator>=</operator> <name>tcaches_past</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tcaches_past</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<label><name>label_return</name>:</label>
	<expr_stmt><expr><call><name>witness_assert_depth</name><argument_list>(<argument><expr><call><name>tsdn_witness_tsdp_get</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tcache_t</name> <modifier>*</modifier></type>
<name>tcaches_elm_remove</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>tcaches_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_reinit</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>allow_reinit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>=</operator> <name>TCACHES_ELM_NEED_REINIT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>elm</name><operator>-&gt;</operator><name>tcache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>==</operator> <name>TCACHES_ELM_NEED_REINIT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>tcache</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcaches_flush</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><call><name>tcaches_elm_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tcaches</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Destroy the tcache; recreate in tcaches_get() if needed. */</comment>
		<expr_stmt><expr><call><name>tcache_destroy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcaches_destroy</name><parameter_list>(<parameter><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>tcaches_t</name> <modifier>*</modifier></type><name>elm</name> <init>= <expr><operator>&amp;</operator><name><name>tcaches</name><index>[<expr><name>ind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tcache_t</name> <modifier>*</modifier></type><name>tcache</name> <init>= <expr><call><name>tcaches_elm_remove</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>elm</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>elm</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tcaches_avail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tcaches_avail</name> <operator>=</operator> <name>elm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><call><name>tsd_tsdn</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>tcache_destroy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>tcache</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tcache_boot</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* If necessary, clamp opt_lg_tcache_max. */</comment>
	<if_stmt><if>if <condition>(<expr><name>opt_lg_tcache_max</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>opt_lg_tcache_max</name><operator>)</operator> <operator>&lt;</operator>
	    <name>SC_SMALL_MAXCLASS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tcache_maxclass</name> <operator>=</operator> <name>SC_SMALL_MAXCLASS</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>tcache_maxclass</name> <operator>=</operator> <operator>(</operator><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>opt_lg_tcache_max</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>, <argument><expr><literal type="string">"tcaches"</literal></expr></argument>, <argument><expr><name>WITNESS_RANK_TCACHES</name></expr></argument>,
	    <argument><expr><name>malloc_mutex_rank_exclusive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>nhbins</name> <operator>=</operator> <call><name>sz_size2index</name><argument_list>(<argument><expr><name>tcache_maxclass</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Initialize tcache_bin_info. */</comment>
	<expr_stmt><expr><name>tcache_bin_info</name> <operator>=</operator> <operator>(</operator><name>cache_bin_info_t</name> <operator>*</operator><operator>)</operator><call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>b0get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nhbins</name>
	    <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cache_bin_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcache_bin_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>stack_nelms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NBINS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bin_infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nregs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>TCACHE_NSLOTS_SMALL_MIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>=</operator>
			    <name>TCACHE_NSLOTS_SMALL_MIN</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>bin_infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nregs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator>
		    <name>TCACHE_NSLOTS_SMALL_MAX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>=</operator>
			    <operator>(</operator><name><name>bin_infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nregs</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>=</operator>
			    <name>TCACHE_NSLOTS_SMALL_MAX</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>stack_nelms</name> <operator>+=</operator> <name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhbins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name> <operator>=</operator> <name>TCACHE_NSLOTS_LARGE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>stack_nelms</name> <operator>+=</operator> <name><name>tcache_bin_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ncached_max</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_tcache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_mutex_prefork</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_tcache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_mutex_postfork_parent</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tcache_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config_prof</name> <operator>&amp;&amp;</operator> <name>opt_tcache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>malloc_mutex_postfork_child</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcaches_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
