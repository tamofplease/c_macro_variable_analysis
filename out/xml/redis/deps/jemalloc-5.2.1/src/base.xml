<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/base.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_BASE_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/extent_mmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/sz.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************************/</comment>
<comment type="block">/* Data. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>base_t</name> <modifier>*</modifier></type><name>b0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metadata_thp_mode_t</name></type> <name>opt_metadata_thp</name> <init>= <expr><name>METADATA_THP_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>metadata_thp_mode_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"disabled"</literal></expr>,
	<expr><literal type="string">"auto"</literal></expr>,
	<expr><literal type="string">"always"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/******************************************************************************/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>metadata_thp_madvise</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>metadata_thp_enabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
	    <operator>(</operator><name>init_system_thp_mode</name> <operator>==</operator> <name>thp_mode_default</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>base_map</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>zero</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>commit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Use huge page sizes and alignment regardless of opt_metadata_thp. */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>alignment</name> <init>= <expr><name>HUGEPAGE</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>extent_hooks</name> <operator>==</operator> <operator>&amp;</operator><name>extent_hooks_default</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>extent_alloc_mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* No arena context as we are creating new arenas. */</comment>
		<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><ternary><condition><expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pre_reentrancy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name><name>extent_hooks</name><operator>-&gt;</operator><name>alloc</name></name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>,
		    <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commit</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>post_reentrancy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>base_unmap</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/*
	 * Cascade through dalloc, decommit, purge_forced, and purge_lazy,
	 * stopping at first success.  This cascade is performed for consistency
	 * with the cascade in extent_dalloc_wrapper() because an application's
	 * custom hooks may not support e.g. dalloc.  This function is only ever
	 * called as a side effect of arena destruction, so although it might
	 * seem pointless to do anything besides dalloc here, the application
	 * may in fact want the end state of all associated virtual memory to be
	 * in some consistent-but-allocated state.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>extent_hooks</name> <operator>==</operator> <operator>&amp;</operator><name>extent_hooks_default</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extent_dalloc_mmap</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_done</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pages_decommit</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_done</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pages_purge_forced</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_done</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pages_purge_lazy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_done</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Nothing worked.  This should never happen. */</comment>
		<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>tsd_t</name> <modifier>*</modifier></type><name>tsd</name> <init>= <expr><ternary><condition><expr><call><name>tsdn_null</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>tsd_fetch</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>tsdn_tsd</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pre_reentrancy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>dalloc</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		    <operator>!</operator><call><name><name>extent_hooks</name><operator>-&gt;</operator><name>dalloc</name></name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
		    <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_post_reentrancy</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>decommit</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		    <operator>!</operator><call><name><name>extent_hooks</name><operator>-&gt;</operator><name>decommit</name></name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>,
		    <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_post_reentrancy</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		    <operator>!</operator><call><name><name>extent_hooks</name><operator>-&gt;</operator><name>purge_forced</name></name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_post_reentrancy</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>extent_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		    <operator>!</operator><call><name><name>extent_hooks</name><operator>-&gt;</operator><name>purge_lazy</name></name><argument_list>(<argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>,
		    <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<goto>goto <name>label_post_reentrancy</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Nothing worked.  That's the application's problem. */</comment>
	<label><name>label_post_reentrancy</name>:</label>
		<expr_stmt><expr><call><name>post_reentrancy</name><argument_list>(<argument><expr><name>tsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>label_done</name>:</label>
	<if_stmt><if>if <condition>(<expr><call><name>metadata_thp_madvise</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Set NOHUGEPAGE after unmap to avoid kernel defrag. */</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>&amp;</operator> <name>HUGEPAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		    <operator>(</operator><name>size</name> <operator>&amp;</operator> <name>HUGEPAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pages_nohuge</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>base_extent_init</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>extent_sn_next</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>sn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sn</name> <operator>=</operator> <operator>*</operator><name>extent_sn_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>extent_sn_next</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>extent_binit</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>base_get_num_blocks</name><parameter_list>(<parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>with_new_block</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>n_blocks</name> <init>= <expr><ternary><condition><expr><name>with_new_block</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n_blocks</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>n_blocks</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>base_auto_thp_switch</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>auto_thp_switched</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Called when adding a new block. */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>should_switch</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>base_ind_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>should_switch</name> <operator>=</operator> <operator>(</operator><call><name>base_get_num_blocks</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator>
		    <name>BASE_AUTO_THP_THRESHOLD</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>should_switch</name> <operator>=</operator> <operator>(</operator><call><name>base_get_num_blocks</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator>
		    <name>BASE_AUTO_THP_THRESHOLD_A0</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>should_switch</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>auto_thp_switched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>config_stats</name> <operator>||</operator> <name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Make the initial blocks THP lazily. */</comment>
	<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <name>HUGEPAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pages_huge</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>+=</operator> <call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator>
			    <call><name>extent_bsize_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>LG_HUGEPAGE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><call><name>base_ind_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>base_extent_bump_alloc_helper</name><parameter_list>(<parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>gap_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>alignment</name> <operator>==</operator> <call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>gap_size</name> <operator>=</operator> <call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>,
	    <argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><name>gap_size</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>extent_bsize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>*</operator><name>gap_size</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>extent_binit</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>extent_addr_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator>
	    <operator>*</operator><name>gap_size</name> <operator>+</operator> <name>size</name><operator>)</operator></expr></argument>, <argument><expr><call><name>extent_bsize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>gap_size</name> <operator>-</operator> <name>size</name></expr></argument>,
	    <argument><expr><call><name>extent_sn_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>base_extent_bump_alloc_post</name><parameter_list>(<parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>gap_size</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>extent_bsize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Compute the index for the largest size class that does not
		 * exceed extent's size.
		 */</comment>
		<decl_stmt><decl><type><name>szind_t</name></type> <name>index_floor</name> <init>=
		    <expr><call><name>sz_size2index</name><argument_list>(<argument><expr><call><name>extent_bsize_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>extent_heap_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>avail</name><index>[<expr><name>index_floor</name></expr>]</index></name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<comment type="block">/*
		 * Add one PAGE to base_resident for every page boundary that is
		 * crossed by the new allocation. Adjust n_thp similarly when
		 * metadata_thp is enabled.
		 */</comment>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>+=</operator> <call><name>PAGE_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call> <operator>-</operator>
		    <call><name>PAGE_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>-</operator> <name>gap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>resident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>metadata_thp_madvise</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt_metadata_thp</name> <operator>==</operator>
		    <name>metadata_thp_always</name> <operator>||</operator> <name><name>base</name><operator>-&gt;</operator><name>auto_thp_switched</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>+=</operator> <operator>(</operator><call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call>
			    <operator>-</operator> <call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>-</operator> <name>gap_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator>
			    <name>LG_HUGEPAGE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>mapped</name></name> <operator>&gt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>&lt;&lt;</operator> <name>LG_HUGEPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>base_extent_bump_alloc</name><parameter_list>(<parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>gap_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>base_extent_bump_alloc_helper</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gap_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>base_extent_bump_alloc_post</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>gap_size</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate a block of virtual memory that is large enough to start with a
 * base_block_t header, followed by an object of specified size and alignment.
 * On success a pointer to the initialized base_block_t header is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>base_block_t</name> <modifier>*</modifier></type>
<name>base_block_alloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>pszind_t</name> <modifier>*</modifier></type><name>pind_last</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>extent_sn_next</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>alignment</name> <operator>=</operator> <call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name> <init>= <expr><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>gap_size</name> <init>= <expr><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>header_size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>-</operator>
	    <name>header_size</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * Create increasingly larger blocks in order to limit the total number
	 * of disjoint virtual memory ranges.  Choose the next size in the page
	 * size class series (skipping size classes that are not a multiple of
	 * HUGEPAGE), or a size large enough to satisfy the requested size and
	 * alignment, whichever is larger.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>min_block_size</name> <init>= <expr><call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><call><name>sz_psz2u</name><argument_list>(<argument><expr><name>header_size</name> <operator>+</operator> <name>gap_size</name>
	    <operator>+</operator> <name>usize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pszind_t</name></type> <name>pind_next</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>pind_last</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>SC_LARGE_MAXCLASS</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
	    <expr><operator>*</operator><name>pind_last</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>*</operator><name>pind_last</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>next_block_size</name> <init>= <expr><call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><call><name>sz_pind2sz</name><argument_list>(<argument><expr><name>pind_next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>min_block_size</name> <operator>&gt;</operator> <name>next_block_size</name><operator>)</operator></expr> ?</condition><then> <expr><name>min_block_size</name></expr>
	    </then><else>: <expr><name>next_block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>base_block_t</name> <operator>*</operator><operator>)</operator><call><name>base_map</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>,
	    <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>metadata_thp_madvise</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>block</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>addr</name> <operator>&amp;</operator> <name>HUGEPAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		    <operator>(</operator><name>block_size</name> <operator>&amp;</operator> <name>HUGEPAGE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_always</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pages_huge</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_auto</name> <operator>&amp;&amp;</operator>
		    <name>base</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* base != NULL indicates this is not a new base. */</comment>
			<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>base_auto_thp_switch</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>auto_thp_switched</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>pages_huge</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>pind_last</name> <operator>=</operator> <call><name>sz_psz2ind</name><argument_list>(<argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>block_size</name> <operator>&gt;=</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>base_extent_init</name><argument_list>(<argument><expr><name>extent_sn_next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>,
	    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>block</name> <operator>+</operator> <name>header_size</name><operator>)</operator></expr></argument>, <argument><expr><name>block_size</name> <operator>-</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate an extent that is at least as large as specified size, with
 * specified alignment.
 */</comment>
<function><type><specifier>static</specifier> <name>extent_t</name> <modifier>*</modifier></type>
<name>base_extent_alloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_assert_owner</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name> <init>= <expr><call><name>base_extent_hooks_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * Drop mutex during base_block_alloc(), because an extent hook will be
	 * called.
	 */</comment>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>base_block_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>,
	    <argument><expr><call><name>base_ind_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>pind_last</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>extent_sn_next</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
	    <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>+=</operator> <call><name>PAGE_CEILING</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>mapped</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>metadata_thp_madvise</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
		    <operator>!</operator><operator>(</operator><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_auto</name>
		      <operator>&amp;&amp;</operator> <operator>!</operator><name><name>base</name><operator>-&gt;</operator><name>auto_thp_switched</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>+=</operator> <call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator>
			    <name>LG_HUGEPAGE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>resident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>&lt;&lt;</operator> <name>LG_HUGEPAGE</name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>extent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>base_t</name> <modifier>*</modifier></type>
<name>b0get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>b0</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>base_t</name> <modifier>*</modifier></type>
<name>base_new</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>pszind_t</name></type> <name>pind_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>extent_sn_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>base_block_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>pind_last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent_sn_next</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>QUANTUM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>gap_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>base_alignment</name> <init>= <expr><name>CACHELINE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>base_size</name> <init>= <expr><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>base_alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><operator>(</operator><name>base_t</name> <operator>*</operator><operator>)</operator><call><name>base_extent_bump_alloc_helper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>,
	    <argument><expr><operator>&amp;</operator><name>gap_size</name></expr></argument>, <argument><expr><name>base_size</name></expr></argument>, <argument><expr><name>base_alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>ind</name></name> <operator>=</operator> <name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>extent_hooks</name></name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>, <argument><expr><name>WITNESS_RANK_BASE</name></expr></argument>,
	    <argument><expr><name>malloc_mutex_rank_exclusive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>base_unmap</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>pind_last</name></name> <operator>=</operator> <name>pind_last</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>extent_sn_next</name></name> <operator>=</operator> <name>extent_sn_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>auto_thp_switched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>szind_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>extent_heap_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>avail</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>config_stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>=</operator> <call><name>PAGE_CEILING</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>mapped</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>opt_metadata_thp</name> <operator>==</operator> <name>metadata_thp_always</name><operator>)</operator> <operator>&amp;&amp;</operator>
		    <call><name>metadata_thp_madvise</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>HUGEPAGE_CEILING</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base_block_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
		    <operator>&gt;&gt;</operator> <name>LG_HUGEPAGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>resident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name> <operator>&lt;&lt;</operator> <name>LG_HUGEPAGE</name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>base_extent_bump_alloc_post</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>, <argument><expr><name>gap_size</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
	    <argument><expr><name>base_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>base</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>base_delete</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name> <init>= <expr><call><name>base_extent_hooks_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>
	<do>do <block>{<block_content>
		<decl_stmt><decl><type><name>base_block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>next</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>base_unmap</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><call><name>base_ind_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>,
		    <argument><expr><name><name>block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>extent_hooks_t</name> <modifier>*</modifier></type>
<name>base_extent_hooks_get</name><parameter_list>(<parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>extent_hooks_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>extent_hooks</name></name></expr></argument>,
	    <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>extent_hooks_t</name> <modifier>*</modifier></type>
<name>base_extent_hooks_set</name><parameter_list>(<parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>extent_hooks</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>extent_hooks_t</name> <modifier>*</modifier></type><name>old_extent_hooks</name> <init>= <expr><call><name>base_extent_hooks_get</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>extent_hooks</name></name></expr></argument>, <argument><expr><name>extent_hooks</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>old_extent_hooks</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>base_alloc_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>esn</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>alignment</name> <operator>=</operator> <call><name>QUANTUM_CEILING</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>usize</name> <init>= <expr><call><name>ALIGNMENT_CEILING</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name>usize</name> <operator>+</operator> <name>alignment</name> <operator>-</operator> <name>QUANTUM</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>szind_t</name></type> <name>i</name> <init>= <expr><call><name>sz_size2index</name><argument_list>(<argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SC_NSIZES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>extent</name> <operator>=</operator> <call><name>extent_heap_remove_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>avail</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Use existing space. */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Try to allocate more space. */</comment>
		<expr_stmt><expr><name>extent</name> <operator>=</operator> <call><name>base_extent_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<goto>goto <name>label_return</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>base_extent_bump_alloc</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, <argument><expr><name>usize</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>esn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>esn</name> <operator>=</operator> <call><name>extent_sn_get</name><argument_list>(<argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>label_return</name>:</label>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * base_alloc() returns zeroed memory, which is always demand-zeroed for the
 * auto arenas, in order to make multi-page sparse data structures such as radix
 * tree nodes efficient with respect to physical memory usage.  Upon success a
 * pointer to at least size bytes with specified alignment is returned.  Note
 * that size is rounded up to the nearest multiple of alignment to avoid false
 * sharing.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>base_alloc</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>base_alloc_impl</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>extent_t</name> <modifier>*</modifier></type>
<name>base_alloc_extent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>esn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>extent_t</name> <modifier>*</modifier></type><name>extent</name> <init>= <expr><call><name>base_alloc_impl</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extent_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
	    <argument><expr><name>CACHELINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>esn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>extent_esn_set</name><argument_list>(<argument><expr><name>extent</name></expr></argument>, <argument><expr><name>esn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>extent</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>base_stats_get</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>allocated</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>resident</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>mapped</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n_thp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>cassert</name><argument_list>(<argument><expr><name>config_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>resident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>resident</name></name> <operator>&lt;=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>allocated</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>resident</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>resident</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>mapped</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>mapped</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>n_thp</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>n_thp</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>base_prefork</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_prefork</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>base_postfork_parent</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_postfork_parent</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>base_postfork_child</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>base_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_postfork_child</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>base_boot</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>base_new</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>extent_hooks_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>extent_hooks_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>b0</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
