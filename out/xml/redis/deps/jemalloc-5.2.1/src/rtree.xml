<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/jemalloc-5.2.1/src/rtree.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JEMALLOC_RTREE_C_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_preamble.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/jemalloc_internal_includes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jemalloc/internal/mutex.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Only the most significant bits of keys passed to rtree_{read,write}() are
 * used.
 */</comment>
<function><type><name>bool</name></type>
<name>rtree_new</name><parameter_list>(<parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>zeroed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_JET</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zeroed</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtree_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Clear root. */</comment>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zeroed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>malloc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>, <argument><expr><literal type="string">"rtree"</literal></expr></argument>, <argument><expr><name>WITNESS_RANK_RTREE</name></expr></argument>,
	    <argument><expr><name>malloc_mutex_rank_exclusive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_node_alloc_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nelms</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>rtree_node_elm_t</name> <operator>*</operator><operator>)</operator><call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>b0get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nelms</name> <operator>*</operator>
	    <sizeof>sizeof<argument_list>(<argument><expr><name>rtree_node_elm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>rtree_node_alloc_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>rtree_node_alloc</name> <init>= <expr><name>rtree_node_alloc_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rtree_node_dalloc_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Nodes are never deleted during normal operation. */</comment>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>rtree_node_dalloc_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>rtree_node_dalloc</name> <init>=
    <expr><name>rtree_node_dalloc_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>rtree_leaf_elm_t</name> <modifier>*</modifier></type>
<name>rtree_leaf_alloc_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nelms</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>rtree_leaf_elm_t</name> <operator>*</operator><operator>)</operator><call><name>base_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><call><name>b0get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nelms</name> <operator>*</operator>
	    <sizeof>sizeof<argument_list>(<argument><expr><name>rtree_leaf_elm_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>CACHELINE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>rtree_leaf_alloc_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>rtree_leaf_alloc</name> <init>= <expr><name>rtree_leaf_alloc_impl</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rtree_leaf_dalloc_impl</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Leaves are never deleted during normal operation. */</comment>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>rtree_leaf_dalloc_t</name> <modifier>*</modifier><name>JET_MUTABLE</name></type> <name>rtree_leaf_dalloc</name> <init>=
    <expr><name>rtree_leaf_dalloc_impl</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JEMALLOC_JET</name></cpp:ifdef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>rtree_delete_subtree</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>subtree</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nchildren</name> <init>= <expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>rtree_levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>level</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>RTREE_HEIGHT</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nchildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name> <init>=
			    <expr><operator>(</operator><name>rtree_node_elm_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subtree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>child</name></expr></argument>,
			    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rtree_delete_subtree</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator>
				    <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nchildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name> <init>=
			    <expr><operator>(</operator><name>rtree_leaf_elm_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subtree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>child</name></expr></argument>,
			    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>leaf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rtree_leaf_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>subtree</name> <operator>!=</operator> <name><name>rtree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rtree_node_dalloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>subtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>rtree_delete</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>rtree_delete_subtree</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name><name>rtree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_node_init</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>,
    <parameter><decl><type><name>atomic_p_t</name> <modifier>*</modifier></type><name>elmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * If *elmp is non-null, then it was initialized with the init lock
	 * held, so we can get by with 'relaxed' here.
	 */</comment>
	<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>atomic_load_p</name><argument_list>(<argument><expr><name>elmp</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rtree_node_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
		    <name><name>rtree_levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/*
		 * Even though we hold the lock, a later reader might not; we
		 * need release semantics.
		 */</comment>
		<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><name>elmp</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_leaf_elm_t</name> <modifier>*</modifier></type>
<name>rtree_leaf_init</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>atomic_p_t</name> <modifier>*</modifier></type><name>elmp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>malloc_mutex_lock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * If *elmp is non-null, then it was initialized with the init lock
	 * held, so we can get by with 'relaxed' here.
	 */</comment>
	<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name> <init>= <expr><call><name>atomic_load_p</name><argument_list>(<argument><expr><name>elmp</name></expr></argument>, <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>leaf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>rtree_leaf_alloc</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><call><name>ZU</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
		    <name><name>rtree_levels</name><index>[<expr><name>RTREE_HEIGHT</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>leaf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/*
		 * Even though we hold the lock, a later reader might not; we
		 * need release semantics.
		 */</comment>
		<expr_stmt><expr><call><name>atomic_store_p</name><argument_list>(<argument><expr><name>elmp</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>malloc_mutex_unlock</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtree</name><operator>-&gt;</operator><name>init_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>leaf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>rtree_node_valid</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>node</name> <operator>!=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>rtree_leaf_valid</name><parameter_list>(<parameter><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>leaf</name> <operator>!=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_child_node_tryread</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dependent</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>rtree_node_elm_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr></argument>,
		    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>rtree_node_elm_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr></argument>,
		    <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>dependent</name> <operator>||</operator> <name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_node_elm_t</name> <modifier>*</modifier></type>
<name>rtree_child_node_read</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rtree_child_node_tryread</name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>dependent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependent</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>rtree_node_valid</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>rtree_node_init</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>dependent</name> <operator>||</operator> <name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_leaf_elm_t</name> <modifier>*</modifier></type>
<name>rtree_child_leaf_tryread</name><parameter_list>(<parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dependent</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>(</operator><name>rtree_leaf_elm_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr></argument>,
		    <argument><expr><name>ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>leaf</name> <operator>=</operator> <operator>(</operator><name>rtree_leaf_elm_t</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr></argument>,
		    <argument><expr><name>ATOMIC_ACQUIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>dependent</name> <operator>||</operator> <name>leaf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>leaf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rtree_leaf_elm_t</name> <modifier>*</modifier></type>
<name>rtree_child_leaf_read</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>rtree_child_leaf_tryread</name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>dependent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependent</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>rtree_leaf_valid</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>leaf</name> <operator>=</operator> <call><name>rtree_leaf_init</name><argument_list>(<argument><expr><name>tsdn</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elm</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>dependent</name> <operator>||</operator> <name>leaf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>leaf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type>
<name>rtree_leaf_elm_lookup_hard</name><parameter_list>(<parameter><decl><type><name>tsdn_t</name> <modifier>*</modifier></type><name>tsdn</name></decl></parameter>, <parameter><decl><type><name>rtree_t</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>, <parameter><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>rtree_ctx</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dependent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init_missing</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rtree_node_elm_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rtree_leaf_elm_t</name> <modifier>*</modifier></type><name>leaf</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RTREE_HEIGHT</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>rtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>leaf</name> <operator>=</operator> <name><name>rtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>config_debug</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uintptr_t</name></type> <name>leafkey</name> <init>= <expr><call><name>rtree_leafkey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTREE_CTX_NCACHE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rtree_ctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>leafkey</name> <operator>!=</operator> <name>leafkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTREE_CTX_NCACHE_L2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rtree_ctx</name><operator>-&gt;</operator><name>l2_cache</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>leafkey</name> <operator>!=</operator> <name>leafkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_GET_CHILD</name><parameter_list>(<parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{					\
		assert(level &lt; RTREE_HEIGHT-1);				\
		if (level != 0 &amp;&amp; !dependent &amp;&amp;				\
		    unlikely(!rtree_node_valid(node))) {		\
			return NULL;					\
		}							\
		uintptr_t subkey = rtree_subkey(key, level);		\
		if (level + 2 &lt; RTREE_HEIGHT) {				\
			node = init_missing ?				\
			    rtree_child_node_read(tsdn, rtree,		\
			    &amp;node[subkey], level, dependent) :		\
			    rtree_child_node_tryread(&amp;node[subkey],	\
			    dependent);					\
		} else {						\
			leaf = init_missing ?				\
			    rtree_child_leaf_read(tsdn, rtree,		\
			    &amp;node[subkey], level, dependent) :		\
			    rtree_child_leaf_tryread(&amp;node[subkey],	\
			    dependent);					\
		}							\
	}</cpp:value></cpp:define>
	<comment type="block">/*
	 * Cache replacement upon hard lookup (i.e. L1 &amp; L2 rtree cache miss):
	 * (1) evict last entry in L2 cache; (2) move the collision slot from L1
	 * cache down to L2; and 3) fill L1.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTREE_GET_LEAF</name><parameter_list>(<parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{						\
		assert(level == RTREE_HEIGHT-1);			\
		if (!dependent &amp;&amp; unlikely(!rtree_leaf_valid(leaf))) {	\
			return NULL;					\
		}							\
		if (RTREE_CTX_NCACHE_L2 &gt; 1) {				\
			memmove(&amp;rtree_ctx-&gt;l2_cache[1],		\
			    &amp;rtree_ctx-&gt;l2_cache[0],			\
			    sizeof(rtree_ctx_cache_elm_t) *		\
			    (RTREE_CTX_NCACHE_L2 - 1));			\
		}							\
		size_t slot = rtree_cache_direct_map(key);		\
		rtree_ctx-&gt;l2_cache[0].leafkey =			\
		    rtree_ctx-&gt;cache[slot].leafkey;			\
		rtree_ctx-&gt;l2_cache[0].leaf =				\
		    rtree_ctx-&gt;cache[slot].leaf;			\
		uintptr_t leafkey = rtree_leafkey(key);			\
		rtree_ctx-&gt;cache[slot].leafkey = leafkey;		\
		rtree_ctx-&gt;cache[slot].leaf = leaf;			\
		uintptr_t subkey = rtree_subkey(key, level);		\
		return &amp;leaf[subkey];					\
	}</cpp:value></cpp:define>
	<if_stmt><if>if <condition>(<expr><name>RTREE_HEIGHT</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<macro><name>RTREE_GET_CHILD</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>RTREE_HEIGHT</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<macro><name>RTREE_GET_CHILD</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>RTREE_HEIGHT</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTREE_HEIGHT</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<macro><name>RTREE_GET_CHILD</name><argument_list>(<argument>i</argument>)</argument_list></macro>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<macro><name>RTREE_GET_LEAF</name><argument_list>(<argument>RTREE_HEIGHT-<literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RTREE_GET_CHILD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RTREE_GET_LEAF</name></cpp:undef>
	<expr_stmt><expr><call><name>not_reached</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rtree_ctx_data_init</name><parameter_list>(<parameter><decl><type><name>rtree_ctx_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTREE_CTX_NCACHE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>rtree_ctx_cache_elm_t</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>leafkey</name></name> <operator>=</operator> <name>RTREE_LEAFKEY_INVALID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RTREE_CTX_NCACHE_L2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>rtree_ctx_cache_elm_t</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>l2_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>leafkey</name></name> <operator>=</operator> <name>RTREE_LEAFKEY_INVALID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>leaf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
