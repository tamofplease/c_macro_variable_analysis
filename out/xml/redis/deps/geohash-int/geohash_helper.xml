<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/geohash-int/geohash_helper.c"><comment type="block">/*
 * Copyright (c) 2013-2014, yinqiwen &lt;yinqiwen@gmail.com&gt;
 * Copyright (c) 2014, Matt Stancliff &lt;matt@genges.com&gt;.
 * Copyright (c) 2015, Salvatore Sanfilippo &lt;antirez@gmail.com&gt;.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of Redis nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* This is a C++ to C conversion from the ardb project.
 * This file started out as:
 * https://github.com/yinqiwen/ardb/blob/d42503/src/geo/geohash_helper.cpp
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"geohash_helper.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define> <comment type="line">// for C</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_R</name></cpp:macro> <cpp:value>(M_PI / 180.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MAJOR</name></cpp:macro> <cpp:value>6378137.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_MINOR</name></cpp:macro> <cpp:value>6356752.3142</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO</name></cpp:macro> <cpp:value>(R_MINOR / R_MAJOR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECCENT</name></cpp:macro> <cpp:value>(sqrt(1.0 - (RATIO *RATIO)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM</name></cpp:macro> <cpp:value>(0.5 * ECCENT)</cpp:value></cpp:define>

<comment type="line" format="doxygen">/// @brief The usual PI/180 constant</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>DEG_TO_RAD</name> <init>= <expr><literal type="number">0.017453292519943295769236907684886</literal></expr></init></decl>;</decl_stmt>
<comment type="line" format="doxygen">/// @brief Earth's quatratic mean radius for WGS-84</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EARTH_RADIUS_IN_METERS</name> <init>= <expr><literal type="number">6372797.560856</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>MERCATOR_MAX</name> <init>= <expr><literal type="number">20037726.37</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>MERCATOR_MIN</name> <init>= <expr><operator>-</operator><literal type="number">20037726.37</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>deg_rad</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>ang</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ang</name> <operator>*</operator> <name>D_R</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>rad_deg</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>ang</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ang</name> <operator>/</operator> <name>D_R</name></expr>;</return> </block_content>}</block></function>

<comment type="block">/* You must *ONLY* estimate steps when you are encoding.
 * If you are decoding, always decode to GEO_STEP_MAX (26). */</comment>
<function><type><name>uint8_t</name></type> <name>geohashEstimateStepsByRadius</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>range_meters</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>range_meters</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">26</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>range_meters</name> <operator>&lt;</operator> <name>MERCATOR_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>range_meters</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>step</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>step</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* Make sure range is included in the worst case. */</comment>
    <comment type="block">/* Wider range torwards the poles... Note: it is possible to do better
     * than this approximation by computing the distance between meridians
     * at this latitude, but this does the trick for now. */</comment>
    <if_stmt><if>if <condition>(<expr><name>lat</name> <operator>&gt;</operator> <literal type="number">67</literal> <operator>||</operator> <name>lat</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">67</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>lat</name> <operator>&gt;</operator> <literal type="number">80</literal> <operator>||</operator> <name>lat</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Frame to valid range. */</comment>
    <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>step</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashBitsComparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* If step not equal, compare on step.  Else, compare on bits. */</comment>
    <return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>step</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>step</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>step</name></name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>bits</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>bits</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashBoundingBox</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radius_meters</name></decl></parameter>,
                       <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>bounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bounds</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>lonr</name></decl>, <decl><type ref="prev"/><name>latr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>lonr</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>latr</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>radius_meters</name> <operator>&gt;</operator> <name>EARTH_RADIUS_IN_METERS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>radius_meters</name> <operator>=</operator> <name>EARTH_RADIUS_IN_METERS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>distance</name> <init>= <expr><name>radius_meters</name> <operator>/</operator> <name>EARTH_RADIUS_IN_METERS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>min_latitude</name> <init>= <expr><name>latr</name> <operator>-</operator> <name>distance</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>max_latitude</name> <init>= <expr><name>latr</name> <operator>+</operator> <name>distance</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Note: we're being lazy and not accounting for coordinates near poles */</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>min_longitude</name></decl>, <decl><type ref="prev"/><name>max_longitude</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>difference_longitude</name> <init>= <expr><call><name>asin</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>distance</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>cos</name><argument_list>(<argument><expr><name>latr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>min_longitude</name> <operator>=</operator> <name>lonr</name> <operator>-</operator> <name>difference_longitude</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_longitude</name> <operator>=</operator> <name>lonr</name> <operator>+</operator> <name>difference_longitude</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rad_deg</name><argument_list>(<argument><expr><name>min_longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>rad_deg</name><argument_list>(<argument><expr><name>min_latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>rad_deg</name><argument_list>(<argument><expr><name>max_longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>rad_deg</name><argument_list>(<argument><expr><name>max_latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>GeoHashRadius</name></type> <name>geohashGetAreasByRadius</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radius_meters</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>GeoHashRange</name></type> <name>long_range</name></decl>, <decl><type ref="prev"/><name>lat_range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GeoHashRadius</name></type> <name>radius</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GeoHashBits</name></type> <name>hash</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GeoHashNeighbors</name></type> <name>neighbors</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GeoHashArea</name></type> <name>area</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>min_lon</name></decl>, <decl><type ref="prev"/><name>max_lon</name></decl>, <decl><type ref="prev"/><name>min_lat</name></decl>, <decl><type ref="prev"/><name>max_lat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>bounds</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>steps</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>geohashBoundingBox</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>, <argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>radius_meters</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>min_lon</name> <operator>=</operator> <name><name>bounds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>min_lat</name> <operator>=</operator> <name><name>bounds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_lon</name> <operator>=</operator> <name><name>bounds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_lat</name> <operator>=</operator> <name><name>bounds</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>steps</name> <operator>=</operator> <call><name>geohashEstimateStepsByRadius</name><argument_list>(<argument><expr><name>radius_meters</name></expr></argument>,<argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohashGetCoordRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>long_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lat_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohashEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>long_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lat_range</name></expr></argument>, <argument><expr><name>longitude</name></expr></argument>, <argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohashNeighbors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohashGetCoordRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>long_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lat_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>, <argument><expr><name>lat_range</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>latitude</name><operator>.</operator><name>min</name></name> <operator>&lt;</operator> <name>min_lat</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>latitude</name><operator>.</operator><name>max</name></name> <operator>&gt;</operator> <name>max_lat</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>longitude</name><operator>.</operator><name>min</name></name> <operator>&lt;</operator> <name>min_lon</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_west</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>area</name><operator>.</operator><name>longitude</name><operator>.</operator><name>max</name></name> <operator>&gt;</operator> <name>max_lon</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>south_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GZERO</name><argument_list>(<argument><expr><name><name>neighbors</name><operator>.</operator><name>north_east</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>radius</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>radius</name><operator>.</operator><name>neighbors</name></name> <operator>=</operator> <name>neighbors</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>radius</name><operator>.</operator><name>area</name></name> <operator>=</operator> <name>area</name></expr>;</expr_stmt>
    <return>return <expr><name>radius</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GeoHashRadius</name></type> <name>geohashGetAreasByRadiusWGS84</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>,
                                           <parameter><decl><type><name>double</name></type> <name>radius_meters</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>geohashGetAreasByRadius</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>, <argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>radius_meters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GeoHashFix52Bits</name></type> <name>geohashAlign52Bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>bits</name> <init>= <expr><name><name>hash</name><operator>.</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name><name>hash</name><operator>.</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Calculate distance using haversin great circle distance formula. */</comment>
<function><type><name>double</name></type> <name>geohashGetDistance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>lon1d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lat1d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lon2d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lat2d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>lat1r</name></decl>, <decl><type ref="prev"/><name>lon1r</name></decl>, <decl><type ref="prev"/><name>lat2r</name></decl>, <decl><type ref="prev"/><name>lon2r</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>lat1r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lat1d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lon1r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lon1d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lat2r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lat2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lon2r</name> <operator>=</operator> <call><name>deg_rad</name><argument_list>(<argument><expr><name>lon2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>lat2r</name> <operator>-</operator> <name>lat1r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>lon2r</name> <operator>-</operator> <name>lon1r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2.0</literal> <operator>*</operator> <name>EARTH_RADIUS_IN_METERS</name> <operator>*</operator>
           <call><name>asin</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>u</name> <operator>*</operator> <name>u</name> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>lat1r</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>lat2r</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>v</name> <operator>*</operator> <name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashGetDistanceIfInRadius</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>,
                                 <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radius</name></decl></parameter>,
                                 <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>distance</name> <operator>=</operator> <call><name>geohashGetDistance</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>distance</name> <operator>&gt;</operator> <name>radius</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashGetDistanceIfInRadiusWGS84</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x2</name></decl></parameter>,
                                      <parameter><decl><type><name>double</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>radius</name></decl></parameter>,
                                      <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>geohashGetDistanceIfInRadius</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
