<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/deps/geohash-int/geohash.c"><comment type="block">/*
 * Copyright (c) 2013-2014, yinqiwen &lt;yinqiwen@gmail.com&gt;
 * Copyright (c) 2014, Matt Stancliff &lt;matt@genges.com&gt;.
 * Copyright (c) 2015, Salvatore Sanfilippo &lt;antirez@gmail.com&gt;.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of Redis nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"geohash.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * Hashing works like this:
 * Divide the world into 4 buckets.  Label each one as such:
 *  -----------------
 *  |       |       |
 *  |       |       |
 *  | 0,1   | 1,1   |
 *  -----------------
 *  |       |       |
 *  |       |       |
 *  | 0,0   | 1,0   |
 *  -----------------
 */</comment>

<comment type="block">/* Interleave lower bits of x and y, so the bits of x
 * are in the even positions and bits from y in the odd;
 * x and y must initially be less than 2**32 (65536).
 * From:  https://graphics.stanford.edu/~seander/bithacks.html#InterleaveBMN
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>interleave64</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>xlo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ylo</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>B</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5555555555555555ULL</literal></expr>, <expr><literal type="number">0x3333333333333333ULL</literal></expr>,
                                 <expr><literal type="number">0x0F0F0F0F0F0F0F0FULL</literal></expr>, <expr><literal type="number">0x00FF00FF00FF00FFULL</literal></expr>,
                                 <expr><literal type="number">0x0000FFFF0000FFFFULL</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>S</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>xlo</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name> <init>= <expr><name>ylo</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <return>return <expr><name>x</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* reverse the interleave process
 * derived from http://stackoverflow.com/questions/4909263
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>deinterleave64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>interleaved</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>B</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5555555555555555ULL</literal></expr>, <expr><literal type="number">0x3333333333333333ULL</literal></expr>,
                                 <expr><literal type="number">0x0F0F0F0F0F0F0F0FULL</literal></expr>, <expr><literal type="number">0x00FF00FF00FF00FFULL</literal></expr>,
                                 <expr><literal type="number">0x0000FFFF0000FFFFULL</literal></expr>, <expr><literal type="number">0x00000000FFFFFFFFULL</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>S</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>interleaved</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name> <init>= <expr><name>interleaved</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

    <return>return <expr><name>x</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>geohashGetCoordRange</name><parameter_list>(<parameter><decl><type><name>GeoHashRange</name> <modifier>*</modifier></type><name>long_range</name></decl></parameter>, <parameter><decl><type><name>GeoHashRange</name> <modifier>*</modifier></type><name>lat_range</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* These are constraints from EPSG:900913 / EPSG:3785 / OSGEO:41001 */</comment>
    <comment type="block">/* We can't geocode at the north/south pole. */</comment>
    <expr_stmt><expr><name><name>long_range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>GEO_LONG_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>long_range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>GEO_LONG_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lat_range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>GEO_LAT_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lat_range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>GEO_LAT_MIN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashEncode</name><parameter_list>(<parameter><decl><type><name>GeoHashRange</name> <modifier>*</modifier></type><name>long_range</name></decl></parameter>, <parameter><decl><type><name>GeoHashRange</name> <modifier>*</modifier></type><name>lat_range</name></decl></parameter>,
                  <parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>step</name></decl></parameter>,
                  <parameter><decl><type><name>GeoHashBits</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Check basic arguments sanity. */</comment>
    <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>step</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>step</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>RANGEPISZERO</name><argument_list>(<argument><expr><name>lat_range</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RANGEPISZERO</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Return an error when trying to index outside the supported
     * constraints. */</comment>
    <if_stmt><if>if <condition>(<expr><name>longitude</name> <operator>&gt;</operator> <literal type="number">180</literal> <operator>||</operator> <name><name>longitude</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">180</literal> <operator>||</operator>
        <name>latitude</name></expr></argument> &gt;</argument_list></name> <literal type="number">85.05112878</literal> <operator>||</operator> <name>latitude</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">85.05112878</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>latitude</name> <argument_list type="generic">&lt; <argument><expr><name><name>lat_range</name><operator>-&gt;</operator><name>min</name></name> <operator>||</operator> <name>latitude</name></expr></argument> &gt;</argument_list></name> <name><name>lat_range</name><operator>-&gt;</operator><name>max</name></name> <operator>||</operator>
        <name><name>longitude</name> <argument_list type="generic">&lt; <argument><expr><name><name>long_range</name><operator>-&gt;</operator><name>min</name></name> <operator>||</operator> <name>longitude</name></expr></argument> &gt;</argument_list></name> <name><name>long_range</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>lat_offset</name> <init>=
        <expr><operator>(</operator><name>latitude</name> <operator>-</operator> <name><name>lat_range</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>lat_range</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>lat_range</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>long_offset</name> <init>=
        <expr><operator>(</operator><name>longitude</name> <operator>-</operator> <name><name>long_range</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>long_range</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>long_range</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* convert to fixed point based on the step size */</comment>
    <expr_stmt><expr><name>lat_offset</name> <operator>*=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>step</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>long_offset</name> <operator>*=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>step</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><name>interleave64</name><argument_list>(<argument><expr><name>lat_offset</name></expr></argument>, <argument><expr><name>long_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashEncodeType</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>GeoHashBits</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>GeoHashRange</name></type> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>geohashGetCoordRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>geohashEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>longitude</name></expr></argument>, <argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashEncodeWGS84</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>step</name></decl></parameter>,
                       <parameter><decl><type><name>GeoHashBits</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>geohashEncodeType</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>, <argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashDecode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashRange</name></type> <name>long_range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GeoHashRange</name></type> <name>lat_range</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>GeoHashArea</name> <modifier>*</modifier></type><name>area</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>HASHISZERO</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>area</name> <operator>||</operator> <call><name>RANGEISZERO</name><argument_list>(<argument><expr><name>lat_range</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>RANGEISZERO</name><argument_list>(<argument><expr><name>long_range</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>step</name> <init>= <expr><name><name>hash</name><operator>.</operator><name>step</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash_sep</name> <init>= <expr><call><name>deinterleave64</name><argument_list>(<argument><expr><name><name>hash</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* hash = [LAT][LONG] */</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>lat_scale</name> <init>= <expr><name><name>lat_range</name><operator>.</operator><name>max</name></name> <operator>-</operator> <name><name>lat_range</name><operator>.</operator><name>min</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>long_scale</name> <init>= <expr><name><name>long_range</name><operator>.</operator><name>max</name></name> <operator>-</operator> <name><name>long_range</name><operator>.</operator><name>min</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ilato</name> <init>= <expr><name>hash_sep</name></expr></init></decl>;</decl_stmt>       <comment type="block">/* get lat part of deinterleaved hash */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ilono</name> <init>= <expr><name>hash_sep</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* shift over to get long part of hash */</comment>

    <comment type="block">/* divide by 2**step.
     * Then, for 0-1 coordinate, multiply times scale and add
       to the min to get the absolute coordinate. */</comment>
    <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>latitude</name><operator>.</operator><name>min</name></name> <operator>=</operator>
        <name><name>lat_range</name><operator>.</operator><name>min</name></name> <operator>+</operator> <operator>(</operator><name>ilato</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>lat_scale</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>latitude</name><operator>.</operator><name>max</name></name> <operator>=</operator>
        <name><name>lat_range</name><operator>.</operator><name>min</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ilato</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>lat_scale</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>longitude</name><operator>.</operator><name>min</name></name> <operator>=</operator>
        <name><name>long_range</name><operator>.</operator><name>min</name></name> <operator>+</operator> <operator>(</operator><name>ilono</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>long_scale</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>longitude</name><operator>.</operator><name>max</name></name> <operator>=</operator>
        <name><name>long_range</name><operator>.</operator><name>min</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ilono</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>long_scale</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashDecodeType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>GeoHashArea</name> <modifier>*</modifier></type><name>area</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>GeoHashRange</name></type> <name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>geohashGetCoordRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>geohashDecode</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashDecodeWGS84</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>GeoHashArea</name> <modifier>*</modifier></type><name>area</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>geohashDecodeType</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashDecodeAreaToLongLat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashArea</name> <modifier>*</modifier></type><name>area</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>xy</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xy</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>xy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>area</name><operator>-&gt;</operator><name>longitude</name><operator>.</operator><name>min</name></name> <operator>+</operator> <name><name>area</name><operator>-&gt;</operator><name>longitude</name><operator>.</operator><name>max</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>area</name><operator>-&gt;</operator><name>latitude</name><operator>.</operator><name>min</name></name> <operator>+</operator> <name><name>area</name><operator>-&gt;</operator><name>latitude</name><operator>.</operator><name>max</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashDecodeToLongLatType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>xy</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>GeoHashArea</name></type> <name>area</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xy</name> <operator>||</operator> <operator>!</operator><call><name>geohashDecodeType</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>geohashDecodeAreaToLongLat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>xy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>geohashDecodeToLongLatWGS84</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>xy</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>geohashDecodeToLongLatType</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>xy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>geohash_move_x</name><parameter_list>(<parameter><decl><type><name>GeoHashBits</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">0xaaaaaaaaaaaaaaaaULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">0x5555555555555555ULL</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>zz</name> <init>= <expr><literal type="number">0x5555555555555555ULL</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name><name>hash</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>zz</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>|</operator> <name>zz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <operator>(</operator><name>zz</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>x</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">0xaaaaaaaaaaaaaaaaULL</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name><name>hash</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <name>y</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>geohash_move_y</name><parameter_list>(<parameter><decl><type><name>GeoHashBits</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">0xaaaaaaaaaaaaaaaaULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>&amp;</operator> <literal type="number">0x5555555555555555ULL</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>zz</name> <init>= <expr><literal type="number">0xaaaaaaaaaaaaaaaaULL</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name><name>hash</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>zz</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>|</operator> <name>zz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <operator>(</operator><name>zz</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>y</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">0x5555555555555555ULL</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name><name>hash</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>|</operator> <name>y</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>geohashNeighbors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GeoHashBits</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>GeoHashNeighbors</name> <modifier>*</modifier></type><name>neighbors</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>east</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>west</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>north</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>south</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>south_east</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>south_west</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>north_east</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>neighbors</name><operator>-&gt;</operator><name>north_west</name></name> <operator>=</operator> <operator>*</operator><name>hash</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>east</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>east</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>west</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>west</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>south</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>south</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>north</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>north</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>north_west</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>north_west</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>north_east</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>north_east</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>south_east</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>south_east</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>geohash_move_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>south_west</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>geohash_move_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>neighbors</name><operator>-&gt;</operator><name>south_west</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
