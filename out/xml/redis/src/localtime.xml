<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/localtime.c"><comment type="block">/*
 * Copyright (c) 2018, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<comment type="block">/* This is a safe version of localtime() which contains no locks and is
 * fork() friendly. Even the _r version of localtime() cannot be used safely
 * in Redis. Another thread may be calling localtime() while the main thread
 * forks(). Later when the child process calls localtime() again, for instance
 * in order to log something to the Redis log, it may deadlock: in the copy
 * of the address space of the forked process the lock will never be released.
 *
 * This function takes the timezone 'tz' as argument, and the 'dst' flag is
 * used to check if daylight saving time is currently in effect. The caller
 * of this function should obtain such information calling tzset() ASAP in the
 * main() function to obtain the timezone offset from the 'timezone' global
 * variable. To obtain the daylight information, if it is currently active or not,
 * one trick is to call localtime() in main() ASAP as well, and get the
 * information from the tm_isdst field of the tm structure. However the daylight
 * time may switch in the future for long running processes, so this information
 * should be refreshed at safe times.
 *
 * Note that this function does not work for dates &lt; 1/1/1970, it is solely
 * designed to work with what time(NULL) may return, and to support Redis
 * logging of the dates, it's not really a complete implementation. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_leap_year</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>         <comment type="block">/* A year not divisible by 4 is not leap. */</comment>
    <if type="elseif">else if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* If div by 4 and not 100 is surely leap. */</comment>
    <if type="elseif">else if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">400</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>  <comment type="block">/* If div by 100 *and* 400 is not leap. */</comment>
    <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>                  <comment type="block">/* If div by 100 and not by 400 is leap. */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>nolocks_localtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>secs_min</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>secs_hour</name> <init>= <expr><literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>secs_day</name> <init>= <expr><literal type="number">3600</literal><operator>*</operator><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>-=</operator> <name>tz</name></expr>;</expr_stmt>                            <comment type="block">/* Adjust for timezone. */</comment>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">3600</literal><operator>*</operator><name>dst</name></expr>;</expr_stmt>                      <comment type="block">/* Adjust for daylight time. */</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>days</name> <init>= <expr><name>t</name> <operator>/</operator> <name>secs_day</name></expr></init></decl>;</decl_stmt>         <comment type="block">/* Days passed since epoch. */</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>seconds</name> <init>= <expr><name>t</name> <operator>%</operator> <name>secs_day</name></expr></init></decl>;</decl_stmt>      <comment type="block">/* Remaining seconds. */</comment>

    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>seconds</name> <operator>/</operator> <name>secs_hour</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>%</operator> <name>secs_hour</name><operator>)</operator> <operator>/</operator> <name>secs_min</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>%</operator> <name>secs_hour</name><operator>)</operator> <operator>%</operator> <name>secs_min</name></expr>;</expr_stmt>

    <comment type="block">/* 1/1/1970 was a Thursday, that is, day 4 from the POV of the tm structure
     * where sunday = 0, so to calculate the day of the week we have to add 4
     * and take the modulo by 7. */</comment>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><name>days</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>%</operator><literal type="number">7</literal></expr>;</expr_stmt>

    <comment type="block">/* Calculate the current year. */</comment>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Leap years have one day more. */</comment>
        <decl_stmt><decl><type><name>time_t</name></type> <name>days_this_year</name> <init>= <expr><literal type="number">365</literal> <operator>+</operator> <call><name>is_leap_year</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>days_this_year</name> <operator>&gt;</operator> <name>days</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>days</name> <operator>-=</operator> <name>days_this_year</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>days</name></expr>;</expr_stmt>  <comment type="block">/* Number of day of the current year. */</comment>

    <comment type="block">/* We need to calculate in which month and day of the month we are. To do
     * so we need to skip days according to how many days there are in each
     * month, and adjust for the leap year that has one more day in February. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>mdays</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mdays</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>is_leap_year</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>days</name> <operator>&gt;=</operator> <name><name>mdays</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>days</name> <operator>-=</operator> <name><name>mdays</name><index>[<expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>days</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* Add 1 since our 'days' is zero-based. */</comment>
    <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>   <comment type="block">/* Surprisingly tm_year is year-1900. */</comment>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCALTIME_TEST_MAIN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Obtain timezone and daylight info. */</comment>
    <expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Now 'timezome' global is populated. */</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>daylight_active</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>nolocks_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>timezone</name></expr></argument>,<argument><expr><name>daylight_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%d %b %H:%M:%S"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[timezone: %d, dl: %d] %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>timezone</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>daylight_active</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
