<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/redis-benchmark.c"><comment type="block">/* Redis benchmark utility.
 *
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_wsiocp2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Signal_Process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_PThread.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;unistd.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/time.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sds.h&gt;</cpp:file></cpp:include> <comment type="block">/* Use hiredis sds. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_hiredis.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDPTR_INITIAL_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <name>config</name> <block>{
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hostport</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostsocket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numclients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>liveclients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requests</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requests_issued</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>requests_finished</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>keysize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>datasize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>randomkeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>randomkeys_keyspacelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>keepalive</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pipeline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>showerrors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>totlatency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name> <modifier>*</modifier></type><name>latency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>clients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>csv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idlemode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dbnum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>dbnumstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tests</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth</name></decl>;</decl_stmt>
}</block> <decl><name>config</name></decl>;</struct>

<typedef>typedef <type><struct>struct <name>_client</name> <block>{
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>obuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>randptr</name></decl>;</decl_stmt>         <comment type="block">/* Pointers to :rand: strings inside the command buf */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>randlen</name></decl>;</decl_stmt>         <comment type="block">/* Number of pointers in client-&gt;randptr */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>randfree</name></decl>;</decl_stmt>        <comment type="block">/* Number of unused pointers in client-&gt;randptr */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>written</name></decl>;</decl_stmt>         <comment type="block">/* Bytes of 'obuf' already written */</comment>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name></decl>;</decl_stmt>        <comment type="block">/* Start time of a request */</comment>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>latency</name></decl>;</decl_stmt>      <comment type="block">/* Request latency */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>pending</name></decl>;</decl_stmt>            <comment type="block">/* Number of pending requests (replies to consume) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>prefix_pending</name></decl>;</decl_stmt>     <comment type="block">/* If non-zero, number of pending prefix commands. Commands
                               such as auth and select are prefixed to the pipeline of
                               benchmark commands and discarded after the first send. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>prefixlen</name></decl>;</decl_stmt>          <comment type="block">/* Size in bytes of the pending prefix commands */</comment>
}</block></struct></type> *<name>client</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_mutex_t</name></type> <name>used_memory_mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Prototypes */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>writeHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>createMissingClients</name><parameter_list>(<parameter><decl><type><name>client</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Implementation */</comment>
<function><type><specifier>static</specifier> <name>PORT_LONGLONG</name></type> <name>ustime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <return>return <expr><call><name>GetHighResRelativeTime</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ust</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ust</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ust</name> <operator>+=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
    <return>return <expr><name>ust</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PORT_LONGLONG</name></type> <name>mstime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <return>return <expr><call><name>GetHighResRelativeTime</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mst</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mst</name> <operator>+=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
    <return>return <expr><name>mst</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeClient</name><parameter_list>(<parameter><decl><type><name>client</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></decl>;</decl_stmt>               <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>redisFree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>liveclients</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>clients</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ln</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>clients</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeAllClients</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><name><name>config</name><operator>.</operator><name>clients</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ln</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetClient</name><parameter_list>(<parameter><decl><type><name>client</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></decl>;</decl_stmt>               <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>,<argument><expr><name>writeHandler</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></decl>;</decl_stmt><decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name><name>c</name><operator>-&gt;</operator><name>written</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>pipeline</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>randomizeClientKey</name><parameter_list>(<parameter><decl><type><name>client</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>randlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>config</name><operator>.</operator><name>randomkeys_keyspacelen</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'0'</literal><operator>+</operator><name>r</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clientDone</name><parameter_list>(<parameter><decl><type><name>client</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>requests_finished</name></name> <operator>==</operator> <name><name>config</name><operator>.</operator><name>requests</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeStop</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>keepalive</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>resetClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>config</name><operator>.</operator><name>liveclients</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createMissingClients</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>config</name><operator>.</operator><name>liveclients</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>readHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>client</name></type> <name>c</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Calculate latency only for the first read event. This means that the
     * server already sent the reply and we need to parse it. Parsing overhead
     * is not part of the latency, so calculate it only once, here. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>latency</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOENT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>WSIOCP_QueueNextRead</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>redisBufferReadDone</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><call><name>redisBufferRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <macro><name>WIN32_ONLY</name><argument_list>(<argument>WSIOCP_QueueNextRead((int) c-&gt;context-&gt;fd);</argument>)</argument_list></macro>
        <while>while<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pending</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>redisGetReply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDIS_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>reply</name> <operator>==</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>REDIS_REPLY_ERROR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Unexpected error reply, exiting...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>showerrors</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>lasterr_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>reply</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ERROR</name> <operator>&amp;&amp;</operator> <name>lasterr_time</name> <operator>!=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>lasterr_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error from server: %s\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>freeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* This is an OK for prefix commands such as auth and select.*/</comment>
                <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prefix_pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prefix_pending</name></name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pending</name></name><operator>--</operator></expr>;</expr_stmt>
                    <comment type="block">/* Discard prefix commands on first response.*/</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/* We also need to fix the pointers to the strings
                        * we need to randomize. */</comment>
                        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>randlen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name></expr>;</expr_stmt></block_content></block></for>
                        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>requests_finished</name></name> <operator>&lt;</operator> <name><name>config</name><operator>.</operator><name>requests</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>latency</name><index>[<expr><name><name>config</name><operator>.</operator><name>requests_finished</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>latency</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pending</name></name><operator>--</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>clientDone</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>writeHandlerDone</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nwritten</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>WSIOCP_Request</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>WSIOCP_Request</name> <operator>*</operator><operator>)</operator> <name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>client</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>client</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>, <argument><expr><name>readHandler</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeHandler</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>client</name></type> <name>c</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize request when nothing was written. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Enforce upper bound to number of requests. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>requests_issued</name></name><operator>++</operator> <operator>&gt;=</operator> <name><name>config</name><operator>.</operator><name>requests</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Really initialize: randomize keys and set start time. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>randomkeys</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>randomizeClientKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>WSIOCP_SocketSend</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                                       <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>,
                                       <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>written</name></name><operator>)</operator></expr></argument>,
                                       <argument><expr><name>el</name></expr></argument>,
                                       <argument><expr><name>c</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><name>writeHandlerDone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SOCKET_ERROR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>WSA_IO_PENDING</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Writing to socket %s\n"</literal></expr></argument>, <argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Writing to socket: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,<argument><expr><name>readHandler</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Create a benchmark client, configured to send the command passed as 'cmd' of
 * 'len' bytes.
 *
 * The command is copied N times in the client output buffer (that is reused
 * again and again to send the request to the server) accordingly to the configured
 * pipeline size.
 *
 * Also an initial SELECT command is prepended in order to make sure the right
 * database is selected, if needed. The initial SELECT will be discarded as soon
 * as the first reply is received.
 *
 * To create a client from scratch, the 'from' pointer is set to NULL. If instead
 * we want to create a client using another client as reference, the 'from' pointer
 * points to the client to use as reference. In such a case the following
 * information is take from the 'from' client:
 *
 * 1) The command line to use.
 * 2) The offsets of the __rand_int__ elements inside the command line, used
 *    for arguments randomization.
 *
 * Even when cloning another client, prefix commands are applied if needed.*/</comment>
<function><type><specifier>static</specifier> <name>client</name></type> <name>createClient</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>client</name></type> <name>from</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>client</name></type> <name>c</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_client</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>hostsocket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <decl_stmt><decl><type><name>SOCKADDR_STORAGE</name></type> <name>ss</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>redisPreConnectNonBlock</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>hostip</name></name></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>hostport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_SocketConnect</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strerror_r</name><argument_list>(<argument><expr><name>errno</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>redisConnectNonBlock</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>hostip</name></name></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>hostport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>redisConnectUnixNonBlock</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>hostsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Could not connect to Redis at "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>hostsocket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s:%d: %s\n"</literal></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>hostip</name></name></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>hostport</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>hostsocket</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Suppress hiredis cleanup of unused buffers for max speed. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>reader</name><operator>-&gt;</operator><name>maxbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Build the request buffer:
     * Queue N requests accordingly to the pipeline size, or simply clone
     * the example client buffer. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Prefix the request buffer with AUTH and/or SELECT commands, if applicable.
     * These commands are discarded after the first response, so if the client is
     * reused the commands will not be used again. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prefix_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>auth</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"AUTH %s"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>auth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prefix_pending</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If a DB number different than zero is selected, prefix our request
     * buffer with the SELECT command, that will be discarded the first
     * time the replies are received, so if the client is reused the
     * SELECT command will not be used again. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>dbnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>,<argument><expr><literal type="string">"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>dbnumstr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>dbnumstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prefix_pending</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                        <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
    <comment type="block">/* Append the request itself. */</comment>
    <if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>,
            <argument><expr><name><name>from</name><operator>-&gt;</operator><name>obuf</name></name><operator>+</operator><name><name>from</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>,
            <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>from</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>config</name><operator>.</operator><name>pipeline</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pending</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>pipeline</name></name><operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>prefix_pending</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Find substrings in the output buffer that need to be randomized. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>randomkeys</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>randlen</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randfree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* copy the offsets. */</comment>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>obuf</name></name> <operator>+</operator> <operator>(</operator><name><name>from</name><operator>-&gt;</operator><name>randptr</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>from</name><operator>-&gt;</operator><name>obuf</name></name><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* Adjust for the different select prefix length. */</comment>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>-</operator> <name><name>from</name><operator>-&gt;</operator><name>prefixlen</name></name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randfree</name></name> <operator>=</operator> <name>RANDPTR_INITIAL_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>randfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"__rand_int__"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>randfree</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randfree</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>randlen</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randptr</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>randlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>randfree</name></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <comment type="block">/* 12 is strlen("__rand_int__). */</comment>
            </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>idlemode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>,<argument><expr><name>writeHandler</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>clients</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>liveclients</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>createMissingClients</name><parameter_list>(<parameter><decl><type><name>client</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name><name>config</name><operator>.</operator><name>liveclients</name></name> <operator>&lt;</operator> <name><name>config</name><operator>.</operator><name>numclients</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>createClient</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Listen backlog is quite limited on most systems */</comment>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareLatency</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>)</operator></expr>;</return>                    <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>showLatencyReport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>curlat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>perc</name></decl>, <decl><type ref="prev"/><name>reqpersec</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>reqpersec</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>config</name><operator>.</operator><name>requests_finished</name></name><operator>/</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>config</name><operator>.</operator><name>totlatency</name></name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>.</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>.</operator><name>csv</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====== %s ======\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  %d requests completed in %.2f seconds\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>requests_finished</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>config</name><operator>.</operator><name>totlatency</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  %d parallel clients\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>numclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  %d bytes payload\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  keep alive: %d\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>keepalive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>latency</name></name></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>requests</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONGLONG</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>compareLatency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>config</name><operator>.</operator><name>requests</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>latency</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><literal type="number">1000</literal> <operator>!=</operator> <name>curlat</name> <operator>||</operator> <name>i</name> <operator>==</operator> <operator>(</operator><name><name>config</name><operator>.</operator><name>requests</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>curlat</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>config</name><operator>.</operator><name>latency</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>                           <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
                <name>perc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>)</operator><operator>/</operator><name><name>config</name><operator>.</operator><name>requests</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.2f%% &lt;= %d milliseconds\n"</literal></expr></argument>, <argument><expr><name>perc</name></expr></argument>, <argument><expr><name>curlat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.2f requests per second\n\n"</literal></expr></argument>, <argument><expr><name>reqpersec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>csv</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\",\"%.2f\"\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>reqpersec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %.2f requests per second\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>reqpersec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>benchmark</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>client</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>requests_issued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>requests_finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>createMissingClients</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aeMain</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>totlatency</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>config</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>showLatencyReport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeAllClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Returns number of consumed options. */</comment>
<function><type><name>int</name></type> <name>parseOptions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lastarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>exit_status</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>lastarg</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name>argc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>numclients</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>requests</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-k"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>keepalive</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>hostip</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>hostport</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>hostsocket</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>auth</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>datasize</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>datasize</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>config</name><operator>.</operator><name>datasize</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>datasize</name></name> <operator>&gt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>config</name><operator>.</operator><name>datasize</name></name> <operator>=</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-P"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>pipeline</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>pipeline</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>config</name><operator>.</operator><name>pipeline</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>randomkeys</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>randomkeys_keyspacelen</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>randomkeys_keyspacelen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>config</name><operator>.</operator><name>randomkeys_keyspacelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--csv"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>csv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-I"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>idlemode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>showerrors</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <comment type="block">/* We get the list of tests to run as a string in the form
             * get,set,lrange,...,test_N. Then we add a comma before and
             * after the string in order to make sure that searching
             * for ",testname," will always get a match if the test is
             * enabled. */</comment>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tests</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tests</name></name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tests</name></name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tests</name></name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tests</name></name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdstolower</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--dbnum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastarg</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>dbnum</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>dbnumstr</name></name> <operator>=</operator> <call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>exit_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <goto>goto <name>usage</name>;</goto>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Assume the user meant to provide an option when the arg starts
             * with a dash. We're done otherwise and should use the remainder
             * as the command and arguments for running the benchmark. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
            <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>i</name></expr>;</return>

<label><name>invalid</name>:</label>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid option \"%s\" or option argument missing\n\n"</literal></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>usage</name>:</label>
    <expr_stmt><expr><call><name>printf</name><argument_list>(
<argument><expr><literal type="string">"Usage: redis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests&gt;] [-k &lt;boolean&gt;]\n\n"</literal>
<literal type="string">" -h &lt;hostname&gt;      Server hostname (default 127.0.0.1)\n"</literal>
<literal type="string">" -p &lt;port&gt;          Server port (default 6379)\n"</literal>
<literal type="string">" -s &lt;socket&gt;        Server socket (overrides host and port)\n"</literal>
<literal type="string">" -a &lt;password&gt;      Password for Redis Auth\n"</literal>
<literal type="string">" -c &lt;clients&gt;       Number of parallel connections (default 50)\n"</literal>
<literal type="string">" -n &lt;requests&gt;      Total number of requests (default 100000)\n"</literal>
<literal type="string">" -d &lt;size&gt;          Data size of SET/GET value in bytes (default 3)\n"</literal>
<literal type="string">" --dbnum &lt;db&gt;       SELECT the specified db number (default 0)\n"</literal>
<literal type="string">" -k &lt;boolean&gt;       1=keep alive 0=reconnect (default 1)\n"</literal>
<literal type="string">" -r &lt;keyspacelen&gt;   Use random keys for SET/GET/INCR, random values for SADD\n"</literal>
<literal type="string">"  Using this option the benchmark will expand the string __rand_int__\n"</literal>
<literal type="string">"  inside an argument with a 12 digits number in the specified range\n"</literal>
<literal type="string">"  from 0 to keyspacelen-1. The substitution changes every time a command\n"</literal>
<literal type="string">"  is executed. Default tests use this to hit random keys in the\n"</literal>
<literal type="string">"  specified range.\n"</literal>
<literal type="string">" -P &lt;numreq&gt;        Pipeline &lt;numreq&gt; requests. Default 1 (no pipeline).\n"</literal>
<literal type="string">" -e                 If server replies with errors, show them on stdout.\n"</literal>
<literal type="string">"                    (no more than 1 error per second is displayed)\n"</literal>
<literal type="string">" -q                 Quiet. Just show query/sec values\n"</literal>
<literal type="string">" --csv              Output in CSV format\n"</literal>
<literal type="string">" -l                 Loop. Run the tests forever\n"</literal>
<literal type="string">" -t &lt;tests&gt;         Only run the comma separated list of tests. The test\n"</literal>
<literal type="string">"                    names are the same as the ones produced as output.\n"</literal>
<literal type="string">" -I                 Idle mode. Just open N idle connections and wait.\n\n"</literal>
<literal type="string">"Examples:\n\n"</literal>
<literal type="string">" Run the benchmark with the default configuration against 127.0.0.1:6379:\n"</literal>
<literal type="string">"   $ redis-benchmark\n\n"</literal>
<literal type="string">" Use 20 parallel clients, for a total of 100k requests, against 192.168.1.1:\n"</literal>
<literal type="string">"   $ redis-benchmark -h 192.168.1.1 -p 6379 -n 100000 -c 20\n\n"</literal>
<literal type="string">" Fill 127.0.0.1:6379 with about 1 million keys only using the SET test:\n"</literal>
<literal type="string">"   $ redis-benchmark -t set -n 1000000 -r 100000000\n\n"</literal>
<literal type="string">" Benchmark 127.0.0.1:6379 for a few commands producing CSV output:\n"</literal>
<literal type="string">"   $ redis-benchmark -t ping,set,get -n 100000 --csv\n\n"</literal>
<literal type="string">" Benchmark a specific command line:\n"</literal>
<literal type="string">"   $ redis-benchmark -r 10000 -n 10000 eval 'return redis.call(\"ping\")' 0\n\n"</literal>
<literal type="string">" Fill a list with 10000 random elements:\n"</literal>
<literal type="string">"   $ redis-benchmark -r 10000 -n 10000 lpush mylist __rand_int__\n\n"</literal>
<literal type="string">" On user specified command lines __rand_int__ is replaced with a random integer\n"</literal>
<literal type="string">" with a range of values selected by the -r option.\n"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exit_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>showThroughput</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>liveclients</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>requests_finished</name></name> <operator>!=</operator> <name><name>config</name><operator>.</operator><name>requests</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"All clients disconnected... aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>csv</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">250</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>idlemode</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"clients: %d\r"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>liveclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">250</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>dt</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>config</name><operator>.</operator><name>start</name></name><operator>)</operator><operator>/</operator><literal type="number">1000.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>              <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast (float) */</comment>
    <name>float</name></type> <name>rps</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>config</name><operator>.</operator><name>requests_finished</name></name><operator>/</operator><name>dt</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %.2f\r"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>rps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">250</literal></expr>;</return> <comment type="block">/* every 250ms */</comment>
</block_content>}</block></function>

<comment type="block">/* Return true if the named test was selected using the -t command line
 * switch, or if all the tests are selected (no -t passed by user). */</comment>
<function><type><name>int</name></type> <name>test_is_selected</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                                  <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>tests</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>tests</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>client</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>InitTimeFunctions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>used_memory_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>srandom</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                          <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (unsigned int) */</comment>
    <name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>numclients</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>requests</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>liveclients</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>el</name></name> <operator>=</operator> <call><name>aeCreateEventLoop</name><argument_list>(<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aeCreateTimeEvent</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>showThroughput</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>keepalive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>datasize</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>pipeline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>showerrors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>randomkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>randomkeys_keyspacelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>csv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>idlemode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>latency</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>clients</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>hostip</name></name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>hostport</name></name> <operator>=</operator> <literal type="number">6379</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>hostsocket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>tests</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>dbnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>auth</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>parseOptions</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>config</name><operator>.</operator><name>latency</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONGLONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>config</name><operator>.</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>keepalive</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WARNING: keepalive disabled, you probably need 'echo 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse' for Linux and 'sudo sysctl -w net.inet.tcp.msl=1000' for Mac OS X in order to use a lot of clients/requests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>idlemode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating %d idle connections and waiting forever (Ctrl+C when done)\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>numclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* will never receive a reply */</comment>
        <expr_stmt><expr><call><name>createMissingClients</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeMain</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* and will wait for every */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Run benchmark with command in the remainder of the arguments. */</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>title</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <do>do <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><name>title</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while<condition>(<expr><name><name>config</name><operator>.</operator><name>loop</name></name></expr>)</condition>;</do>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Run default benchmark suite. */</comment>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>datasize</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><name><name>config</name><operator>.</operator><name>datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><index>[<expr><name><name>config</name><operator>.</operator><name>datasize</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"ping_inline"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"ping"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"PING_INLINE"</literal></expr></argument>,<argument><expr><literal type="string">"PING\r\n"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"ping_mbulk"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"ping"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"PING_BULK"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SET key:__rand_int__ %s"</literal></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"GET key:__rand_int__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"incr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"INCR counter:__rand_int__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"INCR"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lpush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist %s"</literal></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LPUSH"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"rpush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"RPUSH mylist %s"</literal></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"RPUSH"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lpop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LPOP mylist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LPOP"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"rpop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"RPOP mylist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"RPOP"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"sadd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,
                <argument><expr><literal type="string">"SADD myset element:__rand_int__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"SADD"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"hset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,
                <argument><expr><literal type="string">"HSET myset:__rand_int__ element:__rand_int__ %s"</literal></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"HSET"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"spop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"SPOP myset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"SPOP"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_100"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_300"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_500"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_600"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LPUSH mylist %s"</literal></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LPUSH (needed to benchmark LRANGE)"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_100"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 99"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LRANGE_100 (first 100 elements)"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_300"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 299"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LRANGE_300 (first 300 elements)"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_500"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 449"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LRANGE_500 (first 450 elements)"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"lrange_600"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="string">"LRANGE mylist 0 599"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"LRANGE_600 (first 600 elements)"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>test_is_selected</name><argument_list>(<argument><expr><literal type="string">"mset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"MSET"</literal></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"key:__rand_int__"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>redisFormatCommandArgv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,<argument><expr><literal type="number">21</literal></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>benchmark</name><argument_list>(<argument><expr><literal type="string">"MSET (10 keys)"</literal></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>config</name><operator>.</operator><name>csv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block> while<condition>(<expr><name><name>config</name><operator>.</operator><name>loop</name></name></expr>)</condition>;</do>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
