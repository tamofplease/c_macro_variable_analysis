<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/ae_wsiocp.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* IOCP-based ae.c module  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_Interop/win32fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_Interop/win32_wsiocp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COMPLETE_PER_POLL</name></cpp:macro>   <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SOCKET_LOOKUP</name></cpp:macro>       <cpp:value>65535</cpp:value></cpp:define>

<comment type="block">/* Use GetQueuedCompletionStatusEx if possible.
 * Try to load the function pointer dynamically.
 * If it is not available, use GetQueuedCompletionStatus */</comment>
<typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>sGetQueuedCompletionStatusEx</name>)
            <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>CompletionPort</name></decl></parameter>,
            <parameter><decl><type><name>LPOVERLAPPED_ENTRY</name></type> <name>lpCompletionPortEntries</name></decl></parameter>,
            <parameter><decl><type><name>ULONG</name></type> <name>ulCount</name></decl></parameter>,
            <parameter><decl><type><name>PULONG</name></type> <name>ulNumEntriesRemoved</name></decl></parameter>,
            <parameter><decl><type><name>DWORD</name></type> <name>dwMilliseconds</name></decl></parameter>,
            <parameter><decl><type><name>BOOL</name></type> <name>fAlertable</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>sGetQueuedCompletionStatusEx</name></type> <name>pGetQueuedCompletionStatusEx</name></decl>;</decl_stmt>

<comment type="block">/* Structure that keeps state of sockets and Completion port handle */</comment>
<typedef>typedef <type><struct>struct <name>aeApiState</name> <block>{
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>iocp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>setsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OVERLAPPED_ENTRY</name></type> <name><name>entries</name><index>[<expr><name>MAX_COMPLETE_PER_POLL</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>aeApiState</name>;</typedef>

<comment type="block">/* Find matching value in list and remove. If found return TRUE */</comment>
<function><type><name>BOOL</name></type> <name>removeMatchFromList</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>requestlist</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>requestlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name>requestlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>requestlist</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>listNextNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Called by ae to initialize state */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiCreate</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HMODULE</name></type> <name>kernel32_module</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>aeApiState</name> <operator>*</operator><operator>)</operator> <call><name>CallocMemoryNoCOW</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeApiState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Create a single IOCP to be shared by all sockets</comment>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name> <operator>=</operator> <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>,
                                         <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><literal type="number">0</literal></expr></argument>,
                                         <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pGetQueuedCompletionStatusEx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>kernel32_module</name> <operator>=</operator> <call><name>GetModuleHandleA</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>kernel32_module</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pGetQueuedCompletionStatusEx</name> <operator>=</operator> <operator>(</operator><name>sGetQueuedCompletionStatusEx</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(
                                        <argument><expr><name>kernel32_module</name></expr></argument>,
                                        <argument><expr><literal type="string">"GetQueuedCompletionStatusEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>setsize</name></name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WSIOCP_Init</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiResize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>aeApiState</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>setsize</name> <operator>=</operator> <name>setsize</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Termination */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>aeApiFree</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>aeApiState</name> <operator>*</operator><operator>)</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WSIOCP_Cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Monitor state changes for a socket */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiAddEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name> <init>= <expr><call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sockstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>AE_READABLE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>CONNECT_PENDING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>LISTEN_SOCK</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Actually a listen. Do not treat as read</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>READ_QUEUED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Queue up a 0 byte read</comment>
                    <expr_stmt><expr><call><name>WSIOCP_QueueNextRead</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>CONNECT_PENDING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// If no write active, then need to queue write ready</comment>
            <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>asendreq</name> <modifier>*</modifier></type><name>areq</name> <init>= <expr><operator>(</operator><name>asendreq</name> <operator>*</operator><operator>)</operator> <call><name>CallocMemoryNoCOW</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>asendreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>aeApiState</name> <operator>*</operator><operator>)</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>PostQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>fd</name></expr></argument>,
                                               <argument><expr><operator>&amp;</operator><name><name>areq</name><operator>-&gt;</operator><name>ov</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>wreqlist</name></name></expr></argument>, <argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Stop monitoring state changes for a socket */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>aeApiDelEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name> <init>= <expr><call><name>WSIOCP_GetExistingSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sockstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return array of sockets that are ready for read or write
 * depending on the mask for each socket */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiPoll</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>aeApiState</name> <operator>*</operator><operator>)</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULONG</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numevents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULONG</name></type> <name>numComplete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mswait</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tvp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><operator>(</operator><name><name>tvp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>tvp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pGetQueuedCompletionStatusEx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// First get an array of completion notifications</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pGetQueuedCompletionStatusEx</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>,
                                          <argument><expr><name><name>state</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>,
                                          <argument><expr><name>MAX_COMPLETE_PER_POLL</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>numComplete</name></expr></argument>,
                                          <argument><expr><name>mswait</name></expr></argument>,
                                          <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Need to get one at a time. Use first array element</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dwNumberOfBytesTransferred</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpCompletionKey</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpOverlapped</name></expr></argument>,
                                       <argument><expr><name>mswait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpOverlapped</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Timeout. Return.</comment>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Check if more completions are ready</comment>
            <decl_stmt><decl><type><name>BOOL</name></type> <name>lrc</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>numComplete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <while>while <condition>(<expr><name>numComplete</name> <operator>&lt;</operator> <name>MAX_COMPLETE_PER_POLL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>lrc</name> <operator>=</operator> <call><name>GetQueuedCompletionStatus</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>iocp</name></name></expr></argument>,
                                                <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>numComplete</name></expr>]</index></name><operator>.</operator><name>dwNumberOfBytesTransferred</name></expr></argument>,
                                                <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>numComplete</name></expr>]</index></name><operator>.</operator><name>lpCompletionKey</name></expr></argument>,
                                                <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>numComplete</name></expr>]</index></name><operator>.</operator><name>lpOverlapped</name></expr></argument>,
                                                <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>lrc</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>numComplete</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>numComplete</name></expr>]</index></name><operator>.</operator><name>lpOverlapped</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <name>numComplete</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>LPOVERLAPPED_ENTRY</name></type> <name>entry</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numComplete</name> <operator>&amp;&amp;</operator> <name>numevents</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>setsize</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>entry</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// The competion key is the rfd identifying the socket </comment>
            <decl_stmt><decl><type><name>int</name></type> <name>rfd</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpCompletionKey</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetExistingSocketState</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>sockstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>CLOSE_PENDING</name><operator>)</operator> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>LISTEN_SOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Need to set event for listening</comment>
                    <decl_stmt><decl><type><name>aacceptreq</name> <modifier>*</modifier></type><name>areq</name> <init>= <expr><operator>(</operator><name>aacceptreq</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>sockstate</name><operator>-&gt;</operator><name>reqs</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name>areq</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACCEPT_PENDING</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>numevents</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>rfd</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>numevents</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_READABLE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>numevents</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>CONNECT_PENDING</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Check if connect complete</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONNECT_PENDING</name></expr>;</expr_stmt>
                        <comment type="line">// Enable read and write events for this connection</comment>
                        <expr_stmt><expr><call><name>aeApiAddEvent</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>rfd</name></expr></argument>, <argument><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>BOOL</name></type> <name>matched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
                    <comment type="line">// Check if event is read complete (may be 0 length read)</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>READ_QUEUED</name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>numevents</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>rfd</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>numevents</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_READABLE</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>numevents</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <comment type="line">// Should be write complete. Get results</comment>
                        <decl_stmt><decl><type><name>asendreq</name> <modifier>*</modifier></type><name>areq</name> <init>= <expr><operator>(</operator><name>asendreq</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>removeMatchFromList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>wreqlist</name></name></expr></argument>, <argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>matched</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
                            <comment type="line">// Call write complete callback so buffers can be freed</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>areq</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>DWORD</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>FDAPI_WSAGetOverlappedResult</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>areq</name><operator>-&gt;</operator><name>ov</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>areq</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name><name>areq</name><operator>-&gt;</operator><name>eventLoop</name></name></expr></argument>, <argument><expr><name>rfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>areq</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// If no active write requests, set ready to write</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>numevents</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>rfd</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>numevents</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>numevents</name><operator>++</operator></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>matched</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sockstate</name><operator>-&gt;</operator><name>unknownComplete</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>unknownComplete</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>CONNECT_PENDING</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Check if connect complete</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONNECT_PENDING</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Read complete</comment>
                    <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>READ_QUEUED</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// Check pending writes</comment>
                    <decl_stmt><decl><type><name>asendreq</name> <modifier>*</modifier></type><name>areq</name> <init>= <expr><operator>(</operator><name>asendreq</name> <operator>*</operator><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>lpOverlapped</name></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>removeMatchFromList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>wreqlist</name></name></expr></argument>, <argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                    <operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONNECT_PENDING</name> <operator>|</operator> <name>READ_QUEUED</name> <operator>|</operator> <name>SOCKET_ATTACHED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLOSE_PENDING</name><operator>)</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_CloseSocketState</name><argument_list>(<argument><expr><name>sockstate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>FDAPI_ClearSocketInfo</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>numevents</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Name of this event handler */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>aeApiName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"WinSock_IOCP"</literal></expr>;</return>
</block_content>}</block></function>
</unit>
