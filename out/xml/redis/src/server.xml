<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/server.c"><comment type="block">/*
 * Copyright (c) 2009-2016, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_FDAPI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_ThreadControl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_QFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slowlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"latency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atomicvar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/wait.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;arpa/inet.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/time.h&gt;</argument>)</argument_list></macro>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/resource.h&gt;</argument>)</argument_list></macro>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/uio.h&gt;</argument>)</argument_list></macro>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/un.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/resource.h&gt;</argument>)</argument_list></macro>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/utsname.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;sys/socket.h&gt;</argument>)</argument_list></macro>

<comment type="block">/* Our shared "common" objects */</comment>

<decl_stmt><decl><type><name><name>struct</name> <name>sharedObjectsStruct</name></name></type> <name>shared</name></decl>;</decl_stmt>

<comment type="block">/* Global vars that are actually used as constants. The following double
 * values are used for double on-disk serialization, and are initialized
 * at runtime to avoid strange compiler optimizations. */</comment>

<decl_stmt><decl><type><name>double</name></type> <name>R_Zero</name></decl>, <decl><type ref="prev"/><name>R_PosInf</name></decl>, <decl><type ref="prev"/><name>R_NegInf</name></decl>, <decl><type ref="prev"/><name>R_Nan</name></decl>;</decl_stmt>

<comment type="block">/*================================= Globals ================================= */</comment>

<comment type="block">/* Global vars */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>redisServer</name></name></type> <name>server</name></decl>;</decl_stmt> <comment type="block">/* Server global state */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>PORT_ULONG</name></type> <name>lru_clock</name></decl>;</decl_stmt> <comment type="block">/* Server global current LRU time. */</comment>

<comment type="block">/* Our command table.
 *
 * Every entry is composed of the following fields:
 *
 * name: a string representing the command name.
 * function: pointer to the C function implementing the command.
 * arity: number of arguments, it is possible to use -N to say &gt;= N
 * sflags: command flags as string. See below for a table of flags.
 * flags: flags as bitmask. Computed by Redis using the 'sflags' field.
 * get_keys_proc: an optional function to get key arguments from a command.
 *                This is only used when the following three fields are not
 *                enough to specify what arguments are keys.
 * first_key_index: first argument that is a key
 * last_key_index: last argument that is a key
 * key_step: step to get all the keys from first to last argument. For instance
 *           in MSET the step is two since arguments are key,val,key,val,...
 * microseconds: microseconds of total execution time for this command.
 * calls: total number of calls of this command.
 *
 * The flags, microseconds and calls fields are computed by Redis and should
 * always be set to zero.
 *
 * Command flags are expressed using strings where every character represents
 * a flag. Later the populateCommandTable() function will take care of
 * populating the real 'flags' field using this characters.
 *
 * This is the meaning of the flags:
 *
 * w: write command (may modify the key space).
 * r: read command  (will never modify the key space).
 * m: may increase memory usage once called. Don't allow if out of memory.
 * a: admin command, like SAVE or SHUTDOWN.
 * p: Pub/Sub related command.
 * f: force replication of this command, regardless of server.dirty.
 * s: command not allowed in scripts.
 * R: random command. Command is not deterministic, that is, the same command
 *    with the same arguments, with the same key space, may have different
 *    results. For instance SPOP and RANDOMKEY are two random commands.
 * S: Sort command output array if called from script, so that the output
 *    is deterministic.
 * l: Allow command while loading the database.
 * t: Allow command while a slave has stale data but is not allowed to
 *    server this data. Normally no command is accepted in this condition
 *    but just a few.
 * M: Do not automatically propagate the command on MONITOR.
 * k: Perform an implicit ASKING for this command, so the command will be
 *    accepted in cluster mode if the slot is marked as 'importing'.
 * F: Fast command: O(1) or O(log(N)) command that should never delay
 *    its execution as long as the kernel scheduler is giving us time.
 *    Note that commands that may trigger a DEL as a side effect (like SET)
 *    are not fast commands.
 */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name></type> <name><name>redisCommandTable</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"module"</literal></expr>,<expr><name>moduleCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"get"</literal></expr>,<expr><name>getCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set"</literal></expr>,<expr><name>setCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"setnx"</literal></expr>,<expr><name>setnxCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"setex"</literal></expr>,<expr><name>setexCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"psetex"</literal></expr>,<expr><name>psetexCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"append"</literal></expr>,<expr><name>appendCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"strlen"</literal></expr>,<expr><name>strlenCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"del"</literal></expr>,<expr><name>delCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"unlink"</literal></expr>,<expr><name>unlinkCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exists"</literal></expr>,<expr><name>existsCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"setbit"</literal></expr>,<expr><name>setbitCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"getbit"</literal></expr>,<expr><name>getbitCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bitfield"</literal></expr>,<expr><name>bitfieldCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"setrange"</literal></expr>,<expr><name>setrangeCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"getrange"</literal></expr>,<expr><name>getrangeCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"substr"</literal></expr>,<expr><name>getrangeCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"incr"</literal></expr>,<expr><name>incrCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"decr"</literal></expr>,<expr><name>decrCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"mget"</literal></expr>,<expr><name>mgetCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rpush"</literal></expr>,<expr><name>rpushCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lpush"</literal></expr>,<expr><name>lpushCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rpushx"</literal></expr>,<expr><name>rpushxCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lpushx"</literal></expr>,<expr><name>lpushxCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"linsert"</literal></expr>,<expr><name>linsertCommand</name></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rpop"</literal></expr>,<expr><name>rpopCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lpop"</literal></expr>,<expr><name>lpopCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"brpop"</literal></expr>,<expr><name>brpopCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"ws"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"brpoplpush"</literal></expr>,<expr><name>brpoplpushCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wms"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"blpop"</literal></expr>,<expr><name>blpopCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"ws"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"llen"</literal></expr>,<expr><name>llenCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lindex"</literal></expr>,<expr><name>lindexCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lset"</literal></expr>,<expr><name>lsetCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lrange"</literal></expr>,<expr><name>lrangeCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ltrim"</literal></expr>,<expr><name>ltrimCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lrem"</literal></expr>,<expr><name>lremCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rpoplpush"</literal></expr>,<expr><name>rpoplpushCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sadd"</literal></expr>,<expr><name>saddCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"srem"</literal></expr>,<expr><name>sremCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"smove"</literal></expr>,<expr><name>smoveCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sismember"</literal></expr>,<expr><name>sismemberCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"scard"</literal></expr>,<expr><name>scardCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"spop"</literal></expr>,<expr><name>spopCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wRF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"srandmember"</literal></expr>,<expr><name>srandmemberCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sinter"</literal></expr>,<expr><name>sinterCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sinterstore"</literal></expr>,<expr><name>sinterstoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sunion"</literal></expr>,<expr><name>sunionCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sunionstore"</literal></expr>,<expr><name>sunionstoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sdiff"</literal></expr>,<expr><name>sdiffCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sdiffstore"</literal></expr>,<expr><name>sdiffstoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"smembers"</literal></expr>,<expr><name>sinterCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sscan"</literal></expr>,<expr><name>sscanCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zadd"</literal></expr>,<expr><name>zaddCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zincrby"</literal></expr>,<expr><name>zincrbyCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrem"</literal></expr>,<expr><name>zremCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zremrangebyscore"</literal></expr>,<expr><name>zremrangebyscoreCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zremrangebyrank"</literal></expr>,<expr><name>zremrangebyrankCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zremrangebylex"</literal></expr>,<expr><name>zremrangebylexCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zunionstore"</literal></expr>,<expr><name>zunionstoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>zunionInterGetKeys</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zinterstore"</literal></expr>,<expr><name>zinterstoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>zunionInterGetKeys</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrange"</literal></expr>,<expr><name>zrangeCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrangebyscore"</literal></expr>,<expr><name>zrangebyscoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrevrangebyscore"</literal></expr>,<expr><name>zrevrangebyscoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrangebylex"</literal></expr>,<expr><name>zrangebylexCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrevrangebylex"</literal></expr>,<expr><name>zrevrangebylexCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zcount"</literal></expr>,<expr><name>zcountCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zlexcount"</literal></expr>,<expr><name>zlexcountCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrevrange"</literal></expr>,<expr><name>zrevrangeCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zcard"</literal></expr>,<expr><name>zcardCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zscore"</literal></expr>,<expr><name>zscoreCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrank"</literal></expr>,<expr><name>zrankCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zrevrank"</literal></expr>,<expr><name>zrevrankCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zscan"</literal></expr>,<expr><name>zscanCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zpopmin"</literal></expr>,<expr><name>zpopminCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"zpopmax"</literal></expr>,<expr><name>zpopmaxCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bzpopmin"</literal></expr>,<expr><name>bzpopminCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wsF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bzpopmax"</literal></expr>,<expr><name>bzpopmaxCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wsF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hset"</literal></expr>,<expr><name>hsetCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hsetnx"</literal></expr>,<expr><name>hsetnxCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hget"</literal></expr>,<expr><name>hgetCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hmset"</literal></expr>,<expr><name>hsetCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hmget"</literal></expr>,<expr><name>hmgetCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hincrby"</literal></expr>,<expr><name>hincrbyCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hincrbyfloat"</literal></expr>,<expr><name>hincrbyfloatCommand</name></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hdel"</literal></expr>,<expr><name>hdelCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hlen"</literal></expr>,<expr><name>hlenCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hstrlen"</literal></expr>,<expr><name>hstrlenCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hkeys"</literal></expr>,<expr><name>hkeysCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hvals"</literal></expr>,<expr><name>hvalsCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hgetall"</literal></expr>,<expr><name>hgetallCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hexists"</literal></expr>,<expr><name>hexistsCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hscan"</literal></expr>,<expr><name>hscanCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"incrby"</literal></expr>,<expr><name>incrbyCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"decrby"</literal></expr>,<expr><name>decrbyCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"incrbyfloat"</literal></expr>,<expr><name>incrbyfloatCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"getset"</literal></expr>,<expr><name>getsetCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"mset"</literal></expr>,<expr><name>msetCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"msetnx"</literal></expr>,<expr><name>msetnxCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"randomkey"</literal></expr>,<expr><name>randomkeyCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select"</literal></expr>,<expr><name>selectCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"lF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"swapdb"</literal></expr>,<expr><name>swapdbCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"move"</literal></expr>,<expr><name>moveCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rename"</literal></expr>,<expr><name>renameCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"renamenx"</literal></expr>,<expr><name>renamenxCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"expire"</literal></expr>,<expr><name>expireCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"expireat"</literal></expr>,<expr><name>expireatCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pexpire"</literal></expr>,<expr><name>pexpireCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pexpireat"</literal></expr>,<expr><name>pexpireatCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"keys"</literal></expr>,<expr><name>keysCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rS"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"scan"</literal></expr>,<expr><name>scanCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"dbsize"</literal></expr>,<expr><name>dbsizeCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"auth"</literal></expr>,<expr><name>authCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"sltMF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ping"</literal></expr>,<expr><name>pingCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"tF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"echo"</literal></expr>,<expr><name>echoCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"F"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"save"</literal></expr>,<expr><name>saveCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bgsave"</literal></expr>,<expr><name>bgsaveCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bgrewriteaof"</literal></expr>,<expr><name>bgrewriteaofCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"shutdown"</literal></expr>,<expr><name>shutdownCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"aslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lastsave"</literal></expr>,<expr><name>lastsaveCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"RF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"type"</literal></expr>,<expr><name>typeCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"multi"</literal></expr>,<expr><name>multiCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"sF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exec"</literal></expr>,<expr><name>execCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"sM"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"discard"</literal></expr>,<expr><name>discardCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"sF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sync"</literal></expr>,<expr><name>syncCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"ars"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"psync"</literal></expr>,<expr><name>syncCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"ars"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"replconf"</literal></expr>,<expr><name>replconfCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"aslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"flushdb"</literal></expr>,<expr><name>flushdbCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"flushall"</literal></expr>,<expr><name>flushallCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sort"</literal></expr>,<expr><name>sortCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>sortGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"info"</literal></expr>,<expr><name>infoCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"ltR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"monitor"</literal></expr>,<expr><name>monitorCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ttl"</literal></expr>,<expr><name>ttlCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rFR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"touch"</literal></expr>,<expr><name>touchCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pttl"</literal></expr>,<expr><name>pttlCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rFR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"persist"</literal></expr>,<expr><name>persistCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"slaveof"</literal></expr>,<expr><name>replicaofCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"ast"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"replicaof"</literal></expr>,<expr><name>replicaofCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"ast"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"role"</literal></expr>,<expr><name>roleCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"lst"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"debug"</literal></expr>,<expr><name>debugCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"config"</literal></expr>,<expr><name>configCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"last"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"subscribe"</literal></expr>,<expr><name>subscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"pslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"unsubscribe"</literal></expr>,<expr><name>unsubscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"pslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"psubscribe"</literal></expr>,<expr><name>psubscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"pslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"punsubscribe"</literal></expr>,<expr><name>punsubscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"pslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"publish"</literal></expr>,<expr><name>publishCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"pltF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pubsub"</literal></expr>,<expr><name>pubsubCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"pltR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"watch"</literal></expr>,<expr><name>watchCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"sF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"unwatch"</literal></expr>,<expr><name>unwatchCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"sF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cluster"</literal></expr>,<expr><name>clusterCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"a"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"restore"</literal></expr>,<expr><name>restoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"restore-asking"</literal></expr>,<expr><name>restoreCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wmk"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"migrate"</literal></expr>,<expr><name>migrateCommand</name></expr>,<expr><operator>-</operator><literal type="number">6</literal></expr>,<expr><literal type="string">"wR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>migrateGetKeys</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"asking"</literal></expr>,<expr><name>askingCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"F"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"readonly"</literal></expr>,<expr><name>readonlyCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"F"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"readwrite"</literal></expr>,<expr><name>readwriteCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"F"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"dump"</literal></expr>,<expr><name>dumpCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"object"</literal></expr>,<expr><name>objectCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"memory"</literal></expr>,<expr><name>memoryCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"client"</literal></expr>,<expr><name>clientCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"as"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"eval"</literal></expr>,<expr><name>evalCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"s"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>evalGetKeys</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"evalsha"</literal></expr>,<expr><name>evalShaCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"s"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>evalGetKeys</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"slowlog"</literal></expr>,<expr><name>slowlogCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"aR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"script"</literal></expr>,<expr><name>scriptCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"s"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"time"</literal></expr>,<expr><name>timeCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"RF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bitop"</literal></expr>,<expr><name>bitopCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bitcount"</literal></expr>,<expr><name>bitcountCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bitpos"</literal></expr>,<expr><name>bitposCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"wait"</literal></expr>,<expr><name>waitCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"s"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"command"</literal></expr>,<expr><name>commandCommand</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="string">"ltR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"geoadd"</literal></expr>,<expr><name>geoaddCommand</name></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"georadius"</literal></expr>,<expr><name>georadiusCommand</name></expr>,<expr><operator>-</operator><literal type="number">6</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>georadiusGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"georadius_ro"</literal></expr>,<expr><name>georadiusroCommand</name></expr>,<expr><operator>-</operator><literal type="number">6</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>georadiusGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"georadiusbymember"</literal></expr>,<expr><name>georadiusbymemberCommand</name></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>georadiusGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"georadiusbymember_ro"</literal></expr>,<expr><name>georadiusbymemberroCommand</name></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>georadiusGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"geohash"</literal></expr>,<expr><name>geohashCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"geopos"</literal></expr>,<expr><name>geoposCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"geodist"</literal></expr>,<expr><name>geodistCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pfselftest"</literal></expr>,<expr><name>pfselftestCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"a"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pfadd"</literal></expr>,<expr><name>pfaddCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pfcount"</literal></expr>,<expr><name>pfcountCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pfmerge"</literal></expr>,<expr><name>pfmergeCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pfdebug"</literal></expr>,<expr><name>pfdebugCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"w"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xadd"</literal></expr>,<expr><name>xaddCommand</name></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><literal type="string">"wmFR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xrange"</literal></expr>,<expr><name>xrangeCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xrevrange"</literal></expr>,<expr><name>xrevrangeCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xlen"</literal></expr>,<expr><name>xlenCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"rF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xread"</literal></expr>,<expr><name>xreadCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"rs"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>xreadGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xreadgroup"</literal></expr>,<expr><name>xreadCommand</name></expr>,<expr><operator>-</operator><literal type="number">7</literal></expr>,<expr><literal type="string">"ws"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>xreadGetKeys</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xgroup"</literal></expr>,<expr><name>xgroupCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wm"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xsetid"</literal></expr>,<expr><name>xsetidCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">"wmF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xack"</literal></expr>,<expr><name>xackCommand</name></expr>,<expr><operator>-</operator><literal type="number">4</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xpending"</literal></expr>,<expr><name>xpendingCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xclaim"</literal></expr>,<expr><name>xclaimCommand</name></expr>,<expr><operator>-</operator><literal type="number">6</literal></expr>,<expr><literal type="string">"wRF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xinfo"</literal></expr>,<expr><name>xinfoCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xdel"</literal></expr>,<expr><name>xdelCommand</name></expr>,<expr><operator>-</operator><literal type="number">3</literal></expr>,<expr><literal type="string">"wF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xtrim"</literal></expr>,<expr><name>xtrimCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"wFR"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"post"</literal></expr>,<expr><name>securityWarningCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"lt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"host:"</literal></expr>,<expr><name>securityWarningCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"lt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"latency"</literal></expr>,<expr><name>latencyCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"aslt"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lolwut"</literal></expr>,<expr><name>lolwutCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">"r"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*============================ Utility functions ============================ */</comment>

<comment type="block">/* We use a private localtime implementation which is fork-safe. The logging
 * function of Redis may be called from other threads. */</comment>
<function_decl><type><name>void</name></type> <name>nolocks_localtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef> <comment type="line">// serverLog code moved to Win32_Interop/Win32_RedisLog.c for sharing across binaries</comment>

<comment type="block">/* Low level logging. To use only for very big messages, otherwise
 * serverLog() is to prefer. */</comment>
<function><type><name>void</name></type> <name>serverLogRaw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>syslogLevelMap</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>LOG_DEBUG</name></expr>, <expr><name>LOG_INFO</name></expr>, <expr><name>LOG_NOTICE</name></expr>, <expr><name>LOG_WARNING</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><literal type="string">".-*#"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rawmode</name> <init>= <expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <name>LL_RAW</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>log_to_stdout</name> <init>= <expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>level</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> <comment type="block">/* clear flags */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>fp</name> <operator>=</operator> <ternary><condition><expr><name>log_to_stdout</name></expr> ?</condition><then> <expr><name>stdout</name></expr> </then><else>: <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rawmode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>role_char</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>nolocks_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>,<argument><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>timezone</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>daylight_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%d %b %Y %H:%M:%S."</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>off</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>off</name></expr></argument>,<argument><expr><literal type="string">"%03d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>role_char</name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt> <comment type="block">/* Sentinel. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>pid</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>role_char</name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt> <comment type="block">/* RDB / AOF writing child. */</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>role_char</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr> ?</condition><then> <expr><literal type="char">'S'</literal></expr></then><else>:<expr><literal type="char">'M'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Slave or Master. */</comment>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%d:%c %s %c %s\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>role_char</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_to_stdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name><name>syslogLevelMap</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Like serverLogRaw() but with printf-alike support. This is the function that
 * is used across the code. The raw version is only used in order to dump
 * the INFO output on crash. */</comment>
<function><type><name>void</name></type> <name>serverLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Log a fixed message without printf-alike capabilities, in a way that is
 * safe to call from a signal handler.
 *
 * We actually use this only for signals that are not fatal from the point
 * of view of Redis. Signals that are going to kill the server anyway and
 * where we need printf-alike features are served by serverLog(). */</comment>
<function><type><name>void</name></type> <name>serverLogFromHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>log_to_stdout</name> <init>= <expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>||</operator> <operator>(</operator><name>log_to_stdout</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>daemonize</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <ternary><condition><expr><name>log_to_stdout</name></expr> ?</condition><then> <expr><name>STDOUT_FILENO</name></expr> </then><else>:
                         <expr><call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>, <argument><expr><name>O_APPEND</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">":signal-handler ("</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">") "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<label><name>err</name>:</label>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_to_stdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Return the UNIX time in microseconds */</comment>
<function><type><name>PORT_LONGLONG</name></type> <name>ustime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ust</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ust</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ust</name> <operator>+=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
    <return>return <expr><name>ust</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the UNIX time in milliseconds */</comment>
<function><type><name>PORT_LONGLONG</name></type> <name>mstime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>ustime</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* After an RDB dump or AOF rewrite we exit from children using _exit() instead of
 * exit(), because the latter may interact with the same file objects used by
 * the parent process. However if we are testing the coverage normal exit() is
 * used in order to obtain the right coverage information. */</comment>
<function><type><name>void</name></type> <name>exitFromChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COVERAGE_TEST</name></cpp:ifdef>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>retcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>retcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*====================== Hash table type implementation  ==================== */</comment>

<comment type="block">/* This is a hash table type that uses the SDS dynamic strings library as
 * keys and redis objects as values (objects can hold SDS strings,
 * lists, sets). */</comment>

<function><type><name>void</name></type> <name>dictVanillaFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DICT_NOTUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dictListDestructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DICT_NOTUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><operator>(</operator><name>list</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictSdsKeyCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>l1</name></decl>,<decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>DICT_NOTUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>l2</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name>key2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                                <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
    <if_stmt><if>if <condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* A case insensitive version used for the command lookup table and other
 * places where case insensitive non binary-safe comparison is needed. */</comment>
<function><type><name>int</name></type> <name>dictSdsKeyCaseCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DICT_NOTUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dictObjectDestructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DICT_NOTUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* Lazy freeing will set value to NULL. */</comment>
    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dictSdsDestructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DICT_NOTUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictObjKeyCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o1</name> <init>= <expr><name>key1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o2</name> <init>= <expr><name>key2</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>dictSdsKeyCompare</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>,<argument><expr><name><name>o1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>o2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictObjHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>               <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictSdsHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>   <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictSdsCaseHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>dictGenCaseHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dictEncObjKeyCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o1</name> <init>= <expr><operator>(</operator><name>robj</name><operator>*</operator><operator>)</operator> <name>key1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o2</name> <init>= <expr><operator>(</operator><name>robj</name><operator>*</operator><operator>)</operator> <name>key2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name> <operator>&amp;&amp;</operator>
        <name><name>o2</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>o1</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name><name>o2</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>dictSdsKeyCompare</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>,<argument><expr><name><name>o1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>o2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>dictEncObjHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>(</operator><name>robj</name><operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>          <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>dictGenHashFunction</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>dictGenHashFunction</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><operator>(</operator><name>sds</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
            <name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <return>return <expr><name>hash</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Generic hash table type where keys are Redis Objects, Values
 * dummy pointers. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>objectKeyPointerValueDictType</name> <init>= <expr><block>{
    <expr><name>dictEncObjHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictEncObjKeyCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictObjectDestructor</name></expr>,      <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                       <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Like objectKeyPointerValueDictType(), but values can be destroyed, if
 * not NULL, calling zfree(). */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>objectKeyHeapPointerValueDictType</name> <init>= <expr><block>{
    <expr><name>dictEncObjHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictEncObjKeyCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictObjectDestructor</name></expr>,      <comment type="block">/* key destructor */</comment>
    <expr><name>dictVanillaFree</name></expr>            <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Set dictionary type. Keys are SDS strings, values are ot used. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>setDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,               <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,         <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,         <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                       <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Sorted sets hash (note: a skiplist is used in addition to the hash table) */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>zsetDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,               <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,         <comment type="block">/* key compare */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* Note: SDS string shared &amp; freed by skiplist */</comment>
    <expr><name>NULL</name></expr>                       <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Db-&gt;dict, keys are sds strings, vals are Redis objects. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>dbDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,                <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,          <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>dictObjectDestructor</name></expr>   <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* server.lua_scripts sha (as sds string) -&gt; scripts (as robj) cache. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>shaScriptObjectDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>dictObjectDestructor</name></expr>        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Db-&gt;expires */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>keyptrDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,                <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,          <comment type="block">/* key compare */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Command table. sds string -&gt; command struct pointer. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>commandTableDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Hash type hash table (note that small hashes are represented with ziplists) */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>hashDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,                <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,          <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>dictSdsDestructor</name></expr>           <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Keylist hash table type has unencoded redis objects as keys and
 * lists as values. It's used for blocking operations (BLPOP) and to
 * map swapped keys to a list of clients waiting for this keys to be loaded. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>keylistDictType</name> <init>= <expr><block>{
    <expr><name>dictObjHash</name></expr>,                <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictObjKeyCompare</name></expr>,          <comment type="block">/* key compare */</comment>
    <expr><name>dictObjectDestructor</name></expr>,       <comment type="block">/* key destructor */</comment>
    <expr><name>dictListDestructor</name></expr>          <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Cluster nodes hash table, mapping nodes addresses 1.2.3.4:6379 to
 * clusterNode structures. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>clusterNodesDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,                <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,          <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Cluster re-addition blacklist. This maps node IDs to the time
 * we can re-add this node. The goal is to avoid readding a removed
 * node for some time. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>clusterNodesBlackListDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Cluster re-addition blacklist. This maps node IDs to the time
 * we can re-add this node. The goal is to avoid readding a removed
 * node for some time. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>modulesDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Migrate cache dict type. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>migrateCacheDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,                <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,          <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Replication cached script dict (server.repl_scriptcache_dict).
 * Keys are sds SHA1 strings, while values are not used at all in the current
 * implementation. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>replScriptCacheDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>htNeedsResize</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>used</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dictSlots</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>used</name><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>size</name> <operator>&lt;</operator> <name>HASHTABLE_MIN_FILL</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* If the percentage of used slots in the HT reaches HASHTABLE_MIN_FILL
 * we resize the hash table to save memory */</comment>
<function><type><name>void</name></type> <name>tryResizeHashTables</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>htNeedsResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dictResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>htNeedsResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dictResize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Our hash table implementation performs rehashing incrementally while
 * we write/read from the hash table. Still if the server is idle, the hash
 * table will use two tables for a long time. So we try to use 1 millisecond
 * of CPU time at every call of this function to perform some rehahsing.
 *
 * The function returns 1 if some rehashing was performed, otherwise 0
 * is returned. */</comment>
<function><type><name>int</name></type> <name>incrementallyRehash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Keys dictionary */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dictRehashMilliseconds</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* already used our millisecond for this loop... */</comment>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Expires */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>dictIsRehashing</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dictRehashMilliseconds</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* already used our millisecond for this loop... */</comment>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is called once a background process of some kind terminates,
 * as we want to avoid resizing the hash tables when there is a child in order
 * to play well with copy-on-write (otherwise when a resize happens lots of
 * memory pages are copied). The goal of this function is to update the ability
 * for dict.c to resize the hash tables accordingly to the fact we have o not
 * running childs. */</comment>
<function><type><name>void</name></type> <name>updateDictResizePolicy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dictEnableResize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dictDisableResize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hasActiveChildProcess</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
           <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ======================= Cron: called every 100 ms ======================== */</comment>

<comment type="block">/* Add a sample to the operations per second array of samples. */</comment>
<function><type><name>void</name></type> <name>trackInstantaneousMetric</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>current_reading</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>t</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_time</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ops</name> <init>= <expr><name>current_reading</name> <operator>-</operator>
                    <name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_count</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ops_sec</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ops_sec</name> <operator>=</operator> <ternary><condition><expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ops</name><operator>*</operator><literal type="number">1000</literal><operator>/</operator><name>t</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name><name>samples</name><index>[<expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>idx</name></expr>]</index></name> <operator>=</operator>
        <name>ops_sec</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>idx</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>%=</operator> <name>STATS_METRIC_SAMPLES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_time</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name>last_sample_count</name> <operator>=</operator> <name>current_reading</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return the mean of all the samples. */</comment>
<function><type><name>PORT_LONGLONG</name></type> <name>getInstantaneousMetric</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>metric</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STATS_METRIC_SAMPLES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>metric</name></expr>]</index></name><operator>.</operator><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>sum</name> <operator>/</operator> <name>STATS_METRIC_SAMPLES</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check for timeouts. Returns non-zero if the client was terminated.
 * The function gets the current time in milliseconds as argument since
 * it gets called multiple times in a loop, so calling gettimeofday() for
 * each iteration would be costly without any actual gain. */</comment>
<function><type><name>int</name></type> <name>clientsCronHandleTimeout</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>now_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><name>now_ms</name><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>    <comment type="block">/* no timeout for slaves and monitors */</comment>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>   <comment type="block">/* no timeout for masters */</comment>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name><operator>)</operator> <operator>&amp;&amp;</operator>  <comment type="block">/* no timeout for BLPOP */</comment>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PUBSUB</name><operator>)</operator> <operator>&amp;&amp;</operator>   <comment type="block">/* no timeout for Pub/Sub clients */</comment>
        <operator>(</operator><name>now</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>lastinteraction</name></name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>maxidletime</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"Closing idle client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_BLOCKED</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Blocked OPS timeout is handled with milliseconds resolution.
         * However note that the actual resolution is limited by
         * server.hz. */</comment>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>timeout</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>bpop</name><operator>.</operator><name>timeout</name></name> <operator>&lt;</operator> <name>now_ms</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Handle blocking operation specific timeout. */</comment>
            <expr_stmt><expr><call><name>replyToBlockedClientTimedOut</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>unblockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Cluster: handle unblock &amp; redirect of clients blocked
             * into keys no longer served by this server. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>clusterRedirectBlockedClientIfNeeded</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>unblockClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The client query buffer is an sds.c string that can end with a lot of
 * free space not used, this function reclaims space if needed.
 *
 * The function always returns 0 as it never terminates the client. */</comment>
<function><type><name>int</name></type> <name>clientsCronResizeQueryBuffer</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>querybuf_size</name> <init>= <expr><call><name>sdsAllocSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>idletime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>lastinteraction</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* There are two conditions to resize the query buffer:
     * 1) Query buffer is &gt; BIG_ARG and too big for latest peak.
     * 2) Query buffer is &gt; BIG_ARG and client is idle. */</comment>
    <if_stmt><if>if <condition>(<expr><name>querybuf_size</name> <operator>&gt;</operator> <name>PROTO_MBULK_BIG_ARG</name> <operator>&amp;&amp;</operator>
         <operator>(</operator><operator>(</operator><name>querybuf_size</name><operator>/</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator>
          <name>idletime</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Only resize the query buffer if it is actually wasting
         * at least a few kbytes. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdsavail</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name> <operator>=</operator> <call><name>sdsRemoveFreeSpace</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Reset the peak again to capture the peak memory usage in the next
     * cycle. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf_peak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Clients representing masters also use a "pending query buffer" that
     * is the yet not applied part of the stream we are reading. Such buffer
     * also needs resizing from time to time, otherwise after a very large
     * transfer (a huge value or a big MIGRATE operation) it will keep using
     * a lot of memory. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* There are two conditions to resize the pending query buffer:
         * 1) Pending Query buffer is &gt; LIMIT_PENDING_QUERYBUF.
         * 2) Used length is smaller than pending_querybuf_size/2 */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>pending_querybuf_size</name> <init>= <expr><call><name>sdsAllocSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>pending_querybuf_size</name> <operator>&gt;</operator> <name>LIMIT_PENDING_QUERYBUF</name> <operator>&amp;&amp;</operator>
           <call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>pending_querybuf_size</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name> <operator>=</operator> <call><name>sdsRemoveFreeSpace</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pending_querybuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is used in order to track clients using the biggest amount
 * of memory in the latest few seconds. This way we can provide such information
 * in the INFO output (clients section), without having to do an O(N) scan for
 * all the clients.
 *
 * This is how it works. We have an array of CLIENTS_PEAK_MEM_USAGE_SLOTS slots
 * where we track, for each, the biggest client output and input buffers we
 * saw in that slot. Every slot correspond to one of the latest seconds, since
 * the array is indexed by doing UNIXTIME % CLIENTS_PEAK_MEM_USAGE_SLOTS.
 *
 * When we want to know what was recently the peak memory usage, we just scan
 * such few slots searching for the maximum value. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>ClientsPeakMemInput</name><index>[<expr><name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>ClientsPeakMemOutput</name><index>[<expr><name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>clientsCronTrackExpansiveClients</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>in_usage</name> <init>= <expr><call><name>sdsAllocSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>querybuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>out_usage</name> <init>= <expr><call><name>getClientOutputBufferMemoryUsage</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name> <operator>%</operator> <name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>zeroidx</name> <init>= <expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Always zero the next sample, so that when we switch to that second, we'll
     * only register samples that are greater in that second without considering
     * the history of such slot.
     *
     * Note: our index may jump to any random position if serverCron() is not
     * called for some reason with the normal frequency, for instance because
     * some slow command is called taking multiple seconds to execute. In that
     * case our array may end containing data which is potentially older
     * than CLIENTS_PEAK_MEM_USAGE_SLOTS seconds: however this is not a problem
     * since here we want just to track if "recently" there were very expansive
     * clients from the POV of memory usage. */</comment>
    <expr_stmt><expr><name><name>ClientsPeakMemInput</name><index>[<expr><name>zeroidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ClientsPeakMemOutput</name><index>[<expr><name>zeroidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Track the biggest values observed so far in this slot. */</comment>
    <if_stmt><if>if <condition>(<expr><name>in_usage</name> <operator>&gt;</operator> <name><name>ClientsPeakMemInput</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ClientsPeakMemInput</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>in_usage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>out_usage</name> <operator>&gt;</operator> <name><name>ClientsPeakMemOutput</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ClientsPeakMemOutput</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>out_usage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* This function never terminates the client. */</comment>
</block_content>}</block></function>

<comment type="block">/* Return the max samples in the memory usage of clients tracked by
 * the function clientsCronTrackExpansiveClients(). */</comment>
<function><type><name>void</name></type> <name>getExpansiveClientsInfo</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>in_usage</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_usage</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENTS_PEAK_MEM_USAGE_SLOTS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ClientsPeakMemInput</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ClientsPeakMemInput</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ClientsPeakMemOutput</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>ClientsPeakMemOutput</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>in_usage</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>out_usage</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is called by serverCron() and is used in order to perform
 * operations on clients that are important to perform constantly. For instance
 * we use this function in order to disconnect clients after a timeout, including
 * clients blocked in some blocking command with a non-zero timeout.
 *
 * The function makes some effort to process all the clients every second, even
 * if this cannot be strictly guaranteed, since serverCron() may be called with
 * an actual frequency lower than server.hz in case of latency events like slow
 * commands.
 *
 * It is very important for this function, and the functions it calls, to be
 * very fast: sometimes Redis has tens of hundreds of connected clients, and the
 * default server.hz value is 10, so sometimes here we need to process thousands
 * of clients per second, turning this function into a source of latency.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENTS_CRON_MIN_ITERATIONS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>clientsCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Try to process at least numclients/server.hz of clients
     * per call. Since normally (if there are no big latency events) this
     * function is called server.hz times per second, in the average case we
     * process all the clients in 1 second. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>numclients</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                           <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast (int) */</comment>
    <name>int</name></type> <name>iterations</name> <init>= <expr><name>numclients</name><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Process at least a few clients while we are at it, even if we need
     * to process less than CLIENTS_CRON_MIN_ITERATIONS to meet our contract
     * of processing each client once per second. */</comment>
    <if_stmt><if>if <condition>(<expr><name>iterations</name> <operator>&lt;</operator> <name>CLIENTS_CRON_MIN_ITERATIONS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>iterations</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>numclients</name> <operator>&lt;</operator> <name>CLIENTS_CRON_MIN_ITERATIONS</name><operator>)</operator></expr> ?</condition><then>
                     <expr><name>numclients</name></expr> </then><else>: <expr><name>CLIENTS_CRON_MIN_ITERATIONS</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>iterations</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

        <comment type="block">/* Rotate the list, take the current head, process.
         * This way if the client must be removed from the list it's the
         * first element and we don't incur into O(N) computation. */</comment>
        <expr_stmt><expr><call><name>listRotateTailToHead</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>listNodeValue</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* The following functions do different service checks on the client.
         * The protocol is that they return non-zero if the client was
         * terminated. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>clientsCronHandleTimeout</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>clientsCronResizeQueryBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>clientsCronTrackExpansiveClients</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* This function handles 'background' operations we are required to do
 * incrementally in Redis databases, such as active key expiring, resizing,
 * rehashing. */</comment>
<function><type><name>void</name></type> <name>databasesCron</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Expire keys by random sampling. Not required for slaves
     * as master will synthesize DELs for us. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>activeExpireCycle</name><argument_list>(<argument><expr><name>ACTIVE_EXPIRE_CYCLE_SLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>expireSlaveKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Defrag keys gradually. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>activeDefragCycle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Perform hash tables rehashing if needed, but only if there are no
     * other processes saving the DB on disk. Otherwise rehashing is bad
     * as will cause a lot of copy-on-write of memory pages. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* We use global counters so if we stop the computation at a given
         * DB we'll be able to start from the successive in the next
         * cron loop iteration. */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>resize_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rehash_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dbs_per_call</name> <init>= <expr><name>CRON_DBS_PER_CALL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <comment type="block">/* Don't test more DBs than we have. */</comment>
        <if_stmt><if>if <condition>(<expr><name>dbs_per_call</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dbs_per_call</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Resize */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dbs_per_call</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>tryResizeHashTables</name><argument_list>(<argument><expr><name>resize_db</name> <operator>%</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resize_db</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="block">/* Rehash */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>activerehashing</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dbs_per_call</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>work_done</name> <init>= <expr><call><name>incrementallyRehash</name><argument_list>(<argument><expr><name>rehash_db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>work_done</name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* If the function did some work, stop here, we'll do
                     * more at the next cron loop. */</comment>
                    <break>break;</break>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="block">/* If this db didn't need rehash, we'll try the next one. */</comment>
                    <expr_stmt><expr><name>rehash_db</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rehash_db</name> <operator>%=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* We take a cached value of the unix time in the global state because with
 * virtual memory and aging there is to store the current time in objects at
 * every object access, and accuracy is not needed. To access a global var is
 * a lot faster than calling time(NULL).
 *
 * This function should be fast because it is called at every command execution
 * in call(), so it is possible to decide if to update the daylight saving
 * info or not using the 'update_daylight_info' argument. Normally we update
 * such info only when calling this function from serverCron() but not when
 * calling it from call(). */</comment>
<function><type><name>void</name></type> <name>updateCachedTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>update_daylight_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>ustime</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>mstime</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>ustime</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>unixtime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>mstime</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixtime</name></name></expr></argument>,<argument><expr><name>unixtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* To get information about daylight saving time, we need to call
     * localtime_r and cache the result. However calling localtime_r in this
     * context is safe since we will never fork() while here, in the main
     * thread. The logging function will call a thread safe version of
     * localtime that has no locks. */</comment>
    <if_stmt><if>if <condition>(<expr><name>update_daylight_info</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>time_t</name></type> <name>ut</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <expr_stmt><expr><call><name>localtime_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ut</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>daylight_active</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This is our timer interrupt, called server.hz times per second.
 * Here is where we do a number of things that need to be done asynchronously.
 * For instance:
 *
 * - Active expired keys collection (it is also performed in a lazy way on
 *   lookup).
 * - Software watchdog.
 * - Update some statistic.
 * - Incremental rehashing of the DBs hash tables.
 * - Triggering BGSAVE / AOF rewrite, and handling of terminated children.
 * - Clients timeout of different kinds.
 * - Replication reconnection.
 * - Many more...
 *
 * Everything directly called here will be called server.hz times per second,
 * so in order to throttle execution of things we want to do less frequently
 * a macro is used: run_with_period(milliseconds) { .... }
 */</comment>

<function><type><name>int</name></type> <name>serverCron</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Software watchdog: deliver the SIGALRM that will reach the signal
     * handler if we don't return here fast enough. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>watchdogScheduleSignal</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Update the time cache. */</comment>
    <expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>config_hz</name></name></expr>;</expr_stmt>
    <comment type="block">/* Adapt the server.hz value to the number of configured clients. If we have
     * many clients, we want to call serverCron() with an higher frequency. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>server</name><operator>.</operator><name>hz</name></name> <operator>&gt;</operator>
               <name>MAX_CLIENTS_PER_CLOCK_TICK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>&gt;</operator> <name>CONFIG_MAX_HZ</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_MAX_HZ</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>trackInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_COMMAND</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>trackInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_INPUT</name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>trackInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_OUTPUT</name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* We have just LRU_BITS bits per object for LRU information.
     * So we use an (eventually wrapping) LRU clock.
     *
     * Note that even if the counter wraps it's not a big problem,
     * everything will still work but some object will appear younger
     * to Redis. However for this to happen a given object should never be
     * touched for all the time needed to the counter to wrap, which is
     * not likely.
     *
     * Note that you can change the resolution altering the
     * LRU_CLOCK_RESOLUTION define. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>lruclock</name> <init>= <expr><call><name>getLRUClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lruclock</name></name></expr></argument>,<argument><expr><name>lruclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Record the max memory used since the server was started. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>
        <comment type="block">/* Sample the RSS and other metrics here since this is a relatively slow call.
         * We must sample the zmalloc_used at the same time we take the rss, otherwise
         * the frag ratio calculate may be off (ratio of two samples at different times) */</comment>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name> <operator>=</operator> <call><name>zmalloc_get_rss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>zmalloc_used</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Sampling the allcator info can be slow too.
         * The fragmentation ratio it'll show is potentically more accurate
         * it excludes other RSS pages such as: shared libraries, LUA and other non-zmalloc
         * allocations, and allocator reserved pages that can be pursed (all not actual frag) */</comment>
        <expr_stmt><expr><call><name>zmalloc_get_allocator_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* in case the allocator isn't providing these stats, fake them so that
         * fragmention info still shows some (inaccurate metrics) */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* LUA memory isn't part of zmalloc_used, but it is part of the process RSS,
             * so we must desuct it in order to be able to calculate correct
             * "allocator fragmentation" ratio */</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>lua_memory</name> <init>= <expr><call><name>lua_gc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><name>LUA_GCCOUNT</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>  
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name> <operator>-</operator> <name>lua_memory</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>zmalloc_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/* We received a SIGTERM, shutting down here in a safe way, as it is
     * not ok doing so inside the signal handler. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>prepareForShutdown</name><argument_list>(<argument><expr><name>SHUTDOWN_NOFLAGS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"SIGTERM received but errors trying to shut down the server, check the logs for more information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Show some info about non-empty databases */</comment>
    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">5000</literal></argument>)</argument_list></macro> <block>{<block_content>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>used</name></decl>, <decl><type ref="prev"/><name>vkeys</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dictSlots</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vkeys</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>used</name> <operator>||</operator> <name>vkeys</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"DB %d: %lld keys (%lld volatile) in %lld slots HT."</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>used</name></expr></argument>,<argument><expr><name>vkeys</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* dictPrintStats(server.dict); */</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <comment type="block">/* Show information about connected clients */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
        <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">5000</literal></argument>)</argument_list></macro> <block>{<block_content>
            <macro><name>serverLog</name><argument_list>(<argument>LL_VERBOSE</argument>,
                <argument><literal type="string">"%Iu clients connected (%Iu replicas), %Iu bytes in use"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu, %lu -&gt; %Iu */</comment>
                listLength(server.clients)-listLength(server.slaves)</argument>,
                <argument>listLength(server.slaves)</argument>,
                <argument>zmalloc_used_memory()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* We need to do a few operations on clients asynchronously. */</comment>
    <expr_stmt><expr><call><name>clientsCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Handle background operations on Redis databases. */</comment>
    <expr_stmt><expr><call><name>databasesCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Start a scheduled AOF rewrite if this was requested by the user while
     * a BGSAVE was in progress. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>rewriteAppendOnlyFileBackground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if a background saving or AOF rewrite in progress terminated. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
        <call><name>ldbPendingChildren</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>GetForkOperationStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name>osCOMPLETE</name> <operator>||</operator> <call><name>GetForkOperationStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name>osFAILED</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>RequestSuspension</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>SuspensionCompleted</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>exitcode</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>bysignal</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>bysignal</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>GetForkOperationStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name>osFAILED</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>bysignal</name></expr> ?</condition><then> <expr><literal type="string">"fork operation failed"</literal></expr> </then><else>: <expr><literal type="string">"fork operation complete"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>EndForkOperation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ResumeFromSuspension</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>backgroundSaveDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>receiveChildInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>backgroundRewriteDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>receiveChildInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><name>int</name></type> <name>statloc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>wait3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statloc</name></expr></argument>,<argument><expr><name>WNOHANG</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>exitcode</name> <init>= <expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>bysignal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bysignal</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"wait3() returned an error: %s. "</literal>
                    <literal type="string">"rdb_child_pid = %d, aof_child_pid = %d"</literal></expr></argument>,
                    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>backgroundSaveDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>,<argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>receiveChildInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>backgroundRewriteDoneHandler</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>,<argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>receiveChildInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldbRemoveChild</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                        <argument><expr><literal type="string">"Warning, detected child with unmatched pid: %ld"</literal></expr></argument>,
                        <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* If there is not a background saving/rewrite in progress check if
         * we have to save/rewrite now. */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>saveparam</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>server</name><operator>.</operator><name>saveparams</name></name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Save if we reached the given amount of changes,
             * the given amount of seconds, and if the latest bgsave was
             * successful or if, in case of an error, at least
             * CONFIG_BGSAVE_RETRY_DELAY seconds already elapsed. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>&gt;=</operator> <name><name>sp</name><operator>-&gt;</operator><name>changes</name></name> <operator>&amp;&amp;</operator>
                <name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>&gt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>seconds</name></name> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>&gt;</operator>
                 <name>CONFIG_BGSAVE_RETRY_DELAY</name> <operator>||</operator>
                 <name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"%d changes in %d seconds. Saving..."</literal></expr></argument>,
                    <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>changes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/* Trigger an AOF rewrite if needed. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name> <operator>&amp;&amp;</operator>
            <name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
            <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
            <name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name> <operator>&amp;&amp;</operator>
            <name><name>server</name><operator>.</operator><name>aof_current_size</name></name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>base</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name></expr> ?</condition><then>
                <expr><name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>growth</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_current_size</name></name><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>base</name><operator>)</operator> <operator>-</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>growth</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Starting automatic rewriting of AOF on %lld%% growth"</literal></expr></argument>,<argument><expr><name>growth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rewriteAppendOnlyFileBackground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>


    <comment type="block">/* AOF postponed flush: Try at every cron cycle if the slow fsync
     * completed. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_flush_postponed_start</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* AOF write errors: in this case we have a buffer to flush as well and
     * clear the AOF error in case of success to make the DB writable again,
     * however to try every second is enough in case of 'hz' is set to
     * an higher frequency. */</comment>
    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/* Close clients that need to be closed asynchronous */</comment>
    <expr_stmt><expr><call><name>freeClientsInAsyncFreeQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear the paused clients flag if needed. */</comment>
    <expr_stmt><expr><call><name>clientsArePaused</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Don't check return value, just use the side effect.*/</comment>

    <comment type="block">/* Replication cron function -- used to reconnect to master,
     * detect transfer failures, start background RDB transfers and so forth. */</comment>
    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>replicationCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Run the Redis Cluster cron. */</comment>
    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">100</literal></argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterCron</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/* Run the Sentinel timer if we are in sentinel mode. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Cleanup expired MIGRATE cached sockets. */</comment>
    <macro><name>run_with_period</name><argument_list>(<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>migrateCloseTimedoutSockets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Start a scheduled BGSAVE if the corresponding flag is set. This is
     * useful when we are forced to postpone a BGSAVE because an AOF
     * rewrite is in progress.
     *
     * Note: this code must be after the replicationCron() call above so
     * make sure when refactoring this file to keep this order. This is useful
     * because we want to give priority to RDB savings for replication. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>&gt;</operator> <name>CONFIG_BGSAVE_RETRY_DELAY</name> <operator>||</operator>
         <name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cronloops</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1000</literal><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function gets called every time Redis is entering the
 * main loop of the event driven library, that is, before to sleep
 * for ready file descriptors. */</comment>
<function><type><name>void</name></type> <name>beforeSleep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="line">//1) check if child has signaled parent to stop sending diffs</comment>
	<comment type="line">//2) check if more data can be written to the child and write it</comment>
	<expr_stmt><expr><call><name>aofProcessDiffRewriteEvents</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Call the Redis Cluster before sleep function. Note that this function
     * may change the state of Redis Cluster (from ok to fail or vice versa),
     * so it's a good idea to call it before serving the unblocked clients
     * later in this function. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterBeforeSleep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Run a fast expire cycle (the called function will return
     * ASAP if a fast cycle is not needed). */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>activeExpireCycle</name><argument_list>(<argument><expr><name>ACTIVE_EXPIRE_CYCLE_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Send all the slaves an ACK request if at least one client blocked
     * during the previous event loop iteration. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"REPLCONF"</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"GETACK"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Not used argument. */</comment>
        <expr_stmt><expr><call><name>replicationFeedSlaves</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Unblock all the clients blocked for synchronous replication
     * in WAIT. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>processClientsWaitingReplicas</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Check if there are clients unblocked by modules that implement
     * blocking commands. */</comment>
    <expr_stmt><expr><call><name>moduleHandleBlockedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Try to process pending commands for clients that were just unblocked. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unblocked_clients</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>processUnblockedClients</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Write the AOF buffer on disk */</comment>
    <expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Handle writes with pending output buffers. */</comment>
    <expr_stmt><expr><call><name>handleClientsWithPendingWrites</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Before we are going to sleep, let the threads access the dataset by
     * releasing the GIL. Redis main thread will not touch anything at this
     * time. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>moduleCount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleReleaseGIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is called immadiately after the event loop multiplexing
 * API returned, and the control is going to soon return to Redis by invoking
 * the different events callbacks. */</comment>
<function><type><name>void</name></type> <name>afterSleep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aeEventLoop</name></name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>moduleCount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>moduleAcquireGIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* =========================== Server initialization ======================== */</comment>

<function><type><name>void</name></type> <name>createSharedObjects</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>crlf</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>ok</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+OK\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>err</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-ERR\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptybulk</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"$0\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>czero</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">":0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>cone</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">":1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>cnegone</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">":-1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"$-1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nullmultibulk</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*-1\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptymultibulk</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pong</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+PONG\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>queued</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+QUEUED\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>emptyscan</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"*2\r\n$1\r\n0\r\n*0\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>wrongtypeerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-WRONGTYPE Operation against a key holding the wrong kind of value\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-ERR no such key\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-ERR syntax error\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>sameobjecterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-ERR source and destination objects are the same\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>outofrangeerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-ERR index out of range\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>noscripterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-NOSCRIPT No matching script. Please use EVAL.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>loadingerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-LOADING Redis is loading the dataset in memory\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>slowscripterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-BUSY Redis is busy running a script. You can only call SCRIPT KILL or SHUTDOWN NOSAVE.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>masterdownerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>bgsaveerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>roslaveerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-READONLY You can't write against a read only replica.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>noautherr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-NOAUTH Authentication required.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>oomerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-OOM command not allowed when used memory &gt; 'maxmemory'.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>execaborterr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-EXECABORT Transaction discarded because of previous errors.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>noreplicaserr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-NOREPLICAS Not enough good replicas to write.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>busykeyerr</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"-BUSYKEY Target key name already exists.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>space</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>colon</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>plus</name></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PROTO_SHARED_SELECT_CMDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>dictid_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dictid_len</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>dictid_len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>dictid_str</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dictid_str</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>select</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
            <argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n"</literal></expr></argument>,
                <argument><expr><name>dictid_len</name></expr></argument>, <argument><expr><name>dictid_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>messagebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$7\r\nmessage\r\n"</literal></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>pmessagebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$8\r\npmessage\r\n"</literal></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>subscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$9\r\nsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>unsubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$11\r\nunsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>psubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$10\r\npsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>punsubscribebulk</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"$12\r\npunsubscribe\r\n"</literal></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>del</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"DEL"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>unlink</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"UNLINK"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>rpop</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"RPOP"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>lpop</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LPOP"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>lpush</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LPUSH"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>rpoplpush</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"RPOPLPUSH"</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>zpopmin</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"ZPOPMIN"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>zpopmax</name></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"ZPOPMAX"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>OBJ_SHARED_INTEGERS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>integers</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
            <call><name>makeObjectShared</name><argument_list>(<argument><expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>integers</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>encoding</name> <operator>=</operator> <name>OBJ_ENCODING_INT</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>OBJ_SHARED_BULKHDR_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>mbulkhdr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
            <argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"*%d\r\n"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>bulkhdr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
            <argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"$%d\r\n"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* The following two shared objects, minstring and maxstrings, are not
     * actually used for their value but as a special object meaning
     * respectively the minimum possible string and the maximum possible
     * string in string comparisons for the ZRANGEBYLEX command. */</comment>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>minstring</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"minstring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shared</name><operator>.</operator><name>maxstring</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"maxstring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initServerConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name> <name>:</name> <name>6031</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>next_client_id_mutex</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name> <name>:</name> <name>6031</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>lruclock_mutex</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name> <name>:</name> <name>6031</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>unixtime_mutex</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>runid</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>runid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>changeReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clearReplicationId2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <call><name>getTimeZone</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Initialized by tzset(). */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>executable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HZ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DYNAMIC_HZ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>arch_bits</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SERVER_PORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_TCP_BACKLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_UNIX_SOCKET_PERM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>ipfd_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>protected_mode</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_PROTECTED_MODE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DBNUM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_VERBOSITY</name></expr>;</expr_stmt>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>setLogVerbosityLevel(server.verbosity);</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_CLIENT_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>tcpkeepalive</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_TCP_KEEPALIVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_ACTIVE_DEFRAG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DEFRAG_IGNORE_BYTES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DEFRAG_THRESHOLD_LOWER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DEFRAG_THRESHOLD_UPPER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DEFRAG_CYCLE_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DEFRAG_CYCLE_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DEFRAG_MAX_SCAN_FIELDS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>proto_max_bulk_len</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_PROTO_MAX_BULK_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_max_querybuf_len</name></name> <operator>=</operator> <name>PROTO_MAX_QUERYBUF_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>logfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_LOGFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SYSLOG_ENABLED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_SYSLOG_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>POSIX_ONLY</name><argument_list>(<argument>server.syslog_facility = LOG_LOCAL0;</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_DAEMONIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>supervised</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>=</operator> <name>SUPERVISED_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>=</operator> <name>AOF_OFF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_fsync</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_AOF_FSYNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_no_fsync_on_rewrite</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name> <operator>=</operator> <name>AOF_REWRITE_PERC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name> <operator>=</operator> <name>AOF_REWRITE_MIN_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_fsync</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_time_last</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_lastbgrewrite_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_delayed_fsync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_selected_db</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Make sure the first time will not match */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_flush_postponed_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_incremental_fsync</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_RDB_SAVE_INCREMENTAL_FSYNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_load_truncated</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_AOF_LOAD_TRUNCATED</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_use_rdb_preamble</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_AOF_USE_RDB_PREAMBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_RDB_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_AOF_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_compression</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_RDB_COMPRESSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_RDB_CHECKSUM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_STOP_WRITES_ON_BGSAVE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>activerehashing</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_ACTIVE_REHASHING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_running</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_MAX_CLIENTS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>blocked_clients</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>blocked_clients_by_type</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>blocked_clients_by_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_MAXMEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_MAXMEMORY_POLICY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory_samples</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_MAXMEMORY_SAMPLES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lfu_log_factor</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_LFU_LOG_FACTOR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lfu_decay_time</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_LFU_DECAY_TIME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name> <operator>=</operator> <name>OBJ_HASH_MAX_ZIPLIST_ENTRIES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name> <operator>=</operator> <name>OBJ_HASH_MAX_ZIPLIST_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>list_max_ziplist_size</name></name> <operator>=</operator> <name>OBJ_LIST_MAX_ZIPLIST_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name> <operator>=</operator> <name>OBJ_LIST_COMPRESS_DEPTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name> <operator>=</operator> <name>OBJ_SET_MAX_INTSET_ENTRIES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_entries</name></name> <operator>=</operator> <name>OBJ_ZSET_MAX_ZIPLIST_ENTRIES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_value</name></name> <operator>=</operator> <name>OBJ_ZSET_MAX_ZIPLIST_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hll_sparse_max_bytes</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stream_node_max_bytes</name></name> <operator>=</operator> <name>OBJ_STREAM_NODE_MAX_BYTES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stream_node_max_entries</name></name> <operator>=</operator> <name>OBJ_STREAM_NODE_MAX_ENTRIES</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>=</operator> <name>CLUSTER_DEFAULT_NODE_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name> <operator>=</operator> <name>CLUSTER_DEFAULT_MIGRATION_BARRIER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name> <operator>=</operator> <name>CLUSTER_DEFAULT_SLAVE_VALIDITY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_require_full_coverage</name></name> <operator>=</operator> <name>CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name> <operator>=</operator> <name>CLUSTER_DEFAULT_SLAVE_NO_FAILOVER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_CLUSTER_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_CLUSTER_ANNOUNCE_IP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_CLUSTER_ANNOUNCE_PORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_CLUSTER_ANNOUNCE_BUS_PORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_module_flags</name></name> <operator>=</operator> <name>CLUSTER_MODULE_FLAG_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>migrateCacheDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>next_client_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Client IDs, start from 1 .*/</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_eviction</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_LAZYFREE_LAZY_EVICTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_LAZYFREE_LAZY_EXPIRE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_LAZYFREE_LAZY_SERVER_DEL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>always_show_logo</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_ALWAYS_SHOW_LOGO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name> <operator>=</operator> <name>LUA_SCRIPT_TIME_LIMIT</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lruclock</name> <init>= <expr><call><name>getLRUClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomicSet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lruclock</name></name></expr></argument>,<argument><expr><name>lruclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* save after 1 hour and 1 change */</comment>
    <expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* save after 5 minutes and 100 changes */</comment>
    <expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>,<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* save after 1 minute and 10000 changes */</comment>

    <comment type="block">/* Replication related */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>=</operator> <literal type="number">6379</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_initial_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_syncio_timeout</name></name> <operator>=</operator> <name>CONFIG_REPL_SYNCIO_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_READ_ONLY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_IGNORE_MAXMEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_LAZY_FLUSH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_down_since</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Never connected, repl is down since EVER. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_disable_tcp_nodelay</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_DISKLESS_SYNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_DISKLESS_SYNC_DELAY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_PING_SLAVE_PERIOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_MIN_SLAVES_TO_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_MIN_SLAVES_MAX_LAG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_PRIORITY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_ANNOUNCE_IP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLAVE_ANNOUNCE_PORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Replication partial resync backlog */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_BACKLOG_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_histlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_no_slaves_since</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Client output buffer limits */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* Double constants initialization */</comment>
    <expr_stmt><expr><name>R_Zero</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>R_PosInf</name> <operator>=</operator> <literal type="number">1.0</literal><operator>/</operator><name>R_Zero</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>R_NegInf</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal><operator>/</operator><name>R_Zero</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>R_Nan</name> <operator>=</operator> <name>R_Zero</name><operator>/</operator><name>R_Zero</name></expr>;</expr_stmt>

    <comment type="block">/* Command table -- we initiialize it here as it is part of the
     * initial configuration, since command names may be changed via
     * redis.conf using the rename-command directive. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>commands</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commandTableDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commandTableDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>populateCommandTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>delCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"del"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>multiCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"multi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lpushCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"lpush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lpopCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"lpop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rpopCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"rpop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>zpopminCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"zpopmin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>zpopmaxCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"zpopmax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>sremCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"srem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>execCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>expireCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"expire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pexpireCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"pexpire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>xclaimCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"xclaim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>xgroupCommand</name></name> <operator>=</operator> <call><name>lookupCommandByCString</name><argument_list>(<argument><expr><literal type="string">"xgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Slow log */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slowlog_log_slower_than</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slowlog_max_len</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_SLOWLOG_MAX_LEN</name></expr>;</expr_stmt>

    <comment type="block">/* Latency monitor */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_LATENCY_MONITOR_THRESHOLD</name></expr>;</expr_stmt>

    <comment type="block">/* Debugging */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>assert_failed</name></name> <operator>=</operator> <literal type="string">"&lt;no assertion failed&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>assert_file</name></name> <operator>=</operator> <literal type="string">"&lt;no file&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>assert_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>bug_report_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* By default we want scripts to be always replicated by effects
     * (single commands executed by the script), and not by sending the
     * script to the slave / AOF. This is the new way starting from
     * Redis 5. However it is possible to revert it via redis.conf. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_always_replicate_commands</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>

<comment type="block">/* Restart the server, executing the same executable that started this
 * instance, with the same arguments and configuration file.
 *
 * The function is designed to directly call execve() so that the new
 * server instance will retain the PID of the previous one.
 *
 * The list of flags, that may be bitwise ORed together, alter the
 * behavior of this function:
 *
 * RESTART_SERVER_NONE              No flags.
 * RESTART_SERVER_GRACEFULLY        Do a proper shutdown before restarting.
 * RESTART_SERVER_CONFIG_REWRITE    Rewrite the config file before restarting.
 *
 * On success the function does not return, because the process turns into
 * a different process. On error C_ERR is returned. */</comment>
<function><type><name>int</name></type> <name>restartServer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>delay</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <comment type="block">/* Check if we still have accesses to the executable that started this
     * server instance. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't restart: this process has no "</literal>
                             <literal type="string">"permissions to execute %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Config rewriting. */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RESTART_SERVER_CONFIG_REWRITE</name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>&amp;&amp;</operator>
        <call><name>rewriteConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't restart: configuration rewrite process "</literal>
                             <literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Perform a proper shutdown. */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RESTART_SERVER_GRACEFULLY</name> <operator>&amp;&amp;</operator>
        <call><name>prepareForShutdown</name><argument_list>(<argument><expr><name>SHUTDOWN_NOFLAGS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't restart: error preparing for shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Close all file descriptors, with the exception of stdin, stdout, strerr
     * which are useful if we restart a Redis server which is not daemonized. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>+</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* Test the descriptor validity before closing it, otherwise
         * Valgrind issues a warning on close(). */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32</name></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>

    <comment type="block">/* Execute the server with the original command line. */</comment>
    <if_stmt><if>if <condition>(<expr><name>delay</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>delay</name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_execve</name></expr></argument>,<argument><expr><name>execve</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>exec_argv</name></name></expr></argument>,<argument><expr><name>environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If an error occurred here, there is nothing we can do, but exit. */</comment>
    <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>C_ERR</name></expr>;</return> <comment type="block">/* Never reached. */</comment>
</block_content>}</block></function>

<comment type="block">/* This function will try to raise the max number of open files accordingly to
 * the configured max number of clients. It also reserves a number of file
 * descriptors (CONFIG_MIN_RESERVED_FDS) for extra operations of
 * persistence, listening sockets, log files and so forth.
 *
 * If it will not be possible to set the limit accordingly to the configured
 * max number of clients, the function will do the reverse setting
 * server.maxclients to the value that we can actually handle. */</comment>
<function><type><name>void</name></type> <name>adjustOpenFilesLimit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><name>rlim_t</name></type> <name>maxfiles</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxclients</name></name><operator>+</operator><name>CONFIG_MIN_RESERVED_FDS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>limit</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Unable to obtain the current NOFILE limit (%s), assuming 1024 and setting the max clients configuration accordingly."</literal></expr></argument>,
            <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <literal type="number">1024</literal><operator>-</operator><name>CONFIG_MIN_RESERVED_FDS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>rlim_t</name></type> <name>oldlimit</name> <init>= <expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Set the max number of files if the current limit is not enough
         * for our needs. */</comment>
        <if_stmt><if>if <condition>(<expr><name>oldlimit</name> <operator>&lt;</operator> <name>maxfiles</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>rlim_t</name></type> <name>bestlimit</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>setrlimit_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Try to set the file limit to match 'maxfiles' or at least
             * to the higher value supported less than maxfiles. */</comment>
            <expr_stmt><expr><name>bestlimit</name> <operator>=</operator> <name>maxfiles</name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>bestlimit</name> <operator>&gt;</operator> <name>oldlimit</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>rlim_t</name></type> <name>decr_step</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>limit</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>bestlimit</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>limit</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name>bestlimit</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>setrlimit_error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

                <comment type="block">/* We failed to set file limit to 'bestlimit'. Try with a
                 * smaller limit decrementing by a few FDs per iteration. */</comment>
                <if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;</operator> <name>decr_step</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>bestlimit</name> <operator>-=</operator> <name>decr_step</name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="block">/* Assume that the limit we get initially is still valid if
             * our last try was even lower. */</comment>
            <if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;</operator> <name>oldlimit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bestlimit</name> <operator>=</operator> <name>oldlimit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;</operator> <name>maxfiles</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_maxclients</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <name>bestlimit</name><operator>-</operator><name>CONFIG_MIN_RESERVED_FDS</name></expr>;</expr_stmt>
                <comment type="block">/* maxclients is unsigned so may overflow: in order
                 * to check if maxclients is now logically less than 1
                 * we test indirectly via bestlimit. */</comment>
                <if_stmt><if>if <condition>(<expr><name>bestlimit</name> <operator>&lt;=</operator> <name>CONFIG_MIN_RESERVED_FDS</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Your current 'ulimit -n' "</literal>
                        <literal type="string">"of %llu is not enough for the server to start. "</literal>
                        <literal type="string">"Please increase your open file limit to at least "</literal>
                        <literal type="string">"%llu. Exiting."</literal></expr></argument>,
                        <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>oldlimit</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>maxfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"You requested maxclients of %d "</literal>
                    <literal type="string">"requiring at least %llu max file descriptors."</literal></expr></argument>,
                    <argument><expr><name>old_maxclients</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>maxfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Server can't set maximum open files "</literal>
                    <literal type="string">"to %llu because of OS error: %s."</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>maxfiles</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>setrlimit_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Current maximum open files is %llu. "</literal>
                    <literal type="string">"maxclients has been reduced to %d to compensate for "</literal>
                    <literal type="string">"low ulimit. "</literal>
                    <literal type="string">"If you need higher maxclients increase 'ulimit -n'."</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>bestlimit</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Increased maximum number of open files "</literal>
                    <literal type="string">"to %llu (it was originally set to %llu)."</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>maxfiles</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>oldlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Check that server.tcp_backlog can be actually enforced in Linux according
 * to the value of /proc/sys/net/core/somaxconn, or warn about it. */</comment>
<function><type><name>void</name></type> <name>checkTcpBacklogSettings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PROC_SOMAXCONN</name></cpp:ifdef>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/sys/net/core/somaxconn"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>somaxconn</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>somaxconn</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>somaxconn</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: The TCP backlog setting of %d cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of %d."</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>, <argument><expr><name>somaxconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Initialize a set of file descriptors to listen to the specified 'port'
 * binding the addresses specified in the Redis server configuration.
 *
 * The listening file descriptors are stored in the integer array 'fds'
 * and their number is set in '*count'.
 *
 * The addresses to bind are specified in the global server.bindaddr array
 * and their number is server.bindaddr_count. If the server configuration
 * contains no specific addresses to bind, this function will try to
 * bind * (all addresses) for both the IPv4 and IPv6 protocols.
 *
 * On success the function returns C_OK.
 *
 * On error the function returns C_ERR. For the function to be on
 * error, at least one of the server.bindaddr addresses was
 * impossible to bind, or no bind addresses were specified in the server
 * configuration but the function is not able to bind * for at least
 * one of the IPv4 or IPv6 protocols. */</comment>
<function><type><name>int</name></type> <name>listenToPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <comment type="block">/* Force binding of 0.0.0.0 if no bind address is specified, always
     * entering the loop if j == 0. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>||</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>unsupported</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Bind * for both IPv6 and IPv4, we enter here only if
             * server.bindaddr_count == 0. */</comment>
            <expr_stmt><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>anetTcp6Server</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>!=</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>unsupported</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Not listening to IPv6: unsupproted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>unsupported</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Bind the IPv4 address as well. */</comment>
                <expr_stmt><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>anetTcpServer</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>!=</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>unsupported</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Not listening to IPv4: unsupproted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* Exit the loop if we were able to bind * on IPv4 and IPv6,
             * otherwise fds[*count] will be ANET_ERR and we'll print an
             * error and return to the caller with an error. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>count</name> <operator>+</operator> <name>unsupported</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Bind IPv6 address. */</comment>
            <expr_stmt><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>anetTcp6Server</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Bind IPv4 address. */</comment>
            <expr_stmt><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>anetTcpServer</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Could not create server TCP listening socket %s:%d: %s"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOPROTOOPT</name>     <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EPROTONOSUPPORT</name> <operator>||</operator>
                    <name>errno</name> <operator>==</operator> <name>ESOCKTNOSUPPORT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EPFNOSUPPORT</name> <operator>||</operator>
                    <name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name>    <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EADDRNOTAVAIL</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
            <return>return <expr><name>C_ERR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>fds</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Resets the stats that we expose via INFO or other means that we want
 * to reset via CONFIG RESETSTAT. The function is also used in order to
 * initialize these fields in initServer() at server startup. */</comment>
<function><type><name>void</name></type> <name>resetServerStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_numconnections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expiredkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_expired_time_cap_reached_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_evictedkeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_misses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_misses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_scanned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_rejected_conn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_full</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STATS_METRIC_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last_sample_time</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>last_sample_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>samples</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>inst_metric</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>samples</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_delayed_fsync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initServer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>HMODULE lib;</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setupSignalHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <comment type="block">/* Force binary mode on all files */</comment>
    <expr_stmt><expr><name>_fmode</name> <operator>=</operator> <name>_O_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set C locale, forcing strtod() to work with dots */</comment>
    <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* MingGW 32 lacks declaration of RtlGenRandom, MinGw64 don't */</comment>
    <expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"advapi32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>RtlGenRandom</name> <operator>=</operator> <operator>(</operator><name>RtlGenRandomFunc</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"SystemFunction036"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr></argument>, <argument><expr><name>LOG_PID</name> <operator>|</operator> <name>LOG_NDELAY</name> <operator>|</operator> <name>LOG_NOWAIT</name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>config_hz</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_index</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_to_close</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaves</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>monitors</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_pending_write</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Force to emit the first SELECT command. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>unblocked_clients</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>ready_keys</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_waiting_acks</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>get_ack_from_slaves</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>clients_paused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>system_memory_size</name></name> <operator>=</operator> <call><name>zmalloc_get_memory_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>createSharedObjects</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>adjustOpenFilesLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>el</name></name> <operator>=</operator> <call><name>aeCreateEventLoop</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name><operator>+</operator><name>CONFIG_FDSET_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>el</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Failed creating the event loop. Error message: '%s'"</literal></expr></argument>,
            <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisDb</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Open the TCP listening socket for the user commands. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>listenToPort</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>ipfd</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>ipfd_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Open the listening Unix domain socket. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* don't care if this fails */</comment>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>=</operator> <call><name>anetUnixServer</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Opening Unix socket: %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>neterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Abort if there are no listening sockets at all. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>ipfd_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Configured to not listen anywhere, exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Create the Redis databases, and initialize other internal state. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keyptrDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>blocking_keys</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ready_keys</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>objectKeyPointerValueDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>watched_keys</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>avg_ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>defrag_later</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>evictionPoolAlloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Initialize the LRU keys pool. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pubsub_channels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keylistDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pubsub_patterns</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pubsub_patterns</name></name></expr></argument>,<argument><expr><name>freePubsubPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listSetMatchMethod</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pubsub_patterns</name></name></expr></argument>,<argument><expr><name>listMatchPubsubPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cronloops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aofRewriteBufferReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_buf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* At startup we consider the DB saved. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* At startup we never tried to BGSAVE. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_last</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetServerStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* A few stats we don't want to reset: server startup time, and peak mem. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_starttime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_rdb_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_aof_cow_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>zmalloc_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>allocator_resident</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_last_write_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Create the timer callback, this is our way to process many background
     * operations incrementally, like clients timeout, eviction of unaccessed
     * expired keys and so forth. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>aeCreateTimeEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>serverCron</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Can't create event loop timers."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Create an event handler for accepting new connections in TCP and Unix
     * domain sockets. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>ipfd_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>ipfd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>,
            <argument><expr><name>acceptTcpHandler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>serverPanic</name><argument_list>(
                    <argument><expr><literal type="string">"Unrecoverable error creating server.ipfd file event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,
        <argument><expr><name>acceptUnixHandler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unrecoverable error creating server.sofd file event."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


    <comment type="block">/* Register a readable event for the pipe used to awake the event loop
     * when a blocked client in a module needs attention. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>module_blocked_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AE_READABLE</name></expr></argument>,
        <argument><expr><name>moduleBlockedClientPipeReadable</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(
                <argument><expr><literal type="string">"Error registering the readable event for the module "</literal>
                <literal type="string">"blocked clients subsystem."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Open the AOF file if needed. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>,
            <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>_O_BINARY</name></expr></argument>, <argument><expr><name>_S_IREAD</name> <operator>|</operator> <name>_S_IWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>,
                               <argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_APPEND</name><operator>|</operator><name>O_CREAT</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't open the append-only file: %s"</literal></expr></argument>,
                <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 32 bit instances are limited to 4GB of address space, so if there is
     * no explicit limit in the user provided configuration we set a limit
     * at 3 GB using maxmemory with 'noeviction' policy'. This avoids
     * useless crashes of the Redis instance for out of memory. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>arch_bits</name></name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Warning: 32 bit instance detected but no memory limit set. Setting 3 GB maxmemory limit with 'noeviction' policy now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>=</operator> <literal type="number">3072LL</literal><operator>*</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* 3 GB */</comment>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>=</operator> <name>MAXMEMORY_NO_EVICTION</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>clusterInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>replicationScriptCacheInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scriptingInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>slowlogInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>latencyMonitorInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Some steps in server initialization need to be done last (after modules
 * are loaded).
 * Specifically, creation of threads due to a race bug in ld.so, in which
 * Thread Local Storage initialization collides with dlopen call.
 * see: https://sourceware.org/bugzilla/show_bug.cgi?id=19329 */</comment>
<function><type><name>void</name></type> <name>InitServerLast</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>bioInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>initial_memory_usage</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Populates the Redis Command Table starting from the hard coded list
 * we have on top of redis.c file. */</comment>
<function><type><name>void</name></type> <name>populateCommandTable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numcommands</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisCommandTable</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>redisCommand</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numcommands</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>redisCommandTable</name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sflags</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>retval1</name></decl>, <decl><type ref="prev"/><name>retval2</name></decl>;</decl_stmt>

        <while>while<condition>(<expr><operator>*</operator><name>f</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <switch>switch<condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_WRITE</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_READONLY</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_DENYOOM</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_ADMIN</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_PUBSUB</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_NOSCRIPT</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'R'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_RANDOM</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'S'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_SORT_FOR_SCRIPT</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_LOADING</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_STALE</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_SKIP_MONITOR</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'k'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_ASKING</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'F'</literal></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CMD_FAST</name></expr>;</expr_stmt> <break>break;</break>
            <default>default:</default> <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unsupported command flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            </block_content>}</block></switch>
            <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>retval1</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Populate an additional dictionary that will be unaffected
         * by rename-command statements in redis.conf. */</comment>
        <expr_stmt><expr><name>retval2</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>, <argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval1</name> <operator>==</operator> <name>DICT_OK</name> <operator>&amp;&amp;</operator> <name>retval2</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetCommandTableStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>microseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block">/* ========================== Redis OP Array API ============================ */</comment>

<function><type><name>void</name></type> <name>redisOpArrayInit</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisOpArrayAppend</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>,
                       <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redisOp</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (PORT_ULONG) */</comment>
    <name>op</name> <init>= <expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name><operator>+</operator><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisOpArrayFree</name><parameter_list>(<parameter><decl><type><name>redisOpArray</name> <modifier>*</modifier></type><name>oa</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while<condition>(<expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>oa</name><operator>-&gt;</operator><name>ops</name></name><operator>+</operator><name><name>oa</name><operator>-&gt;</operator><name>numops</name></name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>oa</name><operator>-&gt;</operator><name>ops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ====================== Commands lookup and execution ===================== */</comment>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommand</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandByCString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>name</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Lookup the command in the current table, if not found also check in
 * the original table containing the original command names unaffected by
 * redis.conf rename-command statement.
 *
 * This is used by functions rewriting the argument vector such as
 * rewriteClientCommandVector() in order to set client-&gt;cmd pointer
 * correctly even if the command was renamed. */</comment>
<function><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>lookupCommandOrOriginal</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>orig_commands</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Propagate the specified command (in the context of the specified database id)
 * to AOF and Slaves.
 *
 * flags are an xor between:
 * + PROPAGATE_NONE (no propagation of command at all)
 * + PROPAGATE_AOF (propagate into the AOF file if is enabled)
 * + PROPAGATE_REPL (propagate into the replication link)
 *
 * This should not be used inside commands implementation since it will not
 * wrap the resulting commands in MULTI/EXEC. Use instead alsoPropagate(),
 * preventCommandPropagation(), forceCommandPropagation().
 *
 * However for functions that need to (also) propagate out of the context of a
 * command execution, for example when serving a blocked client, you
 * want to use propagate().
 */</comment>
<function><type><name>void</name></type> <name>propagate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
               <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>PROPAGATE_AOF</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>feedAppendOnlyFile</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PROPAGATE_REPL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>replicationFeedSlaves</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Used inside commands to schedule the propagation of additional commands
 * after the current command is propagated to AOF / Replication.
 *
 * 'cmd' must be a pointer to the Redis command to replicate, dbid is the
 * database ID the command should be propagated into.
 * Arguments of the command to propagte are passed as an array of redis
 * objects pointers of len 'argc', using the 'argv' vector.
 *
 * The function does not take a reference to the passed 'argv' vector,
 * so it is up to the caller to release the passed argv (but it is usually
 * stack allocated).  The function autoamtically increments ref count of
 * passed objects, so the caller does not need to. */</comment>
<function><type><name>void</name></type> <name>alsoPropagate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
                   <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argvcopy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* No propagation during loading. */</comment>

    <expr_stmt><expr><name>argvcopy</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>argvcopy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>redisOpArrayAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name></name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>dbid</name></expr></argument>,<argument><expr><name>argvcopy</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* It is possible to call the function forceCommandPropagation() inside a
 * Redis command implementation in order to to force the propagation of a
 * specific command execution into AOF / Replication. */</comment>
<function><type><name>void</name></type> <name>forceCommandPropagation</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PROPAGATE_REPL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PROPAGATE_AOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Avoid that the executed command is propagated at all. This way we
 * are free to just propagate what we want using the alsoPropagate()
 * API. */</comment>
<function><type><name>void</name></type> <name>preventCommandPropagation</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PREVENT_PROP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* AOF specific version of preventCommandPropagation(). */</comment>
<function><type><name>void</name></type> <name>preventCommandAOF</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PREVENT_AOF_PROP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Replication specific version of preventCommandPropagation(). */</comment>
<function><type><name>void</name></type> <name>preventCommandReplication</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_PREVENT_REPL_PROP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Call() is the core of Redis execution of a command.
 *
 * The following flags can be passed:
 * CMD_CALL_NONE        No flags.
 * CMD_CALL_SLOWLOG     Check command speed and log in the slow log if needed.
 * CMD_CALL_STATS       Populate command stats.
 * CMD_CALL_PROPAGATE_AOF   Append command to AOF if it modified the dataset
 *                          or if the client flags are forcing propagation.
 * CMD_CALL_PROPAGATE_REPL  Send command to salves if it modified the dataset
 *                          or if the client flags are forcing propagation.
 * CMD_CALL_PROPAGATE   Alias for PROPAGATE_AOF|PROPAGATE_REPL.
 * CMD_CALL_FULL        Alias for SLOWLOG|STATS|PROPAGATE.
 *
 * The exact propagation behavior depends on the client flags.
 * Specifically:
 *
 * 1. If the client flags CLIENT_FORCE_AOF or CLIENT_FORCE_REPL are set
 *    and assuming the corresponding CMD_CALL_PROPAGATE_AOF/REPL is set
 *    in the call flags, then the command is propagated even if the
 *    dataset was not affected by the command.
 * 2. If the client flags CLIENT_PREVENT_REPL_PROP or CLIENT_PREVENT_AOF_PROP
 *    are set, the propagation into AOF or to slaves is not performed even
 *    if the command modified the dataset.
 *
 * Note that regardless of the client flags, if CMD_CALL_PROPAGATE_AOF
 * or CMD_CALL_PROPAGATE_REPL are not set, then respectively AOF or
 * slaves propagation will never occur.
 *
 * Client flags are modified by the implementation of a given command
 * using the following API:
 *
 * forceCommandPropagation(client *c, int flags);
 * preventCommandPropagation(client *c);
 * preventCommandAOF(client *c);
 * preventCommandReplication(client *c);
 *
 */</comment>
<function><type><name>void</name></type> <name>call</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>dirty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ustime_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>client_old_flags</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>real_cmd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Sent the command to clients in MONITOR mode, only if the commands are
     * not generated from reading an AOF. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CMD_SKIP_MONITOR</name><operator>|</operator><name>CMD_ADMIN</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>replicationFeedMonitors</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Initialization: clear the flags that must be set by the command on
     * demand, and initialize the array for additional commands propagation. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_FORCE_AOF</name><operator>|</operator><name>CLIENT_FORCE_REPL</name><operator>|</operator><name>CLIENT_PREVENT_PROP</name><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>redisOpArray</name></type> <name>prev_also_propagate</name> <init>= <expr><name><name>server</name><operator>.</operator><name>also_propagate</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>redisOpArrayInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call the command. */</comment>
    <expr_stmt><expr><name>dirty</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>ustime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dirty</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name><operator>-</operator><name>dirty</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dirty</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* When EVAL is called loading the AOF we don't want commands called
     * from Lua to go into the slowlog or to populate statistics. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CMD_CALL_SLOWLOG</name> <operator>|</operator> <name>CMD_CALL_STATS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* If the caller is Lua, we want to force the EVAL caller to propagate
     * the script if the command flag or client flag are forcing the
     * propagation. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>lua_caller</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_REPL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_AOF</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_FORCE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Log the command into the Slow log if needed, and populate the
     * per-command statistics that we show in INFO commandstats. */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_SLOWLOG</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>latency_event</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_FAST</name><operator>)</operator></expr> ?</condition><then>
                              <expr><literal type="string">"fast-command"</literal></expr> </then><else>: <expr><literal type="string">"command"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><name>latency_event</name></expr></argument>,<argument><expr><name>duration</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>slowlogPushEntryIfNeeded</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_STATS</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* use the real command that was executed (cmd and lastamc) may be
         * different, in case of MULTI-EXEC or re-written commands such as
         * EXPIRE, GEOADD, etc. */</comment>
        <expr_stmt><expr><name><name>real_cmd</name><operator>-&gt;</operator><name>microseconds</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>real_cmd</name><operator>-&gt;</operator><name>calls</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Propagate the command into the AOF and replication link */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PREVENT_PROP</name><operator>)</operator> <operator>!=</operator> <name>CLIENT_PREVENT_PROP</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>propagate_flags</name> <init>= <expr><name>PROPAGATE_NONE</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Check if the command operated changes in the data set. If so
         * set for replication / AOF propagation. */</comment>
        <if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>propagate_flags</name> <operator>|=</operator> <operator>(</operator><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* If the client forced AOF / replication of the command, set
         * the flags regardless of the command effects on the data set. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_REPL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>propagate_flags</name> <operator>|=</operator> <name>PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_FORCE_AOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>propagate_flags</name> <operator>|=</operator> <name>PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* However prevent AOF / replication propagation if the command
         * implementations called preventCommandPropagation() or similar,
         * or if we don't have the call() flags to do so. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PREVENT_REPL_PROP</name> <operator>||</operator>
            <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE_REPL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>propagate_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PREVENT_AOF_PROP</name> <operator>||</operator>
            <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE_AOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>propagate_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Call propagate() only if at least one of AOF / replication
         * propagation is needed. Note that modules commands handle replication
         * in an explicit way, so we never replicate them automatically. */</comment>
        <if_stmt><if>if <condition>(<expr><name>propagate_flags</name> <operator>!=</operator> <name>PROPAGATE_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>propagate</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name>propagate_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Restore the old replication flags, since call() can be executed
     * recursively. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_FORCE_AOF</name><operator>|</operator><name>CLIENT_FORCE_REPL</name><operator>|</operator><name>CLIENT_PREVENT_PROP</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>client_old_flags</name> <operator>&amp;</operator>
        <operator>(</operator><name>CLIENT_FORCE_AOF</name><operator>|</operator><name>CLIENT_FORCE_REPL</name><operator>|</operator><name>CLIENT_PREVENT_PROP</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Handle the alsoPropagate() API to handle commands that want to propagate
     * multiple separated commands. Note that alsoPropagate() is not affected
     * by CLIENT_PREVENT_PROP flag. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>redisOp</name> <modifier>*</modifier></type><name>rop</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CMD_CALL_PROPAGATE</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>numops</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>rop</name> <operator>=</operator> <operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name><operator>.</operator><name>ops</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name><name>rop</name><operator>-&gt;</operator><name>target</name></name></expr></init></decl>;</decl_stmt>
                <comment type="block">/* Whatever the command wish is, we honor the call() flags. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>CMD_CALL_PROPAGATE_AOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>target</name> <operator>&amp;=</operator> <operator>~</operator><name>PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>CMD_CALL_PROPAGATE_REPL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>target</name> <operator>&amp;=</operator> <operator>~</operator><name>PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>target</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>propagate</name><argument_list>(<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>rop</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>redisOpArrayFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>also_propagate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>also_propagate</name></name> <operator>=</operator> <name>prev_also_propagate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>fixed_time_expire</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* If this function gets called we already read a whole
 * command, arguments are in the client argv/argc fields.
 * processCommand() execute the command or prepare the
 * server for a bulk read from the client.
 *
 * If C_OK is returned the client is still alive and valid and
 * other operations can be performed by the caller. Otherwise
 * if C_ERR is returned the client was destroyed (i.e. after QUIT). */</comment>
<function><type><name>int</name></type> <name>processCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>moduleCallCommandFilters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* The QUIT command is handled separately. Normal command procs will
     * go through checking for replication and QUIT will cause trouble
     * when FORCE_REPLICATION is enabled and would be implemented in
     * a regular command proc. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"quit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_REPLY</name></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Now lookup the command and check ASAP about trivial error conditions
     * such as wrong arity, bad command name and so forth. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lastcmd</name></name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>args</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"`%.*s`, "</literal></expr></argument>, <argument><expr><literal type="number">128</literal><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"unknown command `%s`, with args beginning with: %s"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>)</operator> <operator>||</operator>
               <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"wrong number of arguments for '%s' command"</literal></expr></argument>,
            <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if the user is authenticated */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>requirepass</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>authCommand</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>noautherr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If cluster is enabled perform the cluster redirection here.
     * However we don't perform the redirection if:
     * 1) The sender of this command is our master.
     * 2) The command has no key arguments. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA</name> <operator>&amp;&amp;</operator>
          <name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>firstkey</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>hashslot</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>clusterNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>getNodeByQuery</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>hashslot</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error_code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>execCommand</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>discardTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>clusterRedirectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>hashslot</name></expr></argument>,<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>C_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle the maxmemory directive.
     *
     * Note that we do not want to reclaim memory if we are here re-entering
     * the event loop since there is a busy Lua script running in timeout
     * condition, to avoid mixing the propagation of scripts with the
     * propagation of DELs due to eviction. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>lua_timedout</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>out_of_memory</name> <init>= <expr><call><name>freeMemoryIfNeededAndSafe</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* freeMemoryIfNeeded may flush slave output buffers. This may result
         * into a slave, that may be the active client, to be freed. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* It was impossible to free enough memory, and the command the client
         * is trying to execute is denied during OOM conditions or the client
         * is in MULTI/EXEC context? Error. */</comment>
        <if_stmt><if>if <condition>(<expr><name>out_of_memory</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_DENYOOM</name> <operator>||</operator>
             <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>oomerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>C_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Save out_of_memory result at script start, otherwise if we check OOM
         * untill first write within script, memory used by lua stack and
         * arguments might interfere. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>evalCommand</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>evalShaCommand</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_oom</name></name> <operator>=</operator> <name>out_of_memory</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Don't accept write commands if there are problems persisting on disk
     * and if this is a master instance. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>deny_write_type</name> <init>= <expr><call><name>writeCommandsDeniedByDiskError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>deny_write_type</name> <operator>!=</operator> <name>DISK_ERROR_TYPE_NONE</name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name> <operator>||</operator>
         <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>pingCommand</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>deny_write_type</name> <operator>==</operator> <name>DISK_ERROR_TYPE_RDB</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>bgsaveerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                <argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"-MISCONF Errors writing to the AOF file: %s\r\n"</literal></expr></argument>,
                <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_last_write_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Don't accept write commands if there are not enough good slaves and
     * user configured the min-slaves-to-write option. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>noreplicaserr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Don't accept write commands if this is a read only slave. But
     * accept write commands if this is our master. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>roslaveerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only allow SUBSCRIBE and UNSUBSCRIBE in the context of Pub/Sub */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PUBSUB</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>pingCommand</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>subscribeCommand</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>unsubscribeCommand</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>psubscribeCommand</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>punsubscribeCommand</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"only (P)SUBSCRIBE / (P)UNSUBSCRIBE / PING / QUIT allowed in this context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only allow commands with flag "t", such as INFO, SLAVEOF and so on,
     * when slave-serve-stale-data is no and we are a slave with a broken
     * link with master. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_CONNECTED</name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_STALE</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>masterdownerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Loading DB? Return an error if the command has not the
     * CMD_LOADING flag. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_LOADING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>loadingerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Lua script too slow? Only allow a limited number of commands. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_timedout</name></name> <operator>&amp;&amp;</operator>
          <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>authCommand</name> <operator>&amp;&amp;</operator>
          <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>replconfCommand</name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>shutdownCommand</name> <operator>&amp;&amp;</operator>
          <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
          <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>==</operator> <name>scriptCommand</name> <operator>&amp;&amp;</operator>
          <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
          <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'k'</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>flagTransaction</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>slowscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Exec the command */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>execCommand</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>discardCommand</name> <operator>&amp;&amp;</operator>
        <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>multiCommand</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>proc</name></name> <operator>!=</operator> <name>watchCommand</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>queueMultiCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>call</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>CMD_CALL_FULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>woff</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>ready_keys</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>handleClientsBlockedOnKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*================================== Shutdown =============================== */</comment>

<comment type="block">/* Close listening sockets. Also unlink the unix domain socket if
 * unlink_unix_socket is non-zero. */</comment>
<function><type><name>void</name></type> <name>closeListeningSockets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unlink_unix_socket</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>ipfd_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>ipfd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>sofd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>cfd_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cfd</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name>unlink_unix_socket</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Removing the unix socket file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* don't care if this fails */</comment>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>prepareForShutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* When SHUTDOWN is called while the server is loading a dataset in
     * memory we need to make sure no attempt is performed to save
     * the dataset on shutdown (otherwise it could overwrite the current DB
     * with half-read data).
     *
     * Also when in Sentinel mode clear the SAVE flag and force NOSAVE. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>SHUTDOWN_SAVE</name><operator>)</operator> <operator>|</operator> <name>SHUTDOWN_NOSAVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>save</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_SAVE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nosave</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>SHUTDOWN_NOSAVE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"User requested shutdown..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Kill all the Lua debugger forked sessions. */</comment>
    <expr_stmt><expr><call><name>ldbKillForkedSessions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Kill the saving child if there is a background saving in progress.
       We want to avoid race conditions, for instance our saving child may
       overwrite the synchronous saving did by SHUTDOWN. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"There is a child saving an .rdb. Killing it!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>AbortForkOperation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name></expr></argument>,<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rdbRemoveTempFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Kill the AOF saving child as the AOF we already have may be longer
         * but contains the full dataset anyway. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* If we have AOF enabled but haven't written the AOF yet, don't
             * shutdown or else the dataset will be lost. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_WAIT_REWRITE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Writing initial AOF, can't exit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>C_ERR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"There is a child rewriting the AOF. Killing it!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>AbortForkOperation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name></expr></argument>,<argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Append only file: flush buffers and fsync() the AOF at exit */</comment>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Calling fsync() on the AOF file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>redis_fsync</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Create a new RDB file before exiting. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>nosave</name><operator>)</operator> <operator>||</operator> <name>save</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Saving the final RDB snapshot before exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Snapshotting. Perform a SYNC SAVE and exit */</comment>
        <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSave</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Ooops.. error saving! The best we can do is to continue
             * operating. Note that if there was a background saving process,
             * in the next cron() Redis will be notified that the background
             * saving aborted, handling special stuff like slaves pending for
             * synchronization... */</comment>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Error trying to save the DB, can't exit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>C_ERR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Remove the pid file if possible and needed. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>pidfile</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Removing the pid file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Best effort flush of slave output buffers, so that we hopefully
     * send them pending writes. */</comment>
    <expr_stmt><expr><call><name>flushSlavesOutputBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Close the listening sockets. Apparently this allows faster restarts. */</comment>
    <expr_stmt><expr><call><name>closeListeningSockets</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"%s is now ready to exit, bye bye..."</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"Sentinel"</literal></expr> </then><else>: <expr><literal type="string">"Redis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*================================== Commands =============================== */</comment>

<comment type="block">/* Sometimes Redis cannot accept write commands because there is a perstence
 * error with the RDB or AOF file, and Redis is configured in order to stop
 * accepting writes in such situation. This function returns if such a
 * condition is active, and the type of the condition.
 *
 * Function return values:
 *
 * DISK_ERROR_TYPE_NONE:    No problems, we can accept writes.
 * DISK_ERROR_TYPE_AOF:     Don't accept writes: AOF errors.
 * DISK_ERROR_TYPE_RDB:     Don't accept writes: RDB errors.
 */</comment>
<function><type><name>int</name></type> <name>writeCommandsDeniedByDiskError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>==</operator> <name>C_ERR</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>DISK_ERROR_TYPE_RDB</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name> <operator>&amp;&amp;</operator>
               <name><name>server</name><operator>.</operator><name>aof_last_write_status</name></name> <operator>==</operator> <name>C_ERR</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>DISK_ERROR_TYPE_AOF</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>DISK_ERROR_TYPE_NONE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return zero if strings are the same, non-zero if they are not.
 * The comparison is performed in a way that prevents an attacker to obtain
 * information about the nature of the strings just monitoring the execution
 * time of the function.
 *
 * Note that limiting the comparison length to strings up to 512 bytes we
 * can avoid leaking any information about the password length and any
 * possible branch misprediction related leak.
 */</comment>
<function><type><name>int</name></type> <name>time_independent_strcmp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>bufa</name><index>[<expr><name>CONFIG_AUTHPASS_MAX_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bufb</name><index>[<expr><name>CONFIG_AUTHPASS_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/* The above two strlen perform len(a) + len(b) operations where either
     * a or b are fixed (our password) length, and the difference is only
     * relative to the length of the user provided string, so no information
     * leak is possible in the following two lines of code. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alen</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                               <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast (unsigned int) */</comment>
    <name>unsigned</name> <name>int</name></type> <name>blen</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                               <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast (unsigned int) */</comment>
    <name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We can't compare strings longer than our static buffers.
     * Note that this will never pass the first test in practical circumstances
     * so there is no info leak. */</comment>
    <if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>blen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bufb</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufa</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Constant time. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufb</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bufb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Constant time. */</comment>
    <comment type="block">/* Again the time of the following two copies is proportional to
     * len(a) + len(b) so no info is leaked. */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufa</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufb</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Always compare all the chars in the two buffers without
     * conditional expressions. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bufa</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>diff</name> <operator>|=</operator> <operator>(</operator><name><name>bufa</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^</operator> <name><name>bufb</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Length must be equal as well. */</comment>
    <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name>alen</name> <operator>^</operator> <name>blen</name></expr>;</expr_stmt>
    <return>return <expr><name>diff</name></expr>;</return> <comment type="block">/* If zero strings are the same. */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>authCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Client sent AUTH, but no password is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>time_independent_strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>authenticated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"invalid password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* The PING command. It works in a different way if the client is in
 * in Pub/Sub mode. */</comment>
<function><type><name>void</name></type> <name>pingCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* The command takes zero or one arguments. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"wrong number of arguments for '%s' command"</literal></expr></argument>,
            <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_PUBSUB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>mbulkhdr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"pong"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>pong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>echoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>timeCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

    <comment type="block">/* gettimeofday() can only fail if &amp;tv is a bad address so we
     * don't check for errors. */</comment>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper function for addReplyCommand() to output flags. */</comment>
<function><type><name>int</name></type> <name>addReplyCommandFlag</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>f</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Output the representation of a Redis command. Used by the COMMAND command. */</comment>
<function><type><name>void</name></type> <name>addReplyCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* We are adding: command name, arg count, flags, first, last, offset */</comment>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>flagcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>flaglen</name> <init>= <expr><call><name>addDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_WRITE</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_READONLY</name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_DENYOOM</name></expr></argument>, <argument><expr><literal type="string">"denyoom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_ADMIN</name></expr></argument>, <argument><expr><literal type="string">"admin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_PUBSUB</name></expr></argument>, <argument><expr><literal type="string">"pubsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_NOSCRIPT</name></expr></argument>, <argument><expr><literal type="string">"noscript"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_RANDOM</name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_SORT_FOR_SCRIPT</name></expr></argument>,<argument><expr><literal type="string">"sort_for_script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_LOADING</name></expr></argument>, <argument><expr><literal type="string">"loading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_STALE</name></expr></argument>, <argument><expr><literal type="string">"stale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_SKIP_MONITOR</name></expr></argument>, <argument><expr><literal type="string">"skip_monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_ASKING</name></expr></argument>, <argument><expr><literal type="string">"asking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <call><name>addReplyCommandFlag</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name>CMD_FAST</name></expr></argument>, <argument><expr><literal type="string">"fast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
            <name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_MODULE_GETKEYS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"movablekeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>flagcount</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flaglen</name></expr></argument>, <argument><expr><name>flagcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>firstkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>lastkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>keystep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* COMMAND &lt;subcommand&gt; &lt;args&gt; */</comment>
<function><type><name>void</name></type> <name>commandCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"(no subcommand) -- Return details about all Redis commands."</literal></expr>,
<expr><literal type="string">"COUNT -- Return the total number of commands in this Redis server."</literal></expr>,
<expr><literal type="string">"GETKEYS &lt;full-command&gt; -- Return the keys from a full Redis command."</literal></expr>,
<expr><literal type="string">"INFO [command-name ...] -- Return details about multiple Redis commands."</literal></expr>,
<expr><name>NULL</name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (PORT_LONG) */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"getkeys"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>keys</name></decl>, <decl><type ref="prev"/><name>numkeys</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid command specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>getkeys_proc</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>firstkey</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The command has no key arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator>
                   <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <operator>-</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid number of arguments specified for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>getKeysFromCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>keys</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid arguments specified for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name>getKeysFreeResult</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert an amount of bytes into a human readable string in the form
 * of 100B, 2G, 100M, 4K, and so forth. */</comment>
<function><type><name>void</name></type> <name>bytesToHuman</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PORT_ULONGLONG</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Bytes */</comment>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%lluB"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fK"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type>
        <name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fM"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fG"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fT"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><operator>(</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%.2fP"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Let's hope we never need this */</comment>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%lluB"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Create the string returned by the INFO command. This is decoupled
 * by the INFO command itself as we need to report the same information
 * on memory corruption problems. */</comment>
<function><type><name>sds</name></type> <name>genRedisInfoString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>uptime</name> <init>= <expr><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>stat_starttime</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>self_ru</name></decl>, <decl><type ref="prev"/><name>c_ru</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>allsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>defsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>section</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>allsections</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>defsections</name> <operator>=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_SELF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>self_ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getrusage</name><argument_list>(<argument><expr><name>RUSAGE_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Server */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <macro><name>POSIX_ONLY</name><argument_list>(<argument>static int call_uname = <literal type="number">1</literal>;</argument>)</argument_list></macro>
        <macro><name>POSIX_ONLY</name><argument_list>(<argument>static struct utsname name;</argument>)</argument_list></macro>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"cluster"</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"sentinel"</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"standalone"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>call_uname</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Uname can be slow and is always the same output. Cache it. */</comment>
            <expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>call_uname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lruclock</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>atomicGet</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lruclock</name></name></expr></argument>,<argument><expr><name>lruclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
            <argument><expr><literal type="string">"# Server\r\n"</literal>
            <literal type="string">"redis_version:%s\r\n"</literal>
            <literal type="string">"redis_git_sha1:%s\r\n"</literal>
            <literal type="string">"redis_git_dirty:%d\r\n"</literal>
            <literal type="string">"redis_build_id:%llx\r\n"</literal>
            <literal type="string">"redis_mode:%s\r\n"</literal>
            <literal type="string">"os:%s %s %s\r\n"</literal>
            <literal type="string">"arch_bits:%d\r\n"</literal>
            <literal type="string">"multiplexing_api:%s\r\n"</literal>
            <literal type="string">"atomicvar_api:%s\r\n"</literal>
            <call><name>POSIX_ONLY</name><argument_list>(<argument><expr><literal type="string">"gcc_version:%d.%d.%d\r\n"</literal></expr></argument>)</argument_list></call>
            <literal type="string">"process_id:%Id\r\n"</literal>                                                <name>WIN_PORT_FIX</name> <comment type="block">/* %ld -&gt; %Id */</comment>
            <literal type="string">"run_id:%s\r\n"</literal>
            <literal type="string">"tcp_port:%d\r\n"</literal>
            <literal type="string">"uptime_in_seconds:%lld\r\n"</literal>                                        <name>WIN_PORT_FIX</name> <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"uptime_in_days:%lld\r\n"</literal>                                           <name>WIN_PORT_FIX</name> <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"hz:%d\r\n"</literal>
            <literal type="string">"configured_hz:%d\r\n"</literal>
            <literal type="string">"lru_clock:%Id\r\n"</literal>                                                 <name>WIN_PORT_FIX</name> <comment type="block">/* %ld -&gt; %Id */</comment>
            <literal type="string">"executable:%s\r\n"</literal>
            <literal type="string">"config_file:%s\r\n"</literal></expr></argument>,
            <argument><expr><name>REDIS_VERSION</name></expr></argument>,
            <argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <call><name>redisBuildId</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>mode</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
                <argument><expr><literal type="string">"Windows"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr><name><name>name</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>machine</name></name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><name><name>server</name><operator>.</operator><name>arch_bits</name></name></expr></argument>,
            <argument><expr><call><name>aeGetApiName</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>REDIS_ATOMIC_API</name></expr></argument>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
            <argument><expr><name>__GNUC__</name></expr></argument>,<argument><expr><name>__GNUC_MINOR__</name></expr></argument>,<argument><expr><name>__GNUC_PATCHLEVEL__</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>runid</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>uptime</name></expr></argument>,
            <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><operator>(</operator><name>uptime</name><operator>/</operator><operator>(</operator><literal type="number">3600</literal><operator>*</operator><literal type="number">24</literal><operator>)</operator><operator>)</operator></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>hz</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name>lruclock</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>executable</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Clients */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"clients"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>maxin</name></decl>, <decl><type ref="prev"/><name>maxout</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getExpansiveClientsInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxin</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>maxout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
            <argument><expr><literal type="string">"# Clients\r\n"</literal>
            <literal type="string">"connected_clients:%Iu\r\n"</literal>                      <name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
            <literal type="string">"client_recent_max_input_buffer:%Iu\r\n"</literal>         <name>WIN_PORT_FIX</name> <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"client_recent_max_output_buffer:%Iu\r\n"</literal>        <name>WIN_PORT_FIX</name> <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"blocked_clients:%d\r\n"</literal></expr></argument>,
            <argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>clients</name></name></expr></argument>)</argument_list></call><operator>-</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>maxin</name></expr></argument>, <argument><expr><name>maxout</name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>blocked_clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Memory */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>peak_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>total_system_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_lua_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_scripts_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>used_memory_rss_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>maxmemory_hmem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zmalloc_used</name> <init>= <expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>total_system_mem</name> <init>= <expr><name><name>server</name><operator>.</operator><name>system_memory_size</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evict_policy</name> <init>= <expr><call><name>evictPolicyToString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>memory_lua</name> <init>= <expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><call><name>lua_gc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><name>LUA_GCCOUNT</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>redisMemOverhead</name></name> <modifier>*</modifier></type><name>mh</name> <init>= <expr><call><name>getMemoryOverheadData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Peak memory is updated from time to time by serverCron() so it
         * may happen that the instantaneous value is slightly bigger than
         * the peak value. This may confuse users, so we update the peak
         * if found smaller than the current memory usage. */</comment>
        <if_stmt><if>if <condition>(<expr><name>zmalloc_used</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <name>zmalloc_used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>hmem</name></expr></argument>,<argument><expr><name>zmalloc_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>peak_hmem</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>total_system_hmem</name></expr></argument>,<argument><expr><name>total_system_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_lua_hmem</name></expr></argument>,<argument><expr><name>memory_lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_scripts_hmem</name></expr></argument>,<argument><expr><name><name>mh</name><operator>-&gt;</operator><name>lua_caches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>used_memory_rss_hmem</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cron_malloc_stats</name><operator>.</operator><name>process_rss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bytesToHuman</name><argument_list>(<argument><expr><name>maxmemory_hmem</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>info</argument>,
            <argument><literal type="string">"# Memory\r\n"</literal>
            <literal type="string">"used_memory:%Iu\r\n"</literal>                                               WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"used_memory_human:%s\r\n"</literal>
            <literal type="string">"used_memory_rss:%Iu\r\n"</literal>                                           WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"used_memory_rss_human:%s\r\n"</literal>
            <literal type="string">"used_memory_peak:%Iu\r\n"</literal>                                          WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"used_memory_peak_human:%s\r\n"</literal>
            <literal type="string">"used_memory_peak_perc:%.2f%%\r\n"</literal>
            <literal type="string">"used_memory_overhead:%Iu\r\n"</literal>                                      WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"used_memory_startup:%Iu\r\n"</literal>                                       WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"used_memory_dataset:%Iu\r\n"</literal>                                       WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"used_memory_dataset_perc:%.2f%%\r\n"</literal>
            <literal type="string">"allocator_allocated:%Iu\r\n"</literal>		WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"allocator_active:%Iu\r\n"</literal>			WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"allocator_resident:%Iu\r\n"</literal>		WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"total_system_memory:%Iu\r\n"</literal>		WIN_PORT_FIX <comment type="block">/* %lu -&gt; %Iu */</comment>
            <literal type="string">"total_system_memory_human:%s\r\n"</literal>
            <literal type="string">"used_memory_lua:%lld\r\n"</literal>
            <literal type="string">"used_memory_lua_human:%s\r\n"</literal>
            <literal type="string">"used_memory_scripts:%lld\r\n"</literal>
            <literal type="string">"used_memory_scripts_human:%s\r\n"</literal>
            <literal type="string">"number_of_cached_scripts:%lu\r\n"</literal>
            <literal type="string">"maxmemory:%lld\r\n"</literal>
            <literal type="string">"maxmemory_human:%s\r\n"</literal>
            <literal type="string">"maxmemory_policy:%s\r\n"</literal>
            <literal type="string">"allocator_frag_ratio:%.2f\r\n"</literal>
            <literal type="string">"allocator_frag_bytes:%Iu\r\n"</literal>		WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"allocator_rss_ratio:%.2f\r\n"</literal>
            <literal type="string">"allocator_rss_bytes:%zd\r\n"</literal>
            <literal type="string">"rss_overhead_ratio:%.2f\r\n"</literal>
            <literal type="string">"rss_overhead_bytes:%zd\r\n"</literal>
            <literal type="string">"mem_fragmentation_ratio:%.2f\r\n"</literal>
            <literal type="string">"mem_fragmentation_bytes:%zd\r\n"</literal>
            <literal type="string">"mem_not_counted_for_evict:%Iu\r\n"</literal> WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"mem_replication_backlog:%Iu\r\n"</literal>	WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"mem_clients_slaves:%Iu\r\n"</literal>		WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"mem_clients_normal:%Iu\r\n"</literal>		WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"mem_aof_buffer:%Iu\r\n"</literal>			WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"mem_allocator:%s\r\n"</literal>
            <literal type="string">"active_defrag_running:%d\r\n"</literal>
            <literal type="string">"lazyfree_pending_objects:%Iu\r\n"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            zmalloc_used</argument>,
            <argument>hmem</argument>,
            <argument>server.cron_malloc_stats.process_rss</argument>,
            <argument>used_memory_rss_hmem</argument>,
            <argument>server.stat_peak_memory</argument>,
            <argument>peak_hmem</argument>,
            <argument>mh-&gt;peak_perc</argument>,
            <argument>mh-&gt;overhead_total</argument>,
            <argument>mh-&gt;startup_allocated</argument>,
            <argument>mh-&gt;dataset</argument>,
            <argument>mh-&gt;dataset_perc</argument>,
            <argument>server.cron_malloc_stats.allocator_allocated</argument>,
            <argument>server.cron_malloc_stats.allocator_active</argument>,
            <argument>server.cron_malloc_stats.allocator_resident</argument>,
            <argument>(PORT_ULONG)total_system_mem</argument>,
            <argument>total_system_hmem</argument>,
            <argument>memory_lua</argument>,
            <argument>used_memory_lua_hmem</argument>,
            <argument>(PORT_LONGLONG) mh-&gt;lua_caches</argument>,
            <argument>used_memory_scripts_hmem</argument>,
            <argument>dictSize(server.lua_scripts)</argument>,
            <argument>server.maxmemory</argument>,
            <argument>maxmemory_hmem</argument>,
            <argument>evict_policy</argument>,
            <argument>mh-&gt;allocator_frag</argument>,
            <argument>mh-&gt;allocator_frag_bytes</argument>,
            <argument>mh-&gt;allocator_rss</argument>,
            <argument>mh-&gt;allocator_rss_bytes</argument>,
            <argument>mh-&gt;rss_extra</argument>,
            <argument>mh-&gt;rss_extra_bytes</argument>,
            <argument>mh-&gt;total_frag</argument>, <comment type="block">/* this is the total RSS overhead, including fragmentation, */</comment>
            <argument>mh-&gt;total_frag_bytes</argument>, <comment type="block">/* named so for backwards compatibility */</comment>
            <argument>freeMemoryGetNotCountedMemory()</argument>,
            <argument>mh-&gt;repl_backlog</argument>,
            <argument>mh-&gt;clients_slaves</argument>,
            <argument>mh-&gt;clients_normal</argument>,
            <argument>mh-&gt;aof_buffer</argument>,
            <argument>ZMALLOC_LIB</argument>,
            <argument>server.active_defrag_running</argument>,
            <argument>lazyfreeGetPendingObjectsCount()</argument>
        )</argument_list></macro></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeMemoryOverheadData</name><argument_list>(<argument><expr><name>mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Persistence */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"persistence"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>info</argument>,
            <argument><literal type="string">"# Persistence\r\n"</literal>
            <literal type="string">"loading:%d\r\n"</literal>
            <literal type="string">"rdb_changes_since_last_save:%lld\r\n"</literal>
            <literal type="string">"rdb_bgsave_in_progress:%d\r\n"</literal>
            <literal type="string">"rdb_last_save_time:%lld\r\n"</literal>                                       WIN_PORT_FIX <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"rdb_last_bgsave_status:%s\r\n"</literal>
            <literal type="string">"rdb_last_bgsave_time_sec:%lld\r\n"</literal>                                 WIN_PORT_FIX <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"rdb_current_bgsave_time_sec:%lld\r\n"</literal>                              WIN_PORT_FIX <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"rdb_last_cow_size:%Iu\r\n"</literal>                                         WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"aof_enabled:%d\r\n"</literal>
            <literal type="string">"aof_rewrite_in_progress:%d\r\n"</literal>
            <literal type="string">"aof_rewrite_scheduled:%d\r\n"</literal>
            <literal type="string">"aof_last_rewrite_time_sec:%lld\r\n"</literal>                                WIN_PORT_FIX <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"aof_current_rewrite_time_sec:%lld\r\n"</literal>                             WIN_PORT_FIX <comment type="block">/* %jd -&gt; %lld */</comment>
            <literal type="string">"aof_last_bgrewrite_status:%s\r\n"</literal>
            <literal type="string">"aof_last_write_status:%s\r\n"</literal>
            <literal type="string">"aof_last_cow_size:%Iu\r\n"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            server.loading</argument>,
            <argument>server.dirty</argument>,
            <argument>server.rdb_child_pid != -<literal type="number">1</literal></argument>,
            <argument>(intmax_t)server.lastsave</argument>,
            <argument>(server.lastbgsave_status == C_OK) ? <literal type="string">"ok"</literal> : <literal type="string">"err"</literal></argument>,
            <argument>(intmax_t)server.rdb_save_time_last</argument>,
            <argument>(intmax_t)((server.rdb_child_pid == -<literal type="number">1</literal>) ?
                -<literal type="number">1</literal> : time(NULL)-server.rdb_save_time_start)</argument>,
            <argument>server.stat_rdb_cow_bytes</argument>,
            <argument>server.aof_state != AOF_OFF</argument>,
            <argument>server.aof_child_pid != -<literal type="number">1</literal></argument>,
            <argument>server.aof_rewrite_scheduled</argument>,
            <argument>(intmax_t)server.aof_rewrite_time_last</argument>,
            <argument>(intmax_t)((server.aof_child_pid == -<literal type="number">1</literal>) ?
                -<literal type="number">1</literal> : time(NULL)-server.aof_rewrite_time_start)</argument>,
            <argument>(server.aof_lastbgrewrite_status == C_OK) ? <literal type="string">"ok"</literal> : <literal type="string">"err"</literal></argument>,
            <argument>(server.aof_last_write_status == C_OK) ? <literal type="string">"ok"</literal> : <literal type="string">"err"</literal></argument>,
            <argument>server.stat_aof_cow_bytes</argument>)</argument_list></macro></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                <argument><expr><literal type="string">"aof_current_size:%lld\r\n"</literal>
                <literal type="string">"aof_base_size:%lld\r\n"</literal>
                <literal type="string">"aof_pending_rewrite:%d\r\n"</literal>
                <literal type="string">"aof_buffer_length:%Iu\r\n"</literal>                                     <name>WIN_PORT_FIX</name> <comment type="block">/* %zu -&gt; %Iu */</comment>
                <literal type="string">"aof_rewrite_buffer_length:%Iu\r\n"</literal>                             <name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
                <literal type="string">"aof_pending_bio_fsync:%llu\r\n"</literal>
                <literal type="string">"aof_delayed_fsync:%Iu\r\n"</literal></expr></argument>, <argument><expr><macro><name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
                <argument_list>(<argument>PORT_LONGLONG</argument>)</argument_list></macro> <name><name>server</name><operator>.</operator><name>aof_current_size</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>aof_rewrite_base_size</name></name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_scheduled</name></name></expr></argument>,
                <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_buf</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aofRewriteBufferSize</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>bioPendingJobsOfType</name><argument_list>(<argument><expr><name>BIO_AOF_FSYNC</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>aof_delayed_fsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>perc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>time_t</name></type> <name>eta</name></decl>, <decl><type ref="prev"/><name>elapsed</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>off_t</name></type> <name>remaining_bytes</name> <init>= <expr><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name><operator>-</operator>
                                    <name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>perc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>/</operator>
                   <operator>(</operator><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>loading_start_time</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>eta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* A fake 1 second figure if we don't have
                            enough info */</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>eta</name> <operator>=</operator> <operator>(</operator><name>elapsed</name><operator>*</operator><name>remaining_bytes</name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                <argument><expr><literal type="string">"loading_start_time:%jd\r\n"</literal>
                <literal type="string">"loading_total_bytes:%llu\r\n"</literal>
                <literal type="string">"loading_loaded_bytes:%llu\r\n"</literal>
                <literal type="string">"loading_loaded_perc:%.2f\r\n"</literal>
                <literal type="string">"loading_eta_seconds:%jd\r\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_start_time</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name></expr></argument>,
                <argument><expr><name>perc</name></expr></argument>,
                <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name>eta</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Stats */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"stats"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
            <argument><expr><literal type="string">"# Stats\r\n"</literal>
            <literal type="string">"total_connections_received:%lld\r\n"</literal>
            <literal type="string">"total_commands_processed:%lld\r\n"</literal>
            <literal type="string">"instantaneous_ops_per_sec:%lld\r\n"</literal>
            <literal type="string">"total_net_input_bytes:%lld\r\n"</literal>
            <literal type="string">"total_net_output_bytes:%lld\r\n"</literal>
            <literal type="string">"instantaneous_input_kbps:%.2f\r\n"</literal>
            <literal type="string">"instantaneous_output_kbps:%.2f\r\n"</literal>
            <literal type="string">"rejected_connections:%lld\r\n"</literal>
            <literal type="string">"sync_full:%lld\r\n"</literal>
            <literal type="string">"sync_partial_ok:%lld\r\n"</literal>
            <literal type="string">"sync_partial_err:%lld\r\n"</literal>
            <literal type="string">"expired_keys:%lld\r\n"</literal>
            <literal type="string">"expired_stale_perc:%.2f\r\n"</literal>
            <literal type="string">"expired_time_cap_reached_count:%lld\r\n"</literal>
            <literal type="string">"evicted_keys:%lld\r\n"</literal>
            <literal type="string">"keyspace_hits:%lld\r\n"</literal>
            <literal type="string">"keyspace_misses:%lld\r\n"</literal>
            <literal type="string">"pubsub_channels:%Id\r\n"</literal>                                           <name>WIN_PORT_FIX</name> <comment type="block">/* %ld -&gt; %Id */</comment>
            <literal type="string">"pubsub_patterns:%Iu\r\n"</literal>                                           <name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
            <literal type="string">"latest_fork_usec:%lld\r\n"</literal>
            <literal type="string">"migrate_cached_sockets:%Id\r\n"</literal>                                    <name>WIN_PORT_FIX</name> <comment type="block">/* %ld -&gt; %Id */</comment>
            <literal type="string">"slave_expires_tracked_keys:%Iu\r\n"</literal>                                <name>WIN_PORT_FIX</name> <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"active_defrag_hits:%lld\r\n"</literal>
            <literal type="string">"active_defrag_misses:%lld\r\n"</literal>
            <literal type="string">"active_defrag_key_hits:%lld\r\n"</literal>
            <literal type="string">"active_defrag_key_misses:%lld\r\n"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_numconnections</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_numcommands</name></name></expr></argument>,
            <argument><expr><call><name>getInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_COMMAND</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_net_input_bytes</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_net_output_bytes</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name>getInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_INPUT</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1024</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name>getInstantaneousMetric</name><argument_list>(<argument><expr><name>STATS_METRIC_NET_OUTPUT</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1024</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_rejected_conn</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_sync_full</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_ok</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_sync_partial_err</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_expiredkeys</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_expired_stale_perc</name></name><operator>*</operator><literal type="number">100</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_expired_time_cap_reached_count</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_evictedkeys</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_hits</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_keyspace_misses</name></name></expr></argument>,
            <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pubsub_channels</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pubsub_patterns</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name></expr></argument>,
            <argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>migrate_cached_sockets</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>getSlaveKeyWithExpireCount</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_hits</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_misses</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_hits</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stat_active_defrag_key_misses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Replication */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"replication"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
            <argument><expr><literal type="string">"# Replication\r\n"</literal>
            <literal type="string">"role:%s\r\n"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>: <expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>slave_repl_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>slave_repl_offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>slave_repl_offset</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>reploff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                <argument><expr><literal type="string">"master_host:%s\r\n"</literal>
                <literal type="string">"master_port:%d\r\n"</literal>
                <literal type="string">"master_link_status:%s\r\n"</literal>
                <literal type="string">"master_last_io_seconds_ago:%d\r\n"</literal>
                <literal type="string">"master_sync_in_progress:%d\r\n"</literal>
                <literal type="string">"slave_repl_offset:%lld\r\n"</literal></expr></argument>
                ,<argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_CONNECTED</name><operator>)</operator></expr> ?</condition><then>
                    <expr><literal type="string">"up"</literal></expr> </then><else>: <expr><literal type="string">"down"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr> ?</condition><then>
                <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>lastinteraction</name></name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr></argument>,
                <argument><expr><name>slave_repl_offset</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                    <argument><expr><literal type="string">"master_sync_left_bytes:%lld\r\n"</literal>
                    <literal type="string">"master_sync_last_io_seconds_ago:%d\r\n"</literal></expr></argument>
                    , <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator>
                        <operator>(</operator><name><name>server</name><operator>.</operator><name>repl_transfer_size</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>repl_transfer_read</name></name><operator>)</operator></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>repl_transfer_lastio</name></name><operator>)</operator></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>!=</operator> <name>REPL_STATE_CONNECTED</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                    <argument><expr><literal type="string">"master_link_down_since_seconds:%jd\r\n"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>unixtime</name></name><operator>-</operator><name><name>server</name><operator>.</operator><name>repl_down_since</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                <argument><expr><literal type="string">"slave_priority:%d\r\n"</literal>
                <literal type="string">"slave_read_only:%d\r\n"</literal></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>info</argument>,
            <argument><literal type="string">"connected_slaves:%Iu\r\n"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %lu -&gt; %Iu */</comment>
            listLength(server.slaves)</argument>)</argument_list></macro></expr>;</expr_stmt>

        <comment type="block">/* If min-slaves-to-write is active, write the number of slaves
         * currently considered 'good'. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>&amp;&amp;</operator>
            <name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                <argument><expr><literal type="string">"min_slaves_good_slaves:%d\r\n"</literal></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>repl_good_slaves_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>slaveid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slaveip</name> <init>= <expr><name><name>slave</name><operator>-&gt;</operator><name>slave_ip</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>lag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>slaveip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>anetPeerToString</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>slaveip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <switch>switch<condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>:</case>
                <case>case <expr><name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>:</case>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="string">"wait_bgsave"</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>SLAVE_STATE_SEND_BULK</name></expr>:</case>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="string">"send_bulk"</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>SLAVE_STATE_ONLINE</name></expr>:</case>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="string">"online"</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></switch>
                <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_ONLINE</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>lag</name> <operator>=</operator> <operator>(</operator><name>PORT_LONG</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>repl_ack_time</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>       <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (PORT_LONG) */</comment>

                <name>info</name> <init>= <macro><name>sdscatprintf</name><argument_list>(<argument>info</argument>,
                    <argument><literal type="string">"slave%d:ip=%s,port=%d,state=%s,"</literal>
                    <literal type="string">"offset=%lld,lag=%Id\r\n"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id */</comment>
                    slaveid</argument>,<argument>slaveip</argument>,<argument>slave-&gt;slave_listening_port</argument>,<argument>state</argument>,
                    <argument>slave-&gt;repl_ack_off</argument>, <argument>lag</argument>)</argument_list></macro></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>slaveid</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
            <argument><expr><literal type="string">"master_replid:%s\r\n"</literal>
            <literal type="string">"master_replid2:%s\r\n"</literal>
            <literal type="string">"master_repl_offset:%lld\r\n"</literal>
            <literal type="string">"second_repl_offset:%lld\r\n"</literal>
            <literal type="string">"repl_backlog_active:%d\r\n"</literal>
            <literal type="string">"repl_backlog_size:%lld\r\n"</literal>
            <literal type="string">"repl_backlog_first_byte_offset:%lld\r\n"</literal>
            <literal type="string">"repl_backlog_histlen:%lld\r\n"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>replid2</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>second_replid_offset</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_off</name></name></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_histlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* CPU */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
        <argument><expr><literal type="string">"# CPU\r\n"</literal>
        <literal type="string">"used_cpu_sys:%ld.%06ld\r\n"</literal>
        <literal type="string">"used_cpu_user:%ld.%06ld\r\n"</literal>
        <literal type="string">"used_cpu_sys_children:%ld.%06ld\r\n"</literal>
        <literal type="string">"used_cpu_user_children:%ld.%06ld\r\n"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>self_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>c_ru</name><operator>.</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Command statistics */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"commandstats"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"# Commandstats\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>redisCommand</name> <operator>*</operator><operator>)</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>calls</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                <argument><expr><literal type="string">"cmdstat_%s:calls=%lld,usec=%lld,usec_per_call=%.2f\r\n"</literal></expr></argument>,
                <argument><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>calls</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>microseconds</name></name></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>microseconds</name></name><operator>/</operator><name><name>c</name><operator>-&gt;</operator><name>calls</name></name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Cluster */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"cluster"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
        <argument><expr><literal type="string">"# Cluster\r\n"</literal>
        <literal type="string">"cluster_enabled:%d\r\n"</literal></expr></argument>,
        <argument><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Key space */</comment>
    <if_stmt><if>if <condition>(<expr><name>allsections</name> <operator>||</operator> <name>defsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"keyspace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"# Keyspace\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>keys</name></decl>, <decl><type ref="prev"/><name>vkeys</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vkeys</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>keys</name> <operator>||</operator> <name>vkeys</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>info</name></expr></argument>,
                    <argument><expr><literal type="string">"db%d:keys=%lld,expires=%lld,avg_ttl=%lld\r\n"</literal></expr></argument>,
                    <argument><expr><name>j</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>vkeys</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>avg_ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>infoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>genRedisInfoString</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>monitorCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* ignore MONITOR if already slave or in monitor mode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>CLIENT_SLAVE</name><operator>|</operator><name>CLIENT_MONITOR</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>monitors</name></name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* =================================== Main! ================================ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
<function><type><name>int</name></type> <name>linuxOvercommitMemoryValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/sys/vm/overcommit_memory"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>linuxMemoryWarnings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>linuxOvercommitMemoryValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>THPIsEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __linux__ */</comment>

<function><type><name>void</name></type> <name>createPidFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* If pidfile requested, but no pidfile defined, use
     * default pidfile path */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name>CONFIG_DEFAULT_PID_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Try to write the pid file in a best-effort way. */</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>daemonize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Windows does not support daemonize. Start Redis as service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fork</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* parent exits */</comment>
    <expr_stmt><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* create a new session */</comment>

    <comment type="block">/* Every output goes to /dev/null. If Redis is daemonized but
     * the 'logfile' is set to 'stdout' in the configuration file
     * it will not log at all. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <name>STDERR_FILENO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Redis server v=%s sha=%s:%d malloc=%s bits=%d build=%llx\n"</literal></expr></argument>,
        <argument><expr><name>REDIS_VERSION</name></expr></argument>,
        <argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
        <argument><expr><name>ZMALLOC_LIB</name></expr></argument>,
        <argument><expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <call><name>redisBuildId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Usage: ./redis-server [/path/to/redis.conf] [options]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server - (read config from stdin)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server -v or --version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server -h or --help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server --test-memory &lt;megabytes&gt;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Examples:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server (run the server with default conf)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server /etc/redis/6379.conf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server --port 7777\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server --port 7777 --replicaof 127.0.0.1 8888\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server /etc/myredis.conf --loglevel verbose\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sentinel mode:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"       ./redis-server /etc/sentinel.conf --sentinel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisAsciiArt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asciilogo.h"</cpp:file></cpp:include>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"cluster"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"sentinel"</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"standalone"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Show the ASCII logo if: log file is stdout AND stdout is a
     * tty AND syslog logging is disabled. Also show logo if the user
     * forced us to do so via redis.conf. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>show_logo</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>!</operator><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name> <operator>&amp;&amp;</operator>
                      <name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
                      <call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                     <name><name>server</name><operator>.</operator><name>always_show_logo</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>show_logo</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
            <argument><expr><literal type="string">"Running mode=%s, port=%d."</literal></expr></argument>,
            <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">16</literal></expr></argument>,<argument><expr><name>ascii_logo</name></expr></argument>,
            <argument><expr><name>REDIS_VERSION</name></expr></argument>,
            <argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"64"</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_NOTICE</name><operator>|</operator><name>LL_RAW</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sigShutdownHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SIGINT</name></expr>:</case>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received SIGINT scheduling shutdown..."</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>SIGTERM</name></expr>:</case>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received SIGTERM scheduling shutdown..."</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Received shutdown signal, scheduling shutdown..."</literal></expr>;</expr_stmt>
    </block_content>}</block></switch><empty_stmt>;</empty_stmt>

    <comment type="block">/* SIGINT is often delivered via Ctrl+C in an interactive session.
     * If we receive the signal the second time, we interpret this as
     * the user really wanting to quit ASAP without waiting to persist
     * on disk. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>&amp;&amp;</operator> <name>sig</name> <operator>==</operator> <name>SIGINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"You insist... exiting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rdbRemoveTempFile</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Exit with an error since this was not a clean shutdown. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Received shutdown signal during loading, exiting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>shutdown_asap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setupSignalHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>

    <comment type="block">/* When the SA_SIGINFO flag is set in sa_flags then sa_sigaction is used.
     * Otherwise, sa_handler is used. */</comment>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sigShutdownHandler</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name> <operator>|</operator> <name>SA_RESETHAND</name> <operator>|</operator> <name>SA_SIGINFO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_sigaction</name></name> <operator>=</operator> <name>sigsegvHandler</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGBUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>memtest</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>megabytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Returns 1 if there is --sentinel among the arguments or if
 * argv[0] contains "redis-sentinel". */</comment>
<function><type><name>int</name></type> <name>checkForSentinelMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"redis-sentinel"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Function called at startup to load RDB or AOF file in memory. */</comment>
<function><type><name>void</name></type> <name>loadDataFromDisk</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name> <init>= <expr><call><name>ustime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_ON</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>loadAppendOnlyFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"DB loaded from append only file: %.3f seconds"</literal></expr></argument>,<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name><operator>)</operator><operator>/</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name> <init>= <expr><name>RDB_SAVE_INFO_INIT</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbLoad</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"DB loaded from disk: %.3f seconds"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name><operator>)</operator><operator>/</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Restore the replication ID / offset from the RDB file. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>||</operator>
                <operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator>
                <call><name>nodeIsSlave</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
                <name><name>rsi</name><operator>.</operator><name>repl_id_is_set</name></name> <operator>&amp;&amp;</operator>
                <name><name>rsi</name><operator>.</operator><name>repl_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
                <comment type="block">/* Note that older implementations may save a repl_stream_db
                 * of -1 inside the RDB file in a wrong way, see more
                 * information in function rdbPopulateSaveInfo. */</comment>
                <name><name>rsi</name><operator>.</operator><name>repl_stream_db</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>,<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_id</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name> <operator>=</operator> <name><name>rsi</name><operator>.</operator><name>repl_offset</name></name></expr>;</expr_stmt>
                <comment type="block">/* If we are a slave, create a cached master from this
                 * information, in order to allow partial resynchronizations
                 * with masters. */</comment>
                <expr_stmt><expr><call><name>replicationCacheMasterUsingMyself</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>selectDb</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr></argument>,<argument><expr><name><name>rsi</name><operator>.</operator><name>repl_stream_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Fatal error loading the DB: %s. Exiting."</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisOutOfMemoryHandler</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>allocation_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>bugReportStart();</argument>)</argument_list></macro>
    <macro><name>serverLog</name><argument_list>(<argument>LL_WARNING</argument>,<argument><literal type="string">"Out Of Memory allocating %Iu bytes!"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
        allocation_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>abort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Redis aborting for OUT OF MEMORY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redisSetProcTitle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SETPROCTITLE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server_mode</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>server_mode</name> <operator>=</operator> <literal type="string">" [cluster]"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>server_mode</name> <operator>=</operator> <literal type="string">" [sentinel]"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>setproctitle</name><argument_list>(<argument><expr><literal type="string">"%s %s:%d%s"</literal></expr></argument>,
        <argument><expr><name>title</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr> ?</condition><then> <expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>,
        <argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>,
        <argument><expr><name>server_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether systemd or upstart have been used to start redis.
 */</comment>

<function><type><name>int</name></type> <name>redisSupervisedUpstart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upstart_job</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"UPSTART_JOB"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>upstart_job</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"upstart supervision requested, but UPSTART_JOB not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"supervised by upstart, will stop to signal readiness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"UPSTART_JOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisSupervisedSystemd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>notify_socket</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"NOTIFY_SOCKET"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>su</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sendto_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>notify_socket</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"systemd supervision requested, but NOTIFY_SOCKET not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"@/"</literal></expr></argument>, <argument><expr><name><name>notify_socket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>notify_socket</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"supervised by systemd, will signal readiness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Can't connect to systemd socket %s"</literal></expr></argument>, <argument><expr><name>notify_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>su</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>su</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>su</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>su</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>notify_socket</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>su</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>su</name><operator>.</operator><name>sun_path</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>su</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>notify_socket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>su</name><operator>.</operator><name>sun_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <literal type="string">"READY=1"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"READY=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>su</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>+</operator>
        <call><name>strlen</name><argument_list>(<argument><expr><name>notify_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"NOTIFY_SOCKET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MSG_NOSIGNAL</name></cpp:ifdef>
    <expr_stmt><expr><name>sendto_flags</name> <operator>|=</operator> <name>MSG_NOSIGNAL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><call><name>sendmsg</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>sendto_flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't send notification to systemd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redisIsSupervised</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SUPERVISED_AUTODETECT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upstart_job</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"UPSTART_JOB"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>notify_socket</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"NOTIFY_SOCKET"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>upstart_job</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>redisSupervisedUpstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>notify_socket</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>redisSupervisedSystemd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SUPERVISED_UPSTART</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>redisSupervisedUpstart</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SUPERVISED_SYSTEMD</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>redisSupervisedSystemd</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REDIS_TEST</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ziplist"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>ziplistTest</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"quicklist"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>quicklistTest</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"intset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>intsetTest</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"zipmap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>zipmapTest</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"sha1test"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>sha1Test</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"util"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>utilTest</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"endianconv"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>endianconvTest</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"crc64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>crc64Test</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"zmalloc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>zmalloc_test</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* test not found */</comment>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* We need to initialize our libraries, and the server configuration. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INIT_SETPROCTITLE_REPLACEMENT</name></cpp:ifdef>
    <expr_stmt><expr><call><name>spt_init</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_COLLATE</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Populates 'timezone' global. */</comment>
    <expr_stmt><expr><call><name>zmalloc_set_oom_handler</name><argument_list>(<argument><expr><name>redisOutOfMemoryHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <comment type="line">//"used_memory_mutex" from zmalloc.c is initialized earlier in Win32_QFork.cpp/main(), which later calls this main() function</comment>
    <comment type="line">//pthread_mutex_init(&amp;used_memory_mutex, NULL);</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name> <name>:</name> <name>6031</name> <name>)</name></cpp:pragma>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lazyfree_objects_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name> <name>:</name> <name>6031</name> <name>)</name></cpp:pragma>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleUnblockedClientsMutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name> <name>:</name> <name>6031</name> <name>)</name></cpp:pragma>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moduleGIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>^</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (unsigned int) */</comment>
    <name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>hashseed</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name>hashseed</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hashseed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictSetHashFunctionSeed</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>hashseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name> <operator>=</operator> <call><name>checkForSentinelMode</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initServerConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>moduleInitModulesSystem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Store the executable path and arguments in a safe place in order
     * to be able to restart the server later. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>executable</name></name> <operator>=</operator> <call><name>getAbsolutePath</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>argc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* We need to init sentinel right now as parsing the configuration file
     * in sentinel mode will have the effect of populating the sentinel
     * data structures with master nodes to monitor. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>initSentinelConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initSentinel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if we need to start in redis-check-rdb/aof mode. We just execute
     * the program main. However the program is part of the Redis executable
     * so that we can easily execute an RDB check on loading errors. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"redis-check-rdb"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <return>return
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr><call><name>redis_check_rdb_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"redis-check-aof"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <return>return
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr><call><name>redis_check_aof_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* First option to parse in argv[] */</comment>
        <decl_stmt><decl><type><name>sds</name></type> <name>options</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>configfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Handle special options --help and --version */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--test-memory"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memtest</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Please specify the amount of memory to test in megabytes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Example: ./redis-server --test-memory 4096\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* First argument is the config file name? */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>configfile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>=</operator> <call><name>getAbsolutePath</name><argument_list>(<argument><expr><name>configfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Replace the config file in server.exec_argv with
             * its absolute path. */</comment>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>exec_argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* All the other options are parsed and conceptually appended to the
         * configuration file. For instance --port 6380 will generate the
         * string "port 6380\n" to be parsed after the actual file name
         * is parsed, if any. */</comment>
        <while>while<condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Option name */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--check-rdb"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* Argument has no options, need to skip for parsing. */</comment>
                    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Option argument */</comment>
                <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>options</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name> <operator>&amp;&amp;</operator> <name>configfile</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>configfile</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Sentinel config from STDIN not allowed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Sentinel needs config file on disk to save state.  Exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadServerConfig</name><argument_list>(<argument><expr><name>configfile</name></expr></argument>,<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"Redis version=%s, bits=%d, commit=%s, modified=%d, pid=%d, just started"</literal></expr></argument>,
            <argument><expr><name>REDIS_VERSION</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>redisGitSHA1</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>strtol</name><argument_list>(<argument><expr><call><name>redisGitDirty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: no config file specified, using the default config. In order to specify a config file use %s /path/to/%s.conf"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"sentinel"</literal></expr> </then><else>: <expr><literal type="string">"redis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Configuration loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>supervised</name></name> <operator>=</operator> <call><name>redisIsSupervised</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>background</name> <init>= <expr><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>supervised</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>background</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>daemonize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>initServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>background</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>pidfile</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>createPidFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisAsciiArt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkTcpBacklogSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Things not needed when running in Sentinel mode. */</comment>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Server initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>linuxMemoryWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>moduleLoadFromQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitServerLast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadDataFromDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>verifyClusterConfigWithData</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                    <argument><expr><literal type="string">"You can't have keys in a DB different than DB 0 when in "</literal>
                    <literal type="string">"Cluster mode. Exiting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>ipfd_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Ready to accept connections"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sofd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"The server is now ready to accept connections at %s"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>InitServerLast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelIsRunning</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Warning the user about suspicious maxmemory setting. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: You specified a maxmemory value that is less than 1MB (current value is %llu bytes). Are you sure this is what you really want?"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>aeSetBeforeSleepProc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name>beforeSleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aeSetAfterSleepProc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name>afterSleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aeMain</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aeDeleteEventLoop</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The End */</comment>
</unit>
