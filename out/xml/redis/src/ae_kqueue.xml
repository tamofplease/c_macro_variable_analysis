<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/ae_kqueue.c"><comment type="block">/* Kqueue(2)-based ae.c module
 *
 * Copyright (C) 2009 Harish Mallipeddi - harish.mallipeddi@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>aeApiState</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>kqfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
}</block></struct></type> <name>aeApiState</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiCreate</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeApiState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>events</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name> <operator>=</operator> <call><name>kqueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiResize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kevent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aeApiFree</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiAddEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name>ke</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EV_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVFILT_READ</name></expr></argument>, <argument><expr><name>EV_ADD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EV_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVFILT_WRITE</name></expr></argument>, <argument><expr><name>EV_ADD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aeApiDelEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name>ke</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EV_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVFILT_READ</name></expr></argument>, <argument><expr><name>EV_DELETE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EV_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EVFILT_WRITE</name></expr></argument>, <argument><expr><name>EV_DELETE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ke</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiPoll</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>numevents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>tvp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tvp</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>tvp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>kevent</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>kevent</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>kqfd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>numevents</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numevents</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>events</name></name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>EVFILT_READ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>AE_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>EVFILT_WRITE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>ident</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>numevents</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>aeApiName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"kqueue"</literal></expr>;</return>
</block_content>}</block></function>
</unit>
