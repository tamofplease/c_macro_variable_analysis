<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/anet.c"><comment type="block">/* anet.c -- Basic TCP socket stuff made a bit less boring
 *
 * Copyright (c) 2006-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_wsiocp2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_NOTUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Mstcpip.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"anet.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>anetSetError</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>ANET_ERR_LEN</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetSetBlock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>non_block</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

    <comment type="block">/* Set the socket blocking (if non_block is zero) or non-blocking.
     * Note that fcntl(2) for F_GETFL and F_SETFL can't be
     * interrupted by a signal. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>                                <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* fcntl default value for the 'flags' parameter */</comment>
        <name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_GETFL): %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>non_block</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_SETFL,O_NONBLOCK): %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetNonBlock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>anetSetBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetBlock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>anetSetBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Set TCP keep alive option to detect dead peers. The interval option
 * is only used for Linux as we are using Linux-specific APIs to set
 * the probe send time, interval, and count. */</comment>
<function><type><name>int</name></type> <name>anetKeepAlive</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_KEEPALIVE: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tcp_keepalive</name></name></type> <name>alive</name></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwBytesRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
    <expr_stmt><expr><name><name>alive</name><operator>.</operator><name>onoff</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>alive</name><operator>.</operator><name>keepalivetime</name></name> <operator>=</operator> <name>interval</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt> 
    <comment type="block">/* According to
     * http://msdn.microsoft.com/en-us/library/windows/desktop/ee470551(v=vs.85).aspx
     * On Windows Vista and later, the number of keep-alive probes (data
     * retransmissions) is set to 10 and cannot be changed.
     * So we set the keep alive interval as interval/10, as 10 probes will
     * be send before detecting an error */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt> 
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <expr_stmt><expr><name><name>alive</name><operator>.</operator><name>keepaliveinterval</name></name> <operator>=</operator> <name>val</name><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt> 
    <if_stmt><if>if <condition>(<expr><call><name>FDAPI_WSAIoctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIO_KEEPALIVE_VALS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alive</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBytesRet</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
                     <argument><expr><literal type="string">"WSAIotcl(SIO_KEEPALIVE_VALS) failed with error code %d\n"</literal></expr></argument>,
                     <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
    <comment type="block">/* Default settings are more or less garbage, with the keepalive time
     * set to 7200 by default on Linux. Modify settings to make the feature
     * actually useful. */</comment>

    <comment type="block">/* Send first probe after interval. */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_KEEPIDLE: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send next probes after the specified interval. Note that we set the
     * delay as interval / 3, as we send three probes before detecting
     * an error (see the next setsockopt call). */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>interval</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_KEEPINTVL: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Consider the socket in error state after three we send three ACK
     * probes without getting a reply. */</comment>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_KEEPCNT: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>interval</name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Avoid unused var warning for non Linux systems. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anetSetTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt TCP_NODELAY: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetEnableTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetSetTcpNoDelay</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetDisableTcpNoDelay</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetSetTcpNoDelay</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>anetSetSendBuffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_SNDBUF: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcpKeepAlive</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_KEEPALIVE: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Set the socket send timeout (SO_SNDTIMEO socket option) to the specified
 * number of milliseconds, or disable it if the 'ms' argument is zero. */</comment>
<function><type><name>int</name></type> <name>anetSendTimeout</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ms</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>                                                  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <init>= <expr><operator>(</operator><name>ms</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_SNDTIMEO: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* anetGenericResolve() is called by anetResolve() and anetResolveIP() to
 * do the actual work. It resolves the hostname "host" and set the string
 * representation of the IP address into the buffer pointed by "ipbuf".
 *
 * If flags is set to ANET_IP_ONLY the function only resolves hostnames
 * that are actually already IPv4 or IPv6 addresses. This turns the function
 * into a validating / normalizing function. */</comment>
<function><type><name>int</name></type> <name>anetGenericResolve</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ipbuf_len</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ANET_IP_ONLY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>  <comment type="block">/* specify socktype to avoid dups */</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>ipbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>ipbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetResolve</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ipbuf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>anetGenericResolve</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>host</name></expr></argument>,<argument><expr><name>ipbuf</name></expr></argument>,<argument><expr><name>ipbuf_len</name></expr></argument>,<argument><expr><name>ANET_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetResolveIP</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ipbuf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>anetGenericResolve</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>host</name></expr></argument>,<argument><expr><name>ipbuf</name></expr></argument>,<argument><expr><name>ipbuf_len</name></expr></argument>,<argument><expr><name>ANET_IP_ONLY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anetSetReuseAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Make sure connection-intensive things like the redis benchmark
     * will be able to close/open sockets a zillion of times */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_REUSEADDR: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anetCreateSocket</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>IPPROTO_TCP</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"creating socket: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Make sure connection-intensive things like the redis benchmark
     * will be able to close/open sockets a zillion of times */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>anetSetReuseAddr</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_CONNECT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_CONNECT_NONBLOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANET_CONNECT_BE_BINDING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* Best effort binding. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetTcpGenericConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
                                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SOCKADDR_STORAGE</name></type> <name>socketStorage</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ParseStorageAddress</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketStorage</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>anetCreateSocket</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>socketStorage</name><operator>.</operator><name>ss_family</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Workaround for getpeername failing to retrieve the endpoint address</comment>
    <expr_stmt><expr><call><name>FDAPI_SaveSocketAddrStorage</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_SocketConnect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketStorage</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>WSA_IO_PENDING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINPROGRESS</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>fd</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"connect: %d\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetTcpGenericConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
                                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>ANET_ERR</name></expr></init></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* strlen("65535") + 1; */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>servinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bservinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>portstr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>servinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>servinfo</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* Try to create the socket and to connect it.
         * If we fail in the socket() call, or on connect(), we retry with
         * the next entry in servinfo. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>anetSetReuseAddr</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name> <operator>&amp;&amp;</operator> <call><name>anetNonBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANET_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>source_addr</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>bound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Using getaddrinfo saves us from self-determining IPv4 vs IPv6 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>source_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bservinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>bservinfo</name></expr>;</init> <condition><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>bound</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>bservinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bound</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"bind: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* If the socket is non-blocking, it is ok for connect() to
             * return an EINPROGRESS error here. */</comment>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* If we ended an iteration of the for loop without errors, we
         * have a connected socket. Let's return to the caller. */</comment>
        <goto>goto <name>end</name>;</goto>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"creating socket: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>servinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Handle best effort binding: if a binding address was used, but it is
     * not possible to create a socket, try again without a binding address. */</comment>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>ANET_ERR</name> <operator>&amp;&amp;</operator> <name>source_addr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_BE_BINDING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>anetTcpConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>ANET_CONNECT_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcpNonBlockConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>ANET_CONNECT_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcpNonBlockBindConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
                               <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>source_addr</name></expr></argument>,
            <argument><expr><name>ANET_CONNECT_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcpNonBlockBestEffortBindConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
                                         <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetTcpGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>source_addr</name></expr></argument>,
            <argument><expr><name>ANET_CONNECT_NONBLOCK</name><operator>|</operator><name>ANET_CONNECT_BE_BINDING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetUnixGenericConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ANET_ERR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>anetCreateSocket</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANET_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ANET_ERR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>&amp;&amp;</operator>
            <name>flags</name> <operator>&amp;</operator> <name>ANET_CONNECT_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"connect: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>s</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetUnixConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetUnixGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><name>ANET_CONNECT_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetUnixNonBlockConnect</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>anetUnixGenericConnect</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><name>ANET_CONNECT_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like read(2) but make sure 'count' is read before to return
 * (unless error or EOF condition is encountered) */</comment>
<function><type><name>int</name></type> <name>anetRead</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>, <decl><type ref="prev"/><name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>totlen</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>count</name><operator>-</operator><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>totlen</name></expr>;</return></block_content></block></if></if_stmt>                                     <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast int */</comment>
        <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>totlen</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>totlen</name></expr>;</return>                                                         <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast int */</comment>
</block_content>}</block></function>

<comment type="block">/* Like write(2) but make sure 'count' is written before to return
 * (unless error is encountered) */</comment>
<function><type><name>int</name></type> <name>anetWrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name></decl>, <decl><type ref="prev"/><name>totlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>totlen</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>count</name><operator>-</operator><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>totlen</name></expr>;</return></block_content></block></if></if_stmt>                                  <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast int */</comment>
        <if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>totlen</name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>totlen</name></expr>;</return>                                                         <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast int */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anetListen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>sa</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"bind: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_Listen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"listen: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anetV6Only</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>IPPROTO_IPV6</name></expr></argument>,<argument><expr><name>IPV6_V6ONLY</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>anetSetExclusiveAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Make sure connection-intensive things like the redis benchmark
     * will be able to close/open sockets a zillion of times */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_EXCLUSIVEADDRUSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"setsockopt SO_EXCLUSIVEADDRUSE: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ANET_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_anetTcpServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bindaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>_port</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* strlen("65535") */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>servinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>_port</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>af</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>    <comment type="block">/* No effect if bindaddr != NULL */</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>bindaddr</name></expr></argument>,<argument><expr><name>_port</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>servinfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ANET_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>servinfo</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <call><name>anetV6Only</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>anetSetExclusiveAddr</name></expr></argument>,<argument><expr><name>anetSetReuseAddr</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>anetListen</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,<argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,<argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (socklen_t) */</comment>
        <goto>goto <name>end</name>;</goto>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unable to bind socket, errno: %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>ANET_ERR</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>servinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcpServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bindaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>_anetTcpServer</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>bindaddr</name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcp6Server</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bindaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>_anetTcpServer</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>bindaddr</name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetUnixServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ANET_ERR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>anetCreateSocket</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>AF_LOCAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_LOCAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>anetListen</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>perm</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>s</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>anetGenericAccept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>WSIOCP_Accept</name></expr></argument>,<argument><expr><name>accept</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>sa</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>anetSetError</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"accept: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>ANET_ERR</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></while>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetTcpAccept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>anetGenericAccept</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetUnixAccept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ANET_NOTUSED</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ANET_ERR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>anetGenericAccept</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ANET_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>fd</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetPeerToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ip_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="string">"/unixsocket"</literal></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ip_len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ip_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Format an IP,port pair into something easy to parse. If IP is IPv6
 * (matches for ":"), the ip is surrounded by []. IP and port are just
 * separated by colons. This the standard to display addresses within Redis. */</comment>
<function><type><name>int</name></type> <name>anetFormatAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>buf_len</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
           <expr><literal type="string">"[%s]:%d"</literal></expr> </then><else>: <expr><literal type="string">"%s:%d"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like anetFormatAddr() but extract ip and port from the socket's peer. */</comment>
<function><type><name>int</name></type> <name>anetFormatPeer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>anetPeerToString</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>anetFormatAddr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetSockName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ip_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>salen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sin6_addr</name></name><operator>)</operator></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>anetFormatSock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fmt_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>anetSockName</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>anetFormatAddr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>fmt_len</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
