<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/modules/testmodule.c"><comment type="block">/* Module designed to test the Redis modules subsystem.
 *
 * -----------------------------------------------------------------------------
 *
 * Copyright (c) 2016, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDISMODULE_EXPERIMENTAL_API</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../Win32_Interop/win32_types_hiredis.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* --------------------------------- Helpers -------------------------------- */</comment>

<comment type="block">/* Return true if the reply and the C null term string matches. */</comment>
<function><type><name>int</name></type> <name>TestMatchReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>mystr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mystr</name> <operator>=</operator> <call><name>RedisModule_CreateStringFromCallReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mystr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>mystr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ------------------------------- Test units ------------------------------- */</comment>

<comment type="block">/* TEST.CALL -- Test Call() API. */</comment>
<function><type><name>int</name></type> <name>TestCall</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RedisModule_AutoMemory</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"DEL"</literal></expr></argument>,<argument><expr><literal type="string">"c"</literal></expr></argument>,<argument><expr><literal type="string">"mylist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>mystr</name> <init>= <expr><call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"RPUSH"</literal></expr></argument>,<argument><expr><literal type="string">"csl"</literal></expr></argument>,<argument><expr><literal type="string">"mylist"</literal></expr></argument>,<argument><expr><name>mystr</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"LRANGE"</literal></expr></argument>,<argument><expr><literal type="string">"ccc"</literal></expr></argument>,<argument><expr><literal type="string">"mylist"</literal></expr></argument>,<argument><expr><literal type="string">"0"</literal></expr></argument>,<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>items</name> <init>= <expr><call><name>RedisModule_CallReplyLength</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>items</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>item0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>item1</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>item0</name> <operator>=</operator> <call><name>RedisModule_CallReplyArrayElement</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>item1</name> <operator>=</operator> <call><name>RedisModule_CallReplyArrayElement</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestMatchReply</name><argument_list>(<argument><expr><name>item0</name></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestMatchReply</name><argument_list>(<argument><expr><name>item1</name></expr></argument>,<argument><expr><literal type="string">"1234"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>

<label><name>fail</name>:</label>
    <expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"ERR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* TEST.STRING.APPEND -- Test appending to an existing string object. */</comment>
<function><type><name>int</name></type> <name>TestStringAppend</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RedisModule_StringAppendBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_ReplyWithString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* TEST.STRING.APPEND.AM -- Test append with retain when auto memory is on. */</comment>
<function><type><name>int</name></type> <name>TestStringAppendAM</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RedisModule_AutoMemory</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RedisModule_RetainString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_StringAppendBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_ReplyWithString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* TEST.STRING.PRINTF -- Test string formatting. */</comment>
<function><type><name>int</name></type> <name>TestStringPrintf</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>RedisModule_AutoMemory</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RedisModule_CreateStringPrintf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, 
        <argument><expr><literal type="string">"Got %d args. argv[1]: %s, argv[2]: %s"</literal></expr></argument>, 
        <argument><expr><name>argc</name></expr></argument>, 
        <argument><expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>RedisModule_ReplyWithString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>failTest</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>TestUnlink</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>RedisModule_AutoMemory</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>RedisModule_OpenKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>RedisModule_CreateStringPrintf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"unlinked"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name> <operator>|</operator> <name>REDISMODULE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>failTest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Could not create key"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>REDISMODULE_ERR</name> <operator>==</operator> <call><name>RedisModule_StringSet</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>RedisModule_CreateStringPrintf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Foobar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>failTest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Could not set string value"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"EXISTS"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"unlinked"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rep</name> <operator>||</operator> <call><name>RedisModule_CallReplyInteger</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>failTest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Key does not exist before unlink"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>REDISMODULE_ERR</name> <operator>==</operator> <call><name>RedisModule_UnlinkKey</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>failTest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Could not unlink key"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"EXISTS"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"unlinked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rep</name> <operator>||</operator> <call><name>RedisModule_CallReplyInteger</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>failTest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Could not verify key to be unlinked"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</return>
    
</block_content>}</block></function>

<function><type><name>int</name></type> <name>NotifyCallback</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
                   <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Increment a counter on the notifications: for each key notified we
   * increment a counter */</comment>
  <expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"Got event type %d, event %s, key %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>,
                  <argument><expr><name>event</name></expr></argument>, <argument><expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"HINCRBY"</literal></expr></argument>, <argument><expr><literal type="string">"csc"</literal></expr></argument>, <argument><expr><literal type="string">"notifications"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* TEST.NOTIFICATIONS -- Test Keyspace Notifications. */</comment>
<function><type><name>int</name></type> <name>TestNotifications</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                       \
    <cpp:value>{                                                                                        \
        RedisModule_Log(ctx, "warning", "Failed NOTIFY Test. Reason: " #msg, ##__VA_ARGS__); \
        goto err;                                                                            \
    }</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"FLUSHDB"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SADD"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SADD"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"HSET"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* LPUSH should be ignored and not increment any counters */</comment>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"LPUSH"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"LPUSH"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"HGET"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"notifications"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Wrong or no reply for foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>RedisModule_CallReplyStringPtr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>rep</name> <operator>!=</operator> <literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Got reply '%s'. expected '2'"</literal></expr></argument>, <argument><expr><call><name>RedisModule_CallReplyStringPtr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"HGET"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"notifications"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Wrong or no reply for bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>RedisModule_CallReplyStringPtr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>rep</name> <operator>!=</operator> <literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Got reply '%s'. expected '2'"</literal></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"HGET"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"notifications"</literal></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Wrong or no reply for baz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>RedisModule_CallReplyStringPtr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>rep</name> <operator>!=</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Got reply '%.*s'. expected '1'"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* For l we expect nothing since we didn't subscribe to list events */</comment>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"HGET"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"notifications"</literal></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_REPLY_NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Wrong reply for l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"FLUSHDB"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</return>
<label><name>err</name>:</label>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"FLUSHDB"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"ERR"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* TEST.CTXFLAGS -- Test GetContextFlags. */</comment>
<function><type><name>int</name></type> <name>TestCtxFlags</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RedisModule_AutoMemory</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errString</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FAIL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro>        \
    <cpp:value>{                    \
        ok = 0;          \
        errString = msg; \
        goto end;        \
    }</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Got no flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_LUA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Lua flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_MULTI</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Multi flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_AOF</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>FAIL</name><argument_list>(<argument><literal type="string">"AOF Flag was set"</literal></argument>)</argument_list></macro>
    <comment type="block">/* Enable AOF to test AOF flags */</comment>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"appendonly"</literal></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_AOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"AOF Flag not set after config set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_RDB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"RDB Flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Enable RDB to test RDB flags */</comment>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"save"</literal></expr></argument>, <argument><expr><literal type="string">"900 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_RDB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"RDB Flag was not set after config set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_MASTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Master flag was not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Slave flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_READONLY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Read-only flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_CLUSTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Cluster flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_MAXMEMORY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Maxmemory flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"maxmemory"</literal></expr></argument>, <argument><expr><literal type="string">"100000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_MAXMEMORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Maxmemory flag was not set after config set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_EVICT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Eviction flag was set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"maxmemory-policy"</literal></expr></argument>, <argument><expr><literal type="string">"allkeys-lru"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_EVICT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"Eviction flag was not set after config set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
    <comment type="block">/* Revert config changes */</comment>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"appendonly"</literal></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"save"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"maxmemory"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"ccc"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"maxmemory-policy"</literal></expr></argument>, <argument><expr><literal type="string">"noeviction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"Failed CTXFLAGS Test. Reason: %s"</literal></expr></argument>, <argument><expr><name>errString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"ERR"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------- Test framework ----------------------------- */</comment>

<comment type="block">/* Return 1 if the reply matches the specified string, otherwise log errors
 * in the server log and return 0. */</comment>
<function><type><name>int</name></type> <name>TestAssertStringReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>mystr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>expected</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"warning"</literal></expr></argument>,<argument><expr><literal type="string">"Unexpected reply type %d"</literal></expr></argument>,
            <argument><expr><call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>mystr</name> <operator>=</operator> <call><name>RedisModule_CreateStringFromCallReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_StringCompare</name><argument_list>(<argument><expr><name>mystr</name></expr></argument>,<argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mystr_ptr</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>mystr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected_ptr</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>expected</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"warning"</literal></expr></argument>,
            <argument><expr><literal type="string">"Unexpected string reply '%s' (instead of '%s')"</literal></expr></argument>,
            <argument><expr><name>mystr_ptr</name></expr></argument>, <argument><expr><name>expected_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return 1 if the reply matches the specified integer, otherwise log errors
 * in the server log and return 0. */</comment>
<function><type><name>int</name></type> <name>TestAssertIntegerReply</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_REPLY_INTEGER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"warning"</literal></expr></argument>,<argument><expr><literal type="string">"Unexpected reply type %d"</literal></expr></argument>,
            <argument><expr><call><name>RedisModule_CallReplyType</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>val</name> <init>= <expr><call><name>RedisModule_CallReplyInteger</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"warning"</literal></expr></argument>,
            <argument><expr><literal type="string">"Unexpected integer reply '%lld' (instead of '%lld')"</literal></expr></argument>,
            <argument><expr><name>val</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { \
        RedisModule_Log(ctx,"warning","Testing %s", name); \
        reply = RedisModule_Call(ctx,name,__VA_ARGS__); \
    } while (0);</cpp:value></cpp:define>

<comment type="block">/* TEST.IT -- Run all the tests. */</comment>
<function><type><name>int</name></type> <name>TestIt</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RedisModule_AutoMemory</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure the DB is empty before to proceed. */</comment>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"dbsize"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertIntegerReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"ping"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"PONG"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.call"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.ctxflags"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.string.append"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"foobar"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.unlink"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.string.append.am"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"foobar"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.string.printf"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"Got 3 args. argv[1]: foo, argv[2]: bar"</literal></expr></argument>,<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="string">"test.notify"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestAssertStringReply</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><literal type="string">"OK"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"ALL TESTS PASSED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>

<label><name>fail</name>:</label>
    <expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
        <argument><expr><literal type="string">"SOME TEST NOT PASSED! Check server logs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>RedisModule_OnLoad</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>REDISMODULE_NOT_USED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>REDISMODULE_APIVER_1</name></expr></argument>)</argument_list></call>
        <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.call"</literal></expr></argument>,
        <argument><expr><name>TestCall</name></expr></argument>,<argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.string.append"</literal></expr></argument>,
        <argument><expr><name>TestStringAppend</name></expr></argument>,<argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.string.append.am"</literal></expr></argument>,
        <argument><expr><name>TestStringAppendAM</name></expr></argument>,<argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.string.printf"</literal></expr></argument>,
        <argument><expr><name>TestStringPrintf</name></expr></argument>,<argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.ctxflags"</literal></expr></argument>,
        <argument><expr><name>TestCtxFlags</name></expr></argument>,<argument><expr><literal type="string">"readonly"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.unlink"</literal></expr></argument>,
        <argument><expr><name>TestUnlink</name></expr></argument>,<argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.it"</literal></expr></argument>,
        <argument><expr><name>TestIt</name></expr></argument>,<argument><expr><literal type="string">"readonly"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>RedisModule_SubscribeToKeyspaceEvents</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
                                            <argument><expr><name>REDISMODULE_NOTIFY_HASH</name> <operator>|</operator>
                                            <name>REDISMODULE_NOTIFY_SET</name> <operator>|</operator>
                                            <name>REDISMODULE_NOTIFY_STRING</name></expr></argument>,
                                        <argument><expr><name>NotifyCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><literal type="string">"test.notify"</literal></expr></argument>,
        <argument><expr><name>TestNotifications</name></expr></argument>,<argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
