<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/memtest.c"><comment type="block">/*
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stropts.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_ANSI.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PORT_ULONG_MAX</name> <operator>==</operator> <literal type="number">4294967295UL</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_32BIT</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>PORT_ULONG_MAX</name> <operator>==</operator> <literal type="number">18446744073709551615ULL</literal><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_64BIT</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"PORT_ULONG_MAX value not supported."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMTEST_32BIT</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ONEZERO</name></cpp:macro> <cpp:value>0xaaaaaaaaUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ZEROONE</name></cpp:macro> <cpp:value>0x55555555UL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ONEZERO</name></cpp:macro> <cpp:value>0xaaaaaaaaaaaaaaaaUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_ZEROONE</name></cpp:macro> <cpp:value>0x5555555555555555UL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<typedef>typedef <type><struct>struct <name>winsize</name>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ws_row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ws_col</name></decl>;</decl_stmt>
}</block></struct><empty_stmt>;</empty_stmt></type></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>progress_printed</name></decl>;</decl_stmt> <comment type="block">/* Printed chars in screen-wide progress bar. */</comment>
<decl_stmt><decl><type><name>size_t</name></type> <name>progress_full</name></decl>;</decl_stmt> <comment type="block">/* How many chars to write to fill the progress bar. */</comment>

<function><type><name>void</name></type> <name>memtest_progress_start</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[H\x1b[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Cursor home, clear screen. */</comment>
    <comment type="block">/* Fill with dots. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name><operator>*</operator><operator>(</operator><name><name>ws</name><operator>.</operator><name>ws_row</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Please keep the test running several minutes per GB of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Also check http://www.memtest86.com/ and http://pyropus.ca/software/memtester/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[H\x1b[2K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* Cursor home, clear current line.  */</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s [%d]\n"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Print title. */</comment>
    <expr_stmt><expr><name>progress_printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>progress_full</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name><operator>*</operator><operator>(</operator><name><name>ws</name><operator>.</operator><name>ws_row</name></name><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>memtest_progress_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\x1b[H\x1b[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Cursor home, clear screen. */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>memtest_progress_step</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>curr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>chars</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator><name>curr</name><operator>*</operator><name>progress_full</name><operator>)</operator><operator>/</operator><name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chars</name><operator>-</operator><name>progress_printed</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>progress_printed</name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Test that addressing is fine. Every location is populated with its own
 * address, and finally verified. This test is very fast but may detect
 * ASAP big issues with the memory subsystem. */</comment>
<function><type><name>int</name></type> <name>memtest_addressing</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>words</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><name>bytes</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="block">/* Fill */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>words</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Test */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>p</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n*** MEMORY ADDRESSING ERROR: %p contains %Iu\n"</literal></expr></argument>,      <argument><expr><macro><name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
                    <argument_list>(<argument>void*</argument>)</argument_list></macro> <name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><name>words</name></expr></argument>,<argument><expr><name>words</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fill words stepping a single page at every write, so we continue to
 * touch all the pages in the smallest amount of time reducing the
 * effectiveness of caches, and making it hard for the OS to transfer
 * pages on the swap.
 *
 * In this test we can't call rand() since the system may be completely
 * unable to handle library calls, so we have to resort to our own
 * PRNG that only uses local state. We use an xorshift* PRNG. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xorshift64star_next</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { \
        rseed ^= rseed &gt;&gt; 12; \
        rseed ^= rseed &lt;&lt; 25; \
        rseed ^= rseed &gt;&gt; 27; \
        rout = rseed * UINT64_C(2685821657736338717); \
} while(0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>memtest_fill_random</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><literal type="number">4096</literal><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>words</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><name>bytes</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>iwords</name> <init>= <expr><name>words</name><operator>/</operator><name>step</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* words per iteration */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>rseed</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd13133de9afdb566</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* Just a random seed. */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>rout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l</name><operator>+</operator><name>off</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l2</name> <operator>=</operator> <name>l1</name><operator>+</operator><name>words</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>iwords</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>xorshift64star_next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <operator>*</operator><name>l2</name> <operator>=</operator> <operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name>rout</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>l1</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>l2</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><name>iwords</name><operator>*</operator><name>off</name></expr></argument>,<argument><expr><name>words</name></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Like memtest_fill_random() but uses the two specified values to fill
 * memory, in an alternated way (v1|v2|v1|v2|...) */</comment>
<function><type><name>void</name></type> <name>memtest_fill_value</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>PORT_ULONG</name></type> <name>v1</name></decl></parameter>,
                        <parameter><decl><type><name>PORT_ULONG</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sym</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><literal type="number">4096</literal><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>words</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><name>bytes</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>iwords</name> <init>= <expr><name>words</name><operator>/</operator><name>step</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* words per iteration */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l</name><operator>+</operator><name>off</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l2</name> <operator>=</operator> <name>l1</name><operator>+</operator><name>words</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>v2</name></expr> </then><else>: <expr><name>v1</name></expr></else></ternary></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>iwords</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMTEST_32BIT</name></cpp:ifdef>
            <expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <operator>*</operator><name>l2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator>     <name>v</name><operator>)</operator> <operator>|</operator>
                        <operator>(</operator><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator>    <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><operator>*</operator><name>l1</name> <operator>=</operator> <operator>*</operator><name>l2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator>     <name>v</name><operator>)</operator> <operator>|</operator>
                        <operator>(</operator><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator>    <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
                        <operator>(</operator><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator>    <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
                        <operator>(</operator><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator>    <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>l1</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>l2</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>w</name><operator>+</operator><name>iwords</name><operator>*</operator><name>off</name></expr></argument>,<argument><expr><name>words</name></expr></argument>,<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>memtest_compare</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>words</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><name>bytes</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l1</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>l2</name> <operator>=</operator> <name>l1</name><operator>+</operator><name>words</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>l1</name> <operator>!=</operator> <operator>*</operator><name>l2</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n*** MEMORY ERROR DETECTED: %p != %p (%Iu vs %Iu)\n"</literal></expr></argument>,  <argument><expr><macro><name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
                    <argument_list>(<argument>void*</argument>)</argument_list></macro><name>l1</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>l2</name></expr></argument>, <argument><expr><operator>*</operator><name>l1</name></expr></argument>, <argument><expr><operator>*</operator><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>l1</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>l2</name> <operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memtest_progress_step</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>words</name></expr></argument>,<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>memtest_compare_times</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>times</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>times</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Compare"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Test the specified memory. The number of bytes must be multiple of 4096.
 * If interactive is true the program exists with an error and prints
 * ASCII arts to show progresses. Instead when interactive is 0, it can
 * be used as an API call, and returns 1 if memory errors were found or
 * 0 if there were no errors detected. */</comment>
<function><type><name>int</name></type> <name>memtest_test</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pass</name> <operator>!=</operator> <name>passes</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Addressing test"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_addressing</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Random fill"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memtest_fill_random</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Solid fill"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_start</name><argument_list>(<argument><expr><literal type="string">"Checkerboard fill"</literal></expr></argument>,<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>ULONG_ONEZERO</name></expr></argument>,<argument><expr><name>ULONG_ZEROONE</name></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memtest_progress_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* A version of memtest_test() that tests memory in small pieces
 * in order to restore the memory content at exit.
 *
 * One problem we have with this approach, is that the cache can avoid
 * real memory accesses, and we can't test big chunks of memory at the
 * same time, because we need to backup them on the stack (the allocator
 * may not be usable or we may be already in an out of memory condition).
 * So what we do is to try to trash the cache with useless memory accesses
 * between the fill and compare cycles. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_BACKUP_WORDS</name></cpp:macro> <cpp:value>(1024*(1024/sizeof(PORT_LONG)))</cpp:value></cpp:define>
<comment type="block">/* Random accesses of MEMTEST_DECACHE_SIZE are performed at the start and
 * end of the region between fill and compare cycles in order to trash
 * the cache. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_DECACHE_SIZE</name></cpp:macro> <cpp:value>(1024*8)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>memtest_preserving_test</name><parameter_list>(<parameter><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name><name>backup</name><index>[<expr><name>MEMTEST_BACKUP_WORDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>m</name><operator>)</operator><operator>+</operator><operator>(</operator><name>bytes</name><operator>-</operator><name>MEMTEST_DECACHE_SIZE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&amp;</operator> <literal type="number">4095</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Can't test across 4k page boundaries. */</comment>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">4096</literal><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Can't test a single page. */</comment>

    <while>while<condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* If we have to test a single final page, go back a single page
         * so that we can test two pages, since the code can't test a single
         * page but at least two. */</comment>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>left</name> <operator>+=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">4096</literal><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>left</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Always test an even number of pages. */</comment>
        <if_stmt><if>if <condition>(<expr><name>len</name><operator>/</operator><literal type="number">4096</literal> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>backup</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Backup. */</comment>
        <while>while<condition>(<expr><name>pass</name> <operator>!=</operator> <name>passes</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_addressing</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memtest_fill_random</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>MEMTEST_DECACHE_SIZE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>MEMTEST_DECACHE_SIZE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memtest_fill_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>ULONG_ONEZERO</name></expr></argument>,<argument><expr><name>ULONG_ZEROONE</name></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>MEMTEST_DECACHE_SIZE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>MEMTEST_DECACHE_SIZE</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_compare_times</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>pass</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>backup</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Restore. */</comment>
        <expr_stmt><expr><name>left</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Perform an interactive test allocating the specified number of megabytes. */</comment>
<function><type><name>void</name></type> <name>memtest_alloc_and_test</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>megabytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><name>megabytes</name><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <macro><name>fprintf</name><argument_list>(<argument>stderr</argument>,<argument><literal type="string">"Unable to allocate %Iu megabytes: %s"</literal></argument>,                 <argument>WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
            megabytes</argument>, <argument>IF_WIN32(wsa_strerror(errno), strerror(errno))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memtest_test</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>,<argument><expr><name>passes</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>memtest</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>megabytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hOut</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>hOut</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>hOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>memtest_alloc_and_test</name><argument_list>(<argument><expr><name>megabytes</name></expr></argument>,<argument><expr><name>passes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nYour memory passed this test.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Please if you are still in doubt use the following two tools:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1) memtest86: http://www.memtest86.com/\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"2) memtester: http://pyropus.ca/software/memtester/\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
