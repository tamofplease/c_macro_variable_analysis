<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/scripting.c"><comment type="block">/*
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Int</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Bulk</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Status</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Error</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_MultiBulk</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redis_math_random</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>redis_math_randomseed</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbDisable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbEnable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>evalGenericCommandWithDebugging</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evalsha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>luaLdbLineHook</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbLog</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldbLogRedisReply</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sds</name></type> <name>ldbCatStackValue</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Debugger shared state is stored inside this global structure. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB_BREAKPOINTS_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>  <comment type="block">/* Max number of breakpoints. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB_MAX_LEN_DEFAULT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> <comment type="block">/* Default len limit for replies / var dumps. */</comment>
<struct>struct <name>ldbState</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>     <comment type="block">/* Socket of the debugging client. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt> <comment type="block">/* Are we debugging EVAL right now? */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>forked</name></decl>;</decl_stmt> <comment type="block">/* Is this a fork()ed debugging session? */</comment>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>logs</name></decl>;</decl_stmt> <comment type="block">/* List of messages to send to the client. */</comment>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>traces</name></decl>;</decl_stmt> <comment type="block">/* Messages about Redis commands executed since last stop.*/</comment>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt> <comment type="block">/* All forked debugging sessions pids. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>bp</name><index>[<expr><name>LDB_BREAKPOINTS_MAX</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* An array of breakpoints line numbers. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bpcount</name></decl>;</decl_stmt> <comment type="block">/* Number of valid entries inside bp. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>   <comment type="block">/* Stop at next line ragardless of breakpoints. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>luabp</name></decl>;</decl_stmt>  <comment type="block">/* Stop at next line because redis.breakpoint() was called. */</comment>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>   <comment type="block">/* Lua script source code split by line. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>  <comment type="block">/* Number of lines in 'src'. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>currentline</name></decl>;</decl_stmt>    <comment type="block">/* Current line number. */</comment>
    <decl_stmt><decl><type><name>sds</name></type> <name>cbuf</name></decl>;</decl_stmt>   <comment type="block">/* Debugger client command buffer. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name></decl>;</decl_stmt>  <comment type="block">/* Max var dump / reply length. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>maxlen_hint_sent</name></decl>;</decl_stmt> <comment type="block">/* Did we already hint about "set maxlen"? */</comment>
}</block> <decl><name>ldb</name></decl>;</struct>

<comment type="block">/* ---------------------------------------------------------------------------
 * Utility functions.
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* Perform the SHA1 of the input string. We use this both for hashing script
 * bodies in order to obtain the Lua function name, and in the implementation
 * of redis.sha1().
 *
 * 'digest' should point to a 41 bytes buffer: 40 for SHA1 converted into an
 * hexadecimal number, plus 1 byte for null term. */</comment>
<function><type><name>void</name></type> <name>sha1hex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cset</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>script</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>digest</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xF0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>digest</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><operator>(</operator><name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xF</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>digest</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * Redis reply to Lua type conversion functions.
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* Take a Redis reply in the Redis protocol format and convert it into a
 * Lua type. Thanks to this function, and the introduction of not connected
 * clients, it is trivial to implement the redis() lua function.
 *
 * Basically we take the arguments, execute the Redis command in the context
 * of a non connected client, then take the generated reply and convert it
 * into a suitable Lua type. With this trick the scripting feature does not
 * need the introduction of a full Redis internals API. The script
 * is like a normal client that bypasses all the slow I/O paths.
 *
 * Note: in this function we do not do any sanity check as the reply is
 * generated by Redis directly. This allows us to go faster.
 *
 * Errors are returned as a table with a single 'err' field set to the
 * error string.
 */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>reply</name></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">':'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>redisProtocolToLuaType_Int</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>redisProtocolToLuaType_Bulk</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>redisProtocolToLuaType_Status</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>redisProtocolToLuaType_Error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>redisProtocolToLuaType_MultiBulk</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Int</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Bulk</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>bulklen</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                               <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (size_t) */</comment>
        <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name>bulklen</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Status</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_Error</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>redisProtocolToLuaType_MultiBulk</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>mbulklen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>mbulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mbulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mbulklen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>redisProtocolToLuaType</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is used in order to push an error on the Lua stack in the
 * format used by redis.pcall to return errors, which is a lua table
 * with a single "err" field set to the error string. Note that this
 * table is never a valid reply by proper commands, since the returned
 * tables are otherwise always indexed by integers, never by strings. */</comment>
<function><type><name>void</name></type> <name>luaPushError</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

    <comment type="block">/* If debugging is active and in step mode, log errors resulting from
     * Redis commands. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>step</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;error&gt; %s"</literal></expr></argument>,<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Attempt to figure out where this function was called, if possible */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>lua_getinfo</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"nSl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>msg</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s: %d: %s"</literal></expr></argument>,
            <argument><expr><name><name>dbg</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>.</operator><name>currentline</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* In case the error set into the Lua stack by luaPushError() was generated
 * by the non-error-trapping version of redis.pcall(), which is redis.call(),
 * this function will raise the Lua error so that the execution of the
 * script will be halted. */</comment>
<function><type><name>int</name></type> <name>luaRaiseError</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Sort the array currently in the stack. We do this to make the output
 * of commands like KEYS or SMEMBERS something deterministic when called
 * from Lua (to play well with AOf/replication).
 *
 * The array is sorted using table.sort itself, and assuming all the
 * list elements are strings. */</comment>
<function><type><name>void</name></type> <name>luaSortArray</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Initial Stack: array */</comment>
    <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"sort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* Stack: array, table, table.sort */</comment>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* Stack: array, table, table.sort, array */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Stack: array, table, error */</comment>

        <comment type="block">/* We are not interested in the error, we assume that the problem is
         * that there are 'false' elements inside the array, so we try
         * again with a slower function but able to handle this case, that
         * is: table.sort(table, __redis__compare_helper) */</comment>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block">/* Stack: array, table */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"sort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Stack: array, table, sort */</comment>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* Stack: array, table, table.sort */</comment>
        <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* Stack: array, table, table.sort, array */</comment>
        <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"__redis__compare_helper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Stack: array, table, table.sort, array, __redis__compare_helper */</comment>
        <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Stack: array (sorted), table */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block">/* Stack: array (sorted) */</comment>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * Lua reply to Redis reply conversion functions.
 * ------------------------------------------------------------------------- */</comment>

<function><type><name>void</name></type> <name>luaReplyToRedisReply</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
        <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>lua_strlen</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case>
        <comment type="block">/* We need to check if it is an array, an error, or a status reply.
         * Error are returned as a single element table with 'err' field.
         * Status replies are returned as single element table with 'ok'
         * field. */</comment>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>err</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sdsmapchars</name><argument_list>(<argument><expr><name>err</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="string">"  "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"-%s\r\n"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>ok</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sdsmapchars</name><argument_list>(<argument><expr><name>ok</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="string">"  "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"+%s\r\n"</literal></expr></argument>,<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mbulklen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Discard the 'ok' field value we popped */</comment>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TNIL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>luaReplyToRedisReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mbulklen</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>setDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>replylen</name></expr></argument>,<argument><expr><name>mbulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * Lua redis.* functions implementations.
 * ------------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CMD_OBJCACHE_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CMD_OBJCACHE_MAX_LEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>luaRedisGenericCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raise_error</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>server</name><operator>.</operator><name>lua_client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>reply</name></decl>;</decl_stmt>

    <comment type="block">/* Cached across calls. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>argv_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>robj</name> <modifier>*</modifier></type><name><name>cached_objects</name><index>[<expr><name>LUA_CMD_OBJCACHE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>cached_objects_len</name><index>[<expr><name>LUA_CMD_OBJCACHE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inuse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Recursive calls detection. */</comment>

    <comment type="block">/* Reflect MULTI state */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_multi_emitted</name></name> <operator>||</operator> <operator>(</operator><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_MULTI</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_MULTI</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* By using Lua debug hooks it is possible to trigger a recursive call
     * to luaRedisGenericCommand(), which normally should never happen.
     * To make this function reentrant is futile and makes it slower, but
     * we should at least detect such a misuse, and abort. */</comment>
    <if_stmt><if>if <condition>(<expr><name>inuse</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>recursion_warning</name> <init>=
            <expr><literal type="string">"luaRedisGenericCommand() recursive call detected. "</literal>
            <literal type="string">"Are you doing funny stuff with Lua debug hooks?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>recursion_warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>recursion_warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>inuse</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Require at least one argument */</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,
            <argument><expr><literal type="string">"Please specify at least one argument for redis.call()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inuse</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><name>raise_error</name></expr> ?</condition><then> <expr><call><name>luaRaiseError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Build the arguments vector */</comment>
    <if_stmt><if>if <condition>(<expr><name>argv_size</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>argv_size</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obj_s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>obj_len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TNUMBER</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* We can't use lua_tolstring() for number -&gt; string conversion
             * since Lua uses a format specifier that loses precision. */</comment>
            <decl_stmt><decl><type><name>lua_Number</name></type> <name>num</name> <init>= <expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>obj_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj_s</name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>obj_s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>obj_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj_s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* Not a string. */</comment>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Try to use a cached object. */</comment>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>LUA_CMD_OBJCACHE_SIZE</name> <operator>&amp;&amp;</operator> <name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator>
            <name><name>cached_objects_len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>obj_len</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>obj_s</name></expr></argument>,<argument><expr><name>obj_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>obj_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>obj_s</name></expr></argument>, <argument><expr><name>obj_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Check if one of the arguments passed by the Lua script
     * is not a string or an integer (lua_isstring() return true for
     * integers as well). */</comment>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,
            <argument><expr><literal type="string">"Lua redis() command arguments must be strings or integers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inuse</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><name>raise_error</name></expr> ?</condition><then> <expr><call><name>luaRaiseError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Setup our fake client for command execution */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>

    <comment type="block">/* Process module hooks */</comment>
    <expr_stmt><expr><call><name>moduleCallCommandFilters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>argv</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</expr_stmt>

    <comment type="block">/* Log the command if debugging is active. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>step</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>cmdlog</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;redis&gt;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cmdlog</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>cmdlog</name></expr></argument>,<argument><expr><literal type="string">" ... (%d more)"</literal></expr></argument>,
                    <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>cmdlog</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>cmdlog</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cmdlog</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>cmdlog</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>cmdlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Command lookup */</comment>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name> <operator>!=</operator> <name>argc</name><operator>)</operator> <operator>||</operator>
                   <operator>(</operator><name>argc</name> <operator>&lt;</operator> <operator>-</operator><name><name>cmd</name><operator>-&gt;</operator><name>arity</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,
                <argument><expr><literal type="string">"Wrong number of args calling Redis command From Lua script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"Unknown Redis command called from Lua script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lastcmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

    <comment type="block">/* There are commands that are not allowed inside scripts. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_NOSCRIPT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"This Redis command is not allowed from scripts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Write commands are forbidden against read-only slaves, or if a
     * command marked as non-deterministic was already called in the context
     * of this script. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>deny_write_type</name> <init>= <expr><call><name>writeCommandsDeniedByDiskError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_random_dirty</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,
                <argument><expr><literal type="string">"Write commands not allowed after non deterministic commands. Call redis.replicate_commands() at the start of your script in order to switch to single commands replication mode."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name> <operator>&amp;&amp;</operator>
                   <operator>!</operator><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator>
                   <operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>roslaveerr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>deny_write_type</name> <operator>!=</operator> <name>DISK_ERROR_TYPE_NONE</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>deny_write_type</name> <operator>==</operator> <name>DISK_ERROR_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>bgsaveerr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>aof_write_err</name> <init>= <expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"-MISCONF Errors writing to the AOF file: %s\r\n"</literal></expr></argument>,
                    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_last_write_errno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>aof_write_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>aof_write_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we reached the memory limit configured via maxmemory, commands that
     * could enlarge the memory usage are not allowed, but only if this is the
     * first write in the context of this script, otherwise we can't stop
     * in the middle. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&amp;&amp;</operator>             <comment type="block">/* Maxmemory is actually enabled. */</comment>
        <operator>!</operator><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator>              <comment type="block">/* Don't care about mem if loading. */</comment>
        <operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator>           <comment type="block">/* Slave must execute the script. */</comment>
        <name><name>server</name><operator>.</operator><name>lua_write_dirty</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  <comment type="block">/* Script had no side effects so far. */</comment>
        <name><name>server</name><operator>.</operator><name>lua_oom</name></name> <operator>&amp;&amp;</operator>               <comment type="block">/* Detected OOM when script start. */</comment>
        <operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_DENYOOM</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>oomerr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_RANDOM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_random_dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_WRITE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_write_dirty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* If this is a Redis Cluster node, we need to make sure Lua is not
     * trying to access non-local keys, with the exception of commands
     * received from our master or when loading the AOF back in memory. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Duplicate relevant flags in the lua client. */</comment>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_READONLY</name><operator>|</operator><name>CLIENT_ASKING</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CLIENT_READONLY</name><operator>|</operator><name>CLIENT_ASKING</name><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getNodeByQuery</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator>
                           <name><name>server</name><operator>.</operator><name>cluster</name><operator>-&gt;</operator><name>myself</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,
                <argument><expr><literal type="string">"Lua script attempted to access a non local key in a "</literal>
                <literal type="string">"cluster node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we are using single commands replication, we need to wrap what
     * we propagate into a MULTI/EXEC block, so that it will be atomic like
     * a Lua script in the context of AOF and slaves. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><name><name>server</name><operator>.</operator><name>lua_multi_emitted</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MULTI</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>lua_write_dirty</name></name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>lua_repl</name></name> <operator>!=</operator> <name>PROPAGATE_NONE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>execCommandPropagateMulti</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_caller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_multi_emitted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Run the command */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>call_flags</name> <init>= <expr><name>CMD_CALL_SLOWLOG</name> <operator>|</operator> <name>CMD_CALL_STATS</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Set flags according to redis.set_repl() settings. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_repl</name></name> <operator>&amp;</operator> <name>PROPAGATE_AOF</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>call_flags</name> <operator>|=</operator> <name>CMD_CALL_PROPAGATE_AOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_repl</name></name> <operator>&amp;</operator> <name>PROPAGATE_REPL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>call_flags</name> <operator>|=</operator> <name>CMD_CALL_PROPAGATE_REPL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>call</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>call_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Convert the result of the Redis command into a suitable Lua type.
     * The first thing we need is to create a single string from the client
     * output buffers. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&lt;</operator> <name>PROTO_REPLY_CHUNK_BYTES</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* This is a fast path for the common case of a reply inside the
         * client static buffer. Don't create an SDS string but just use
         * the client buffer directly. */</comment>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>clientReplyBlock</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>listNodeValue</name><argument_list>(<argument><expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>,<argument><expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reply</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>raise_error</name> <operator>&amp;&amp;</operator> <name><name>reply</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>raise_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>redisProtocolToLuaType</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the debugger is active, log the reply from Redis. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>step</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ldbLogRedisReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Sort the output array if needed, assuming it is a non-null multi bulk
     * reply as expected. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CMD_SORT_FOR_SCRIPT</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>reply</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>reply</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>luaSortArray</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>reply</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>reply_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <comment type="block">/* Clean up. Command code may have changed argv/argc so we use the
     * argv/argc of the client instead of the local variables. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Try to cache the object in the cached_objects array.
         * The object must be small, SDS-encoded, and with refcount = 1
         * (we must be the only owner) for us to cache it. */</comment>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>LUA_CMD_OBJCACHE_SIZE</name> <operator>&amp;&amp;</operator>
            <name><name>o</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_RAW</name> <operator>||</operator>
             <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_EMBSTR</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>LUA_CMD_OBJCACHE_MAX_LEN</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>cached_objects</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cached_objects_len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>sdsalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name> <operator>!=</operator> <name>argv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>argv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>argv_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>raise_error</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* If we are here we should have an error in the stack, in the
         * form of a table with an "err" field. Extract the string to
         * return the plain error. */</comment>
        <expr_stmt><expr><name>inuse</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><call><name>luaRaiseError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>inuse</name><operator>--</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.call() */</comment>
<function><type><name>int</name></type> <name>luaRedisCallCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>luaRedisGenericCommand</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.pcall() */</comment>
<function><type><name>int</name></type> <name>luaRedisPCallCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>luaRedisGenericCommand</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This adds redis.sha1hex(string) to Lua scripts using the same hashing
 * function used for sha1ing lua scripts. */</comment>
<function><type><name>int</name></type> <name>luaRedisSha1hexCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sha1hex</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns a table with a single field 'field' set to the string value
 * passed as argument. This helper function is handy when returning
 * a Redis Protocol error or status reply from Lua:
 *
 * return redis.error_reply("ERR Some Error")
 * return redis.status_reply("ERR Some Error")
 */</comment>
<function><type><name>int</name></type> <name>luaRedisReturnSingleFieldTable</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>luaPushError</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"wrong number or type of arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.error_reply() */</comment>
<function><type><name>int</name></type> <name>luaRedisErrorReplyCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>luaRedisReturnSingleFieldTable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.status_reply() */</comment>
<function><type><name>int</name></type> <name>luaRedisStatusReplyCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>luaRedisReturnSingleFieldTable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.replicate_commands()
 *
 * Turn on single commands replication if the script never called
 * a write command so far, and returns true. Otherwise if the script
 * already started to write, returns false and stick to whole scripts
 * replication, which is our default. */</comment>
<function><type><name>int</name></type> <name>luaRedisReplicateCommandsCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_write_dirty</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="block">/* When we switch to single commands replication, we can provide
         * different math.random() sequences at every call, which is what
         * the user normally expects. */</comment>
        <expr_stmt><expr><call><name>redisSrand48</name><argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.breakpoint()
 *
 * Allows to stop execution during a debuggign session from within
 * the Lua code implementation, like if a breakpoint was set in the code
 * immediately after the function. */</comment>
<function><type><name>int</name></type> <name>luaRedisBreakpointCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>active</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.debug()
 *
 * Log a string message into the output console.
 * Can take multiple arguments that will be separated by commas.
 * Nothing is returned to the caller. */</comment>
<function><type><name>int</name></type> <name>luaRedisDebugCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ldb</name><operator>.</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>log</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;debug&gt; line %d: "</literal></expr></argument>, <argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>argc</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>ldbCatStackValue</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><literal type="string">", "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.set_repl()
 *
 * Set the propagation of write commands executed in the context of the
 * script to on/off for AOF and slaves. */</comment>
<function><type><name>int</name></type> <name>luaRedisSetReplCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"You can set the replication behavior only after turning on single commands replication with redis.replicate_commands()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"redis.set_repl() requires two arguments."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"Invalid replication flags. Use REPL_AOF, REPL_REPLICA, REPL_ALL or REPL_NONE."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_repl</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* redis.log() */</comment>
<function><type><name>int</name></type> <name>luaLogCommand</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>argc</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>log</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"redis.log() requires two arguments or more."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lua_isnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><name>argc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"First argument must be a number (log level)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                       <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><name>LL_DEBUG</name> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <name>LL_WARNING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"Invalid debug level."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Glue together all the arguments */</comment>
    <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>(</operator><operator>-</operator><name>argc</name><operator>)</operator><operator>+</operator><name>j</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * Lua engine initialization and reset.
 * ------------------------------------------------------------------------- */</comment>

<function><type><name>void</name></type> <name>luaLoadLib</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>luafunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luafunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_cjson</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_struct</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_cmsgpack</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LUALIB_API</name> <name>int</name></type> (<name>luaopen_bit</name>) <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>luaLoadLibraries</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>luaopen_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_TABLIBNAME</name></expr></argument>, <argument><expr><name>luaopen_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_STRLIBNAME</name></expr></argument>, <argument><expr><name>luaopen_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_MATHLIBNAME</name></expr></argument>, <argument><expr><name>luaopen_math</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>LUA_DBLIBNAME</name></expr></argument>, <argument><expr><name>luaopen_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"cjson"</literal></expr></argument>, <argument><expr><name>luaopen_cjson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>, <argument><expr><name>luaopen_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"cmsgpack"</literal></expr></argument>, <argument><expr><name>luaopen_cmsgpack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaLoadLib</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"bit"</literal></expr></argument>, <argument><expr><name>luaopen_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="block">/* Stuff that we don't load currently, for sandboxing concerns. */</comment>
    luaLoadLib(lua, LUA_LOADLIBNAME, luaopen_package);
    luaLoadLib(lua, LUA_OSLIBNAME, luaopen_os);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Remove a functions that we don't want to expose to the Redis scripting
 * environment. */</comment>
<function><type><name>void</name></type> <name>luaRemoveUnsupportedFunctions</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"loadfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"dofile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function installs metamethods in the global table _G that prevent
 * the creation of globals accidentally.
 *
 * It should be the last to be called in the scripting engine initialization
 * sequence, because it may interact with creation of globals. */</comment>
<function><type><name>void</name></type> <name>scriptingEnableGlobalsProtection</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>s</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>code</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* strict.lua from: http://metalua.luaforge.net/src/lib/strict.lua.html.
     * Modified to be adapted to Redis. */</comment>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"local dbg=debug\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"local mt = {}\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"setmetatable(_G, mt)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"mt.__newindex = function (t, n, v)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"  if dbg.getinfo(2) then\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"    local w = dbg.getinfo(2, \"S\").what\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"    if w ~= \"main\" and w ~= \"C\" then\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"      error(\"Script attempted to create global variable '\"..tostring(n)..\"'\", 2)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"    end\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"  end\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"  rawset(t, n, v)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"end\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"mt.__index = function (t, n)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"  if dbg.getinfo(2) and dbg.getinfo(2, \"S\").what ~= \"C\" then\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"    error(\"Script attempted to access nonexistent global variable '\"..tostring(n)..\"'\", 2)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"  end\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"  return rawget(t, n)\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"end\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="string">"debug = nil\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>code</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>code</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@enable_strict_lua"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialize the scripting environment.
 *
 * This function is called the first time at server startup with
 * the 'setup' argument set to 1.
 *
 * It can be called again multiple times during the lifetime of the Redis
 * process, with 'setup' set to 0, and following a scriptingRelease() call,
 * in order to reset the Lua scripting environment.
 *
 * However it is simpler to just call scriptingReset() that does just that. */</comment>
<function><type><name>void</name></type> <name>scriptingInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>setup</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><call><name>lua_open</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>setup</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_caller</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_timedout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>luaLoadLibraries</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaRemoveUnsupportedFunctions</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize a dictionary we use to map SHAs to scripts.
     * This is useful for replication, as we need to replicate EVALSHA
     * as EVAL, so we need to remember the associated script. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shaScriptObjectDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Register the redis commands table and fields */</comment>
    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.call */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisCallCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.pcall */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"pcall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisPCallCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.log and log levels. */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaLogCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"LOG_DEBUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>LL_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"LOG_VERBOSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>LL_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"LOG_NOTICE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>LL_NOTICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"LOG_WARNING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>LL_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.sha1hex */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"sha1hex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luaRedisSha1hexCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.error_reply and redis.status_reply */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"error_reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luaRedisErrorReplyCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"status_reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luaRedisStatusReplyCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.replicate_commands */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"replicate_commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>luaRedisReplicateCommandsCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.set_repl and associated flags. */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"set_repl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisSetReplCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"REPL_NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>PROPAGATE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"REPL_AOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>PROPAGATE_AOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"REPL_SLAVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"REPL_REPLICA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"REPL_ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.breakpoint */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"breakpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisBreakpointCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* redis.debug */</comment>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaRedisDebugCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Finally set the table as 'redis' global var. */</comment>
    <expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Replace math.random and math.randomseed with our implementations. */</comment>
    <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"math"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>redis_math_random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"randomseed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>redis_math_randomseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"math"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add a helper function that we use to sort the multi bulk output of non
     * deterministic commands, when containing 'false' elements. */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compare_func</name> <init>=    <expr><literal type="string">"function __redis__compare_helper(a,b)\n"</literal>
                                <literal type="string">"  if a == false then a = '' end\n"</literal>
                                <literal type="string">"  if b == false then b = '' end\n"</literal>
                                <literal type="string">"  return a&lt;b\n"</literal>
                                <literal type="string">"end\n"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>compare_func</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>compare_func</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@cmp_func_def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Add a helper function we use for pcall error reporting.
     * Note that when the error is in the C function we want to report the
     * information about the caller, that's what makes sense from the point
     * of view of the user debugging a script. */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errh_func</name> <init>=       <expr><literal type="string">"local dbg = debug\n"</literal>
                                <literal type="string">"function __redis__err__handler(err)\n"</literal>
                                <literal type="string">"  local i = dbg.getinfo(2,'nSl')\n"</literal>
                                <literal type="string">"  if i and i.what == 'C' then\n"</literal>
                                <literal type="string">"    i = dbg.getinfo(3,'nSl')\n"</literal>
                                <literal type="string">"  end\n"</literal>
                                <literal type="string">"  if i then\n"</literal>
                                <literal type="string">"    return i.source .. ':' .. i.currentline .. ': ' .. err\n"</literal>
                                <literal type="string">"  else\n"</literal>
                                <literal type="string">"    return err\n"</literal>
                                <literal type="string">"  end\n"</literal>
                                <literal type="string">"end\n"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>errh_func</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>errh_func</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@err_handler_def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Create the (non connected) client that we use to execute Redis commands
     * inside the Lua interpreter.
     * Note: there is no need to create it again when this function is called
     * by scriptingReset(). */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_client</name></name> <operator>=</operator> <call><name>createClient</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_LUA</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Lua beginners often don't use "local", this is likely to introduce
     * subtle bugs in their code. To prevent problems we protect accesses
     * to global variables. */</comment>
    <expr_stmt><expr><call><name>scriptingEnableGlobalsProtection</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua</name></name> <operator>=</operator> <name>lua</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Release resources related to Lua scripting.
 * This function is used in order to reset the scripting environment. */</comment>
<function><type><name>void</name></type> <name>scriptingRelease</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scriptingReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>scriptingRelease</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scriptingInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Set an array of Redis String Objects as a Lua array (table) stored into a
 * global variable. */</comment>
<function><type><name>void</name></type> <name>luaSetGlobalArray</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>elev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elec</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>elec</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>elev</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>elev</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>lua_setglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * Redis provided math.random
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* We replace math.random() with our implementation that is not affected
 * by specific libc random() implementations and will output the same sequence
 * (for the same seed) in every arch. */</comment>

<comment type="block">/* The following implementation is the one shipped with Lua itself but with
 * rand() replaced by redisLrand48(). */</comment>
<function><type><name>int</name></type> <name>redis_math_random</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* the `%' avoids the (rare) case of r==1, and is needed also because on
     some systems (SunOS!) `rand()' may return a value larger than RAND_MAX */</comment>
  <decl_stmt><decl><type><name>lua_Number</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><call><name>redisLrand48</name><argument_list>()</argument_list></call><operator>%</operator><name>REDIS_LRAND48_MAX</name><operator>)</operator> <operator>/</operator>
                                <operator>(</operator><name>lua_Number</name><operator>)</operator><name>REDIS_LRAND48_MAX</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* check number of arguments */</comment>
    <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* no arguments */</comment>
      <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Number between 0 and 1 */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* only upper limit */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>luaL_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;=</operator><name>u</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"interval is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>r</name><operator>*</operator><name>u</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* int between 1 and `u' */</comment>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* lower and upper limits */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>luaL_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>luaL_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaL_argcheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>l</name><operator>&lt;=</operator><name>u</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"interval is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>r</name><operator>*</operator><operator>(</operator><name>u</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* int between `l' and `u' */</comment>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>redis_math_randomseed</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>redisSrand48</name><argument_list>(<argument><expr><call><name>luaL_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * EVAL and SCRIPT commands implementation
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* Define a Lua function with the specified body.
 * The function name will be generated in the following form:
 *
 *   f_&lt;hex sha1 sum&gt;
 *
 * The function increments the reference count of the 'body' object as a
 * side effect of a successful call.
 *
 * On success a pointer to an SDS string representing the function SHA1 of the
 * just added function is returned (and will be valid until the next call
 * to scriptingReset() function), otherwise NULL is returned.
 *
 * The function handles the fact of being called with a script that already
 * exists, and in such a case, it behaves like in the success case.
 *
 * If 'c' is not NULL, on error the client is informed with an appropriate
 * error describing the nature of the problem and the Lua interpreter error. */</comment>
<function><type><name>sds</name></type> <name>luaCreateFunction</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>body</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>funcname</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sha1hex</name><argument_list>(<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>sds</name></type> <name>sha</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name>sha</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>sds</name></type> <name>funcdef</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><literal type="string">"function "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><name>funcname</name></expr></argument>,<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><literal type="string">"() "</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>funcdef</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><literal type="string">"\nend"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>funcdef</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@user_script"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                <argument><expr><literal type="string">"Error compiling script (new function): %s\n"</literal></expr></argument>,
                <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>funcdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Error running script (new function): %s\n"</literal></expr></argument>,
                <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* We also save a SHA1 -&gt; Original script map in a dictionary
     * so that we can replicate / write in the AOF all the
     * EVALSHA commands as EVAL using the original script. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name>sha</name></expr></argument>,<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>lua_client</name></name></expr></else></ternary></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_scripts_mem</name></name> <operator>+=</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getStringObjectSdsUsedMemory</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>incrRefCount</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>sha</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is the Lua script "count" hook that we use to detect scripts timeout. */</comment>
<function><type><name>void</name></type> <name>luaMaskCountHook</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>elapsed</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>server</name><operator>.</operator><name>lua_time_start</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the timeout condition if not already set and the maximum
     * execution time was reached. */</comment>
    <if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>lua_time_limit</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>lua_timedout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Lua slow script detected: still in execution after %lld milliseconds. You can try killing the script using the SCRIPT KILL command."</literal></expr></argument>,<argument><expr><name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_timedout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="block">/* Once the script timeouts we reenter the event loop to permit others
         * to call SCRIPT KILL or SHUTDOWN NOSAVE if needed. For this reason
         * we need to mask the client executing the script from the event loop.
         * If we don't do that the client may disconnect and could no longer be
         * here when the EVAL command will return. */</comment>
        <expr_stmt><expr><call><name>protectClient</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_caller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_timedout</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>processEventsWhileBlocked</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_kill</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Lua script killed by user with SCRIPT KILL."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"Script killed by user with SCRIPT KILL..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>evalGenericCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evalsha</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name> <init>= <expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>funcname</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>numkeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>initial_server_dirty</name> <init>= <expr><name><name>server</name><operator>.</operator><name>dirty</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>delhook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

    <comment type="block">/* When we replicate whole scripts, we want the same PRNG sequence at
     * every call so that our PRNG is not affected by external state. */</comment>
    <expr_stmt><expr><call><name>redisSrand48</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We set this flag to zero to remember that so far no random command
     * was called. This way we can allow the user to call commands like
     * SRANDMEMBER or RANDOMKEY from Lua scripts as far as no write command
     * is called (otherwise the replication and AOF would end with non
     * deterministic sequences).
     *
     * Thanks to this flag we'll raise an error every time a write command
     * is called after a random command was used. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_random_dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_write_dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>lua_always_replicate_commands</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_multi_emitted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_repl</name></name> <operator>=</operator> <name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr>;</expr_stmt>

    <comment type="block">/* Get the number of arguments that are keys */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>numkeys</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>numkeys</name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Number of keys can't be greater than number of args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numkeys</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Number of keys can't be negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* We obtain the script SHA1, then check if this function is already
     * defined into the Lua state */</comment>
    <expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>evalsha</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Hash the code if this is an EVAL call */</comment>
        <expr_stmt><expr><call><name>sha1hex</name><argument_list>(<argument><expr><name>funcname</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* We already have the SHA if it is a EVALSHA */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sha</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Convert to lowercase. We don't use tolower since the function
         * managed to always show up in the profiler output consuming
         * a non trivial amount of time. */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>funcname</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr> ?</condition><then>
                <expr><name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><operator>(</operator><literal type="char">'a'</literal><operator>-</operator><literal type="char">'A'</literal><operator>)</operator></expr> </then><else>: <expr><name><name>sha</name><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">42</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Push the pcall error handler function on the stack. */</comment>
    <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"__redis__err__handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Try to lookup the Lua function */</comment>
    <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* remove the nil from the stack */</comment>
        <comment type="block">/* Function not defined... let's define it if we have the
         * body of the function. If this is an EVALSHA call we can just
         * return an error. */</comment>
        <if_stmt><if>if <condition>(<expr><name>evalsha</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* remove the error handler from the stack. */</comment>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>noscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>luaCreateFunction</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* remove the error handler from the stack. */</comment>
            <comment type="block">/* The error is sent to the client by luaCreateFunction()
             * itself when it returns NULL. */</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Now the following is guaranteed to return non nil */</comment>
        <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>!</operator><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Populate the argv and keys table accordingly to the arguments that
     * EVAL received. */</comment>
    <expr_stmt><expr><call><name>luaSetGlobalArray</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"KEYS"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">3</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>luaSetGlobalArray</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"ARGV"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name></name><operator>+</operator><literal type="number">3</literal><operator>+</operator><name>numkeys</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">3</literal><operator>-</operator><name>numkeys</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>   <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>

    <comment type="block">/* Select the right DB in the context of the Lua client */</comment>
    <name>selectDb</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_client</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/* Set a hook in order to be able to stop the script execution if it
     * is running for too much time.
     * We set the hook only if the time limit is enabled as the hook will
     * make the Lua script execution slower.
     *
     * If we are debugging, we set instead a "line" hook so that the
     * debugger is call-back at every line executed by the script. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_caller</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_time_start</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_kill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>luaMaskCountHook</name></expr></argument>,<argument><expr><name>LUA_MASKCOUNT</name></expr></argument>,<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delhook</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>active</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><name>luaLdbLineHook</name></expr></argument>,<argument><expr><name>LUA_MASKLINE</name><operator>|</operator><name>LUA_MASKCOUNT</name></expr></argument>,<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delhook</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* At this point whether this script was never seen before or if it was
     * already defined, we can call it. We have zero arguments and expect
     * a single return value. */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Perform some cleanup that we need to do both on error and success. */</comment>
    <if_stmt><if>if <condition>(<expr><name>delhook</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lua_sethook</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Disable hook */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_timedout</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_timedout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="block">/* Restore the client that was protected when the script timeout
         * was detected. */</comment>
        <expr_stmt><expr><call><name>unprotectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>queueClientForReprocessing</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_caller</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Call the Lua garbage collector from time to time to avoid a
     * full cycle performed by Lua, which adds too latency.
     *
     * The call is performed every LUA_GC_CYCLE_PERIOD executed commands
     * (and for LUA_GC_CYCLE_PERIOD collection steps) because calling it
     * for every command uses too much CPU. */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_GC_CYCLE_PERIOD</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <name>PORT_LONG</name></type> <name>gc_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>gc_count</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>gc_count</name> <operator>==</operator> <name>LUA_GC_CYCLE_PERIOD</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>lua_gc</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>LUA_GCSTEP</name></expr></argument>,<argument><expr><name>LUA_GC_CYCLE_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gc_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Error running script (call to %s): %s\n"</literal></expr></argument>,
            <argument><expr><name>funcname</name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Consume the Lua reply and remove error handler. */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* On success convert the Lua return value into Redis protocol, and
         * send it to * the client. */</comment>
        <expr_stmt><expr><call><name>luaReplyToRedisReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Convert and consume the reply. */</comment>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Remove the error handler. */</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If we are using single commands replication, emit EXEC if there
     * was at least a write. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>preventCommandPropagation</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_multi_emitted</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name><name>propargv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>propargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"EXEC"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>alsoPropagate</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>execCommand</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>propargv</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>PROPAGATE_AOF</name><operator>|</operator><name>PROPAGATE_REPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>propargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* EVALSHA should be propagated to Slave and AOF file as full EVAL, unless
     * we are sure that the script was already in the context of all the
     * attached slaves *and* the current AOF file if enabled.
     *
     * To do so we use a cache of SHA1s of scripts that we already propagated
     * as full EVAL, that's called the Replication Script Cache.
     *
     * For repliation, everytime a new slave attaches to the master, we need to
     * flush our cache of scripts that can be replicated as EVALSHA, while
     * for AOF we need to do so every time we rewrite the AOF file. */</comment>
    <if_stmt><if>if <condition>(<expr><name>evalsha</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>replicationScriptCacheExists</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* This script is not in our script cache, replicate it as
             * EVAL, then add it into the script cache, as from now on
             * slaves and AOF know about it. */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>replicationScriptCacheAdd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>script</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If the script did not produce any changes in the dataset we want
             * just to replicate it as SCRIPT LOAD, otherwise we risk running
             * an aborted script on slaves (that may then produce results there)
             * or just running a CPU costly read-only script on the slaves. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>==</operator> <name>initial_server_dirty</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rewriteClientCommandVector</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,
                    <argument><expr><call><name>resetRefCount</name><argument_list>(<argument><expr><call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>resetRefCount</name><argument_list>(<argument><expr><call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"LOAD"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>rewriteClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><call><name>resetRefCount</name><argument_list>(<argument><expr><call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"EVAL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rewriteClientCommandArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>forceCommandPropagation</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>PROPAGATE_REPL</name><operator>|</operator><name>PROPAGATE_AOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>evalCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA_DEBUG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>evalGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>evalGenericCommandWithDebugging</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>evalShaCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* We know that a match is not possible if the provided SHA is
         * not the right length. So we return an error ASAP, this way
         * evalGenericCommand() can be implemented without string length
         * sanity check */</comment>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>shared</name><operator>.</operator><name>noscripterr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA_DEBUG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>evalGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Please use EVAL instead of EVALSHA for debugging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>scriptCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"DEBUG (yes|sync|no) -- Set the debug mode for subsequent scripts executed."</literal></expr>,
<expr><literal type="string">"EXISTS &lt;sha1&gt; [&lt;sha1&gt; ...] -- Return information about the existence of the scripts in the script cache."</literal></expr>,
<expr><literal type="string">"FLUSH -- Flush the Lua scripts cache. Very dangerous on replicas."</literal></expr>,
<expr><literal type="string">"KILL -- Kill the currently executing Lua script."</literal></expr>,
<expr><literal type="string">"LOAD &lt;script&gt; -- Load a script into the scripts cache, without executing it."</literal></expr>,
<expr><name>NULL</name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>scriptingReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replicationScriptCacheFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Propagating this command is a good idea. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"exists"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"load"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>sha</name> <init>= <expr><call><name>luaCreateFunction</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sha</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* The error was sent by luaCreateFunction(). */</comment>
        <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sha</name></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceCommandPropagation</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>PROPAGATE_REPL</name><operator>|</operator><name>PROPAGATE_AOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_caller</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-NOTBUSY No scripts in execution right now.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_caller</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_MASTER</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-UNKILLABLE The busy script was sent by a master instance in the context of replication and cannot be killed.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>lua_write_dirty</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-UNKILLABLE Sorry the script already executed write commands against the dataset. You can either wait the script termination or kill the server in a hard way using the SHUTDOWN NOSAVE command.\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_kill</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>clientHasPendingReplies</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT DEBUG must be called outside a pipeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbDisable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbEnable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbEnable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_LUA_DEBUG_SYNC</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Use SCRIPT DEBUG yes/sync/no"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ---------------------------------------------------------------------------
 * LDB: Redis Lua debugging facilities
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* Initialize Lua debugger data structures. */</comment>
<function><type><name>void</name></type> <name>ldbInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>,<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>sdsfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>children</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Remove all the pending messages in the specified list. */</comment>
<function><type><name>void</name></type> <name>ldbFlushLog</name><parameter_list>(<parameter><decl><type><name>list</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listFirst</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>log</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* Enable debug mode of Lua scripts for this client. */</comment>
<function><type><name>void</name></type> <name>ldbEnable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_LUA_DEBUG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ldbFlushLog</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name>LDB_MAX_LEN_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Exit debugging mode from the POV of client. This function is not enough
 * to properly shut down a client debugging session, see ldbEndSession()
 * for more information. */</comment>
<function><type><name>void</name></type> <name>ldbDisable</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>CLIENT_LUA_DEBUG</name><operator>|</operator><name>CLIENT_LUA_DEBUG_SYNC</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Append a log entry to the specified LDB log. */</comment>
<function><type><name>void</name></type> <name>ldbLog</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>,<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* A version of ldbLog() which prevents producing logs greater than
 * ldb.maxlen. The first time the limit is reached an hint is generated
 * to inform the user that reply trimming can be disabled using the
 * debugger "maxlen" command. */</comment>
<function><type><name>void</name></type> <name>ldbLogWithMaxLen</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>trimmed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>ldb</name><operator>.</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><literal type="string">" ..."</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>trimmed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>trimmed</name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(
        <argument><expr><literal type="string">"&lt;hint&gt; The above reply was trimmed. Use 'maxlen 0' to disable trimming."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Send ldb.logs to the debugging client as a multi-bulk reply
 * consisting of simple strings. Log entries which include newlines have them
 * replaced with spaces. The entries sent are also consumed. */</comment>
<function><type><name>void</name></type> <name>ldbSendLogs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>proto</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><literal type="string">"*%i\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><literal type="string">"+"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsmapchars</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="string">"  "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>logs</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><name>proto</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Avoid warning. We don't check the return value of write()
         * since the next read() will catch the I/O error and will
         * close the debugging session. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Start a debugging session before calling EVAL implementation.
 * The techique we use is to capture the client socket file descriptor,
 * in order to perform direct I/O with it from within Lua hooks. This
 * way we don't have to re-enter Redis in order to handle I/O.
 *
 * The function returns 1 if the caller should proceed to call EVAL,
 * and 0 if instead the caller should abort the operation (this happens
 * for the parent in a forked session, since it's up to the children
 * to continue, or when fork returned an error).
 *
 * The caller should call ldbEndSession() only if ldbStartSession()
 * returned 1. */</comment>
<function><type><name>int</name></type> <name>ldbStartSession</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>forked</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CLIENT_LUA_DEBUG_SYNC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>forked</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>pid_t</name></type> <name>cp</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Fork() failed: can't run EVAL in debugging mode."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Child. Let's ignore important signals handled by the parent. */</comment>
            <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Log the creation of the child and close the listening
             * socket to make sure if the parent crashes a reset is sent
             * to the clients. */</comment>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Redis forked for debugging eval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>closeListeningSockets</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Parent */</comment>
            <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeClientAsync</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Close the client in the parent side. */</comment>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Redis synchronous debugging eval session started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Setup our debugging session. */</comment>
    <expr_stmt><expr><call><name>anetBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>anetSendTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* First argument of EVAL is the script itself. We split it into different
     * lines since this is the way the debugger accesses the source code. */</comment>
    <decl_stmt><decl><type><name>sds</name></type> <name>srcstring</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>srclen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>srclen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>srcstring</name><index>[<expr><name>srclen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator>
                     <name><name>srcstring</name><index>[<expr><name>srclen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>srcstring</name><index>[<expr><operator>--</operator><name>srclen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>,<argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>src</name></name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ldb</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>srcstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* End a debugging session after the EVAL call with debugging enabled
 * returned. */</comment>
<function><type><name>void</name></type> <name>ldbEndSession</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Emit the remaining logs and an &lt;endsession&gt; mark. */</comment>
    <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;endsession&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If it's a fork()ed session, we just exit. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>forked</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>writeToClient</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Lua debugging session child exiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Redis synchronous debugging eval session ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Otherwise let's restore client's state. */</comment>
    <expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>anetSendTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Close the client connectin after sending the final EVAL reply
     * in order to signal the end of the debugging session. */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CLIENT_CLOSE_AFTER_REPLY</name></expr>;</expr_stmt>

    <comment type="block">/* Cleanup. */</comment>
    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>src</name></name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* If the specified pid is among the list of children spawned for
 * forked debugging sessions, it is removed from the children list.
 * If the pid was found non-zero is returned. */</comment>
<function><type><name>int</name></type> <name>ldbRemoveChild</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listSearchKey</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the number of children we still did not receive termination
 * acknowledge via wait() in the parent process. */</comment>
<function><type><name>int</name></type> <name>ldbPendingChildren</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</return>                                       <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<comment type="block">/* Kill all the forked sessions. */</comment>
<function><type><name>void</name></type> <name>ldbKillForkedSessions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Killing debugging session %ld"</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>,<argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>children</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Wrapper for EVAL / EVALSHA that enables debugging, and makes sure
 * that when EVAL returns, whatever happened, the session is ended. */</comment>
<function><type><name>void</name></type> <name>evalGenericCommandWithDebugging</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evalsha</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ldbStartSession</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>evalGenericCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>evalsha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbEndSession</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ldbDisable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return a pointer to ldb.src source code line, considering line to be
 * one-based, and returning a special string for out of range lines. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbGetSourceLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>line</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>ldb</name><operator>.</operator><name>lines</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"&lt;out of range source code line&gt;"</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>ldb</name><operator>.</operator><name>src</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return true if there is a breakpoint in the specified line. */</comment>
<function><type><name>int</name></type> <name>ldbIsBreakpoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>line</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add the specified breakpoint. Ignore it if we already reached the max.
 * Returns 1 if the breakpoint was added (or was already set). 0 if there is
 * no space for the breakpoint or if the line is invalid. */</comment>
<function><type><name>int</name></type> <name>ldbAddBreakpoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>line</name> <operator>&gt;</operator> <name><name>ldb</name><operator>.</operator><name>lines</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldbIsBreakpoint</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>!=</operator> <name>LDB_BREAKPOINTS_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Remove the specified breakpoint, returning 1 if the operation was
 * performed or 0 if there was no such breakpoint. */</comment>
<function><type><name>int</name></type> <name>ldbDelBreakpoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>line</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>bp</name></name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>bp</name></name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Expect a valid multi-bulk command in the debugging client query buffer.
 * On success the command is parsed and returned as an array of SDS strings,
 * otherwise NULL is returned and there is to read more buffer. */</comment>
<function><type><name>sds</name> <modifier>*</modifier></type><name>ldbReplParseCommand</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Working on a copy is simpler in this case. We can modify it freely
     * for the sake of simpler parsing. */</comment>
    <decl_stmt><decl><type><name>sds</name></type> <name>copy</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>copy</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* This Redis protocol parser is a joke... just the simplest thing that
     * works in this context. It is also very forgiving regarding broken
     * protocol. */</comment>

    <comment type="block">/* Seek and parse *&lt;count&gt;\r\n. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plen</name> <init>= <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Multi bulk len pointer. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>argcp</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>argcp</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>argcp</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Parse each argument. */</comment>
    <expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><operator>*</operator><name>argcp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>argc</name> <operator>&lt;</operator> <operator>*</operator><name>argcp</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>plen</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Bulk string len pointer. */</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* Length of this arg. */</comment>
        <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>slen</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt> <comment type="block">/* Skip the already parsed argument. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>protoerr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* Skip \r\n. */</comment>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>argv</name></expr>;</return>

<label><name>protoerr</name>:</label>
    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Log the specified line in the Lua debugger output. */</comment>
<function><type><name>void</name></type> <name>ldbLogSourceLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ldbGetSourceLine</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><call><name>ldbIsBreakpoint</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name> <operator>==</operator> <name>lnum</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>current</name> <operator>&amp;&amp;</operator> <name>bp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"-&gt;#"</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"-&gt; "</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>bp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"  #"</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"   "</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>thisline</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s%-3d %s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><name>thisline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Implement the "list" command of the Lua debugger. If around is 0
 * the whole file is listed, otherwise only a small portion of the file
 * around the specified line is shown. When a line number is specified
 * the amonut of context (lines before/after) is specified via the
 * 'context' argument. */</comment>
<function><type><name>void</name></type> <name>ldbList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>around</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>ldb</name><operator>.</operator><name>lines</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>around</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>around</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>context</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Append an human readable representation of the Lua value at position 'idx'
 * on the stack of the 'lua' state, to the SDS string passed as argument.
 * The new SDS string with the represented value attached is returned.
 * Used in order to implement ldbLogStackValue().
 *
 * The element is not automatically removed from the stack, nor it is
 * converted to a different type. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB_MAX_VALUES_DEPTH</name></cpp:macro> <cpp:value>(LUA_MINSTACK/2)</cpp:value></cpp:define>
<function><type><name>sds</name></type> <name>ldbCatStackValueRec</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>level</name><operator>++</operator> <operator>==</operator> <name>LDB_MAX_VALUES_DEPTH</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"&lt;max recursion level reached! Nested table?&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch<condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
        <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>strl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>strl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>strp</name></expr></argument>,<argument><expr><name>strl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <break>break;</break>
    <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><ternary><condition><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%g"</literal></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LUA_TNIL</name></expr>:</case>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"nil"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case>
        <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>expected_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* First index we expect in an array. */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>is_array</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Will be set to null if check fails. */</comment>
        <comment type="block">/* Note: we create two representations at the same time, one
         * assuming the table is an array, one assuming it is not. At the
         * end we know what is true and select the right one. */</comment>
        <decl_stmt><decl><type><name>sds</name></type> <name>repr1</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>repr2</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* The first key to start the iteration is nil. */</comment>
        <while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Test if so far the table looks like an array. */</comment>
            <if_stmt><if>if <condition>(<expr><name>is_array</name> <operator>&amp;&amp;</operator>
                <operator>(</operator><call><name>lua_type</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TNUMBER</name> <operator>||</operator>
                 <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>expected_index</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_array</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block">/* Stack now: table, key, value */</comment>
            <comment type="block">/* Array repr. */</comment>
            <expr_stmt><expr><name>repr1</name> <operator>=</operator> <call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>repr1</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>,<argument><expr><literal type="string">"; "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Full repr. */</comment>
            <expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="string">"["</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="string">"]="</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>repr2</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="string">"; "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Stack: table, key. Ready for next iteration. */</comment>
            <expr_stmt><expr><name>expected_index</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <comment type="block">/* Strip the last " ;" from both the representations. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* Select the right one and discard the other. */</comment>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"{"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><ternary><condition><expr><name>is_array</name></expr> ?</condition><then> <expr><name>repr1</name></expr> </then><else>: <expr><name>repr2</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"}"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>repr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>repr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <break>break;</break>
    <case>case <expr><name>LUA_TFUNCTION</name></expr>:</case>
    <case>case <expr><name>LUA_TUSERDATA</name></expr>:</case>
    <case>case <expr><name>LUA_TTHREAD</name></expr>:</case>
    <case>case <expr><name>LUA_TLIGHTUSERDATA</name></expr>:</case>
        <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lua_topointer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TFUNCTION</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"function"</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TUSERDATA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"userdata"</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TTHREAD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"thread"</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>LUA_TLIGHTUSERDATA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"light-userdata"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\"%s@%p\""</literal></expr></argument>,<argument><expr><name>typename</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\"&lt;unknown-lua-type&gt;\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Higher level wrapper for ldbCatStackValueRec() that just uses an initial
 * recursion level of '0'. */</comment>
<function><type><name>sds</name></type> <name>ldbCatStackValue</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>ldbCatStackValueRec</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>idx</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Produce a debugger log entry representing the value of the Lua object
 * currently on the top of the stack. The element is ot popped nor modified.
 * Check ldbCatStackValue() for the actual implementation. */</comment>
<function><type><name>void</name></type> <name>ldbLogStackValue</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldbCatStackValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ldbLogWithMaxLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Int</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Bulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Status</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_MultiBulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Get Redis protocol from 'reply' and appends it in human readable form to
 * the passed SDS string 'o'.
 *
 * Note that the SDS string is passed by reference (pointer of pointer to
 * char*) so that we can return a modified pointer, as for SDS semantics. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>reply</name></expr></init></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">':'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Int</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Bulk</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Status</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_Status</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman_MultiBulk</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The following functions are helpers for ldbRedisProtocolToHuman(), each
 * take care of a given Redis return type. */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Int</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Bulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>bulklen</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>bulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name>bulklen</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_Status</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ldbRedisProtocolToHuman_MultiBulk</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>mbulklen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>string2ll</name><argument_list>(<argument><expr><name>reply</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>reply</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>mbulklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mbulklen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"["</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mbulklen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>mbulklen</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><operator>*</operator><name>o</name></expr></argument>,<argument><expr><literal type="string">"]"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Log a Redis reply as debugger output, in an human readable format.
 * If the resulting string is longer than 'len' plus a few more chars
 * used as prefix, it gets truncated. */</comment>
<function><type><name>void</name></type> <name>ldbLogRedisReply</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>log</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;reply&gt; "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ldbRedisProtocolToHuman</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log</name></expr></argument>,<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ldbLogWithMaxLen</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Implements the "print &lt;var&gt;" command of the Lua debugger. It scans for Lua
 * var "varname" starting from the current stack frame up to the top stack
 * frame. The first matching variable is printed. */</comment>
<function><type><name>void</name></type> <name>ldbPrint</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Stack level. */</comment>
    <while>while <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Variable index. */</comment>
        <while>while<condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>lua_getlocal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Discard the var name on the stack. */</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>

    <comment type="block">/* Let's try with global vars in two selected cases */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>,<argument><expr><literal type="string">"ARGV"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>,<argument><expr><literal type="string">"KEYS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No such variable."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Implements the "print" command (without arguments) of the Lua debugger.
 * Prints all the variables in the current stack frame. */</comment>
<function><type><name>void</name></type> <name>ldbPrintAll</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Variable index. */</comment>
        <while>while<condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>lua_getlocal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><literal type="string">"(*temporary)"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>prefix</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; %s = "</literal></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>vars</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>vars</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No local variables in the current context."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Implements the break command to list, add and remove breakpoints. */</comment>
<function><type><name>void</name></type> <name>ldbBreak</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No breakpoints set. Use 'b &lt;line&gt;' to add one."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%i breakpoints set:"</literal></expr></argument>,<argument><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ldb</name><operator>.</operator><name>bpcount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>bp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>line</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string2l</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"Invalid argument:'%s'"</literal></expr></argument>,<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"All breakpoints removed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>==</operator> <name>LDB_BREAKPOINTS_MAX</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Too many breakpoints set."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldbAddBreakpoint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>                   <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
                        <name>ldbList</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>                                   <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Wrong line number."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>ldbDelBreakpoint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>                         <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
                        <name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Breakpoint removed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"No breakpoint in the specified line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Implements the Lua debugger "eval" command. It just compiles the user
 * passed fragment of code and executes it, showing the result left on
 * the stack. */</comment>
<function><type><name>void</name></type> <name>ldbEval</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Glue the script together if it is composed of multiple arguments. */</comment>
    <decl_stmt><decl><type><name>sds</name></type> <name>code</name> <init>= <expr><call><name>sdsjoinsds</name><argument_list>(<argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>expr</name> <init>= <expr><call><name>sdscatsds</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"return "</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Try to compile it as an expression, prepending "return ". */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>expr</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@ldb_eval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Failed? Try as a statement. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>luaL_loadbuffer</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>code</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"@ldb_eval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;error&gt; %s"</literal></expr></argument>,<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Call it. */</comment>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;error&gt; %s"</literal></expr></argument>,<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ldbLogStackValue</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"&lt;retval&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Implement the debugger "redis" command. We use a trick in order to make
 * the implementation very simple: we just call the Lua redis.call() command
 * implementation, with ldb.step enabled, so as a side effect the Redis command
 * and its reply are logged. */</comment>
<function><type><name>void</name></type> <name>ldbRedis</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>saved_rc</name> <init>= <expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lua_getglobal</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* Stack: redis, redis.call */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>               <comment type="block">/* Force redis.call() to log. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pcall</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Stack: redis, result */</comment>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>               <comment type="block">/* Disable logging. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_replicate_commands</name></name> <operator>=</operator> <name>saved_rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block">/* Discard the result and clean the stack. */</comment>
</block_content>}</block></function>

<comment type="block">/* Implements "trace" command of the Lua debugger. It just prints a backtrace
 * querying Lua starting from the current callframe back to the outer one. */</comment>
<function><type><name>void</name></type> <name>ldbTrace</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>level</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"Snl"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>,<argument><expr><literal type="string">"user_script"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s:"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"In"</literal></expr> </then><else>: <expr><literal type="string">"From"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"top level"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name><name>ar</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;error&gt; Can't retrieve Lua stack."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Impleemnts the debugger "maxlen" command. It just queries or sets the
 * ldb.maxlen variable. */</comment>
<function><type><name>void</name></type> <name>ldbMaxlen</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>newval</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen_hint_sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* User knows about this command. */</comment>
        <if_stmt><if>if <condition>(<expr><name>newval</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newval</name> <operator>&lt;=</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newval</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; replies are truncated at %d bytes."</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ldb</name><operator>.</operator><name>maxlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"&lt;value&gt; replies are unlimited."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Read debugging commands from client.
 * Return C_OK if the debugging session is continuing, otherwise
 * C_ERR if the client closed the connection or is timing out. */</comment>
<function><type><name>int</name></type> <name>ldbRepl</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

    <comment type="block">/* We continue processing commands until a command that should return
     * to the Lua interpreter is found. */</comment>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <while>while<condition>(<expr><operator>(</operator><name>argv</name> <operator>=</operator> <call><name>ldbReplParseCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>read</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                      <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
            <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Make sure the script runs without user input since the
                 * client is no longer connected. */</comment>
                <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>bpcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <return>return <expr><name>C_ERR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Flush the old buffer. */</comment>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>cbuf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Execute the command. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Redis Lua debugger help:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[h]elp               Show this help."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[s]tep               Run current line and stop again."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[n]ext               Alias for step."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[c]continue          Run till next breakpoint."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[l]list              List source code around current line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[l]list [line]       List source code around [line]."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"                     line = 0 means: current position."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[l]list [line] [ctx] In this form [ctx] specifies how many lines"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"                     to show before/after [line]."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[w]hole              List all source code. Alias for 'list 1 1000000'."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[p]rint              Show all the local variables."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[p]rint &lt;var&gt;        Show the value of the specified variable."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"                     Can also show global vars KEYS and ARGV."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak              Show all breakpoints."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak &lt;line&gt;       Add a breakpoint to the specified line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak -&lt;line&gt;      Remove breakpoint from the specified line."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[b]reak 0            Remove all breakpoints."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[t]race              Show a backtrace."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[e]eval &lt;code&gt;       Execute some Lua code (in a different callframe)."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[r]edis &lt;cmd&gt;        Execute a Redis command."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[m]axlen [len]       Trim logged Redis replies and Lua var dumps to len."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"                     Specifying zero as &lt;len&gt; means unlimited."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"[a]bort              Stop the execution of the script. In sync"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"                     mode dataset changes will be retained."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"Debugger functions you can call from Lua scripts:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"redis.debug()        Produce logs in the debugger console."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"redis.breakpoint()   Stop execution like if there was a breakpoing."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"                     in the next line of code."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"step"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                   <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"next"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"continue"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"trace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbTrace</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"maxlen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbMaxlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"break"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbBreak</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"eval"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbEval</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"script aborted for user request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
                   <operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"redis"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ldbRedis</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ldbPrint</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ldbPrintAll</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>around</name> <init>= <expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ctx</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>around</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>ldbList</name><argument_list>(<argument><expr><name>around</name></expr></argument>,<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"whole"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>ldbList</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"&lt;error&gt; Unknown Redis Lua debugger command or "</literal>
                          <literal type="string">"wrong number of arguments."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Free the command vector. */</comment>
        <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Free the current command argv if we break inside the while loop. */</comment>
    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is the core of our Lua debugger, called each time Lua is about
 * to start executing a new line. */</comment>
<function><type><name>void</name></type> <name>luaLdbLineHook</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lua</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>lua</name></expr></argument>,<argument><expr><literal type="string">"Sl"</literal></expr></argument>,<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>currentline</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><call><name>ldbIsBreakpoint</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ldb</name><operator>.</operator><name>luabp</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Events outside our script are not interesting. */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>,<argument><expr><literal type="string">"user_script"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Check if a timeout occurred. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>LUA_HOOKCOUNT</name> <operator>&amp;&amp;</operator> <name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>server</name><operator>.</operator><name>lua_time_start</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>timelimit</name> <init>= <expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name></expr> ?</condition><then>
                             <expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name></expr> </then><else>: <expr><literal type="number">5000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <name>timelimit</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return;</return> <comment type="block">/* No timeout, ignore the COUNT event. */</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>||</operator> <name>bp</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reason</name> <init>= <expr><literal type="string">"step over"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>reason</name> <operator>=</operator> <ternary><condition><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name></expr> ?</condition><then> <expr><literal type="string">"redis.breakpoint() called"</literal></expr> </then><else>:
                                     <expr><literal type="string">"break point"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>reason</name> <operator>=</operator> <literal type="string">"timeout reached, infinite loop?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ldb</name><operator>.</operator><name>luabp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbLog</name><argument_list>(<argument><expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"* Stopped at %d, stop reason = %s"</literal></expr></argument>,
            <argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbLogSourceLine</name><argument_list>(<argument><expr><name><name>ldb</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ldbSendLogs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ldbRepl</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* If the client closed the connection and we have a timeout
             * connection, let's kill the script otherwise the process
             * will remain blocked indefinitely. */</comment>
            <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>lua</name></expr></argument>, <argument><expr><literal type="string">"timeout during Lua debugging with client closing connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lua_error</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_time_start</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
