<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/ziplist.c"><comment type="block">/* The ziplist is a specially encoded dually linked list that is designed
 * to be very memory efficient. It stores both strings and integer values,
 * where integers are encoded as actual integers instead of a series of
 * characters. It allows push and pop operations on either side of the list
 * in O(1) time. However, because every operation requires a reallocation of
 * the memory used by the ziplist, the actual complexity is related to the
 * amount of memory used by the ziplist.
 *
 * ----------------------------------------------------------------------------
 *
 * ZIPLIST OVERALL LAYOUT
 * ======================
 *
 * The general layout of the ziplist is as follows:
 *
 * &lt;zlbytes&gt; &lt;zltail&gt; &lt;zllen&gt; &lt;entry&gt; &lt;entry&gt; ... &lt;entry&gt; &lt;zlend&gt;
 *
 * NOTE: all fields are stored in little endian, if not specified otherwise.
 *
 * &lt;uint32_t zlbytes&gt; is an unsigned integer to hold the number of bytes that
 * the ziplist occupies, including the four bytes of the zlbytes field itself.
 * This value needs to be stored to be able to resize the entire structure
 * without the need to traverse it first.
 *
 * &lt;uint32_t zltail&gt; is the offset to the last entry in the list. This allows
 * a pop operation on the far side of the list without the need for full
 * traversal.
 *
 * &lt;uint16_t zllen&gt; is the number of entries. When there are more than
 * 2^16-2 entries, this value is set to 2^16-1 and we need to traverse the
 * entire list to know how many items it holds.
 *
 * &lt;uint8_t zlend&gt; is a special entry representing the end of the ziplist.
 * Is encoded as a single byte equal to 255. No other normal entry starts
 * with a byte set to the value of 255.
 *
 * ZIPLIST ENTRIES
 * ===============
 *
 * Every entry in the ziplist is prefixed by metadata that contains two pieces
 * of information. First, the length of the previous entry is stored to be
 * able to traverse the list from back to front. Second, the entry encoding is
 * provided. It represents the entry type, integer or string, and in the case
 * of strings it also represents the length of the string payload.
 * So a complete entry is stored like this:
 *
 * &lt;prevlen&gt; &lt;encoding&gt; &lt;entry-data&gt;
 *
 * Sometimes the encoding represents the entry itself, like for small integers
 * as we'll see later. In such a case the &lt;entry-data&gt; part is missing, and we
 * could have just:
 *
 * &lt;prevlen&gt; &lt;encoding&gt;
 *
 * The length of the previous entry, &lt;prevlen&gt;, is encoded in the following way:
 * If this length is smaller than 254 bytes, it will only consume a single
 * byte representing the length as an unsinged 8 bit integer. When the length
 * is greater than or equal to 254, it will consume 5 bytes. The first byte is
 * set to 254 (FE) to indicate a larger value is following. The remaining 4
 * bytes take the length of the previous entry as value.
 *
 * So practically an entry is encoded in the following way:
 *
 * &lt;prevlen from 0 to 253&gt; &lt;encoding&gt; &lt;entry&gt;
 *
 * Or alternatively if the previous entry length is greater than 253 bytes
 * the following encoding is used:
 *
 * 0xFE &lt;4 bytes unsigned little endian prevlen&gt; &lt;encoding&gt; &lt;entry&gt;
 *
 * The encoding field of the entry depends on the content of the
 * entry. When the entry is a string, the first 2 bits of the encoding first
 * byte will hold the type of encoding used to store the length of the string,
 * followed by the actual length of the string. When the entry is an integer
 * the first 2 bits are both set to 1. The following 2 bits are used to specify
 * what kind of integer will be stored after this header. An overview of the
 * different types and encodings is as follows. The first byte is always enough
 * to determine the kind of entry.
 *
 * |00pppppp| - 1 byte
 *      String value with length less than or equal to 63 bytes (6 bits).
 *      "pppppp" represents the unsigned 6 bit length.
 * |01pppppp|qqqqqqqq| - 2 bytes
 *      String value with length less than or equal to 16383 bytes (14 bits).
 *      IMPORTANT: The 14 bit number is stored in big endian.
 * |10000000|qqqqqqqq|rrrrrrrr|ssssssss|tttttttt| - 5 bytes
 *      String value with length greater than or equal to 16384 bytes.
 *      Only the 4 bytes following the first byte represents the length
 *      up to 32^2-1. The 6 lower bits of the first byte are not used and
 *      are set to zero.
 *      IMPORTANT: The 32 bit number is stored in big endian.
 * |11000000| - 3 bytes
 *      Integer encoded as int16_t (2 bytes).
 * |11010000| - 5 bytes
 *      Integer encoded as int32_t (4 bytes).
 * |11100000| - 9 bytes
 *      Integer encoded as int64_t (8 bytes).
 * |11110000| - 4 bytes
 *      Integer encoded as 24 bit signed (3 bytes).
 * |11111110| - 2 bytes
 *      Integer encoded as 8 bit signed (1 byte).
 * |1111xxxx| - (with xxxx between 0000 and 1101) immediate 4 bit integer.
 *      Unsigned integer from 0 to 12. The encoded value is actually from
 *      1 to 13 because 0000 and 1111 can not be used, so 1 should be
 *      subtracted from the encoded 4 bit value to obtain the right value.
 * |11111111| - End of ziplist special entry.
 *
 * Like for the ziplist header, all the integers are represented in little
 * endian byte order, even when this code is compiled in big endian systems.
 *
 * EXAMPLES OF ACTUAL ZIPLISTS
 * ===========================
 *
 * The following is a ziplist containing the two elements representing
 * the strings "2" and "5". It is composed of 15 bytes, that we visually
 * split into sections:
 *
 *  [0f 00 00 00] [0c 00 00 00] [02 00] [00 f3] [02 f6] [ff]
 *        |             |          |       |       |     |
 *     zlbytes        zltail    entries   "2"     "5"   end
 *
 * The first 4 bytes represent the number 15, that is the number of bytes
 * the whole ziplist is composed of. The second 4 bytes are the offset
 * at which the last ziplist entry is found, that is 12, in fact the
 * last entry, that is "5", is at offset 12 inside the ziplist.
 * The next 16 bit integer represents the number of elements inside the
 * ziplist, its value is 2 since there are just two elements inside.
 * Finally "00 f3" is the first entry representing the number 2. It is
 * composed of the previous entry length, which is zero because this is
 * our first entry, and the byte F3 which corresponds to the encoding
 * |1111xxxx| with xxxx between 0001 and 1101. We need to remove the "F"
 * higher order bits 1111, and subtract 1 from the "3", so the entry value
 * is "2". The next entry has a prevlen of 02, since the first entry is
 * composed of exactly two bytes. The entry itself, F6, is encoded exactly
 * like the first entry, and 6-1 = 5, so the value of the entry is 5.
 * Finally the special entry FF signals the end of the ziplist.
 *
 * Adding another element to the above string with the value "Hello World"
 * allows us to show how the ziplist encodes small strings. We'll just show
 * the hex dump of the entry itself. Imagine the bytes as following the
 * entry that stores "5" in the ziplist above:
 *
 * [02] [0b] [48 65 6c 6c 6f 20 57 6f 72 6c 64]
 *
 * The first byte, 02, is the length of the previous entry. The next
 * byte represents the encoding in the pattern |00pppppp| that means
 * that the entry is a string of length &lt;pppppp&gt;, so 0B means that
 * an 11 bytes string follows. From the third byte (48) to the last (64)
 * there are just the ASCII characters for "Hello World".
 *
 * ----------------------------------------------------------------------------
 *
 * Copyright (c) 2009-2012, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 * Copyright (c) 2009-2017, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ziplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redisassert.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_FDAPI.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_END</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>         <comment type="block">/* Special "end of ziplist" entry. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_BIG_PREVLEN</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define> <comment type="block">/* Max number of bytes of the previous entry, for
                               the "prevlen" field prefixing each entry, to be
                               represented with just a single byte. Otherwise
                               it is represented as FF AA BB CC DD, where
                               AA BB CC DD are a 4 bytes unsigned integer
                               representing the previous entry len. */</comment>

<comment type="block">/* Different encoding/length possibilities */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_STR_MASK</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_MASK</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_STR_06B</name></cpp:macro> <cpp:value>(0 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_STR_14B</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_STR_32B</name></cpp:macro> <cpp:value>(2 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_16B</name></cpp:macro> <cpp:value>(0xc0 | 0&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_32B</name></cpp:macro> <cpp:value>(0xc0 | 1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_64B</name></cpp:macro> <cpp:value>(0xc0 | 2&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_24B</name></cpp:macro> <cpp:value>(0xc0 | 3&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_8B</name></cpp:macro> <cpp:value>0xfe</cpp:value></cpp:define>

<comment type="block">/* 4 bit integer immediate encoding |1111xxxx| with xxxx between
 * 0001 and 1101. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_IMM_MASK</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>   <comment type="block">/* Mask to extract the 4 bits value. To add
                                   one is needed to reconstruct the value. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_IMM_MIN</name></cpp:macro> <cpp:value>0xf1</cpp:value></cpp:define>    <comment type="block">/* 11110001 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_INT_IMM_MAX</name></cpp:macro> <cpp:value>0xfd</cpp:value></cpp:define>    <comment type="block">/* 11111101 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT24_MAX</name></cpp:macro> <cpp:value>0x7fffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT24_MIN</name></cpp:macro> <cpp:value>(-INT24_MAX - 1)</cpp:value></cpp:define>

<comment type="block">/* Macro to determine if the entry is a string. String entries never start
 * with "11" as most significant bits of the first byte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_IS_STR</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((enc) &amp; ZIP_STR_MASK) &lt; ZIP_STR_MASK)</cpp:value></cpp:define>

<comment type="block">/* Utility macros.*/</comment>

<comment type="block">/* Return total bytes a ziplist is composed of. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_BYTES</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(*((uint32_t*)(zl)))</cpp:value></cpp:define>

<comment type="block">/* Return the offset of the last item inside the ziplist. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_TAIL_OFFSET</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint32_t*)((zl)+sizeof(uint32_t))))</cpp:value></cpp:define>

<comment type="block">/* Return the length of a ziplist, or UINT16_MAX if the length cannot be
 * determined without scanning the whole ziplist. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_LENGTH</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(*((uint16_t*)((zl)+sizeof(uint32_t)*2)))</cpp:value></cpp:define>

<comment type="block">/* The size of a ziplist header: two 32 bit integers for the total
 * bytes count and last item offset. One 16 bit integer for the number
 * of items field. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_HEADER_SIZE</name></cpp:macro>     <cpp:value>(sizeof(uint32_t)*2+sizeof(uint16_t))</cpp:value></cpp:define>

<comment type="block">/* Size of the "end of ziplist" entry. Just one byte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_END_SIZE</name></cpp:macro>        <cpp:value>(sizeof(uint8_t))</cpp:value></cpp:define>

<comment type="block">/* Return the pointer to the first entry of a ziplist. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_ENTRY_HEAD</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((zl)+ZIPLIST_HEADER_SIZE)</cpp:value></cpp:define>

<comment type="block">/* Return the pointer to the last entry of a ziplist, using the
 * last entry offset inside the ziplist header. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_ENTRY_TAIL</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((zl)+intrev32ifbe(ZIPLIST_TAIL_OFFSET(zl)))</cpp:value></cpp:define>

<comment type="block">/* Return the pointer to the last byte of a ziplist, which is, the
 * end of ziplist FF entry. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_ENTRY_END</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((zl)+intrev32ifbe(ZIPLIST_BYTES(zl))-1)</cpp:value></cpp:define>

<comment type="block">/* Increment the number of items field in the ziplist header. Note that this
 * macro should never overflow the unsigned 16 bit integer, since entries are
 * always pushed one at a time. When UINT16_MAX is reached we want the count
 * to stay there to signal that a full scan is needed to get the number of
 * items inside the ziplist. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_INCR_LENGTH</name><parameter_list>(<parameter><type><name>zl</name></type></parameter>,<parameter><type><name>incr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    if (ZIPLIST_LENGTH(zl) &lt; UINT16_MAX) \
        ZIPLIST_LENGTH(zl) = intrev16ifbe(intrev16ifbe(ZIPLIST_LENGTH(zl))+incr); \
}</cpp:value></cpp:define>

<comment type="block">/* We use this function to receive information about a ziplist entry.
 * Note that this is not how the data is actually encoded, is just what we
 * get filled by a function in order to operate more easily. */</comment>
<typedef>typedef <type><struct>struct <name>zlentry</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevrawlensize</name></decl>;</decl_stmt> <comment type="block">/* Bytes used to encode the previous entry len*/</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevrawlen</name></decl>;</decl_stmt>     <comment type="block">/* Previous entry len. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lensize</name></decl>;</decl_stmt>        <comment type="block">/* Bytes used to encode this entry type/len.
                                    For example strings have a 1, 2 or 5 bytes
                                    header. Integers always use a single byte.*/</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>            <comment type="block">/* Bytes used to represent the actual entry.
                                    For strings this is just the string length
                                    while for integers it is 1, 2, 3, 4, 8 or
                                    0 (for 4 bit immediate) depending on the
                                    number range. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>headersize</name></decl>;</decl_stmt>     <comment type="block">/* prevrawlensize + lensize. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl>;</decl_stmt>      <comment type="block">/* Set to ZIP_STR_* or ZIP_INT_* depending on
                                    the entry encoding. However for 4 bits
                                    immediate integers this can assume a range
                                    of values and must be range-checked. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to the very start of the entry, that
                                    is, this points to prev-entry-len field. */</comment>
}</block></struct></type> <name>zlentry</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIPLIST_ENTRY_ZERO</name><parameter_list>(<parameter><type><name>zle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    (zle)-&gt;prevrawlensize = (zle)-&gt;prevrawlen = 0; \
    (zle)-&gt;lensize = (zle)-&gt;len = (zle)-&gt;headersize = 0; \
    (zle)-&gt;encoding = 0; \
    (zle)-&gt;p = NULL; \
}</cpp:value></cpp:define>

<comment type="block">/* Extract the encoding from the byte pointed by 'ptr' and set it into
 * 'encoding' field of the zlentry structure. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_ENTRY_ENCODING</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>encoding</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
    (encoding) = (ptr[0]); \
    if ((encoding) &lt; ZIP_STR_MASK) (encoding) &amp;= ZIP_STR_MASK; \
} while(0)</cpp:value></cpp:define>

<comment type="block">/* Return bytes needed to store integer encoded by 'encoding'. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>zipIntSize</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch<condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ZIP_INT_8B</name></expr>:</case>  <return>return <expr><literal type="number">1</literal></expr>;</return>
    <case>case <expr><name>ZIP_INT_16B</name></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
    <case>case <expr><name>ZIP_INT_24B</name></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
    <case>case <expr><name>ZIP_INT_32B</name></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
    <case>case <expr><name>ZIP_INT_64B</name></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
    </block_content>}</block></switch>
    <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>&gt;=</operator> <name>ZIP_INT_IMM_MIN</name> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>&lt;=</operator> <name>ZIP_INT_IMM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* 4 bit immediate */</comment>
    <expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"Invalid integer encoding 0x%02X"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write the encoidng header of the entry in 'p'. If p is NULL it just returns
 * the amount of bytes required to encode such a length. Arguments:
 *
 * 'encoding' is the encoding we are using for the entry. It could be
 * ZIP_INT_* or ZIP_STR_* or between ZIP_INT_IMM_MIN and ZIP_INT_IMM_MAX
 * for single-byte small immediate integers.
 *
 * 'rawlen' is only used for ZIP_STR_* encodings and is the length of the
 * srting that this entry represents.
 *
 * The function returns the number of bytes used by the encoding/length
 * header stored in 'p'. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>zipStoreEntryEncoding</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rawlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ZIP_IS_STR</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Although encoding is given it may not be set for strings,
         * so we determine it here using the raw length. */</comment>
        <if_stmt><if>if <condition>(<expr><name>rawlen</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ZIP_STR_06B</name> <operator>|</operator> <name>rawlen</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rawlen</name> <operator>&lt;=</operator> <literal type="number">0x3fff</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ZIP_STR_14B</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rawlen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rawlen</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ZIP_STR_32B</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rawlen</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rawlen</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rawlen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>rawlen</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Implies integer encoding, so length is always 1. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Store this length at p. */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Decode the entry encoding type and data length (string length for strings,
 * number of bytes used for the integer for integer entries) encoded in 'ptr'.
 * The 'encoding' variable will hold the entry encoding, the 'lensize'
 * variable will hold the number of bytes required to encode the entry
 * length, and the 'len' variable will hold the entry length. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_DECODE_LENGTH</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>encoding</name></type></parameter>, <parameter><type><name>lensize</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                    \
    ZIP_ENTRY_ENCODING((ptr), (encoding));                                     \
    if ((encoding) &lt; ZIP_STR_MASK) {                                           \
        if ((encoding) == ZIP_STR_06B) {                                       \
            (lensize) = 1;                                                     \
            (len) = (ptr)[0] &amp; 0x3f;                                           \
        } else if ((encoding) == ZIP_STR_14B) {                                \
            (lensize) = 2;                                                     \
            (len) = (((ptr)[0] &amp; 0x3f) &lt;&lt; 8) | (ptr)[1];                       \
        } else if ((encoding) == ZIP_STR_32B) {                                \
            (lensize) = 5;                                                     \
            (len) = ((ptr)[1] &lt;&lt; 24) |                                         \
                    ((ptr)[2] &lt;&lt; 16) |                                         \
                    ((ptr)[3] &lt;&lt;  8) |                                         \
                    ((ptr)[4]);                                                \
        } else {                                                               \
            panic("Invalid string encoding 0x%02X", (encoding));               \
        }                                                                      \
    } else {                                                                   \
        (lensize) = 1;                                                         \
        (len) = zipIntSize(encoding);                                          \
    }                                                                          \
} while(0);</cpp:value></cpp:define>

<comment type="block">/* Encode the length of the previous entry and write it to "p". This only
 * uses the larger encoding (required in __ziplistCascadeUpdate). */</comment>
<function><type><name>int</name></type> <name>zipStorePrevEntryLengthLarge</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ZIP_BIG_PREVLEN</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Encode the length of the previous entry and write it to "p". Return the
 * number of bytes needed to encode this length if "p" is NULL. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>zipStorePrevEntryLength</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>ZIP_BIG_PREVLEN</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>ZIP_BIG_PREVLEN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>zipStorePrevEntryLengthLarge</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return the number of bytes used to encode the length of the previous
 * entry. The length is returned by setting the var 'prevlensize'. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_DECODE_PREVLENSIZE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>prevlensize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                          \
    if ((ptr)[0] &lt; ZIP_BIG_PREVLEN) {                                          \
        (prevlensize) = 1;                                                     \
    } else {                                                                   \
        (prevlensize) = 5;                                                     \
    }                                                                          \
} while(0);</cpp:value></cpp:define>

<comment type="block">/* Return the length of the previous element, and the number of bytes that
 * are used in order to encode the previous element length.
 * 'ptr' must point to the prevlen prefix of an entry (that encodes the
 * length of the previous entry in order to navigate the elements backward).
 * The length of the previous entry is stored in 'prevlen', the number of
 * bytes needed to encode the previous entry length are stored in
 * 'prevlensize'. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_DECODE_PREVLEN</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>prevlensize</name></type></parameter>, <parameter><type><name>prevlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                     \
    ZIP_DECODE_PREVLENSIZE(ptr, prevlensize);                                  \
    if ((prevlensize) == 1) {                                                  \
        (prevlen) = (ptr)[0];                                                  \
    } else if ((prevlensize) == 5) {                                           \
        assert(sizeof((prevlen)) == 4);                                    \
        memcpy(&amp;(prevlen), ((char*)(ptr)) + 1, 4);                             \
        memrev32ifbe(&amp;prevlen);                                                \
    }                                                                          \
} while(0);</cpp:value></cpp:define>

<comment type="block">/* Given a pointer 'p' to the prevlen info that prefixes an entry, this
 * function returns the difference in number of bytes needed to encode
 * the prevlen if the previous entry changes of size.
 *
 * So if A is the number of bytes used right now to encode the 'prevlen'
 * field.
 *
 * And B is the number of bytes that are needed in order to encode the
 * 'prevlen' if the previous element will be updated to one of size 'len'.
 *
 * Then the function returns B - A
 *
 * So the function returns a positive number if more space is needed,
 * a negative number if less space is needed, or zero if the same space
 * is needed. */</comment>
<function><type><name>int</name></type> <name>zipPrevLenByteDiff</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevlensize</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ZIP_DECODE_PREVLENSIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>prevlensize</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the total number of bytes used by the entry pointed to by 'p'. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>zipRawEntryLength</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevlensize</name></decl>, <decl><type ref="prev"/><name>encoding</name></decl>, <decl><type ref="prev"/><name>lensize</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ZIP_DECODE_PREVLENSIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZIP_DECODE_LENGTH</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>prevlensize</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>lensize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>prevlensize</name> <operator>+</operator> <name>lensize</name> <operator>+</operator> <name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if string pointed to by 'entry' can be encoded as an integer.
 * Stores the integer value in 'v' and its encoding in 'encoding'. */</comment>
<function><type><name>int</name></type> <name>zipTryEncoding</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>entrylen</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>entrylen</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>||</operator> <name>entrylen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>string2ll</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>entry</name></expr></argument>,<argument><expr><name>entrylen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Great, the string can be encoded. Check what's the smallest
         * of our encoding types that can hold this value. */</comment>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>encoding</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>ZIP_INT_IMM_MIN</name><operator>+</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>                 <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (unsigned char) */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>INT8_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>INT8_MAX</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>encoding</name> <operator>=</operator> <name>ZIP_INT_8B</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>INT16_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>INT16_MAX</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>encoding</name> <operator>=</operator> <name>ZIP_INT_16B</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>INT24_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>INT24_MAX</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>encoding</name> <operator>=</operator> <name>ZIP_INT_24B</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>INT32_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>encoding</name> <operator>=</operator> <name>ZIP_INT_32B</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>encoding</name> <operator>=</operator> <name>ZIP_INT_64B</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Store integer 'value' at 'p', encoded as 'encoding' */</comment>
<function><type><name>void</name></type> <name>zipSaveInteger</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>i16</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_8B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_16B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i16</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>                                                   <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int16_t) */</comment>
        <name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i16</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memrev16ifbe</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_24B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i32</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>value</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>                                              <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int32_t) */</comment>
        <name>memrev32ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i32</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i32</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_32B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i32</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>                                                   <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int32_t) */</comment>
        <name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i32</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_64B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i64</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>&gt;=</operator> <name>ZIP_INT_IMM_MIN</name> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>&lt;=</operator> <name>ZIP_INT_IMM_MAX</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Nothing to do, the value is stored in the encoding itself. */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Read integer encoded as 'encoding' from 'p' */</comment>
<function><type><name>int64_t</name></type> <name>zipLoadInteger</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>i16</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_8B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_16B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i16</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev16ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i16</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_32B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i32</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i32</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_24B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i32</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i32</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ZIP_INT_64B</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i64</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>&gt;=</operator> <name>ZIP_INT_IMM_MIN</name> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>&lt;=</operator> <name>ZIP_INT_IMM_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>encoding</name> <operator>&amp;</operator> <name>ZIP_INT_IMM_MASK</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return a struct with all information about an entry. */</comment>
<function><type><name>void</name></type> <name>zipEntry</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>zlentry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <expr_stmt><expr><call><name>ZIP_DECODE_PREVLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>prevrawlensize</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>prevrawlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZIP_DECODE_LENGTH</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>prevrawlensize</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>lensize</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>headersize</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>prevrawlensize</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>lensize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Create a new empty ziplist. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistNew</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes</name> <init>= <expr><name>ZIPLIST_HEADER_SIZE</name><operator>+</operator><name>ZIPLIST_END_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>ZIPLIST_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zl</name><index>[<expr><name>bytes</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ZIP_END</name></expr>;</expr_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Resize the ziplist. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistResize</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zl</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ZIP_END</name></expr>;</expr_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* When an entry is inserted, we need to set the prevlen field of the next
 * entry to equal the length of the inserted entry. It can occur that this
 * length cannot be encoded in 1 byte and the next entry needs to be grow
 * a bit larger to hold the 5-byte encoded prevlen. This can be done for free,
 * because this only happens when an entry is already being inserted (which
 * causes a realloc and memmove). However, encoding the prevlen may require
 * that this entry is grown as well. This effect may cascade throughout
 * the ziplist when there are consecutive entries with a size close to
 * ZIP_BIG_PREVLEN, so we need to check that the prevlen can be encoded in
 * every consecutive entry.
 *
 * Note that this effect can also happen in reverse, where the bytes required
 * to encode the prevlen field can shrink. This effect is deliberately ignored,
 * because it can cause a "flapping" effect where a chain prevlen fields is
 * first grown and then shrunk again after consecutive inserts. Rather, the
 * field is allowed to stay larger than necessary, because a large prevlen
 * field implies the ziplist is holding large entries anyway.
 *
 * The pointer "p" points to the first entry that does NOT need to be
 * updated, i.e. consecutive fields MAY need an update. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ziplistCascadeUpdate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>rawlen</name></decl>, <decl><type ref="prev"/><name>rawlensize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>noffset</name></decl>, <decl><type ref="prev"/><name>extra</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rawlen</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>headersize</name></name> <operator>+</operator> <name><name>cur</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rawlensize</name> <operator>=</operator> <call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>rawlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (unsigned int) */</comment>

        <comment type="block">/* Abort if there is no next entry. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>rawlen</name></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>rawlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Abort when "prevlen" has not changed. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>prevrawlen</name></name> <operator>==</operator> <name>rawlen</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>prevrawlensize</name></name> <operator>&lt;</operator> <name>rawlensize</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* The "prevlen" field of "next" needs more bytes to hold
             * the raw length of "cur". */</comment>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>p</name><operator>-</operator><name>zl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>extra</name> <operator>=</operator> <name>rawlensize</name><operator>-</operator><name><name>next</name><operator>.</operator><name>prevrawlensize</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistResize</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>curlen</name><operator>+</operator><name>extra</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (unsigned int) */</comment>
            <name>p</name> <init>= <expr><name>zl</name><operator>+</operator><name>offset</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Current pointer and offset for next element. */</comment>
            <expr_stmt><expr><name>np</name> <operator>=</operator> <name>p</name><operator>+</operator><name>rawlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>noffset</name> <operator>=</operator> <name>np</name><operator>-</operator><name>zl</name></expr>;</expr_stmt>

            <comment type="block">/* Update tail offset when next element is not the tail element. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>zl</name><operator>+</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>np</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator>
                    <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (uint32_t) */</comment>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Move the tail to the back. */</comment>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>np</name><operator>+</operator><name>rawlensize</name></expr></argument>,
                <argument><expr><name>np</name><operator>+</operator><name><name>next</name><operator>.</operator><name>prevrawlensize</name></name></expr></argument>,
                <argument><expr><name>curlen</name><operator>-</operator><name>noffset</name><operator>-</operator><name><name>next</name><operator>.</operator><name>prevrawlensize</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>np</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>rawlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       <expr_stmt><expr><name>WIN_PORT_FIX</name> <comment type="block">/* cast (unsigned int) */</comment>

            <comment type="block">/* Advance the cursor */</comment>
            <name>p</name> <operator>+=</operator> <name>rawlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>curlen</name> <operator>+=</operator> <name>extra</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>prevrawlensize</name></name> <operator>&gt;</operator> <name>rawlensize</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* This would result in shrinking, which we want to avoid.
                 * So, set "rawlen" in the available bytes. */</comment>
                <expr_stmt><expr><call><name>zipStorePrevEntryLengthLarge</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>rawlen</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>rawlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>rawlen</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>rawlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Stop here, as the raw length of "next" has not changed. */</comment>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Delete "num" entries, starting at "p". Returns pointer to the ziplist. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ziplistDelete</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>totlen</name></decl>, <decl><type ref="prev"/><name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nextdiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>zipRawEntryLength</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>deleted</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>totlen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>p</name><operator>-</operator><name><name>first</name><operator>.</operator><name>p</name></name><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Bytes taken by the element(s) to delete. */</comment> <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (unsigned int) */</comment>
    <if_stmt><if>if <condition>(<expr><name>totlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Storing `prevrawlen` in this entry may increase or decrease the
             * number of bytes required compare to the current `prevrawlen`.
             * There always is room to store this, because it was previously
             * stored by an entry that is now being deleted. */</comment>
            <expr_stmt><expr><name>nextdiff</name> <operator>=</operator> <call><name>zipPrevLenByteDiff</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>first</name><operator>.</operator><name>prevrawlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Note that there is always space when p jumps backward: if
             * the new previous entry is large, one of the deleted elements
             * had a 5 bytes prevlen header, so there is for sure at least
             * 5 bytes free and we need just 4. */</comment>
            <expr_stmt><expr><name>p</name> <operator>-=</operator> <name>nextdiff</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>first</name><operator>.</operator><name>prevrawlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Update offset for tail */</comment>
            <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator>
                <call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* When the tail contains more than one entry, we need to take
             * "nextdiff" in account as well. Otherwise, a change in the
             * size of prevlen doesn't have an effect on the *tail* offset. */</comment>
            <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name><name>tail</name><operator>.</operator><name>headersize</name></name><operator>+</operator><name><name>tail</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator>
                   <call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><name>nextdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Move tail to the front of the ziplist */</comment>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>first</name><operator>.</operator><name>p</name></name></expr></argument>,<argument><expr><name>p</name></expr></argument>,
                <argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><operator>(</operator><name>p</name><operator>-</operator><name>zl</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* The entire tail was deleted. No need to move memory. */</comment>
            <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator>
                <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><operator>(</operator><name><name>first</name><operator>.</operator><name>p</name></name><operator>-</operator><name>zl</name><operator>)</operator><operator>-</operator><name><name>first</name><operator>.</operator><name>prevrawlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (unsigned int) */</comment>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Resize and update length */</comment>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>first</name><operator>.</operator><name>p</name></name><operator>-</operator><name>zl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistResize</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><name>totlen</name><operator>+</operator><name>nextdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ZIPLIST_INCR_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>-</operator><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>zl</name><operator>+</operator><name>offset</name></expr>;</expr_stmt>

        <comment type="block">/* When nextdiff != 0, the raw length of the next entry has changed, so
         * we need to cascade the update throughout the ziplist */</comment>
        <if_stmt><if>if <condition>(<expr><name>nextdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>__ziplistCascadeUpdate</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Insert item at "p". */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ziplistInsert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>reqlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevlensize</name></decl>, <decl><type ref="prev"/><name>prevlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nextdiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>value</name> <init>= <expr><literal type="number">123456789</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* initialized to avoid warning. Using a value
                                    that is easy to see if for some reason
                                    we use it uninitialized. */</comment>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>tail</name></decl>;</decl_stmt>

    <comment type="block">/* Find out prevlen for the entry that is inserted. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZIP_DECODE_PREVLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>, <argument><expr><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptail</name> <init>= <expr><call><name>ZIPLIST_ENTRY_TAIL</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ptail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>prevlen</name> <operator>=</operator> <call><name>zipRawEntryLength</name><argument_list>(<argument><expr><name>ptail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* See if the entry can be encoded */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>zipTryEncoding</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* 'encoding' is set to the appropriate integer encoding */</comment>
        <expr_stmt><expr><name>reqlen</name> <operator>=</operator> <call><name>zipIntSize</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* 'encoding' is untouched, however zipStoreEntryEncoding will use the
         * string length to figure out how to encode it. */</comment>
        <expr_stmt><expr><name>reqlen</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* We need space for both the length of the previous entry and
     * the length of the payload. */</comment>
    <expr_stmt><expr><name>reqlen</name> <operator>+=</operator> <call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>WIN_PORT_FIX</name> <comment type="block">/* cast (unsigned int) */</comment>
    <name>reqlen</name> <operator>+=</operator> <call><name>zipStoreEntryEncoding</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>encoding</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* When the insert position is not equal to the tail, we need to
     * make sure that the next entry can hold this entry's length in
     * its prevlen field. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>forcelarge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nextdiff</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>zipPrevLenByteDiff</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>reqlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>  <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (unsigned int) */</comment>
    <if_stmt><if>if <condition>(<expr><name>nextdiff</name> <operator>==</operator> <operator>-</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>reqlen</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nextdiff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>forcelarge</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Store offset because a realloc may change the address of zl. */</comment>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>p</name><operator>-</operator><name>zl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistResize</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>curlen</name><operator>+</operator><name>reqlen</name><operator>+</operator><name>nextdiff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (unsigned int) */</comment>
    <name>p</name> <init>= <expr><name>zl</name><operator>+</operator><name>offset</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Apply memory move when necessary and update tail offset. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Subtract one because of the ZIP_END bytes */</comment>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>reqlen</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name>nextdiff</name></expr></argument>,<argument><expr><name>curlen</name><operator>-</operator><name>offset</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>nextdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Encode this entry's raw length in the next entry. */</comment>
        <if_stmt><if>if <condition>(<expr><name>forcelarge</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>zipStorePrevEntryLengthLarge</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>reqlen</name></expr></argument>,<argument><expr><name>reqlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>reqlen</name></expr></argument>,<argument><expr><name>reqlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/* Update offset for tail */</comment>
        <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator>
            <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><name>reqlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (uint32_t) */</comment>

        <comment type="block">/* When the tail contains more than one entry, we need to take
         * "nextdiff" in account as well. Otherwise, a change in the
         * size of prevlen doesn't have an effect on the *tail* offset. */</comment>
        <name>zipEntry</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>reqlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>reqlen</name><operator>+</operator><name><name>tail</name><operator>.</operator><name>headersize</name></name><operator>+</operator><name><name>tail</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator>
                <call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>+</operator><name>nextdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* This element will be the new tail. */</comment>
        <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (uint32_) */</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* When nextdiff != 0, the raw length of the next entry has changed, so
     * we need to cascade the update throughout the ziplist */</comment>
    <if_stmt><if>if <condition>(<expr><name>nextdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>p</name><operator>-</operator><name>zl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>__ziplistCascadeUpdate</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>reqlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>zl</name><operator>+</operator><name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Write the entry */</comment>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>zipStorePrevEntryLength</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>zipStoreEntryEncoding</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>encoding</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ZIP_IS_STR</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>zipSaveInteger</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>ZIPLIST_INCR_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Merge ziplists 'first' and 'second' by appending 'second' to 'first'.
 *
 * NOTE: The larger ziplist is reallocated to contain the new merged ziplist.
 * Either 'first' or 'second' can be used for the result.  The parameter not
 * used will be free'd and set to NULL.
 *
 * After calling this function, the input parameters are no longer valid since
 * they are changed and free'd in-place.
 *
 * The result ziplist is the contents of 'first' followed by 'second'.
 *
 * On failure: returns NULL if the merge is impossible.
 * On success: returns the merged ziplist (which is expanded version of either
 * 'first' or 'second', also frees the other unused input ziplist, and sets the
 * input ziplist argument equal to newly reallocated ziplist return value. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistMerge</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* If any params are null, we can't merge, so NULL. */</comment>
    <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>first</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>second</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>second</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Can't merge same list into itself. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>first</name> <operator>==</operator> <operator>*</operator><name>second</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>first_bytes</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>first_len</name> <init>= <expr><call><name>intrev16ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>second_bytes</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>second_len</name> <init>= <expr><call><name>intrev16ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>append</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>target_bytes</name></decl>, <decl><type ref="prev"/><name>source_bytes</name></decl>;</decl_stmt>
    <comment type="block">/* Pick the largest ziplist so we can resize easily in-place.
     * We must also track if we are now appending or prepending to
     * the target ziplist. */</comment>
    <if_stmt><if>if <condition>(<expr><name>first_len</name> <operator>&gt;=</operator> <name>second_len</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* retain first, append second to first. */</comment>
        <expr_stmt><expr><name>target</name> <operator>=</operator> <operator>*</operator><name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>target_bytes</name> <operator>=</operator> <name>first_bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source</name> <operator>=</operator> <operator>*</operator><name>second</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source_bytes</name> <operator>=</operator> <name>second_bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>append</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* else, retain second, prepend first to second. */</comment>
        <expr_stmt><expr><name>target</name> <operator>=</operator> <operator>*</operator><name>second</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>target_bytes</name> <operator>=</operator> <name>second_bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source</name> <operator>=</operator> <operator>*</operator><name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source_bytes</name> <operator>=</operator> <name>first_bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>append</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Calculate final bytes (subtract one pair of metadata) */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zlbytes</name> <init>= <expr><name>first_bytes</name> <operator>+</operator> <name>second_bytes</name> <operator>-</operator>
                     <name>ZIPLIST_HEADER_SIZE</name> <operator>-</operator> <name>ZIPLIST_END_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zllength</name> <init>= <expr><name>first_len</name> <operator>+</operator> <name>second_len</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Combined zl length should be limited within UINT16_MAX */</comment>
    <expr_stmt><expr><name>zllength</name> <operator>=</operator> <ternary><condition><expr><name>zllength</name> <operator>&lt;</operator> <name>UINT16_MAX</name></expr> ?</condition><then> <expr><name>zllength</name></expr> </then><else>: <expr><name>UINT16_MAX</name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block">/* Save offset positions before we start ripping memory apart. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>first_offset</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>second_offset</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Extend target to new zlbytes then append or prepend source. */</comment>
    <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>zlbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>append</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* append == appending to target */</comment>
        <comment type="block">/* Copy source after target (copying over original [END]):
         *   [TARGET - END, SOURCE - HEADER] */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target</name> <operator>+</operator> <name>target_bytes</name> <operator>-</operator> <name>ZIPLIST_END_SIZE</name></expr></argument>,
               <argument><expr><name>source</name> <operator>+</operator> <name>ZIPLIST_HEADER_SIZE</name></expr></argument>,
               <argument><expr><name>source_bytes</name> <operator>-</operator> <name>ZIPLIST_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* !append == prepending to target */</comment>
        <comment type="block">/* Move target *contents* exactly size of (source - [END]),
         * then copy source into vacataed space (source - [END]):
         *   [SOURCE - END, TARGET - HEADER] */</comment>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>target</name> <operator>+</operator> <name>source_bytes</name> <operator>-</operator> <name>ZIPLIST_END_SIZE</name></expr></argument>,
                <argument><expr><name>target</name> <operator>+</operator> <name>ZIPLIST_HEADER_SIZE</name></expr></argument>,
                <argument><expr><name>target_bytes</name> <operator>-</operator> <name>ZIPLIST_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>source_bytes</name> <operator>-</operator> <name>ZIPLIST_END_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Update header metadata. */</comment>
    <expr_stmt><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>zlbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev16ifbe</name><argument_list>(<argument><expr><name>zllength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* New tail offset is:
     *   + N bytes of first ziplist
     *   - 1 byte for [END] of first ziplist
     *   + M bytes for the offset of the original tail of the second ziplist
     *   - J bytes for HEADER because second_offset keeps no header. */</comment>
    <expr_stmt><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(
                                   <argument><expr><operator>(</operator><name>first_bytes</name> <operator>-</operator> <name>ZIPLIST_END_SIZE</name><operator>)</operator> <operator>+</operator>
                                   <operator>(</operator><name>second_offset</name> <operator>-</operator> <name>ZIPLIST_HEADER_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* __ziplistCascadeUpdate just fixes the prev length values until it finds a
     * correct prev length value (then it assumes the rest of the list is okay).
     * We tell CascadeUpdate to start at the first ziplist's tail element to fix
     * the merge seam. */</comment>
    <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>__ziplistCascadeUpdate</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>target</name><operator>+</operator><name>first_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now free and NULL out what we didn't realloc */</comment>
    <if_stmt><if>if <condition>(<expr><name>append</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>second</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistPush</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>where</name> <operator>==</operator> <name>ZIPLIST_HEAD</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>ZIPLIST_ENTRY_HEAD</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ZIPLIST_ENTRY_END</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><call><name>__ziplistInsert</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns an offset to use for iterating with ziplistNext. When the given
 * index is negative, the list is traversed back to front. When the list
 * doesn't contain an element at the provided index, NULL is returned. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistIndex</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevlensize</name></decl>, <decl><type ref="prev"/><name>prevlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>index</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ZIPLIST_ENTRY_TAIL</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ZIP_DECODE_PREVLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>, <argument><expr><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>prevlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>p</name> <operator>-=</operator> <name>prevlen</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ZIP_DECODE_PREVLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>, <argument><expr><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ZIPLIST_ENTRY_HEAD</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name> <operator>&amp;&amp;</operator> <name>index</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>zipRawEntryLength</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name> <operator>||</operator> <name>index</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return pointer to next entry in ziplist.
 *
 * zl is the pointer to the ziplist
 * p is the pointer to the current element
 *
 * The element after 'p' is returned, otherwise NULL if we are at the end. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistNext</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>zl</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* "p" could be equal to ZIP_END, caused by ziplistDelete,
     * and we should return NULL. Otherwise, we should return NULL
     * when the *next* element is ZIP_END (there is no next entry). */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>zipRawEntryLength</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return pointer to previous entry in ziplist. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistPrev</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevlensize</name></decl>, <decl><type ref="prev"/><name>prevlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Iterating backwards from ZIP_END should return the tail. When "p" is
     * equal to the first element of the list, we're already at the head,
     * and should return NULL. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ZIPLIST_ENTRY_TAIL</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>ZIPLIST_ENTRY_HEAD</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ZIP_DECODE_PREVLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>, <argument><expr><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>prevlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name><operator>-</operator><name>prevlen</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Get entry pointed to by 'p' and store in either '*sstr' or 'sval' depending
 * on the encoding of the entry. '*sstr' is always set to NULL to be able
 * to find out whether the string pointer or the integer value was set.
 * Return 0 if 'p' points to the end of the ziplist, 1 otherwise. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>ziplistGet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sstr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name> <modifier>*</modifier></type><name>sval</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>entry</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sstr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>sstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ZIP_IS_STR</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sstr</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>slen</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>sstr</name> <operator>=</operator> <name>p</name><operator>+</operator><name><name>entry</name><operator>.</operator><name>headersize</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sval</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>sval</name> <operator>=</operator> <call><name>zipLoadInteger</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name><name>entry</name><operator>.</operator><name>headersize</name></name></expr></argument>,<argument><expr><name><name>entry</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Insert an entry at "p". */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistInsert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>__ziplistInsert</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Delete a single entry from the ziplist, pointed to by *p.
 * Also update *p in place, to be able to iterate over the
 * ziplist, while deleting entries. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistDelete</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><operator>*</operator><name>p</name><operator>-</operator><name>zl</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>__ziplistDelete</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>*</operator><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Store pointer to current element in p, because ziplistDelete will
     * do a realloc which might result in a different "zl"-pointer.
     * When the delete direction is back to front, we might delete the last
     * entry and end up with "p" pointing to ZIP_END, so check this. */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>zl</name><operator>+</operator><name>offset</name></expr>;</expr_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Delete a range of entries from the ziplist. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistDeleteRange</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>zl</name></expr> </then><else>: <expr><call><name>__ziplistDelete</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Compare entry pointer to by 'p' with 'sstr' of length 'slen'. */</comment>
<comment type="block">/* Return 1 if equal. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>ziplistCompare</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sstr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>sencoding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>zval</name></decl>, <decl><type ref="prev"/><name>sval</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ZIP_END</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ZIP_IS_STR</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Raw compare */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>slen</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name><name>entry</name><operator>.</operator><name>headersize</name></name></expr></argument>,<argument><expr><name>sstr</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Try to compare encoded values. Don't compare encoding because
         * different implementations may encoded integers differently. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>zipTryEncoding</name><argument_list>(<argument><expr><name>sstr</name></expr></argument>,<argument><expr><name>slen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sval</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sencoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>zval</name> <operator>=</operator> <call><name>zipLoadInteger</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name><name>entry</name><operator>.</operator><name>headersize</name></name></expr></argument>,<argument><expr><name><name>entry</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>zval</name> <operator>==</operator> <name>sval</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Find pointer to the entry equal to the specified entry. Skip 'skip' entries
 * between every comparison. Returns NULL when the field could not be found. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ziplistFind</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>vstr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>vlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>skipcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>vencoding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>vll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevlensize</name></decl>, <decl><type ref="prev"/><name>encoding</name></decl>, <decl><type ref="prev"/><name>lensize</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ZIP_DECODE_PREVLENSIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prevlensize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ZIP_DECODE_LENGTH</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>prevlensize</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>lensize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>prevlensize</name> <operator>+</operator> <name>lensize</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>skipcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Compare current entry with specified entry */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>ZIP_IS_STR</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>vlen</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>p</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Find out if the searched field can be encoded. Note that
                 * we do it only the first time, once done vencoding is set
                 * to non-zero and vll is set to the integer value. */</comment>
                <if_stmt><if>if <condition>(<expr><name>vencoding</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>zipTryEncoding</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vencoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* If the entry can't be encoded we set it to
                         * UCHAR_MAX so that we don't retry again the next
                         * time. */</comment>
                        <expr_stmt><expr><name>vencoding</name> <operator>=</operator> <name>UCHAR_MAX</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="block">/* Must be non-zero by now */</comment>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vencoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* Compare current entry with specified entry, do it only
                 * if vencoding != UCHAR_MAX because if there is no encoding
                 * possible for the field it can't be a valid integer. */</comment>
                <if_stmt><if>if <condition>(<expr><name>vencoding</name> <operator>!=</operator> <name>UCHAR_MAX</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ll</name> <init>= <expr><call><name>zipLoadInteger</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ll</name> <operator>==</operator> <name>vll</name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>p</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Reset skip count */</comment>
            <expr_stmt><expr><name>skipcnt</name> <operator>=</operator> <name>skip</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Skip entry */</comment>
            <expr_stmt><expr><name>skipcnt</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Move to next entry */</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return length of ziplist. */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>ziplistLen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>intrev16ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>intrev16ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>zl</name><operator>+</operator><name>ZIPLIST_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>zipRawEntryLength</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Re-store length if small enough */</comment>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>intrev16ifbe</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return ziplist blob size in bytes. */</comment>
<function><type><name>size_t</name></type> <name>ziplistBlobLen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ziplistRepr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>entry</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(
        <argument><expr><literal type="string">"{total bytes %d} "</literal>
        <literal type="string">"{num entries %u}\n"</literal>
        <literal type="string">"{tail offset %u}\n"</literal></expr></argument>,
        <argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>intrev16ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_LENGTH</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_TAIL_OFFSET</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ZIPLIST_ENTRY_HEAD</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>ZIP_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
            <argument><expr><literal type="string">"{\n"</literal>
                <literal type="string">"\taddr 0x%08lx,\n"</literal>
                <literal type="string">"\tindex %2d,\n"</literal>
                <literal type="string">"\toffset %5ld,\n"</literal>
                <literal type="string">"\thdr+entry len: %5u,\n"</literal>
                <literal type="string">"\thdr len%2u,\n"</literal>
                <literal type="string">"\tprevrawlen: %5u,\n"</literal>
                <literal type="string">"\tprevrawlensize: %2u,\n"</literal>
                <literal type="string">"\tpayload %5u\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>p</name></expr></argument>,
            <argument><expr><name>index</name></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <operator>(</operator><name>p</name><operator>-</operator><name>zl</name><operator>)</operator></expr></argument>,
            <argument><expr><name><name>entry</name><operator>.</operator><name>headersize</name></name><operator>+</operator><name><name>entry</name><operator>.</operator><name>len</name></name></expr></argument>,
            <argument><expr><name><name>entry</name><operator>.</operator><name>headersize</name></name></expr></argument>,
            <argument><expr><name><name>entry</name><operator>.</operator><name>prevrawlen</name></name></expr></argument>,
            <argument><expr><name><name>entry</name><operator>.</operator><name>prevrawlensize</name></name></expr></argument>,
            <argument><expr><name><name>entry</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tbytes: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>.</operator><name>headersize</name></name><operator>+</operator><name><name>entry</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x|"</literal></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>entry</name><operator>.</operator><name>headersize</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ZIP_IS_STR</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t[str]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator>
                    <call><name>fwrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>entry</name><operator>.</operator><name>len</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t[int]%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>zipLoadInteger</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>entry</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>entry</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{end}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REDIS_TEST</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (DEBUG) printf(f, __VA_ARGS__); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>createList</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><call><name>ziplistNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"quux"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ZIPLIST_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1024"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>createIntList</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><call><name>ziplistNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"128000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"4294967296"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"non integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"much much longer non integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>zl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PORT_LONGLONG</name></type> <name>usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <return>return <expr><call><name>GetHighResRelativeTime</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal><operator>)</operator><operator>+</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>posstr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"HEAD"</literal></expr>, <expr><literal type="string">"TAIL"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxsize</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>dnum</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"quux"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="block">/* Do num times a push+pop from pos */</comment>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"quux"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDeleteRange</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"List size: %8d, bytes: %8d, %dx push+pop (%s): %6lld usec\n"</literal></expr></argument>,
            <argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>ZIPLIST_BYTES</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name><name>posstr</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>usec</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pop</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>where</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>vlong</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><ternary><condition><expr><name>where</name> <operator>==</operator> <name>ZIPLIST_HEAD</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlong</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <name>ZIPLIST_HEAD</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pop head: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pop tail: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>vstr</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>vlong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ziplistDelete</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Could not pop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>randstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>min</name><operator>+</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><name>max</name><operator>-</operator><name>min</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minval</name></decl>, <decl><type ref="prev"/><name>maxval</name></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name>minval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
    <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>minval</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">122</literal></expr>;</expr_stmt>
    <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>minval</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <while>while<condition>(<expr><name>p</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>target</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>minval</name><operator>+</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><name>maxval</name><operator>-</operator><name>minval</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl></parameter>, <parameter><decl><type><name>zlentry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ziplistLen</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>zlentry</name></type> <name>_e</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ZIPLIST_ENTRY_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zlentry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zlentry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zipEntry</name><argument_list>(<argument><expr><call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>-</operator><name>len</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zlentry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ziplistTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>elen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="block">/* If an argument is given, use it as the random seed. */</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createIntList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>pop</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>pop</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>ZIPLIST_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>pop</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>pop</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Get element at index 3:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Could not access index 3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Get element at index 4 (out of range):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Out of range index should return NULL, returned offset: %ld\n"</literal></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Get element at index -1 (last element):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Could not access index -1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Get element at index -4 (first element):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Could not access index -4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Get element at index -5 (reverse out of range):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Out of range index should return NULL, returned offset: %ld\n"</literal></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Iterate list from 0 to end:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Entry: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Iterate list from 1 to end:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Entry: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Iterate list from 2 to end:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Entry: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Iterate starting out of range:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Iterate from back to front:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Entry: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistPrev</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Iterate from back to front, deleting all items:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Entry: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDelete</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistPrev</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete inclusive range 0,0:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDeleteRange</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete inclusive range 0,1:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDeleteRange</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete inclusive range 1,2:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDeleteRange</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete with start index out of range:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDeleteRange</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete with num overflow:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDeleteRange</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete foo while iterating:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Delete foo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDelete</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Entry: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&amp;&amp;</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fwrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Regression test for &gt;255 byte strings:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>v1</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>v2</name><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v1</name></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v2</name></expr></argument>,<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v1</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v2</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Pop values again and compare their value. */</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>v1</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>v2</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>entry</name></expr></argument>,<argument><expr><name>elen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SUCCESS\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Regression test deleting next to last entries:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>zlentry</name></type> <name><name>e</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>.</operator><name>prevrawlensize</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>prevrawlen</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>lensize</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                         <expr><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>headersize</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>encoding</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[  <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevrawlensize</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prevrawlensize</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>prevrawlensize</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Deleting entry 1 will increase `prevrawlensize` for entry 2 */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistDelete</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prevrawlensize</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prevrawlensize</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SUCCESS\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Create long list and check indices:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">999</literal><operator>-</operator><name>i</name> <operator>==</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SUCCESS\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Compare strings with ziplist entries:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hello"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: not \"hello\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hella"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: \"hella\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1024"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: not \"1024\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1025"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: \"1025\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SUCCESS\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Merge test:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <comment type="block">/* create list gives us: [hello, foo, quux, 1024] */</comment>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>createList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl2</name> <init>= <expr><call><name>createList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl3</name> <init>= <expr><call><name>ziplistNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl4</name> <init>= <expr><call><name>ziplistNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>ziplistMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zl4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Allowed merging of one ziplist into itself.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Merge two empty ziplists, get empty result back. */</comment>
        <expr_stmt><expr><name>zl4</name> <operator>=</operator> <call><name>ziplistMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zl3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistLen</name><argument_list>(<argument><expr><name>zl4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Merging two empty ziplists created entries.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>zl2</name> <operator>=</operator> <call><name>ziplistMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* merge gives us: [hello, foo, quux, 1024, hello, foo, quux, 1024] */</comment>
        <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>ziplistLen</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Merged length not 8, but: %u\n"</literal></expr></argument>, <argument><expr><call><name>ziplistLen</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hello"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: not \"hello\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hella"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: \"hella\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1024"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: not \"1024\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1025"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: \"1025\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hello"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: not \"hello\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"hella"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: \"hella\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl2</name></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1024"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: not \"1024\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ziplistCompare</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"1025"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: \"1025\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SUCCESS\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Stress with random payloads of different encoding:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>len</name></decl>,<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>refnode</name></decl>;</decl_stmt>

        <comment type="block">/* Hold temp vars from ziplist */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sstr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>sval</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>listSetFreeMethod</name><argument_list>(<argument><expr><name>ref</name></expr></argument>,<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>sdsfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>

            <comment type="block">/* Create lists */</comment>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>where</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ZIPLIST_HEAD</name></expr> </then><else>: <expr><name>ZIPLIST_TAIL</name></expr></else></ternary></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>randstring</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <switch>switch<condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case>
                        <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">0LL</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">0LL</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="number">2</literal></expr>:</case>
                        <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">0LL</literal> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>

                <comment type="block">/* Add to ziplist */</comment>
                <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Add to reference list */</comment>
                <if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <name>ZIPLIST_HEAD</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>listAddNodeHead</name><argument_list>(<argument><expr><name>ref</name></expr></argument>,<argument><expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>where</name> <operator>==</operator> <name>ZIPLIST_TAIL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>ref</name></expr></argument>,<argument><expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ziplistLen</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <comment type="block">/* Naive way to get elements, but similar to the stresser
                 * executed from the Tcl test suite. */</comment>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>refnode</name> <operator>=</operator> <call><name>listIndex</name><argument_list>(<argument><expr><name>ref</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sstr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>sstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>sstr</name></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>listNodeValue</name><argument_list>(<argument><expr><name>refnode</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>listRelease</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SUCCESS\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Stress with variable ziplist size:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stress</name><argument_list>(<argument><expr><name>ZIPLIST_HEAD</name></expr></argument>,<argument><expr><literal type="number">100000</literal></expr></argument>,<argument><expr><literal type="number">16384</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stress</name><argument_list>(<argument><expr><name>ZIPLIST_TAIL</name></expr></argument>,<argument><expr><literal type="number">100000</literal></expr></argument>,<argument><expr><literal type="number">16384</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
