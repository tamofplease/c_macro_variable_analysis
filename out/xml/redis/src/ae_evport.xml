<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/ae_evport.c"><comment type="block">/* ae.c module for illumos event ports.
 *
 * Copyright (c) 2012, Joyent, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;port.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>evport_debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This file implements the ae API using event ports, present on Solaris-based
 * systems since Solaris 10.  Using the event port interface, we associate file
 * descriptors with the port.  Each association also includes the set of poll(2)
 * events that the consumer is interested in (e.g., POLLIN and POLLOUT).
 *
 * There's one tricky piece to this implementation: when we return events via
 * aeApiPoll, the corresponding file descriptors become dissociated from the
 * port.  This is necessary because poll events are level-triggered, so if the
 * fd didn't become dissociated, it would immediately fire another event since
 * the underlying state hasn't changed yet.  We must re-associate the file
 * descriptor, but only after we know that our caller has actually read from it.
 * The ae API does not tell us exactly when that happens, but we do know that
 * it must happen by the time aeApiPoll is called again.  Our solution is to
 * keep track of the last fds returned by aeApiPoll and re-associate them next
 * time aeApiPoll is invoked.
 *
 * To summarize, in this module, each fd association is EITHER (a) represented
 * only via the in-kernel association OR (b) represented by pending_fds and
 * pending_masks.  (b) is only true for the last fds we returned from aeApiPoll,
 * and only until we enter aeApiPoll again (at which point we restore the
 * in-kernel association).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EVENT_BATCHSZ</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>aeApiState</name> <block>{
    <decl_stmt><decl><type><name>int</name></type>     <name>portfd</name></decl>;</decl_stmt>                             <comment type="block">/* event port */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>npending</name></decl>;</decl_stmt>                           <comment type="block">/* # of pending fds */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name><name>pending_fds</name><index>[<expr><name>MAX_EVENT_BATCHSZ</name></expr>]</index></name></decl>;</decl_stmt>     <comment type="block">/* pending fds */</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name><name>pending_masks</name><index>[<expr><name>MAX_EVENT_BATCHSZ</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* pending fds' masks */</comment>
}</block></struct></type> <name>aeApiState</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiCreate</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeApiState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name> <operator>=</operator> <call><name>port_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>npending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EVENT_BATCHSZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>AE_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiResize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Nothing to resize here. */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aeApiFree</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiLookupPending</name><parameter_list>(<parameter><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>npending</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function to invoke port_associate for the given fd and mask.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiAssociate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>where</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>portfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: port_associate(%d, 0x%x) = "</literal></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>port_associate</name><argument_list>(<argument><expr><name>portfd</name></expr></argument>, <argument><expr><name>PORT_SOURCE_FD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>,
        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d (%s)\n"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><ternary><condition><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"no error"</literal></expr> </then><else>: <expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: port_associate: %s\n"</literal></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"aeApiAssociate: event port limit exceeded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiAddEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fullmask</name></decl>, <decl><type ref="prev"/><name>pfd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"aeApiAddEvent: fd %d mask 0x%x\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Since port_associate's "events" argument replaces any existing events, we
     * must be sure to include whatever events are already associated when
     * we call port_associate() again.
     */</comment>
    <expr_stmt><expr><name>fullmask</name> <operator>=</operator> <name>mask</name> <operator>|</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pfd</name> <operator>=</operator> <call><name>aeApiLookupPending</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * This fd was recently returned from aeApiPoll.  It should be safe to
         * assume that the consumer has processed that poll event, but we play
         * it safer by simply updating pending_mask.  The fd will be
         * re-associated as usual when aeApiPoll is called again.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"aeApiAddEvent: adding to pending fd %d\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>pfd</name></expr>]</index></name> <operator>|=</operator> <name>fullmask</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><call><name>aeApiAssociate</name><argument_list>(<argument><expr><literal type="string">"aeApiAddEvent"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fullmask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aeApiDelEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fullmask</name></decl>, <decl><type ref="prev"/><name>pfd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"del fd %d mask 0x%x\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pfd</name> <operator>=</operator> <call><name>aeApiLookupPending</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"deleting event from pending fd %d\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * This fd was just returned from aeApiPoll, so it's not currently
         * associated with the port.  All we need to do is update
         * pending_mask appropriately.
         */</comment>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>pfd</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>pfd</name></expr>]</index></name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>pfd</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * The fd is currently associated with the port.  Like with the add case
     * above, we must look at the full mask for the file descriptor before
     * updating that association.  We don't have a good way of knowing what the
     * events are without looking into the eventLoop state directly.  We rely on
     * the fact that our caller has already updated the mask in the eventLoop.
     */</comment>

    <expr_stmt><expr><name>fullmask</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fullmask</name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * We're removing *all* events, so use port_dissociate to remove the
         * association completely.  Failure here indicates a bug.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"aeApiDelEvent: port_dissociate(%d)\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>port_dissociate</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name></expr></argument>, <argument><expr><name>PORT_SOURCE_FD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"aeApiDelEvent: port_dissociate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* will not return */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>aeApiAssociate</name><argument_list>(<argument><expr><literal type="string">"aeApiDelEvent"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
        <argument><expr><name>fullmask</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * ENOMEM is a potentially transient condition, but the kernel won't
         * generally return it unless things are really bad.  EAGAIN indicates
         * we've reached an resource limit, for which it doesn't make sense to
         * retry (counter-intuitively).  All other errors indicate a bug.  In any
         * of these cases, the best we can do is to abort.
         */</comment>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* will not return */</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aeApiPoll</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeApiState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>apidata</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tsp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint_t</name></type> <name>nevents</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>port_event_t</name></type> <name><name>event</name><index>[<expr><name>MAX_EVENT_BATCHSZ</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/*
     * If we've returned fd events before, we must re-associate them with the
     * port now, before calling port_get().  See the block comment at the top of
     * this file for an explanation of why.
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>npending</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <comment type="block">/* This fd has since been deleted. */</comment>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>aeApiAssociate</name><argument_list>(<argument><expr><literal type="string">"aeApiPoll"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name></expr></argument>,
            <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* See aeApiDelEvent for why this case is fatal. */</comment>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>AE_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>npending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>tvp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tvp</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>tvp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <operator>&amp;</operator><name>timeout</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * port_getn can return with errno == ETIME having returned some events (!).
     * So if we get ETIME, we check nevents, too.
     */</comment>
    <expr_stmt><expr><name>nevents</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>port_getn</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>portfd</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>MAX_EVENT_BATCHSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nevents</name></expr></argument>,
        <argument><expr><name>tsp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>ETIME</name> <operator>||</operator> <name>nevents</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ETIME</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Any other error indicates a bug. */</comment>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"aeApiPoll: port_get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>npending</name></name> <operator>=</operator> <name>nevents</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nevents</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>AE_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_object</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>evport_debug</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"aeApiPoll: fd %d mask 0x%x\n"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_object</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_object</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pending_masks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>portev_user</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>nevents</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>aeApiName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"evport"</literal></expr>;</return>
</block_content>}</block></function>
</unit>
