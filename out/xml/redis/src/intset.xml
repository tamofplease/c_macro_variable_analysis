<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/intset.c"><comment type="block">/*
 * Copyright (c) 2009-2012, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianconv.h"</cpp:file></cpp:include>

<comment type="block">/* Note that these encodings are ordered, so:
 * INTSET_ENC_INT16 &lt; INTSET_ENC_INT32 &lt; INTSET_ENC_INT64. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTSET_ENC_INT16</name></cpp:macro> <cpp:value>(sizeof(int16_t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTSET_ENC_INT32</name></cpp:macro> <cpp:value>(sizeof(int32_t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTSET_ENC_INT64</name></cpp:macro> <cpp:value>(sizeof(int64_t))</cpp:value></cpp:define>

<comment type="block">/* Return the required encoding for the provided value. */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>_intsetValueEncoding</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>INT32_MIN</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>INTSET_ENC_INT64</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>INT16_MIN</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>INT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>INTSET_ENC_INT32</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>INTSET_ENC_INT16</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return the value at pos, given an encoding. */</comment>
<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_intsetGetEncoded</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>v64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>v32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>v16</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><operator>+</operator><name>pos</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>v64</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enc</name> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v32</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><operator>+</operator><name>pos</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>v32</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v16</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><operator>+</operator><name>pos</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev16ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>v16</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return the value at pos, using the configured encoding. */</comment>
<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_intsetGet</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>_intsetGetEncoded</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>,<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Set the value at pos, using the configured encoding. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_intsetSet</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>encoding</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><index>[<expr><name>pos</name></expr>]</index> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><operator>+</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><index>[<expr><name>pos</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>                     <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int32_t) */</comment>
        <name>memrev32ifbe</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><operator>+</operator><name>pos</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><index>[<expr><name>pos</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>                     <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int16_t) */</comment>
        <name>memrev16ifbe</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>)</operator><operator>+</operator><name>pos</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Create an empty intset. */</comment>
<function><type><name>intset</name> <modifier>*</modifier></type><name>intsetNew</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Resize the intset */</comment>
<function><type><specifier>static</specifier> <name>intset</name> <modifier>*</modifier></type><name>intsetResize</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><name>len</name><operator>*</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intset</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Search for the position of "value". Return 1 when the value was found and
 * sets "pos" to the position of the value within the intset. Return 0 when
 * the value is not present in the intset and sets "pos" to the position
 * where "value" can be inserted. */</comment>
<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>intsetSearch</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cur</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* The value can never be found when the set is empty */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Check for the case where we know we cannot find the value,
         * but do know the insert position. */</comment>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <call><name>_intsetGet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <call><name>_intsetGet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while<condition>(<expr><name>max</name> <operator>&gt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>min</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>max</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>_intsetGet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Upgrades the intset to a larger encoding and inserts the given integer. */</comment>
<function><type><specifier>static</specifier> <name>intset</name> <modifier>*</modifier></type><name>intsetUpgradeAndAdd</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>curenc</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>newenc</name> <init>= <expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>prepend</name> <init>= <expr><ternary><condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block">/* First set new encoding and resize */</comment>
    <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>newenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetResize</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Upgrade back-to-front so we don't overwrite values.
     * Note that the "prepend" variable is used to make sure we have an empty
     * space at either the beginning or the end of the intset. */</comment>
    <while>while<condition>(<expr><name>length</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>_intsetSet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>length</name><operator>+</operator><name>prepend</name></expr></argument>,<argument><expr><call><name>_intsetGetEncoded</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>length</name></expr></argument>,<argument><expr><name>curenc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <comment type="block">/* Set the value at the beginning or the end. */</comment>
    <if_stmt><if>if <condition>(<expr><name>prepend</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>_intsetSet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>_intsetSet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intsetMoveTail</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>-</operator><name>from</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>encoding</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>+</operator><name>from</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>+</operator><name>to</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytes</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>+</operator><name>from</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>+</operator><name>to</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytes</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>+</operator><name>from</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name><operator>+</operator><name>to</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytes</name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Insert an integer in the intset */</comment>
<function><type><name>intset</name> <modifier>*</modifier></type><name>intsetAdd</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>valenc</name> <init>= <expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Upgrade encoding if necessary. If we need to upgrade, we know that
     * this value should be either appended (if &gt; 0) or prepended (if &lt; 0),
     * because it lies outside the range of existing values. */</comment>
    <if_stmt><if>if <condition>(<expr><name>valenc</name> <operator>&gt;</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* This always succeeds, so we don't need to curry *success. */</comment>
        <return>return <expr><call><name>intsetUpgradeAndAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Abort if the value is already present in the set.
         * This call will populate "pos" with the right position to insert
         * the value when it cannot be found. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>intsetSearch</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>is</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetResize</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>intsetMoveTail</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>_intsetSet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Delete integer from intset */</comment>
<function><type><name>intset</name> <modifier>*</modifier></type><name>intsetRemove</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>valenc</name> <init>= <expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>valenc</name> <operator>&lt;=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>intsetSearch</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* We know we can delete */</comment>
        <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Overwrite value with tail and update length */</comment>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <operator>(</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>intsetMoveTail</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetResize</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Determine whether a value belongs to this set */</comment>
<function><type><name>uint8_t</name></type> <name>intsetFind</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>valenc</name> <init>= <expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>valenc</name> <operator>&lt;=</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>intsetSearch</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return random member */</comment>
<function><type><name>int64_t</name></type> <name>intsetRandom</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>_intsetGet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get the value at the given position. When this position is
 * out of range the function returns 0, when in range it returns 1. */</comment>
<function><type><name>uint8_t</name></type> <name>intsetGet</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>_intsetGet</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return intset length */</comment>
<function><type><name>uint32_t</name></type> <name>intsetLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return intset blob size in bytes. */</comment>
<function><type><name>size_t</name></type> <name>intsetBlobLen</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>intset</name></expr></argument>)</argument_list></sizeof><operator>+</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>*</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REDIS_TEST</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void intsetRepr(intset *is) {
    for (uint32_t i = 0; i &lt; intrev32ifbe(is-&gt;length); i++) {
        printf("%lld\n", (uint64_t)_intsetGet(is,i));
    }
    printf("\n");
}

static void error(char *err) {
    printf("%s\n", err);
    exit(1);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PORT_LONGLONG</name></type> <name>usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000000</literal><operator>)</operator><operator>+</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert</name><parameter_list>(<parameter><type><name>_e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_e)?(void)0:(_assert(#_e,__FILE__,__LINE__),exit(1)))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_assert</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>estr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\n=== ASSERTION FAILED ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"==&gt; %s:%d '%s' is not true\n"</literal></expr></argument>,<argument><expr><name>file</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>estr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>intset</name> <modifier>*</modifier></type><name>createSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><call><name>intsetNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>*</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkConsistency</name><parameter_list>(<parameter><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>encoding</name> <init>= <expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>i16</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>i16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>i16</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>i32</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>i32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>i32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>i64</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>contents</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>i64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>i64</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>intsetTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>success</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>intset</name> <modifier>*</modifier></type><name>is</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Value encodings: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">32767</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">32769</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">32768</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2147483648</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">2147483647</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2147483649</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">2147483648</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">9223372036854775808ull</literal></expr></argument>)</argument_list></call> <operator>==</operator>
                    <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_intsetValueEncoding</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">9223372036854775807ull</literal></expr></argument>)</argument_list></call> <operator>==</operator>
                    <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Basic adding: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Large number of random adds: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>inserts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">0x800</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>inserts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>inserts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Upgrade from int16 to int32: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">65535</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">65535</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Upgrade from int16 to int64: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">4294967295</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">4294967295</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">4294967295</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">4294967295</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Upgrade from int32 to int64: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">65535</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">4294967295</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">4294967295</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">65535</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">4294967295</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intrev32ifbe</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTSET_ENC_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">4294967295</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Stress lookups: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>num</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>createSet</name><argument_list>(<argument><expr><name>bits</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>intsetSearch</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld lookups, %ld element set, %lldusec\n"</literal></expr></argument>,
               <argument><expr><name>num</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><call><name>usec</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Stress add+delete: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0xffff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>v1</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>intsetRemove</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>v2</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>intsetFind</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>checkConsistency</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
