<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/rdb.c"><comment type="block">/*
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzf.h"</cpp:file></cpp:include>    <comment type="block">/* LZF compression library */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zipmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"endianconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_QFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXPATHLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rdbExitReportCorruptRDB</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rdbCheckThenExit(__LINE__,__VA_ARGS__)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>rdbCheckMode</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>rdbCheckError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rdbCheckSetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>WIN32_ONLY</name><argument_list>(<argument>__declspec(noreturn)</argument>)</argument_list></macro>
<function><type><name>void</name></type> <name>rdbCheckThenExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,
        <argument><expr><literal type="string">"Internal error in RDB reading function at rdb.c:%d -&gt; "</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><name>len</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>len</name></expr></argument>,<argument><expr><name>reason</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdbCheckMode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>,<expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>redis_check_rdb_main</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>rdbCheckError</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rdbWriteRaw</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rdb</name> <operator>&amp;&amp;</operator> <call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</return>                  <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<comment type="block">/* This is just a wrapper for the low level function rioRead() that will
 * automatically abort if it is not possible to read the specified amount
 * of bytes. */</comment>
<function><type><name>void</name></type> <name>rdbLoadRaw</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
            <argument><expr><literal type="string">"Impossible to read %llu bytes in rdbLoadRaw()"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return> <comment type="block">/* Not reached. */</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rdbSaveType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Load a "type" in RDB format, that is a one byte unsigned integer.
 * This function is not only used to load object types, but also special
 * "types" like the end-of-file type, the EXPIRE type, and so forth. */</comment>
<function><type><name>int</name></type> <name>rdbLoadType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is only used to load old databases stored with the RDB_OPCODE_EXPIRETIME
 * opcode. New versions of Redis store using the RDB_OPCODE_EXPIRETIME_MS
 * opcode. */</comment>
<function><type><name>time_t</name></type> <name>rdbLoadTime</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>t32</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rdbLoadRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t32</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>t32</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rdbSaveMillisecondTime</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t64</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>t</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Store in little endian. */</comment>
    <return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function loads a time from the RDB file. It gets the version of the
 * RDB because, unfortunately, before Redis 5 (RDB version 9), the function
 * failed to convert data to/from little endian, so RDB files with keys having
 * expires could not be shared between big endian and little endian systems
 * (because the expire time will be totally wrong). The fix for this is just
 * to call memrev64ifbe(), however if we fix this for all the RDB versions,
 * this call will introduce an incompatibility for big endian systems:
 * after upgrading to Redis version 5 they will no longer be able to load their
 * own old RDB files. Because of that, we instead fix the function only for new
 * RDB versions, and load older RDB versions as we used to do in the past,
 * allowing big endian systems to load their own old RDB files. */</comment>
<function><type><name>PORT_LONGLONG</name></type> <name>rdbLoadMillisecondTime</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdbver</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t64</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rdbLoadRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rdbver</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* Check the top comment of this function. */</comment>
        <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Convert in big endian if the system is BE. */</comment>
    <return>return <expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name>t64</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Saves an encoded length. The first two bits in the first byte are used to
 * hold the encoding type. See the RDB_* definitions for more information
 * on the types of encoding. */</comment>
<function><type><name>int</name></type> <name>rdbSaveLen</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a 6 bit len */</comment>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>RDB_6BITLEN</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a 14 bit len */</comment>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>RDB_14BITLEN</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a 32 bit len */</comment>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RDB_32BITLEN</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>len32</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len32</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Save a 64 bit len */</comment>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>RDB_64BITLEN</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>htonu64</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>nwritten</name></expr>;</return>                                                       <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>


<comment type="block">/* Load an encoded length. If the loaded length is a normal length as stored
 * with rdbSaveLen(), the read length is set to '*lenptr'. If instead the
 * loaded length describes a special encoding that follows, then '*isencoded'
 * is set to 1 and the encoding format is stored at '*lenptr'.
 *
 * See the RDB_ENC_* definitions in rdb.h for more information on special
 * encodings.
 *
 * The function returns -1 on error, 0 on success. */</comment>
<function><type><name>int</name></type> <name>rdbLoadLenByRef</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>isencoded</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isencoded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>isencoded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xC0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_ENCVAL</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read a 6 bit encoding type. */</comment>
        <if_stmt><if>if <condition>(<expr><name>isencoded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>isencoded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_6BITLEN</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read a 6 bit len. */</comment>
        <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_14BITLEN</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read a 14 bit len. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>RDB_32BITLEN</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read a 32 bit len. */</comment>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>RDB_64BITLEN</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read a 64 bit len. */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <call><name>ntohu64</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
            <argument><expr><literal type="string">"Unknown length encoding %d in rdbLoadLen()"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* Never reached. */</comment>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is like rdbLoadLenByRef() but directly returns the value read
 * from the RDB stream, signaling an error by returning RDB_LENERR
 * (since it is a too large count to be applicable in any Redis data
 * structure). */</comment>
<function><type><name>uint64_t</name></type> <name>rdbLoadLen</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>isencoded</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>rdbLoadLenByRef</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>isencoded</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RDB_LENERR</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Encodes the "value" argument as integer when it fits in the supported ranges
 * for encoded types. If the function successfully encodes the integer, the
 * representation is stored in the buffer pointer to by "enc" and the string
 * length is returned. Otherwise 0 is returned. */</comment>
<function><type><name>int</name></type> <name>rdbEncodeInteger</name><parameter_list>(<parameter><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_INT8</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_INT16</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">3</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_INT32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>enc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">5</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Loads an integer-encoded object with the specified encoding type "enctype".
 * The returned value changes according to the flags, see
 * rdbGenerincLoadStringObject() for more info. */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>rdbLoadIntegerObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enctype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>plain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_PLAIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sds</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_SDS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>encode</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_ENC</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>enc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>val</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enctype</name> <operator>==</operator> <name>RDB_ENC_INT8</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enctype</name> <operator>==</operator> <name>RDB_ENC_INT16</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>|</operator><operator>(</operator><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enctype</name> <operator>==</operator> <name>RDB_ENC_INT32</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>enc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>|</operator><operator>(</operator><name><name>enc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>enc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>enc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* anti-warning */</comment>
        <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB integer encoding type %d"</literal></expr></argument>,<argument><expr><name>enctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>plain</name> <operator>||</operator> <name>sds</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lenptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>plain</name></expr> ?</condition><then> <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>createStringObjectFromLongLongForValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsfromlonglong</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* String objects in the form "2391" "-100" without any space and with a
 * range of values that can fit in an 8, 16 or 32 bit signed value can be
 * encoded as integers to save space */</comment>
<function><type><name>int</name></type> <name>rdbTryIntegerEncoding</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Check if it's possible to encode this value as a number */</comment>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>endptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the number converted back into a string is not identical
     * then it's not possible to encode the string as integer */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>rdbEncodeInteger</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>rdbSaveLzfBlob</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>compress_len</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>original_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Data compressed! Let's save it on disk */</comment>
    <expr_stmt><expr><name>byte</name> <operator>=</operator> <operator>(</operator><name>RDB_ENCVAL</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator><operator>|</operator><name>RDB_ENC_LZF</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>compress_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>original_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>compress_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>writeerr</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return <expr><name>nwritten</name></expr>;</return>

<label><name>writeerr</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>rdbSaveLzfStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>comprlen</name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

    <comment type="block">/* We require at least four bytes compression for this to be worth it */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>outlen</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>outlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>comprlen</name> <operator>=</operator> <call><name>lzf_compress</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>comprlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>nwritten</name> <init>= <expr><call><name>rdbSaveLzfBlob</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>comprlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Load an LZF compressed string in RDB format. The returned value
 * changes according to 'flags'. For more info check the
 * rdbGenericLoadStringObject() function. */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>rdbLoadLzfStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>plain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_PLAIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sds</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_SDS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>clen</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>clen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Allocate our target according to the uncompressed size. */</comment>
    <if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>lenptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Load the compressed representation and uncompress it to target. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>clen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>lzf_decompress</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>clen</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rdbCheckMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rdbCheckSetError</name><argument_list>(<argument><expr><literal type="string">"Invalid LZF compressed string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <goto>goto <name>err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>plain</name> <operator>||</operator> <name>sds</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>val</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
<label><name>err</name>:</label>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save a string object as [len][data] on disk. If the object is a string
 * representation of an integer value we try to save it in a special form */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveRawString</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>enclen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Try integer encoding */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>enclen</name> <operator>=</operator> <call><name>rdbTryIntegerEncoding</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>enclen</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Try LZF compression - under 20 bytes it's unable to compress even
     * aaaaaaaaaaaaaaaaaa so skip it */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_compression</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rdbSaveLzfStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block">/* Return value of 0 means data can't be compressed, save the old way */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Store verbatim */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save a long long value as either an encoded string or a string. */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveLongLongAsStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>enclen</name> <init>= <expr><call><name>rdbEncodeInteger</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>enclen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Encode as string */</comment>
        <expr_stmt><expr><name>enclen</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>enclen</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>enclen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like rdbSaveRawString() gets a Redis object instead. */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Avoid to decode the object, then encode it again, if the
     * object is already integer encoded. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>rdbSaveLongLongAsStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>obj</name></expr></argument>,<argument><expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Load a string object from an RDB file according to flags:
 *
 * RDB_LOAD_NONE (no flags): load an RDB object, unencoded.
 * RDB_LOAD_ENC: If the returned type is a Redis object, try to
 *               encode it in a special way to be more memory
 *               efficient. When this flag is passed the function
 *               no longer guarantees that obj-&gt;ptr is an SDS string.
 * RDB_LOAD_PLAIN: Return a plain string allocated with zmalloc()
 *                 instead of a Redis object with an sds in it.
 * RDB_LOAD_SDS: Return an SDS string instead of a Redis object.
 *
 * On I/O error NULL is returned.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>rdbGenericLoadStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>encode</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_ENC</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>plain</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_PLAIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sds</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RDB_LOAD_SDS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>isencoded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>isencoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isencoded</name></expr>)</condition> <block>{<block_content>
        <switch>switch<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>RDB_ENC_INT8</name></expr>:</case>
        <case>case <expr><name>RDB_ENC_INT16</name></expr>:</case>
        <case>case <expr><name>RDB_ENC_INT32</name></expr>:</case>
            <return>return <expr><call><name>rdbLoadIntegerObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>lenptr</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>RDB_ENC_LZF</name></expr>:</case>
            <return>return <expr><call><name>rdbLoadLzfStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>lenptr</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB string encoding type %d"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>plain</name> <operator>||</operator> <name>sds</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><ternary><condition><expr><name>plain</name></expr> ?</condition><then> <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lenptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>plain</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>buf</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><call><name>createStringObject</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>:
                           <expr><call><name>createRawStringObject</name><argument_list>(<argument><expr><name>SDS_NOINIT</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_NONE</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadEncodedStringObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_ENC</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save a double value. Doubles are saved as strings prefixed by an unsigned
 * 8 bit integer specifying the length of the representation.
 * This 8 bit integer has special values in order to specify the following
 * conditions:
 * 253: not a number
 * 254: + inf
 * 255: - inf
 */</comment>
<function><type><name>int</name></type> <name>rdbSaveDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">253</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">254</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DBL_MANT_DIG</name> <operator>&gt;=</operator> <literal type="number">52</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>LLONG_MAX</name> <operator>==</operator> <literal type="number">0x7fffffffffffffffLL</literal><operator>)</operator></expr></cpp:if>
        <comment type="block">/* Check if the float is in a safe range to be casted into a
         * long long. We are assuming that long long is 64 bit here.
         * Also we are assuming that there are no implementations around where
         * double has precision &lt; 52 bit.
         *
         * Under this assumptions we test if a double is inside an interval
         * where casting to long long is safe. Then using two castings we
         * make sure the decimal part is zero. If all this is true we use
         * integer printing function that is much faster. */</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> <init>= <expr><operator>-</operator><literal type="number">4503599627370495</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* (2^52)-1 */</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> <init>= <expr><literal type="number">4503599627370496</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* -(2^52) */</comment>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>min</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name>val</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (unsigned char) */</comment>
        <name>len</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For information about double serialization check rdbSaveDoubleValue() */</comment>
<function><type><name>int</name></type> <name>rdbLoadDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>double</name></type> <name>scannedVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>assigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <switch>switch<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">255</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>R_NegInf</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
    <case>case <expr><literal type="number">254</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>R_PosInf</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
    <case>case <expr><literal type="number">253</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>R_Nan</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
    <default>default:</default>
        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <expr_stmt><expr><name>assigned</name> <operator>=</operator> <call><name>sscanf_s</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lg"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scannedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>assigned</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator> <operator>=</operator> <name>scannedVal</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lg"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Saves a double for RDB 8 or greater, where IE754 binary64 format is assumed.
 * We just make sure the integer is always stored in little endian, otherwise
 * the value is copied verbatim from memory to disk.
 *
 * Return -1 on error, the size of the serialized value on success. */</comment>
<function><type><name>int</name></type> <name>rdbSaveBinaryDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Loads a double from RDB 8 or greater. See rdbSaveBinaryDoubleValue() for
 * more info. On error -1 is returned, otherwise 0. */</comment>
<function><type><name>int</name></type> <name>rdbLoadBinaryDoubleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like rdbSaveBinaryDoubleValue() but single precision. */</comment>
<function><type><name>int</name></type> <name>rdbSaveBinaryFloatValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like rdbLoadBinaryDoubleValue() but single precision. */</comment>
<function><type><name>int</name></type> <name>rdbLoadBinaryFloatValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memrev32ifbe</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save the object type of object "o". */</comment>
<function><type><name>int</name></type> <name>rdbSaveObjectType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OBJ_STRING</name></expr>:</case>
        <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>OBJ_LIST</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_LIST_QUICKLIST</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown list encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <case>case <expr><name>OBJ_SET</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_SET_INTSET</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_SET</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <case>case <expr><name>OBJ_ZSET</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_ZSET_ZIPLIST</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_ZSET_2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown sorted set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <case>case <expr><name>OBJ_HASH</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_HASH_ZIPLIST</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_HASH</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown hash encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <case>case <expr><name>OBJ_STREAM</name></expr>:</case>
        <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_STREAM_LISTPACKS</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>OBJ_MODULE</name></expr>:</case>
        <return>return <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_TYPE_MODULE_2</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* avoid warning */</comment>
</block_content>}</block></function>

<comment type="block">/* Use rdbLoadType() to load a TYPE in RDB format, but returns -1 if the
 * type is not specifically a valid Object Type. */</comment>
<function><type><name>int</name></type> <name>rdbLoadObjectType</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>rdbLoadType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rdbIsObjectType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This helper function serializes a consumer group Pending Entries List (PEL)
 * into the RDB file. The 'nacks' argument tells the function if also persist
 * the informations about the not acknowledged message, or if to persist
 * just the IDs: this is useful because for the global consumer group PEL
 * we serialized the NACKs as well, but when serializing the local consumer
 * PELs we just add the ID, that will be resolved inside the global PEL to
 * put a reference to the same structure. */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveStreamPEL</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>pel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nacks</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Number of entries in the PEL. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name>pel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <comment type="block">/* Save each entry. */</comment>
    <decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>pel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* We store IDs in raw form as 128 big big endian numbers, like
         * they are inside the radix tree key. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>nacks</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_time</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_count</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            <comment type="block">/* We don't save the consumer name: we'll save the pending IDs
             * for each consumer in the consumer PEL, and resolve the consumer
             * at loading time. */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Serialize the consumers of a stream consumer group into the RDB. Helper
 * function for the stream data type serialization. What we do here is to
 * persist the consumer metadata, and it's PEL, for each consumer. */</comment>
<function><type><name>size_t</name></type> <name>rdbSaveStreamConsumers</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Number of consumers in this consumer group. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <comment type="block">/* Save each consumer. */</comment>
    <decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>streamConsumer</name> <modifier>*</modifier></type><name>consumer</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Consumer name. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        <comment type="block">/* Last seen time. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>consumer</name><operator>-&gt;</operator><name>seen_time</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        <comment type="block">/* Consumer PEL, without the ACKs (see last parameter of the function
         * passed with value of 0), at loading time we'll lookup the ID
         * in the consumer group global PEL and will put a reference in the
         * consumer local PEL. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStreamPEL</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>consumer</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save a Redis object.
 * Returns -1 on error, number of bytes written on success. */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveObject</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a string value */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a list value */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>ql</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ql</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

            <while>while<condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>quicklistNodeIsCompressed</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>size_t</name></type> <name>compress_len</name> <init>= <expr><call><name>quicklistGetLzf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLzfBlob</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>compress_len</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>zl</name></name></expr></argument>,<argument><expr><name><name>node</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown list encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a set value */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

            <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>ele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>ele</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>intsetBlobLen</name><argument_list>(<argument><expr><operator>(</operator><name>intset</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a sorted set value */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>ziplistBlobLen</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>zskiplist</name> <modifier>*</modifier></type><name>zsl</name> <init>= <expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>zsl</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

            <comment type="block">/* We save the skiplist elements from the greatest to the smallest
             * (that's trivial since the elements are already ordered in the
             * skiplist): this improves the load process, since the next loaded
             * element will always be the smaller, so adding to the skiplist
             * will always immediately stop at the head, making the insertion
             * O(1) instead of O(log(N)). */</comment>
            <decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>zn</name> <init>= <expr><name><name>zsl</name><operator>-&gt;</operator><name>tail</name></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>zn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>zn</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>zn</name><operator>-&gt;</operator><name>ele</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveBinaryDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>zn</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>zn</name> <operator>=</operator> <name><name>zn</name><operator>-&gt;</operator><name>backward</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown sorted set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a hash value */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>ziplistBlobLen</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

            <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>field</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sds</name></type> <name>value</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>field</name></expr></argument>,
                        <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>,
                        <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown hash encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Store how many listpacks we have inside the radix tree. */</comment>
        <decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        <comment type="block">/* Serialize all the listpacks inside the radix tree as they are,
         * when loading back, we'll use the first entry of each listpack
         * to insert it back into the radix tree. */</comment>
        <decl_stmt><decl><type><name>raxIterator</name></type> <name>ri</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>lp_bytes</name> <init>= <expr><call><name>lpBytes</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>lp</name></expr></argument>,<argument><expr><name>lp_bytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Save the number of elements inside the stream. We cannot obtain
         * this easily later, since our macro nodes should be checked for
         * number of items: not a great CPU / space tradeoff. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <comment type="block">/* Save the last entry ID. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        <comment type="block">/* The consumer groups and their clients are part of the stream
         * type, so serialize every consumer group. */</comment>

        <comment type="block">/* Save the number of groups. */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>num_cgroups</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr> ?</condition><then> <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>num_cgroups</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>num_cgroups</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Serialize each consumer group. */</comment>
            <expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>,<argument><expr><literal type="string">"^"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cg</name> <init>= <expr><name><name>ri</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

                <comment type="block">/* Save the group name. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

                <comment type="block">/* Last ID. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

                <comment type="block">/* Save the global PEL. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStreamPEL</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>cg</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

                <comment type="block">/* Save the consumers of this group. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rdbSaveStreamConsumers</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>cg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Save a module-specific value. */</comment>
        <decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Write the "module" identifier as prefix, so that we'll be able
         * to call the right module during loading. */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Then write the module-specific representation + EOF marker. */</comment>
        <expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>rdb_save</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_MODULE_OPCODE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>io</name><operator>.</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name><name>io</name><operator>.</operator><name>error</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>io</name><operator>.</operator><name>bytes</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the length the object will have on disk if saved with
 * the rdbSaveObject() function. Currently we use a trick to get
 * this length with very little changes to the code. In the future
 * we could switch to a faster solution. */</comment>
<function><type><name>size_t</name></type> <name>rdbSavedObjectLen</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>rdbSaveObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save a key-value pair, with expire time, type, key, value.
 * On error -1 is returned.
 * On success if the key was actually saved 1 is returned, otherwise 0
 * is returned (the key was already expired). */</comment>
<function><type><name>int</name></type> <name>rdbSaveKeyValuePair</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>expiretime</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>savelru</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LRU</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>savelfu</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>&amp;</operator> <name>MAXMEMORY_FLAG_LFU</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Save the expire time */</comment>
    <if_stmt><if>if <condition>(<expr><name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_EXPIRETIME_MS</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>expiretime</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Save the LRU info. */</comment>
    <if_stmt><if>if <condition>(<expr><name>savelru</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>idletime</name> <init>= <expr><call><name>estimateObjectIdleTime</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>idletime</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt> <comment type="block">/* Using seconds is enough and requires less space.*/</comment>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_IDLE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>idletime</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Save the LFU info. */</comment>
    <if_stmt><if>if <condition>(<expr><name>savelfu</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LFUDecrAndReturn</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* We can encode this in exactly two bytes: the opcode and an 8
         * bit counter, since the frequency is logarithmic with a 0-255 range.
         * Note that we do not store the halving time because to reset it
         * a single time when loading does not affect the frequency much. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_FREQ</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Save type, key, value */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveObjectType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save an AUX field. */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveAuxField</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vallen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_AUX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keylen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rdbSaveRawString</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><name>vallen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wrapper for rdbSaveAuxField() used when key/val length can be obtained
 * with strlen(). */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveAuxFieldStrStr</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>rdbSaveAuxField</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>val</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wrapper for strlen(key) + integer type (up to long long range). */</comment>
<function><type><name>ssize_t</name></type> <name>rdbSaveAuxFieldStrInt</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vlen</name> <init>= <expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>rdbSaveAuxField</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save a few default AUX fields with information about the RDB generated. */</comment>
<function><type><name>int</name></type> <name>rdbSaveInfoAuxFields</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>redis_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>aof_preamble</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RDB_SAVE_AOF_PREAMBLE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Add a few fields about the state when the RDB was created. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrStr</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"redis-ver"</literal></expr></argument>,<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"redis-bits"</literal></expr></argument>,<argument><expr><name>redis_bits</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"ctime"</literal></expr></argument>,<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"used-mem"</literal></expr></argument>,<argument><expr><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Handle saving options that generate aux fields. */</comment>
    <if_stmt><if>if <condition>(<expr><name>rsi</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"repl-stream-db"</literal></expr></argument>,<argument><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name></expr></argument>)</argument_list></call>
            <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrStr</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"repl-id"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>replid</name></name></expr></argument>)</argument_list></call>
            <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"repl-offset"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>master_repl_offset</name></name></expr></argument>)</argument_list></call>
            <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxFieldStrInt</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"aof-preamble"</literal></expr></argument>,<argument><expr><name>aof_preamble</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>rdbSaveSingleModuleAux</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Save a module-specific aux value. */</comment>
    <decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>RDB_OPCODE_MODULE_AUX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <expr_stmt><expr><name>WIN_PORT_FIX</name> <comment type="block">/*moved earlier before first usage of "io"*/</comment>
    <name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

    <comment type="block">/* Write the "module" identifier as prefix, so that we'll be able
     * to call the right module during loading. */</comment>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name><name>mt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

    <comment type="block">/* write the 'when' so that we can provide it on loading. add a UINT opcode
     * for backwards compatibility, everything after the MT needs to be prefixed
     * by an opcode. */</comment>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_MODULE_OPCODE_UINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>

    <comment type="block">/* Then write the module-specific representation + EOF marker. */</comment>
    <expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>aux_save</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_MODULE_OPCODE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>io</name><operator>.</operator><name>bytes</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Produces a dump of the database in RDB format sending it to the specified
 * Redis I/O channel. On success C_OK is returned, otherwise C_ERR
 * is returned and part of the output, or all the output, can be
 * missing because of I/O errors.
 *
 * When the function returns C_ERR and if 'error' is not NULL, the
 * integer pointed by 'error' is set to the value of errno just after the I/O
 * error. */</comment>
<function><type><name>int</name></type> <name>rdbSaveRio</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>cksum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>rdb</name><operator>-&gt;</operator><name>update_cksum</name></name> <operator>=</operator> <name>rioGenericUpdateChecksum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>magic</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"REDIS%04d"</literal></expr></argument>,<argument><expr><name>RDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbWriteRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>magic</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveInfoAuxFields</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveModulesAux</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>REDISMODULE_AUX_BEFORE_RDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Write the SELECT DB opcode */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_SELECTDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Write the RESIZE DB opcode. We trim the size to UINT32_MAX, which
         * is currently the largest type we are able to represent in RDB sizes.
         * However this does not limit the actual size of the DB to load since
         * these sizes are just hints to resize the hash tables. */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>db_size</name></decl>, <decl><type ref="prev"/><name>expires_size</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>db_size</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expires_size</name> <operator>=</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_RESIZEDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>db_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSaveLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>expires_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Iterate this DB writing every entry */</comment>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>keystr</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>robj</name></type> <name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>expire</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>initStaticStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>expire</name> <operator>=</operator> <call><name>getExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>rdbSaveKeyValuePair</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>expire</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* When this RDB is produced as part of an AOF rewrite, move
             * accumulated diff from parent to child while rewriting in
             * order to have a smaller final write. */</comment>
            <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RDB_SAVE_AOF_PREAMBLE</name> <operator>&amp;&amp;</operator>
                <name><name>rdb</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>&gt;</operator> <name>processed</name><operator>+</operator><name>AOF_READ_DIFF_INTERVAL_BYTES</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>processed</name> <operator>=</operator> <name><name>rdb</name><operator>-&gt;</operator><name>processed_bytes</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>aofReadDiffFromParent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* So that we don't release it again on error. */</comment>
    </block_content>}</block></for>

    <comment type="block">/* If we are storing the replication information on disk, persist
     * the script cache as well: on successful PSYNC after a restart, we need
     * to be able to process any EVALSHA inside the replication backlog the
     * master will send us. */</comment>
    <if_stmt><if>if <condition>(<expr><name>rsi</name> <operator>&amp;&amp;</operator> <call><name>dictSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>lua_scripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>body</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>rdbSaveAuxField</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"lua"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>body</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* So that we don't release it again on error. */</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveModulesAux</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>REDISMODULE_AUX_AFTER_RDB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* EOF opcode */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_OPCODE_EOF</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* CRC64 checksum. It will be zero if checksum computation is disabled, the
     * loading code skips the check in this case. */</comment>
    <expr_stmt><expr><name>cksum</name> <operator>=</operator> <name><name>rdb</name><operator>-&gt;</operator><name>cksum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>

<label><name>werr</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>di</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is just a wrapper to rdbSaveRio() that additionally adds a prefix
 * and a suffix to the generated RDB dump. The prefix is:
 *
 * $EOF:&lt;40 bytes unguessable hex string&gt;\r\n
 *
 * While the suffix is the 40 bytes hex string we announced in the prefix.
 * This way processes receiving the payload can understand when it ends
 * without doing any processing of the content. */</comment>
<function><type><name>int</name></type> <name>rdbSaveRioWithEOFMark</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>eofmark</name><index>[<expr><name>RDB_EOF_MARK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>RDB_EOF_MARK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"$EOF:"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>RDB_EOF_MARK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveRio</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>error</name></expr></argument>,<argument><expr><name>RDB_SAVE_NONE</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>eofmark</name></expr></argument>,<argument><expr><name>RDB_EOF_MARK_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>

<label><name>werr</name>:</label> <comment type="block">/* Write error. */</comment>
    <comment type="block">/* Set 'error' only if not already set by rdbSaveRio() call. */</comment>
    <if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save the DB on disk. Return C_ERR on error, C_OK on success. */</comment>
<function><type><name>int</name></type> <name>rdbSave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpfile</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cwd</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* Current working dir path for error messages. */</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rio</name></type> <name>rdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>,<argument><expr><literal type="string">"temp-%d.rdb"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>tmpfile[sizeof(tmpfile) - <literal type="number">1</literal>] = <literal type="number">0</literal>;</argument>)</argument_list></macro> <comment type="block">/*get rid of C6053 warning*/</comment>
    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><literal type="string">"wb"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwdp</name> <init>= <expr><call><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_getcwd</name></expr></argument>, <argument><expr><name>getcwd</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Failed opening the RDB file %s (in server root dir %s) "</literal>
            <literal type="string">"for saving: %s"</literal></expr></argument>,
            <argument><expr><name>filename</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>cwdp</name></expr> ?</condition><then> <expr><name>cwdp</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>rioInitWithFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>rioSetAutoSync</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>REDIS_AUTOSYNC_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>rdbSaveRio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,<argument><expr><name>RDB_SAVE_NONE</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
        <goto>goto <name>werr</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Make sure data will not remain on the OS's output buffers */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Use RENAME to make sure the DB file is changed atomically only
     * if the generate DB file is ok. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwdp</name> <init>= <expr><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>,<argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Error moving temp DB file %s on the final "</literal>
            <literal type="string">"destination %s (in server root dir %s): %s"</literal></expr></argument>,
            <argument><expr><name>tmpfile</name></expr></argument>,
            <argument><expr><name>filename</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>cwdp</name></expr> ?</condition><then> <expr><name>cwdp</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"DB saved on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>

<label><name>werr</name>:</label>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Write error saving DB on disk: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rdbSaveBackground</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>childpid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty_before_bgsave</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_try</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>openChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><name>childpid</name> <operator>=</operator> <call><name>BeginForkOperation_Rdb</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>dictGetHashFunctionSeed</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>childpid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

        <comment type="block">/* Child */</comment>
        <expr_stmt><expr><call><name>closeListeningSockets</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><literal type="string">"redis-rdb-bgsave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSave</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>private_dirty</name> <init>= <expr><call><name>zmalloc_get_private_dirty</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>private_dirty</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
                    <argument><expr><literal type="string">"RDB: %zu MB of memory used by copy-on-write"</literal></expr></argument>,
                    <argument><expr><name>private_dirty</name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>cow_size</name></name> <operator>=</operator> <name>private_dirty</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendChildInfo</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_RDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="block">/* Parent */</comment>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr>;</expr_stmt>
<comment type="line">//[tporadowski/redis] issue #46: ustime() -&gt; gettimeofday_highres() uses GetSystemTimePreciseAsFileTime when available (Windows 8, Windows Server 2012) or</comment>
<comment type="line">//                    falls back to GetSystemTimeAsFileTime which does not have such high resolution, so "stat_fork_time" may be 0 here</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt> <comment type="line">//let's pretend it took 100ms (100000 microseconds)</comment>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_rate</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* GB per second. */</comment>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type>
        <name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"fork"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't save in background: fork: %s"</literal></expr></argument>,
                <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>C_ERR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Background saving started by pid %d"</literal></expr></argument>,<argument><expr><name>childpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <name>childpid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_DISK</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>C_OK</name></expr>;</return> <comment type="block">/* unreached */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rdbRemoveTempFile</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>childpid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpfile</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"temp-%d.rdb"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>childpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>tmpfile[sizeof(tmpfile) - <literal type="number">1</literal>] = <literal type="number">0</literal>;</argument>)</argument_list></macro> <comment type="block">/*get rid of C6053 warning*/</comment>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is called by rdbLoadObject() when the code is in RDB-check
 * mode and we find a module value of type 2 that can be parsed without
 * the need of the actual module. The value is parsed for errors, finally
 * a dummy redis object is returned just to conform to the API. */</comment>
<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadCheckModuleValue</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>modulename</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>opcode</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>opcode</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>RDB_MODULE_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_SINT</name> <operator>||</operator>
            <name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_UINT</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>rdbLoadLenByRef</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                    <argument><expr><literal type="string">"Error reading integer from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_STRING</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_NONE</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                    <argument><expr><literal type="string">"Error reading string from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_FLOAT</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>rdbLoadBinaryFloatValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                    <argument><expr><literal type="string">"Error reading float from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>RDB_MODULE_OPCODE_DOUBLE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>rdbLoadBinaryDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                    <argument><expr><literal type="string">"Error reading double from module %s value"</literal></expr></argument>, <argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name>createStringObject</name><argument_list>(<argument><expr><literal type="string">"module-dummy-value"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Load a Redis object of the specified type from the specified file.
 * On success a newly allocated object is returned, otherwise NULL. */</comment>
<function><type><name>robj</name> <modifier>*</modifier></type><name>rdbLoadObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rdbtype</name></decl></parameter>, <parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ele</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_STRING</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read string value */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>rdbLoadEncodedStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>tryObjectEncoding</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read list value */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createQuicklistObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>quicklistSetOptions</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_max_ziplist_size</name></name></expr></argument>,
                            <argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Load every single element of the list */</comment>
        <while>while<condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ele</name> <operator>=</operator> <call><name>rdbLoadEncodedStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>quicklistPushTail</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_SET</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read Set value */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Use a regular set when there are too many entries. */</comment>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createSetObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* It's faster to expand the dict to the right size asap in order
             * to avoid rehashing */</comment>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createIntsetObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Load every single element of the set */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>llval</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sdsele</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INTSET</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Fetch integer value from element. */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>isSdsRepresentableAsLongLong</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>llval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>intsetAdd</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>llval</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* This will also be called when the set was just converted
             * to a regular hash table encoded set. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_2</name> <operator>||</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Read list/set value. */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>zsetlen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>maxelelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>zsetlen</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createZsetObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zs</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>zsetlen</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>zsetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Load every single element of the sorted set. */</comment>
        <while>while<condition>(<expr><name>zsetlen</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>zskiplistNode</name> <modifier>*</modifier></type><name>znode</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sdsele</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_2</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>rdbLoadBinaryDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>rdbLoadDoubleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Don't care about integer-encoded strings. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxelelen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxelelen</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>znode</name> <operator>=</operator> <call><name>zslInsert</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>zsl</name></name></expr></argument>,<argument><expr><name>score</name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>znode</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Convert *after* loading, since sorted sets are not stored ordered. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>zset_max_ziplist_entries</name></name> <operator>&amp;&amp;</operator>
            <name>maxelelen</name> <operator>&lt;=</operator> <name><name>server</name><operator>.</operator><name>zset_max_ziplist_value</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>zsetConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_ZIPLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>field</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createHashObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Too many entries? Use a hash table. */</comment>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Load every field and value into the ziplist */</comment>
        <while>while <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_ZIPLIST</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
            <comment type="block">/* Load raw strings */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>field</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/* Add pair to ziplist */</comment>
            <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>field</name></expr></argument>,
                    <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>,
                    <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Convert to hash table if size threshold is exceeded */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name> <operator>||</operator>
                <call><name>sdslen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name>DICT_HT_INITIAL_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Load remaining fields and values into the hash table */</comment>
        <while>while <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_HT</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
            <comment type="block">/* Load encoded strings */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>field</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/* Add pair to hash table */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DICT_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicate keys detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* All pairs should be read by now */</comment>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_QUICKLIST</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createQuicklistObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>quicklistSetOptions</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>list_max_ziplist_size</name></name></expr></argument>,
                            <argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>=
                <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_PLAIN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>zl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>quicklistAppendZiplist</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>zl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH_ZIPMAP</name>  <operator>||</operator>
               <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_LIST_ZIPLIST</name> <operator>||</operator>
               <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_SET_INTSET</name>   <operator>||</operator>
               <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_ZSET_ZIPLIST</name> <operator>||</operator>
               <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_HASH_ZIPLIST</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encoded</name> <init>=
            <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_PLAIN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>encoded</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Obj type fixed below. */</comment>

        <comment type="block">/* Fix the object encoding, and make sure to convert the encoded
         * data type into the base type if accordingly to the current
         * configuration there are too many elements in the encoded data
         * type. Note that we only check the length and not max element
         * size as this is an O(N) scan. Eventually everything will get
         * converted. */</comment>
        <switch>switch<condition>(<expr><name>rdbtype</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>RDB_TYPE_HASH_ZIPMAP</name></expr>:</case>
                <comment type="block">/* Convert to ziplist encoded hash. This must be deprecated
                 * when loading dumps created by Redis 2.4 gets deprecated. */</comment>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><call><name>ziplistNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><call><name>zipmapRewind</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                    <while>while <condition>(<expr><operator>(</operator><name>zi</name> <operator>=</operator> <call><name>zipmapNext</name><argument_list>(<argument><expr><name>zi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>flen</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><name>fstr</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>ziplistPush</name><argument_list>(<argument><expr><name>zl</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>ZIPLIST_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>

                    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>zl</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_HASH</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name> <operator>||</operator>
                        <name>maxlen</name> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><name>RDB_TYPE_LIST_ZIPLIST</name></expr>:</case>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_LIST</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>listTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_QUICKLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RDB_TYPE_SET_INTSET</name></expr>:</case>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_SET</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_INTSET</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>intsetLen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>setTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>RDB_TYPE_ZSET_ZIPLIST</name></expr>:</case>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_ZSET</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>zset_max_ziplist_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>zsetConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_ENCODING_SKIPLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>RDB_TYPE_HASH_ZIPLIST</name></expr>:</case>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>OBJ_HASH</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>hashTypeConvert</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OBJ_ENCODING_HT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB encoding type %d"</literal></expr></argument>,<argument><expr><name>rdbtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_STREAM_LISTPACKS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createStreamObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>stream</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>listpacks</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while<condition>(<expr><name>listpacks</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Get the master ID, the one we'll use as key of the radix tree
             * node: the entries inside the listpack itself are delta-encoded
             * relatively to this ID. */</comment>
            <decl_stmt><decl><type><name>sds</name></type> <name>nodekey</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nodekey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Stream master ID loading failed: invalid encoding or I/O error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Stream node key entry is not the "</literal>
                                        <literal type="string">"size of a stream ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Load the listpack. */</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lp</name> <init>=
                <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_PLAIN</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>lp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name>lpFirst</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Serialized listpacks should never be empty, since on
                 * deletion we should remove the radix tree key if the
                 * resulting listpack is empty. */</comment>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Empty listpack inside stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Insert the key in the radix tree. */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rax</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>nodekey</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>lp</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>nodekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Listpack re-added with existing key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <comment type="block">/* Load total number of items inside the stream. */</comment>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Load the last entry ID. */</comment>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_id</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Consumer groups loading */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>cgroups_count</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>cgroups_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Get the consumer group name and ID. We can then create the
             * consumer group ASAP and populate its structure as
             * we read more data. */</comment>
            <decl_stmt><decl><type><name>streamID</name></type> <name>cg_id</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sds</name></type> <name>cgname</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cgname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                    <argument><expr><literal type="string">"Error reading the consumer group name from Stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>cg_id</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cg_id</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>streamCG</name> <modifier>*</modifier></type><name>cgroup</name> <init>= <expr><call><name>streamCreateCG</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>cgname</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>cg_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicated consumer group name %s"</literal></expr></argument>,
                                         <argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Load the global PEL for this consumer group, however we'll
             * not yet populate the NACK structures with the message
             * owner, since consumers for this group and their messages will
             * be read as a next step. So for now leave them not resolved
             * and later populate it. */</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>pel_size</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>pel_size</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rawid</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>rdbLoadRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><call><name>streamCreateNACK</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_time</name></name> <operator>=</operator> <call><name>rdbLoadMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>delivery_count</name></name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>cgroup</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>nack</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicated gobal PEL entry "</literal>
                                            <literal type="string">"loading stream consumer group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></while>

            <comment type="block">/* Now that we loaded our global PEL, we need to load the
             * consumers and their local PELs. */</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>consumers_num</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>consumers_num</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>cname</name> <init>= <expr><call><name>rdbGenericLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_LOAD_SDS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                        <argument><expr><literal type="string">"Error reading the consumer name from Stream group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>streamConsumer</name> <modifier>*</modifier></type><name>consumer</name> <init>=
                    <expr><call><name>streamLookupConsumer</name><argument_list>(<argument><expr><name>cgroup</name></expr></argument>,<argument><expr><name>cname</name></expr></argument>,<argument><expr><name>SLC_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>consumer</name><operator>-&gt;</operator><name>seen_time</name></name> <operator>=</operator> <call><name>rdbLoadMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>RDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Load the PEL about entries owned by this specific
                 * consumer. */</comment>
                <expr_stmt><expr><name>pel_size</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while>while<condition>(<expr><name>pel_size</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rawid</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>streamID</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>rdbLoadRaw</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>streamNACK</name> <modifier>*</modifier></type><name>nack</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>cgroup</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>nack</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Consumer entry not found in "</literal>
                                                <literal type="string">"group global PEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="block">/* Set the NACK consumer, that was left to NULL when
                     * loading the global PEL. Then set the same shared
                     * NACK structure also in the consumer-specific PEL. */</comment>
                    <expr_stmt><expr><name><name>nack</name><operator>-&gt;</operator><name>consumer</name></name> <operator>=</operator> <name>consumer</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>consumer</name><operator>-&gt;</operator><name>pel</name></name></expr></argument>,<argument><expr><name>rawid</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rawid</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>nack</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Duplicated consumer PEL entry "</literal>
                                                <literal type="string">" loading a stream consumer "</literal>
                                                <literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block></while>
        </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE</name> <operator>||</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE_2</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>moduleid</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>moduleTypeLookupModuleByID</name><argument_list>(<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>rdbCheckMode</name> <operator>&amp;&amp;</operator> <name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE_2</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>rdbLoadCheckModuleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>mt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module data I can't load: no matching module '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rdbtype</name> <operator>==</operator> <name>RDB_TYPE_MODULE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <comment type="block">/* Call the rdb_load method of the module providing the 10 bit
         * encoding version in the lower 10 bits of the module ID. */</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name><name>mt</name><operator>-&gt;</operator><name>rdb_load</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>moduleid</name><operator>&amp;</operator><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Module v2 serialization has an EOF mark at the end. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>eof</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>eof</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module data for the module '%s' that is not terminated by the proper module value EOF marker"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module data for the module type '%s', that the responsible module is not able to load. Check for modules log above for additional clues."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createModuleObject</name><argument_list>(<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB encoding type %d"</literal></expr></argument>,<argument><expr><name>rdbtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Mark that we are loading in the global state and setup the fields
 * needed to provide loading stats. */</comment>
<function><type><name>void</name></type> <name>startLoading</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>IF_WIN32</name></name></type><argument_list>(<argument><expr><name>_stat64</name></expr></argument>,<argument><expr><name>stat</name></expr></argument>)</argument_list> <name>sb</name></decl>;</decl_stmt>                                           <comment type="line">// TODO: verify for 32-bit</comment>

    <comment type="block">/* Load the DB */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_start_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_total_bytes</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Refresh the loading progress info */</comment>
<function><type><name>void</name></type> <name>loadingProgress</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading_loaded_bytes</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>&lt;</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_peak_memory</name></name> <operator>=</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Loading finished */</comment>
<function><type><name>void</name></type> <name>stopLoading</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Track loading progress in order to serve client's from time to time
   and if needed calculate rdb checksum  */</comment>
<function><type><name>void</name></type> <name>rdbLoadProgressCallback</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>rioGenericUpdateChecksum</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name> <operator>+</operator> <name>len</name><operator>)</operator><operator>/</operator><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name><operator>/</operator><name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* The DB can take some non trivial amount of time to load. Update
         * our cached time since it is used to create and update the last
         * interaction time with clients and for other important things. */</comment>
        <expr_stmt><expr><call><name>updateCachedTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>==</operator> <name>REPL_STATE_TRANSFER</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>replicationSendNewlineToMaster</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>loadingProgress</name><argument_list>(<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>processed_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                             <function_decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (off_t) */</comment>
        <name>processEventsWhileBlocked</name><parameter_list>()</parameter_list>;</function_decl>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Load an RDB file from the rio stream 'rdb'. On success C_OK is returned,
 * otherwise C_ERR is returned and 'errno' is set accordingly. */</comment>
<function><type><name>int</name></type> <name>rdbLoadRio</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loading_aof</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>dbid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>rdbver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>rdb</name><operator>-&gt;</operator><name>update_cksum</name></name> <operator>=</operator> <name>rdbLoadProgressCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rdb</name><operator>-&gt;</operator><name>max_processing_chunk</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>loading_process_events_interval_bytes</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"REDIS"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Wrong signature trying to load DB from file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rdbver</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rdbver</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>rdbver</name></expr></argument> &gt;</argument_list></name> <name>RDB_VERSION</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't handle RDB format version %d"</literal></expr></argument>,<argument><expr><name>rdbver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Key-specific attributes, set by opcodes before the key type. */</comment>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>lru_idle</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lfu_freq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>expiretime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>lru_clock</name> <init>= <expr><call><name>LRU_CLOCK</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

        <comment type="block">/* Read type. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>rdbLoadType</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Handle special types. */</comment>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_EXPIRETIME</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* EXPIRETIME: load an expire associated with the next key
             * to load. Note that after loading an expire we need to
             * load the actual type, and continue. */</comment>
            <expr_stmt><expr><name>expiretime</name> <operator>=</operator> <call><name>rdbLoadTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>expiretime</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_EXPIRETIME_MS</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* EXPIRETIME_MS: milliseconds precision expire times introduced
             * with RDB v3. Like EXPIRETIME but no with more precision. */</comment>
            <expr_stmt><expr><name>expiretime</name> <operator>=</operator> <call><name>rdbLoadMillisecondTime</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>rdbver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_FREQ</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* FREQ: LFU frequency. */</comment>
            <decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>lfu_freq</name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_IDLE</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* IDLE: LRU idle time. */</comment>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>qword</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>qword</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>lru_idle</name> <operator>=</operator> <name>qword</name></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* EOF: End of file, exit the main loop. */</comment>
            <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_SELECTDB</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* SELECTDB: Select the specified database. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dbid</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>dbid</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                    <argument><expr><literal type="string">"FATAL: Data file was created with a Redis "</literal>
                    <literal type="string">"server configured to handle more than %d "</literal>
                    <literal type="string">"databases. Exiting\n"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><name>dbid</name></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_RESIZEDB</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* RESIZEDB: Hint about the size of the keys in the currently
             * selected data base, in order to avoid useless rehashing. */</comment>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>db_size</name></decl>, <decl><type ref="prev"/><name>expires_size</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>db_size</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>expires_size</name> <operator>=</operator> <call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RDB_LENERR</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>db_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,<argument><expr><name>expires_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_AUX</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* AUX: generic string-string fields. Use to add state to RDB
             * which is backward compatible. Implementations of RDB loading
             * are requierd to skip AUX fields they don't understand.
             *
             * An AUX field is composed of two strings: key and value. */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>auxkey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>auxval</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>auxkey</name> <operator>=</operator> <call><name>rdbLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>auxval</name> <operator>=</operator> <call><name>rdbLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* All the fields with a name staring with '%' are considered
                 * information fields and are logged at startup with a log
                 * level of NOTICE. */</comment>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"RDB '%s': %s"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
                    <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"repl-stream-db"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rsi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"repl-id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rsi</name> <operator>&amp;&amp;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_id</name></name></expr></argument>,<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_id_is_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"repl-offset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rsi</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_offset</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><literal type="string">"lua"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Load the script back in memory. */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>luaCreateFunction</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lua</name></name></expr></argument>,<argument><expr><name>auxval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(
                        <argument><expr><literal type="string">"Can't load Lua script from RDB file! "</literal>
                        <literal type="string">"BODY: %s"</literal></expr></argument>, <argument><expr><name><name>auxval</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* We ignore fields we don't understand, as by AUX field
                 * contract. */</comment>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Unrecognized RDB AUX field: '%s'"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>auxkey</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>auxkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>auxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue> <comment type="block">/* Read type again. */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RDB_OPCODE_MODULE_AUX</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Load module data that is not related to the Redis key space.
             * Such data can be potentially be stored both before and after the
             * RDB keys-values section. */</comment>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>moduleid</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>when_opcode</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>when</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>when_opcode</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_UINT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"bad when_opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><call><name>moduleTypeLookupModuleByID</name><argument_list>(<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdbCheckMode</name> <operator>&amp;&amp;</operator> <name>mt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Unknown module. */</comment>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains AUX module data I can't load: no matching module '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>rdbCheckMode</name> <operator>&amp;&amp;</operator> <name>mt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mt</name><operator>-&gt;</operator><name>aux_load</name></name></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* Module doesn't support AUX. */</comment>
                    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module AUX data, but the module '%s' doesn't seem to support it."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>RedisModuleIO</name></type> <name>io</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>moduleInitIOContext</name><argument_list>(<argument><expr><name>io</name></expr></argument>,<argument><expr><name>mt</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>io</name><operator>.</operator><name>ver</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <comment type="block">/* Call the rdb_load method of the module providing the 10 bit
                 * encoding version in the lower 10 bits of the module ID. */</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>mt</name><operator>-&gt;</operator><name>aux_load</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>,<argument><expr><name>moduleid</name><operator>&amp;</operator><literal type="number">1023</literal></expr></argument>, <argument><expr><name>when</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>io</name><operator>.</operator><name>error</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>moduleTypeNameByID</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><name>moduleid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module AUX data for the module type '%s', that the responsible module is not able to load. Check for modules log above for additional clues."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>moduleFreeContext</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>io</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>eof</name> <init>= <expr><call><name>rdbLoadLen</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>eof</name> <operator>!=</operator> <name>RDB_MODULE_OPCODE_EOF</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"The RDB file contains module AUX data for the module '%s' that is not terminated by the proper module value EOF marker"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* RDB check mode. */</comment>
                <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><call><name>rdbLoadCheckModuleValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue> <comment type="block">/* Read next opcode. */</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Read key */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>rdbLoadStringObject</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
        <comment type="block">/* Read value */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>rdbLoadObject</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><name>rdb</name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
        <comment type="block">/* Check if the key already expired. This function is used when loading
         * an RDB file from disk, either at startup, or when an RDB was
         * received from the master. In the latter case, the master is
         * responsible for key expiry. If we would expire keys here, the
         * snapshot taken by the master may not be reflected on the slave. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>loading_aof</name> <operator>&amp;&amp;</operator> <name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>expiretime</name> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Add the new object in the hash table */</comment>
            <expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Set the expire time if needed */</comment>
            <if_stmt><if>if <condition>(<expr><name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setExpire</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>db</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>expiretime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            
            <comment type="block">/* Set usage information (for eviction). */</comment>
            <expr_stmt><expr><call><name>objectSetLRUOrLFU</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>lfu_freq</name></expr></argument>,<argument><expr><name>lru_idle</name></expr></argument>,<argument><expr><name>lru_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Decrement the key refcount since dbAdd() will take its
             * own reference. */</comment>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Reset the state that is key-specified and is populated by
         * opcodes before the key, so that we start from scratch again. */</comment>
        <expr_stmt><expr><name>expiretime</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lfu_freq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lru_idle</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Verify the checksum if RDB version is &gt;= 5 */</comment>
    <if_stmt><if>if <condition>(<expr><name>rdbver</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>cksum</name></decl>, <decl><type ref="prev"/><name>expected</name> <init>= <expr><name><name>rdb</name><operator>-&gt;</operator><name>cksum</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>rioRead</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>eoferr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"RDB file was saved with checksum disabled: no check performed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cksum</name> <operator>!=</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Wrong RDB checksum. Aborting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"RDB CRC error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>

<label><name>eoferr</name>:</label> <comment type="block">/* unexpected end of file is handled here with a fatal exit */</comment>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Short read or OOM loading DB. Unrecoverable error, aborting now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rdbExitReportCorruptRDB</name><argument_list>(<argument><expr><literal type="string">"Unexpected EOF reading RDB file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_ERR</name></expr>;</return> <comment type="block">/* Just to avoid warning */</comment>
</block_content>}</block></function>

<comment type="block">/* Like rdbLoadRio() but takes a filename instead of a rio stream. The
 * filename is open for reading and a rio stream object created in order
 * to do the actual loading. Moreover the ETA displayed in the INFO
 * output is initialized and finalized.
 *
 * If you pass an 'rsi' structure initialied with RDB_SAVE_OPTION_INIT, the
 * loading code will fiil the information fields in the structure. */</comment>
<function><type><name>int</name></type> <name>rdbLoad</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rio</name></type> <name>rdb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><literal type="string">"rb"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>startLoading</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rioInitWithFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbLoadRio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stopLoading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* A background saving child (BGSAVE) terminated its work. Handle this.
 * This function covers the case of actual BGSAVEs. */</comment>
<function><type><name>void</name></type> <name>backgroundSaveDoneHandlerDisk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
            <argument><expr><literal type="string">"Background saving terminated with success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>-</operator> <name><name>server</name><operator>.</operator><name>dirty_before_bgsave</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastsave</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Background saving error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>latency</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Background saving terminated by signal %d"</literal></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>latencyStartMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rdbRemoveTempFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>latencyEndMonitor</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"rdb-unlink-temp-file"</literal></expr></argument>,<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* SIGUSR1 is whitelisted, so we have a way to kill a child without
         * tirggering an error condition. */</comment>
        <if_stmt><if>if <condition>(<expr><name>bysignal</name> <operator>!=</operator> <name>SIGUSR1</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lastbgsave_status</name></name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_last</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="block">/* Possibly there are slaves waiting for a BGSAVE in order to be served
     * (the first stage of SYNC is a bulk transfer of dump.rdb) */</comment>
    <expr_stmt><expr><call><name>updateSlavesWaitingBgsave</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>C_OK</name></expr> </then><else>: <expr><name>C_ERR</name></expr></else></ternary></expr></argument>, <argument><expr><name>RDB_CHILD_TYPE_DISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* A background saving child (BGSAVE) terminated its work. Handle this.
 * This function covers the case of RDB -&gt; Salves socket transfers for
 * diskless replication. */</comment>
<function><type><name>void</name></type> <name>backgroundSaveDoneHandlerSocket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ok_slaves</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
            <argument><expr><literal type="string">"Background RDB transfer terminated with success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Background transfer error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Background transfer terminated by signal %d"</literal></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* If the child returns an OK exit code, read the set of slave client
     * IDs and the associated status code. We'll terminate all the slaves
     * in error state.
     *
     * If the process returned an error, consider the list of slaves that
     * can continue to be empty, so that it's just a special case of the
     * normal code path. */</comment>
    <expr_stmt><expr><name>ok_slaves</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Make space for the count. */</comment>
    <expr_stmt><expr><name><name>ok_slaves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>readlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read_result_from_child</name></name></expr></argument>, <argument><expr><name>ok_slaves</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call> <operator>==</operator>
                 <name>readlen</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>readlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ok_slaves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>                   <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>

            <comment type="block">/* Make space for enough elements as specified by the first
             * uint64_t element in the array. */</comment>
            <name>ok_slaves</name> <init>= <expr><call><name>zrealloc</name><argument_list>(<argument><expr><name>ok_slaves</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>readlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>&amp;&amp;</operator>
                <call><name>read</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read_result_from_child</name></name></expr></argument>, <argument><expr><name>ok_slaves</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
                     <argument><expr><name>readlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>readlen</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>ok_slaves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read_result_from_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_write_result_to_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We can continue the replication process with all the slaves that
     * correctly received the full payload. Others are terminated. */</comment>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_END</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>j</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>errorcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Search for the slave ID in the reply. In order for a slave to
             * continue the replication process, we need to find it in the list,
             * and it must have an error code set to 0 (which means success). */</comment>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ok_slaves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>ok_slaves</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ok_slaves</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>                        <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
                    <break>break;</break> <comment type="block">/* Found in slaves list. */</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>ok_slaves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>errorcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Closing slave %s: child-&gt;slave RDB transfer failed: %s"</literal></expr></argument>,
                    <argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator>(</operator><name>errorcode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"RDB transfer child aborted"</literal></expr>
                                     </then><else>: <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>freeClient</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Slave %s correctly received the streamed RDB file."</literal></expr></argument>,
                    <argument><expr><call><name>replicationGetSlaveName</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Restore the socket as non-blocking. */</comment>
                <expr_stmt><expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>anetSendTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ok_slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateSlavesWaitingBgsave</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>bysignal</name> <operator>&amp;&amp;</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>C_OK</name></expr> </then><else>: <expr><name>C_ERR</name></expr></else></ternary></expr></argument>, <argument><expr><name>RDB_CHILD_TYPE_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* When a background RDB saving/transfer terminates, call the right handler. */</comment>
<function><type><name>void</name></type> <name>backgroundSaveDoneHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bysignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>RDB_CHILD_TYPE_DISK</name></expr>:</case>
        <expr_stmt><expr><call><name>backgroundSaveDoneHandlerDisk</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>,<argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>RDB_CHILD_TYPE_SOCKET</name></expr>:</case>
        <expr_stmt><expr><call><name>backgroundSaveDoneHandlerSocket</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>,<argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown RDB child type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Spawn an RDB child that writes the RDB to the sockets of the slaves
 * that are currently in SLAVE_STATE_WAIT_BGSAVE_START state. */</comment>
<function><type><name>int</name></type> <name>rdbSaveToSlavesSockets</name><parameter_list>(<parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>clientids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numfds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>childpid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>pipefds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Before to fork, create a pipe that will be used in order to
     * send back to the parent the IDs of the slaves that successfully
     * received all the writes. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipefds</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_read_result_from_child</name></name> <operator>=</operator> <name><name>pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_write_result_to_parent</name></name> <operator>=</operator> <name><name>pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Collect the file descriptors of the slaves we want to transfer
     * the RDB to, which are i WAIT_BGSAVE_START state. */</comment>
    <expr_stmt><expr><name>fds</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* We also allocate an array of corresponding client IDs. This will
     * be useful for the child process in order to build the report
     * (sent via unix pipe) that will be sent to the parent. */</comment>
    <expr_stmt><expr><name>clientids</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><call><name>listLength</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>numfds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>==</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>clientids</name><index>[<expr><name>numfds</name></expr>]</index></name> <operator>=</operator> <name><name>slave</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fds</name><index>[<expr><name>numfds</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>slave</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>replicationSetupSlaveForFullResync</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><call><name>getPsyncInitialOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Put the socket in blocking mode to simplify RDB transfer.
             * We'll restore it when the children returns (since duped socket
             * will share the O_NONBLOCK attribute with the parent). */</comment>
            <expr_stmt><expr><call><name>anetBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>anetSendTimeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name><name>server</name><operator>.</operator><name>repl_timeout</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (PORT_ULONG) */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Create the child process. */</comment>
    <expr_stmt><expr><call><name>openChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><name>childpid</name> <operator>=</operator> <call><name>BeginForkOperation_Socket</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>numfds</name></expr></argument>, <argument><expr><name>clientids</name></expr></argument>, <argument><expr><name><name>pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>dictGetHashFunctionSeed</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>childpid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Child */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>rio</name></type> <name>slave_sockets</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>rioInitWithFdset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>,<argument><expr><name>fds</name></expr></argument>,<argument><expr><name>numfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>closeListeningSockets</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><literal type="string">"redis-rdb-to-slaves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveRioWithEOFMark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name> <operator>&amp;&amp;</operator> <call><name>rioFlush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>private_dirty</name> <init>= <expr><call><name>zmalloc_get_private_dirty</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>private_dirty</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,
                    <argument><expr><literal type="string">"RDB: %zu MB of memory used by copy-on-write"</literal></expr></argument>,
                    <argument><expr><name>private_dirty</name><operator>/</operator><operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>cow_size</name></name> <operator>=</operator> <name>private_dirty</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendChildInfo</name><argument_list>(<argument><expr><name>CHILD_INFO_TYPE_RDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If we are returning OK, at least one slave was served
             * with the RDB file as expected, so we need to send a report
             * to the parent via the pipe. The format of the message is:
             *
             * &lt;len&gt; &lt;slave[0].id&gt; &lt;slave[0].error&gt; ...
             *
             * len, slave IDs, and slave errors, are all uint64_t integers,
             * so basically the reply is composed of 64 bits for the len field
             * plus 2 additional 64 bit integers for each entry, for a total
             * of 'len' entries.
             *
             * The 'id' represents the slave's client ID, so that the master
             * can match the report with a specific slave, and 'error' is
             * set to 0 if the replication process terminated with a success
             * or the error code if an error occurred. */</comment>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>numfds</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>len</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ids</name> <init>= <expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>msglen</name></decl>;</decl_stmt>

            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>numfds</name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numfds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>ids</name><operator>++</operator> <operator>=</operator> <name><name>clientids</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>ids</name><operator>++</operator> <operator>=</operator> <name><name>slave_sockets</name><operator>.</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="block">/* Write the message to the parent. If we have no good slaves or
             * we are unable to transfer the message to the parent, we exit
             * with an error so that the parent will abort the replication
             * process with all the childre that were waiting. */</comment>
            <expr_stmt><expr><name>msglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>numfds</name><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_write_result_to_parent</name></name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>msglen</name></expr></argument>)</argument_list></call>
                <operator>!=</operator> <name>msglen</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>clientids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rioFreeFdset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exitFromChild</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>retval</name> <operator>==</operator> <name>C_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="block">/* Parent */</comment>
        <if_stmt><if>if <condition>(<expr><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't save in background: fork: %s"</literal></expr></argument>,
                <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Undo the state change. The caller will perform cleanup on
             * all the slaves in BGSAVE_START state, but an early call to
             * replicationSetupSlaveForFullResync() turned it into BGSAVE_END */</comment>
            <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slaves</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while<condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numfds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>clientids</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>replstate</name></name> <operator>=</operator> <name>SLAVE_STATE_WAIT_BGSAVE_START</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <call><name>ustime</name><argument_list>()</argument_list></call><operator>-</operator><name>start</name></expr>;</expr_stmt>
<comment type="line">//[tporadowski/redis] issue #46: ustime() -&gt; gettimeofday_highres() uses GetSystemTimePreciseAsFileTime when available (Windows 8, Windows Server 2012) or</comment>
<comment type="line">//                    falls back to GetSystemTimeAsFileTime which does not have such high resolution, so "stat_fork_time" may be 0 here</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt> <comment type="line">//let's pretend it took 100ms (100000 microseconds)</comment>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_fork_rate</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name><name>server</name><operator>.</operator><name>stat_fork_time</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* GB per second. */</comment>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type>
            <name>latencyAddSampleIfNeeded</name><argument_list>(<argument><expr><literal type="string">"fork"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stat_fork_time</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"Background RDB transfer started by pid %d"</literal></expr></argument>,
                <argument><expr><name>childpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_save_time_start</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <name>childpid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_type</name></name> <operator>=</operator> <name>RDB_CHILD_TYPE_SOCKET</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateDictResizePolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>clientids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>childpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>C_ERR</name></expr> </then><else>: <expr><name>C_OK</name></expr></else></ternary></expr>;</return>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>C_OK</name></expr>;</return> <comment type="block">/* Unreached. */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>saveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background save already in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rdbSave</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* BGSAVE [SCHEDULE] */</comment>
<function><type><name>void</name></type> <name>bgsaveCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>schedule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* The SCHEDULE option changes the behavior of BGSAVE when an AOF rewrite
     * is in progress. Instead of returning an error a BGSAVE gets scheduled. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"schedule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>schedule</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background save already in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schedule</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_bgsave_scheduled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background saving scheduled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                <argument><expr><literal type="string">"An AOF log rewriting in progress: can't BGSAVE right now. "</literal>
                <literal type="string">"Use BGSAVE SCHEDULE in order to schedule a BGSAVE whenever "</literal>
                <literal type="string">"possible."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rdbSaveBackground</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Background saving started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Populate the rdbSaveInfo structure used to persist the replication
 * information inside the RDB file. Currently the structure explicitly
 * contains just the currently selected DB from the master stream, however
 * if the rdbSave*() family functions receive a NULL rsi structure also
 * the Replication ID/offset is not saved. The function popultes 'rsi'
 * that is normally stack-allocated in the caller, returns the populated
 * pointer if the instance has a valid master client, otherwise NULL
 * is returned, and the RDB saving will not persist any replication related
 * information. */</comment>
<function><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rdbPopulateSaveInfo</name><parameter_list>(<parameter><decl><type><name>rdbSaveInfo</name> <modifier>*</modifier></type><name>rsi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi_init</name> <init>= <expr><name>RDB_SAVE_INFO_INIT</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>rsi</name> <operator>=</operator> <name>rsi_init</name></expr>;</expr_stmt>

    <comment type="block">/* If the instance is a master, we can populate the replication info
     * only when repl_backlog is not NULL. If the repl_backlog is NULL,
     * it means that the instance isn't in any replication chains. In this
     * scenario the replication info is useless, because when a slave
     * connects to us, the NULL repl_backlog will trigger a full
     * synchronization, at the same time we will use a new replid and clear
     * replid2. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>repl_backlog</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Note that when server.slaveseldb is -1, it means that this master
         * didn't apply any write commands after a full synchronization.
         * So we can let repl_stream_db be 0, this allows a restarted slave
         * to reload replication ID/offset, it's safe because the next write
         * command must generate a SELECT statement. */</comment>
        <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>slaveseldb</name></name></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name>rsi</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the instance is a slave we need a connected master
     * in order to fetch the currently selected DB. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>master</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>master</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
        <return>return <expr><name>rsi</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we have a cached master we can use it in order to populate the
     * replication selected DB info inside the RDB file: the slave can
     * increment the master_repl_offset only from data arriving from the
     * master, so if we are disconnected the offset in the cached master
     * is valid. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cached_master</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>repl_stream_db</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>cached_master</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
        <return>return <expr><name>rsi</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
