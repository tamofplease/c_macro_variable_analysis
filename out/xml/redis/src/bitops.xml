<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/bitops.c"><comment type="block">/* Bit operations.
 *
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>

<comment type="block">/* -----------------------------------------------------------------------------
 * Helpers and low level bit functions.
 * -------------------------------------------------------------------------- */</comment>

<comment type="block">/* Count number of bits set in the binary array pointed by 's' and long
 * 'count' bytes. The implementation of this function is required to
 * work with a input string length up to 512 MB. */</comment>
<function><type><name>size_t</name></type> <name>redisPopcount</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bitsinbyte</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Count initial bytes not aligned to 32 bit. */</comment>
    <while>while<condition>(<expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>bitsinbyte</name><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Count bits 28 bytes at a time */</comment>
    <expr_stmt><expr><name>p4</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>count</name><operator>&gt;=</operator><literal type="number">28</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>aux1</name></decl>, <decl><type ref="prev"/><name>aux2</name></decl>, <decl><type ref="prev"/><name>aux3</name></decl>, <decl><type ref="prev"/><name>aux4</name></decl>, <decl><type ref="prev"/><name>aux5</name></decl>, <decl><type ref="prev"/><name>aux6</name></decl>, <decl><type ref="prev"/><name>aux7</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>aux1</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux2</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux3</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux4</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux5</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux6</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux7</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>aux1</name> <operator>=</operator> <name>aux1</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux1</name> <operator>=</operator> <operator>(</operator><name>aux1</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux2</name> <operator>=</operator> <name>aux2</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux2</name> <operator>=</operator> <operator>(</operator><name>aux2</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux3</name> <operator>=</operator> <name>aux3</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux3</name> <operator>=</operator> <operator>(</operator><name>aux3</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux4</name> <operator>=</operator> <name>aux4</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux4</name> <operator>=</operator> <operator>(</operator><name>aux4</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux4</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux5</name> <operator>=</operator> <name>aux5</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux5</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux5</name> <operator>=</operator> <operator>(</operator><name>aux5</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux5</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux6</name> <operator>=</operator> <name>aux6</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux6</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux6</name> <operator>=</operator> <operator>(</operator><name>aux6</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux6</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux7</name> <operator>=</operator> <name>aux7</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux7</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux7</name> <operator>=</operator> <operator>(</operator><name>aux7</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux7</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>aux1</name> <operator>+</operator> <operator>(</operator><name>aux1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>+</operator>
                    <operator>(</operator><operator>(</operator><name>aux2</name> <operator>+</operator> <operator>(</operator><name>aux2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>+</operator>
                    <operator>(</operator><operator>(</operator><name>aux3</name> <operator>+</operator> <operator>(</operator><name>aux3</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>+</operator>
                    <operator>(</operator><operator>(</operator><name>aux4</name> <operator>+</operator> <operator>(</operator><name>aux4</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>+</operator>
                    <operator>(</operator><operator>(</operator><name>aux5</name> <operator>+</operator> <operator>(</operator><name>aux5</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>+</operator>
                    <operator>(</operator><operator>(</operator><name>aux6</name> <operator>+</operator> <operator>(</operator><name>aux6</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>+</operator>
                    <operator>(</operator><operator>(</operator><name>aux7</name> <operator>+</operator> <operator>(</operator><name>aux7</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator><operator>)</operator><operator>*</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Count the remaining bytes. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>p4</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>bitsinbyte</name><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the position of the first bit set to one (if 'bit' is 1) or
 * zero (if 'bit' is 0) in the bitmap starting at 's' and long 'count' bytes.
 *
 * The function is guaranteed to return a value &gt;= 0 if 'bit' is 0 since if
 * no zero bit is found, it returns count*8 assuming the string is zero
 * padded on the right. However if 'bit' is 1 it is possible that there is
 * not a single set bit in the bitmap. In this special case -1 is returned. */</comment>
<function><type><name>PORT_LONG</name></type> <name>redisBitpos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PORT_ULONG</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>skipval</name></decl>, <decl><type ref="prev"/><name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>one</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Position of bit, to return to the caller. */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

    <comment type="block">/* Process whole words first, seeking for first word that is not
     * all ones or all zeros respectively if we are lookig for zeros
     * or ones. This is much faster with large strings having contiguous
     * blocks of 1 or 0 bits compared to the vanilla bit per bit processing.
     *
     * Note that if we start from an address that is not aligned
     * to sizeof(unsigned long) we consume it byte by byte until it is
     * aligned. */</comment>

    <comment type="block">/* Skip initial bits not aligned to sizeof(unsigned long) byte by byte. */</comment>
    <expr_stmt><expr><name>skipval</name> <operator>=</operator> <ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>UCHAR_MAX</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>c</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <name>skipval</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Skip bits with full word step. */</comment>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>PORT_ULONG</name><operator>*</operator><operator>)</operator> <name>c</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>skipval</name> <operator>=</operator> <ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>PORT_ULONG_MAX</name></expr></else></ternary></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>count</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>!=</operator> <name>skipval</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Load bytes into "word" considering the first byte as the most significant
     * (we basically consider it as written in big endian, since we consider the
     * string as a set of bits from left to right, with the first bit at position
     * zero.
     *
     * Note that the loading is designed to work even when the bytes left
     * (count) are less than a full word. We pad it with zero on the right. */</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>l</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>word</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Special case:
     * If bits in the string are all zero and we are looking for one,
     * return -1 to signal that there is not a single "1" in the whole
     * string. This can't happen when we are looking for "0" as we assume
     * that the right of the string is zero padded. */</comment>
    <if_stmt><if>if <condition>(<expr><name>bit</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Last word left, scan bit by bit. The first thing we need is to
     * have a single "1" set in the most significant position in an
     * unsigned long. We don't know the size of the long so we use a
     * simple trick. */</comment>
    <expr_stmt><expr><name>one</name> <operator>=</operator> <name>PORT_ULONG_MAX</name></expr>;</expr_stmt> <comment type="block">/* All bits set to 1.*/</comment>
    <expr_stmt><expr><name>one</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>       <comment type="block">/* All bits set to 1 but the MSB. */</comment>
    <expr_stmt><expr><name>one</name> <operator>=</operator> <operator>~</operator><name>one</name></expr>;</expr_stmt>      <comment type="block">/* All bits set to 0 but the MSB. */</comment>

    <while>while<condition>(<expr><name>one</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>one</name> <operator>&amp;</operator> <name>word</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <name>bit</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>one</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* If we reached this point, there is a bug in the algorithm, since
     * the case of no match is handled as a special case before. */</comment>
    <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"End of redisBitpos() reached."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Just to avoid warnings. */</comment>
</block_content>}</block></function>

<comment type="block">/* The following set.*Bitfield and get.*Bitfield functions implement setting
 * and getting arbitrary size (up to 64 bits) signed and unsigned integers
 * at arbitrary positions into a bitmap.
 *
 * The representation considers the bitmap as having the bit number 0 to be
 * the most significant bit of the first byte, and so forth, so for example
 * setting a 5 bits unsigned integer to value 23 at offset 7 into a bitmap
 * previously set to all zeroes, will produce the following representation:
 *
 * +--------+--------+
 * |00000001|01110000|
 * +--------+--------+
 *
 * When offsets and integer sizes are aligned to bytes boundaries, this is the
 * same as big endian, however when such alignment does not exist, its important
 * to also understand how the bits inside a byte are ordered.
 *
 * Note that this format follows the same convention as SETBIT and related
 * commands.
 */</comment>

<function><type><name>void</name></type> <name>setUnsignedBitfield</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>byte</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>, <decl><type ref="prev"/><name>byteval</name></decl>, <decl><type ref="prev"/><name>bitval</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bits</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>bitval</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>bits</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>byte</name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>byteval</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>byte</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>byteval</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>byteval</name> <operator>|=</operator> <name>bitval</name> <operator>&lt;&lt;</operator> <name>bit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>=</operator> <name>byteval</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setSignedBitfield</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uv</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Casting will add UINT64_MAX + 1 if v is negative. */</comment>
    <expr_stmt><expr><call><name>setUnsignedBitfield</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>offset</name></expr></argument>,<argument><expr><name>bits</name></expr></argument>,<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>getUnsignedBitfield</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>byte</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>, <decl><type ref="prev"/><name>byteval</name></decl>, <decl><type ref="prev"/><name>bitval</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bits</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>byte</name> <operator>=</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>byteval</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>byte</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitval</name> <operator>=</operator> <operator>(</operator><name>byteval</name> <operator>&gt;&gt;</operator> <name>bit</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>bitval</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>getSignedBitfield</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name></decl>;</decl_stmt>
    <union>union <block>{<decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>}</block> <decl><name>conv</name></decl>;</union>

    <comment type="block">/* Converting from unsigned to signed is undefined when the value does
     * not fit, however here we assume two's complement and the original value
     * was obtained from signed -&gt; unsigned conversion, so we'll find the
     * most significant bit set if the original value was negative.
     *
     * Note that two's complement is mandatory for exact-width types
     * according to the C99 standard. */</comment>
    <expr_stmt><expr><name><name>conv</name><operator>.</operator><name>u</name></name> <operator>=</operator> <call><name>getUnsignedBitfield</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>offset</name></expr></argument>,<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>conv</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

    <comment type="block">/* If the top significant bit is 1, propagate it to all the
     * higher bits for two's complement representation of signed
     * integers. */</comment>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>value</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The following two functions detect overflow of a value in the context
 * of storing it as an unsigned or signed integer with the specified
 * number of bits. The functions both take the value and a possible increment.
 * If no overflow could happen and the value+increment fit inside the limits,
 * then zero is returned, otherwise in case of overflow, 1 is returned,
 * otherwise in case of underflow, -1 is returned.
 *
 * When non-zero is returned (oferflow or underflow), if not NULL, *limit is
 * set to the value the operation should result when an overflow happens,
 * depending on the specified overflow semantics:
 *
 * For BFOVERFLOW_SAT if 1 is returned, *limit it is set maximum value that
 * you can store in that integer. when -1 is returned, *limit is set to the
 * minimum value that an integer of that size can represent.
 *
 * For BFOVERFLOW_WRAP *limit is set by performing the operation in order to
 * "wrap" around towards zero for unsigned integers, or towards the most
 * negative number that is possible to represent for signed integers. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFOVERFLOW_WRAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFOVERFLOW_SAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BFOVERFLOW_FAIL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* Used by the BITFIELD command implementation. */</comment>

<function><type><name>int</name></type> <name>checkUnsignedBitfieldOverflow</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>incr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owtype</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><name>UINT64_MAX</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>maxincr</name> <init>= <expr><name>max</name><operator>-</operator><name>value</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>minincr</name> <init>= <expr><operator>-</operator><name>value</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&gt;</operator> <name>maxincr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_WRAP</name></expr>)</condition> <block>{<block_content>
                <goto>goto <name>handle_wrap</name>;</goto>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_SAT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>limit</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&lt;</operator> <name>minincr</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_WRAP</name></expr>)</condition> <block>{<block_content>
                <goto>goto <name>handle_wrap</name>;</goto>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_SAT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>handle_wrap</name>:</label>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name> <init>= <expr><name>value</name><operator>+</operator><name>incr</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>res</name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>limit</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>checkSignedBitfieldOverflow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>incr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owtype</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><name>INT64_MAX</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>min</name> <init>= <expr><operator>(</operator><operator>-</operator><name>max</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Note that maxincr and minincr could overflow, but we use the values
     * only after checking 'value' range, so when we use it no overflow
     * happens. */</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>maxincr</name> <init>= <expr><name>max</name><operator>-</operator><name>value</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>minincr</name> <init>= <expr><name>min</name><operator>-</operator><name>value</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>!=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&gt;</operator> <name>maxincr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&gt;</operator> <name>maxincr</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_WRAP</name></expr>)</condition> <block>{<block_content>
                <goto>goto <name>handle_wrap</name>;</goto>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_SAT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>limit</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>min</name> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>!=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&lt;</operator> <name>minincr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>incr</name> <operator>&lt;</operator> <name>minincr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>limit</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_WRAP</name></expr>)</condition> <block>{<block_content>
                <goto>goto <name>handle_wrap</name>;</goto>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>owtype</name> <operator>==</operator> <name>BFOVERFLOW_SAT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>limit</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>handle_wrap</name>:</label>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>msb</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name> <init>= <expr><name>value</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>incr</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name><operator>+</operator><name>b</name></expr>;</expr_stmt> <comment type="block">/* Perform addition as unsigned so that's defined. */</comment>

        <comment type="block">/* If the sign bit is set, propagate to all the higher order
         * bits, to cap the negative value. If it's clear, mask to
         * the positive integer limit. */</comment>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <name>msb</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>limit</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Debugging function. Just show bits in the specified bitmap. Not used
 * but here for not having to rewrite it when debugging is needed. */</comment>
<function><type><name>void</name></type> <name>printBits</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>PORT_ULONG</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -----------------------------------------------------------------------------
 * Bits related string commands: GETBIT, SETBIT, BITCOUNT, BITOP.
 * -------------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITOP_AND</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITOP_OR</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITOP_XOR</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITOP_NOT</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITFIELDOP_GET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITFIELDOP_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITFIELDOP_INCRBY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* This helper function used by GETBIT / SETBIT parses the bit offset argument
 * making sure an error is returned if it is negative or if it overflows
 * Redis 512 MB limit for the string value.
 *
 * If the 'hash' argument is true, and 'bits is positive, then the command
 * will also parse bit offsets prefixed by "#". In such a case the offset
 * is multiplied by 'bits'. This is useful for the BITFIELD command. */</comment>
<function><type><name>int</name></type> <name>getBitOffsetFromArgument</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>loffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="string">"bit offset is not an integer or out of range"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>usehash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Handle #&lt;offset&gt; form. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name>hash</name> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>usehash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>string2ll</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>usehash</name></expr></argument>,<argument><expr><name>plen</name><operator>-</operator><name>usehash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>loffset</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Adjust the offset by 'bits' for #&lt;offset&gt; form. */</comment>
    <if_stmt><if>if <condition>(<expr><name>usehash</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>loffset</name> <operator>*=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Limit offset to 512MB in bytes */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>loffset</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator><name>loffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><literal type="number">512</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>loffset</name></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This helper function for BITFIELD parses a bitfield type in the form
 * &lt;sign&gt;&lt;bits&gt; where sign is 'u' or 'i' for unsigned and signed, and
 * the bits is a value between 1 and 64. However 64 bits unsigned integers
 * are reported as an error because of current limitations of Redis protocol
 * to return unsigned integer values greater than INT64_MAX.
 *
 * On error C_ERR is returned and an error is sent to the client. */</comment>
<function><type><name>int</name></type> <name>getBitfieldTypeFromArgument</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="string">"Invalid bitfield type. Use something like i16 u8. Note that u64 is not supported but i64 is."</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>llbits</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>string2ll</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>llbits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <name>llbits</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>
        <operator>(</operator><operator>*</operator><name>sign</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>llbits</name> <operator>&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><operator>*</operator><name>sign</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>llbits</name> <operator>&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>llbits</name></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is an helper function for commands implementations that need to write
 * bits to a string object. The command creates or pad with zeroes the string
 * so that the 'maxbit' bit can be addressed. The object is finally
 * returned. Otherwise if the key holds a wrong type NULL is returned and
 * an error is sent to the client. */</comment>
<function><type><name>robj</name> <modifier>*</modifier></type><name>lookupStringForBitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxbit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>byte</name> <init>= <expr><name>maxbit</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>byte</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>checkType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>dbUnshareStringValue</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdsgrowzero</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>byte</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return a pointer to the string object content, and stores its length
 * in 'len'. The user is required to pass (likely stack allocated) buffer
 * 'llbuf' of at least LONG_STR_SIZE bytes. Such a buffer is used in the case
 * the object is integer encoded in order to provide the representation
 * without usign heap allocation.
 *
 * The function returns the pointer to the object array of bytes representing
 * the string it contains, that may be a pointer to 'llbuf' or to the
 * internal object representation. As a side effect 'len' is filled with
 * the length of such buffer.
 *
 * If the source object is NULL the function is guaranteed to return NULL
 * and set 'len' to 0. */</comment>
<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>getObjectReadOnlyString</name><parameter_list>(<parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>llbuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Set the 'p' pointer to the string, that can be just a stack allocated
     * array if our string was integer encoded. */</comment>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_INT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>llbuf</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>llbuf</name></expr></argument>,<argument><expr><name>LONG_STR_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>o</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* SETBIT key offset bitvalue */</comment>
<function><type><name>void</name></type> <name>setbitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="string">"bit is not an integer or out of range"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bitoffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>byte</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>byteval</name></decl>, <decl><type ref="prev"/><name>bitval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>on</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getBitOffsetFromArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bitoffset</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>on</name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Bits can only be set or cleared... */</comment>
    <if_stmt><if>if <condition>(<expr><name>on</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupStringForBitCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>bitoffset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Get current values */</comment>
    <expr_stmt><expr><name>byte</name> <operator>=</operator> <name>bitoffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>byteval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><name>byte</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>bitoffset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bitval</name> <operator>=</operator> <name>byteval</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Update byte with new bit value and return original value */</comment>
    <expr_stmt><expr><name>byteval</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>byteval</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>on</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><name>byte</name></expr>]</index> <operator>=</operator> <name>byteval</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_STRING</name></expr></argument>,<argument><expr><literal type="string">"setbit"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bitval</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* GETBIT key offset */</comment>
<function><type><name>void</name></type> <name>getbitCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>llbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bitoffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>byte</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bitval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getBitOffsetFromArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bitoffset</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupKeyReadOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <call><name>checkType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>byte</name> <operator>=</operator> <name>bitoffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>bitoffset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bitval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><name>byte</name></expr>]</index> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>ll2string</name><argument_list>(<argument><expr><name>llbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bitval</name> <operator>=</operator> <name><name>llbuf</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bitval</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* BITOP op_name target_key src_key1 src_key2 src_key3 ... src_keyN */</comment>
<function><type><name>void</name></type> <name>bitopCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opname</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>targetkey</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>numkeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier><modifier>*</modifier></type><name>objects</name></decl>;</decl_stmt>      <comment type="block">/* Array of source objects. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl>;</decl_stmt> <comment type="block">/* Array of source strings pointers. */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>len</name></decl>, <decl><type ref="prev"/><name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Array of length of src strings,
                                       and max len. */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>minlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Min len among the input keys. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Resulting string. */</comment>

    <comment type="block">/* Parse the operation name. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opname</name></expr></argument>,<argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>BITOP_AND</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opname</name></expr></argument>,<argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>BITOP_OR</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opname</name></expr></argument>,<argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>BITOP_XOR</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>opname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opname</name></expr></argument>,<argument><expr><literal type="string">"not"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>BITOP_NOT</name></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Sanity check: NOT accepts only a single key argument. */</comment>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_NOT</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"BITOP NOT must be called with a single source key."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Lookup keys, and store pointers to the string objects into an array. */</comment>
    <expr_stmt><expr><name>numkeys</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator> <name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Handle non-existing keys as empty strings. */</comment>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>minlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Return an error if one of the keys is not a string. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>checkType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>PORT_LONG</name><operator>)</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (PORT_LONG) */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name><name>len</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>minlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minlen</name> <operator>=</operator> <name><name>len</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Compute the bit operation, if at least one string is not empty. */</comment>
    <if_stmt><if>if <condition>(<expr><name>maxlen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>i</name></decl>;</decl_stmt>

        <comment type="block">/* Fast path: as far as we have data for all the input bitmaps we
         * can take a fast path that performs much better than the
         * vanilla algorithm. On ARM we skip the fast path since it will
         * result in GCC compiling the code using multiple-words load/store
         * operations that are not supported even in ARM &gt;= v6. */</comment>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ALIGNED_ACCESS</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>minlen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>numkeys</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name><name>lp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_ULONG</name> <modifier>*</modifier></type><name>lres</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>*</operator><operator>)</operator> <name>res</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Note: sds pointer is always aligned to 8 byte boundary. */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lp</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Different branches per different operations for speed (sorry). */</comment>
            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_AND</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_OR</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_XOR</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_NOT</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PORT_ULONG</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* j is set to the next byte to process by the previous loop. */</comment>
        <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_NOT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>~</operator><name>output</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>byte</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
                <switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>BITOP_AND</name></expr>:</case> <expr_stmt><expr><name>output</name> <operator>&amp;=</operator> <name>byte</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><name>BITOP_OR</name></expr>:</case>  <expr_stmt><expr><name>output</name> <operator>|=</operator> <name>byte</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><name>BITOP_XOR</name></expr>:</case> <expr_stmt><expr><name>output</name> <operator>^=</operator> <name>byte</name></expr>;</expr_stmt> <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name><name>objects</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Store the computed value into the target key */</comment>
    <if_stmt><if>if <condition>(<expr><name>maxlen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setKey</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>targetkey</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_STRING</name></expr></argument>,<argument><expr><literal type="string">"set"</literal></expr></argument>,<argument><expr><name>targetkey</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>dbDelete</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>targetkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>targetkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_GENERIC</name></expr></argument>,<argument><expr><literal type="string">"del"</literal></expr></argument>,<argument><expr><name>targetkey</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Return the output string length in bytes. */</comment>
</block_content>}</block></function>

<comment type="block">/* BITCOUNT key [start end] */</comment>
<function><type><name>void</name></type> <name>bitcountCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>strlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>llbuf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Lookup, check for type, and return 0 for non existing keys. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupKeyReadOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <call><name>checkType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getObjectReadOnlyString</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>,<argument><expr><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Parse start/end range if any. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <comment type="block">/* Convert negative indexes */</comment>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>end</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>start</name></expr></argument> &gt;</argument_list></name> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <name>strlen</name><operator>+</operator><name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>+</operator><name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>strlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* The whole string. */</comment>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Syntax error. */</comment>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Precondition: end &gt;= 0 &amp;&amp; end &lt; strlen, so the only condition where
     * zero can be returned is: start &gt; end. */</comment>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>bytes</name> <init>= <expr><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>redisPopcount</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>start</name></expr></argument>,<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* BITPOS key bit [start [end]] */</comment>
<function><type><name>void</name></type> <name>bitposCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>strlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>llbuf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end_given</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Parse the bit argument to understand what we are looking for, set
     * or clear bits. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bit</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bit</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"The bit argument must be 1 or 0."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the key does not exist, from our point of view it is an infinite
     * array of 0 bits. If the user is looking for the fist clear bit return 0,
     * If the user is looking for the first set bit, return -1. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getObjectReadOnlyString</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>,<argument><expr><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Parse start/end range if any. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>end_given</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* Convert negative indexes */</comment>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <name>strlen</name><operator>+</operator><name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>+</operator><name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>strlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* The whole string. */</comment>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>strlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Syntax error. */</comment>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* For empty ranges (start &gt; end) we return -1 as an empty range does
     * not contain a 0 nor a 1. */</comment>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>bytes</name> <init>= <expr><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>pos</name> <init>= <expr><call><name>redisBitpos</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>start</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>bytes</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>        <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (PORT_ULONG), cast (int) */</comment>

        <comment type="block">/* If we are looking for clear bits, and the user specified an exact
         * range with start-end, we can't consider the right of the range as
         * zero padded (as we do when no explicit end is given).
         *
         * So if redisBitpos() returns the first bit outside the range,
         * we return -1 to the caller, to mean, in the specified range there
         * is not a single "0" bit. */</comment>
        <if_stmt><if>if <condition>(<expr><name>end_given</name> <operator>&amp;&amp;</operator> <name>bit</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <name>bytes</name><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>start</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Adjust for the bytes we skipped. */</comment>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* BITFIELD key subcommmand-1 arg ... subcommand-2 arg ... subcommand-N ...
 *
 * Supported subcommands:
 *
 * GET &lt;type&gt; &lt;offset&gt;
 * SET &lt;type&gt; &lt;offset&gt; &lt;value&gt;
 * INCRBY &lt;type&gt; &lt;offset&gt; &lt;increment&gt;
 * OVERFLOW [WRAP|SAT|FAIL]
 */</comment>

<struct>struct <name>bitfieldOp</name> <block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>    <comment type="block">/* Bitfield offset. */</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>        <comment type="block">/* Increment amount (INCRBY) or SET value */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>opcode</name></decl>;</decl_stmt>         <comment type="block">/* Operation id. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>owtype</name></decl>;</decl_stmt>         <comment type="block">/* Overflow type to use. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>           <comment type="block">/* Integer bitfield bits width. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>           <comment type="block">/* True if signed, otherwise unsigned op. */</comment>
}</block>;</struct>

<function><type><name>void</name></type> <name>bitfieldCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bitoffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>numops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>changes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>bitfieldOp</name></name> <modifier>*</modifier></type><name>ops</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Array of ops to execute at end. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>owtype</name> <init>= <expr><name>BFOVERFLOW_WRAP</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Overflow type. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>readonly</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>highest_write_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>remargs</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Remaining args other than current. */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subcmd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Current command name. */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>opcode</name></decl>;</decl_stmt> <comment type="block">/* Current operation code. */</comment>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>i64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* Signed SET value. */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Signed or unsigned type? */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Bitfield width in bits. */</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>remargs</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>BITFIELDOP_GET</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>remargs</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>BITFIELDOP_SET</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"incrby"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>remargs</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>BITFIELDOP_INCRBY</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>,<argument><expr><literal type="string">"overflow"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>remargs</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>owtypename</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>owtypename</name></expr></argument>,<argument><expr><literal type="string">"wrap"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>owtype</name> <operator>=</operator> <name>BFOVERFLOW_WRAP</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>owtypename</name></expr></argument>,<argument><expr><literal type="string">"sat"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>owtype</name> <operator>=</operator> <name>BFOVERFLOW_SAT</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>owtypename</name></expr></argument>,<argument><expr><literal type="string">"fail"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>owtype</name> <operator>=</operator> <name>BFOVERFLOW_FAIL</name></expr>;</expr_stmt></block_content></block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid OVERFLOW type specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></else></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Get the type and offset arguments, common to all the ops. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>getBitfieldTypeFromArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>getBitOffsetFromArgument</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>bitoffset</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>bits</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>!=</operator> <name>BITFIELDOP_GET</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>readonly</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>highest_write_offset</name> <operator>&lt;</operator> <name>bitoffset</name> <operator>+</operator> <name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>highest_write_offset</name> <operator>=</operator> <name>bitoffset</name> <operator>+</operator> <name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block">/* INCRBY and SET require another argument. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Populate the array of operations we'll process. */</comment>
        <expr_stmt><expr><name>ops</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>ops</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ops</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>numops</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ops</name><index>[<expr><name>numops</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>bitoffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ops</name><index>[<expr><name>numops</name></expr>]</index></name><operator>.</operator><name>i64</name> <operator>=</operator> <name>i64</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ops</name><index>[<expr><name>numops</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ops</name><index>[<expr><name>numops</name></expr>]</index></name><operator>.</operator><name>owtype</name> <operator>=</operator> <name>owtype</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ops</name><index>[<expr><name>numops</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ops</name><index>[<expr><name>numops</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>numops</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>opcode</name> <operator>==</operator> <name>BITFIELDOP_GET</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>readonly</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Lookup for read is ok if key doesn't exit, but errors
         * if it's not a string. */</comment>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>lookupKeyRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>checkType</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><name>OBJ_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Lookup by making room up to the farest bit reached by
         * this operation. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>lookupStringForBitCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
            <argument><expr><name>highest_write_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>numops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Actually process the operations. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numops</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>bitfieldOp</name></name> <modifier>*</modifier></type><name>thisop</name> <init>= <expr><name>ops</name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Execute the operation. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>thisop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>BITFIELDOP_SET</name> <operator>||</operator>
            <name><name>thisop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>BITFIELDOP_INCRBY</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* SET and INCRBY: We handle both with the same code path
             * for simplicity. SET return value is the previous value so
             * we need fetch &amp; store as well. */</comment>

            <comment type="block">/* We need two different but very similar code paths for signed
             * and unsigned operations, since the set of functions to get/set
             * the integers and the used variables types are different. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>thisop</name><operator>-&gt;</operator><name>sign</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>oldval</name></decl>, <decl><type ref="prev"/><name>newval</name></decl>, <decl><type ref="prev"/><name>wrapped</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>oldval</name> <operator>=</operator> <call><name>getSignedBitfield</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                        <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>thisop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>BITFIELDOP_INCRBY</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>newval</name> <operator>=</operator> <name>oldval</name> <operator>+</operator> <name><name>thisop</name><operator>-&gt;</operator><name>i64</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>checkSignedBitfieldOverflow</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>,
                            <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>owtype</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>wrapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newval</name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>newval</name> <operator>=</operator> <name><name>thisop</name><operator>-&gt;</operator><name>i64</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>checkSignedBitfieldOverflow</name><argument_list>(<argument><expr><name>newval</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>owtype</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>wrapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newval</name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <comment type="block">/* On overflow of type is "FAIL", don't write and return
                 * NULL to signal the condition. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>overflow</name> <operator>&amp;&amp;</operator> <name><name>thisop</name><operator>-&gt;</operator><name>owtype</name></name> <operator>==</operator> <name>BFOVERFLOW_FAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setSignedBitfield</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                                      <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>oldval</name></decl>, <decl><type ref="prev"/><name>newval</name></decl>, <decl><type ref="prev"/><name>wrapped</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>oldval</name> <operator>=</operator> <call><name>getUnsignedBitfield</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                        <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>thisop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>BITFIELDOP_INCRBY</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>newval</name> <operator>=</operator> <name>oldval</name> <operator>+</operator> <name><name>thisop</name><operator>-&gt;</operator><name>i64</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>checkUnsignedBitfieldOverflow</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>,
                            <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>owtype</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>wrapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newval</name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>newval</name> <operator>=</operator> <name><name>thisop</name><operator>-&gt;</operator><name>i64</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>checkUnsignedBitfieldOverflow</name><argument_list>(<argument><expr><name>newval</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>owtype</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>wrapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newval</name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <comment type="block">/* On overflow of type is "FAIL", don't write and return
                 * NULL to signal the condition. */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>overflow</name> <operator>&amp;&amp;</operator> <name><name>thisop</name><operator>-&gt;</operator><name>owtype</name></name> <operator>==</operator> <name>BFOVERFLOW_FAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setUnsignedBitfield</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                                        <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>,<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* GET */</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>strlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>llbuf</name><index>[<expr><name>LONG_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>getObjectReadOnlyString</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>,<argument><expr><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block">/* For GET we use a trick: before executing the operation
             * copy up to 9 bytes to a local buffer, so that we can easily
             * execute up to 64 bit operations that are at actual string
             * object boundaries. */</comment>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>byte</name> <init>= <expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>i</name><operator>+</operator><name>byte</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>strlen</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><name>byte</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="block">/* Now operate on the copied buffer which is guaranteed
             * to be zero-padded. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>thisop</name><operator>-&gt;</operator><name>sign</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><call><name>getSignedBitfield</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name><operator>-</operator><operator>(</operator><name>byte</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>,
                                            <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><call><name>getUnsignedBitfield</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>offset</name></name><operator>-</operator><operator>(</operator><name>byte</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>,
                                            <argument><expr><name><name>thisop</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>changes</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyKeyspaceEvent</name><argument_list>(<argument><expr><name>NOTIFY_STRING</name></expr></argument>,<argument><expr><literal type="string">"setbit"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>+=</operator> <name>changes</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
