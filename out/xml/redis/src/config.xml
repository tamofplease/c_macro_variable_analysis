<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/config.c"><comment type="block">/* Configuration file parsing and CONFIG GET/SET commands implementation.
 *
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_EventLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cluster.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<comment type="block">/*-----------------------------------------------------------------------------
 * Config file name-value maps.
 *----------------------------------------------------------------------------*/</comment>

<typedef>typedef <type><struct>struct <name>configEnum</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>configEnum</name>;</typedef>

<decl_stmt><decl><type><name>configEnum</name></type> <name><name>maxmemory_policy_enum</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"volatile-lru"</literal></expr>, <expr><name>MAXMEMORY_VOLATILE_LRU</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"volatile-lfu"</literal></expr>, <expr><name>MAXMEMORY_VOLATILE_LFU</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"volatile-random"</literal></expr>,<expr><name>MAXMEMORY_VOLATILE_RANDOM</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"volatile-ttl"</literal></expr>,<expr><name>MAXMEMORY_VOLATILE_TTL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"allkeys-lru"</literal></expr>,<expr><name>MAXMEMORY_ALLKEYS_LRU</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"allkeys-lfu"</literal></expr>,<expr><name>MAXMEMORY_ALLKEYS_LFU</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"allkeys-random"</literal></expr>,<expr><name>MAXMEMORY_ALLKEYS_RANDOM</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"noeviction"</literal></expr>,<expr><name>MAXMEMORY_NO_EVICTION</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<decl_stmt><decl><type><name>configEnum</name></type> <name><name>syslog_facility_enum</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"user"</literal></expr>,    <expr><name>LOG_USER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local0"</literal></expr>,  <expr><name>LOG_LOCAL0</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local1"</literal></expr>,  <expr><name>LOG_LOCAL1</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local2"</literal></expr>,  <expr><name>LOG_LOCAL2</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local3"</literal></expr>,  <expr><name>LOG_LOCAL3</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local4"</literal></expr>,  <expr><name>LOG_LOCAL4</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local5"</literal></expr>,  <expr><name>LOG_LOCAL5</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local6"</literal></expr>,  <expr><name>LOG_LOCAL6</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"local7"</literal></expr>,  <expr><name>LOG_LOCAL7</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>configEnum</name></type> <name><name>loglevel_enum</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>LL_DEBUG</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>LL_VERBOSE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"notice"</literal></expr>, <expr><name>LL_NOTICE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"warning"</literal></expr>, <expr><name>LL_WARNING</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>configEnum</name></type> <name><name>supervised_mode_enum</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"upstart"</literal></expr>, <expr><name>SUPERVISED_UPSTART</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"systemd"</literal></expr>, <expr><name>SUPERVISED_SYSTEMD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><name>SUPERVISED_AUTODETECT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>SUPERVISED_NONE</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>configEnum</name></type> <name><name>aof_fsync_enum</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"everysec"</literal></expr>, <expr><name>AOF_FSYNC_EVERYSEC</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"always"</literal></expr>, <expr><name>AOF_FSYNC_ALWAYS</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><name>AOF_FSYNC_NO</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Output buffer limits presets. */</comment>
<decl_stmt><decl><type><name>clientBufferLimitsConfig</name></type> <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>CLIENT_TYPE_OBUF_COUNT</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <comment type="block">/* normal */</comment>
    <expr><block>{<expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">256</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">64</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr>, <comment type="block">/* slave */</comment>
    <expr><block>{<expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">32</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr>  <comment type="block">/* pubsub */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*-----------------------------------------------------------------------------
 * Enum access functions
 *----------------------------------------------------------------------------*/</comment>

<comment type="block">/* Get enum value from name. If there is no match INT_MIN is returned. */</comment>
<function><type><name>int</name></type> <name>configEnumGetValue</name><parameter_list>(<parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while<condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>ce</name><operator>-&gt;</operator><name>val</name></name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ce</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>INT_MIN</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get enum name from value. If no match is found NULL is returned. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>configEnumGetName</name><parameter_list>(<parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while<condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ce</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wrapper for configEnumGetName() returning "unknown" instead of NULL if
 * there is no match. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>configEnumGetNameOrUnknown</name><parameter_list>(<parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>configEnumGetName</name><argument_list>(<argument><expr><name>ce</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Used for INFO generation. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>evictPolicyToString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>configEnumGetNameOrUnknown</name><argument_list>(<argument><expr><name>maxmemory_policy_enum</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*-----------------------------------------------------------------------------
 * Config file parsing
 *----------------------------------------------------------------------------*/</comment>

<function><type><name>int</name></type> <name>yesnotoi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendServerSaveParams</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>seconds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>changes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>saveparam</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name><name>server</name><operator>.</operator><name>saveparamslen</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><name>WIN_PORT_FIX</name> <comment type="block">/* cat (PORT_ULONG) */</comment>
    <name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>]</index></name><operator>.</operator><name>seconds</name> <operator>=</operator> <name>seconds</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>]</index></name><operator>.</operator><name>changes</name> <operator>=</operator> <name>changes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetServerSaveParams</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>saveparamslen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>queueLoadModule</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>moduleLoadQueueEntry</name></name> <modifier>*</modifier></type><name>loadmod</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>loadmod</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>moduleLoadQueueEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>loadmod</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>createRawStringObject</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>loadmodule_queue</name></name></expr></argument>,<argument><expr><name>loadmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>loadServerConfigFromString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>totlines</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>slaveof_linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totlines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>linenum</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sdstrim</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Skip comments and blank lines */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Split into arguments */</comment>
        <expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitargs</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Unbalanced quotes in configuration line"</literal></expr>;</expr_stmt>
            <goto>goto <name>loaderr</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Skip this line if the resulting command vector is empty. */</comment>
        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sdstolower</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Execute config directives */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid timeout value"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"tcp-keepalive"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>tcpkeepalive</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tcpkeepalive</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid tcp-keepalive value"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"protected-mode"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>protected_mode</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid port"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"tcp-backlog"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid backlog value"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>addresses</name> <init>= <expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>addresses</name> <operator>&gt;</operator> <name>CONFIG_BINDADDR_MAX</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Too many bind addresses specified"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>addresses</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>=</operator> <name>addresses</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"unixsocket"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"unixsocketperm"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>unixsocketperm</name></name> <operator>&gt;</operator> <literal type="number">0777</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid socket file permissions"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>changes</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>seconds</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>changes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid save parameters"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>,<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Can't chdir to '%s': %s"</literal></expr></argument>,
                    <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"loglevel"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>=</operator> <call><name>configEnumGetValue</name><argument_list>(<argument><expr><name>loglevel_enum</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>verbosity</name></name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid log level. "</literal>
                      <literal type="string">"Must be one of debug, verbose, notice, warning"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <expr_stmt><expr><call><name>setLogVerbosityLevel</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"logfile"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logfp</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal>  <operator>&amp;&amp;</operator>  <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>length</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator>  <operator>||</operator>
                <operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\"'</literal>  <operator>&amp;&amp;</operator>  <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>length</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\"'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>logfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><literal type="string">"\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>length</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>logfile</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>logfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>logfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Test if we are able to open the file. The server will not
                 * be able to abort just for this problem later... */</comment>
                <expr_stmt><expr><name>logfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>logfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">"Can't open the log file: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>loaderr</name>;</goto>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setLogFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"always-show-logo"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>always_show_logo</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"syslog-enabled"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <expr_stmt><expr><call><name>setSyslogEnabled</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"syslog-ident"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <expr_stmt><expr><call><name>setSyslogIdent</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"syslog-facility"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <comment type="line">// Skip error - just ignore syslog-facility</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name> <operator>=</operator>
                <call><name>configEnumGetValue</name><argument_list>(<argument><expr><name>syslog_facility_enum</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid log facility. Must be one of USER or between LOCAL0-LOCAL7"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"databases"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>dbnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid number of databases"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>loadServerConfig</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"maxclients"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid max clients limit"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"maxmemory"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"maxmemory-policy"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>=</operator>
                <call><name>configEnumGetValue</name><argument_list>(<argument><expr><name>maxmemory_policy_enum</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid maxmemory policy"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"maxmemory-samples"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxmemory_samples</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory_samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"maxmemory-samples must be 1 or greater"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"proto-max-bulk-len"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>proto_max_bulk_len</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"client-query-buffer-limit"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_max_querybuf_len</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lfu-log-factor"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lfu_log_factor</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lfu_log_factor</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"lfu-log-factor must be 0 or greater"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lfu-decay-time"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lfu_decay_time</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>lfu_decay_time</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"lfu-decay-time must be 0 or greater"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slaveof"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replicaof"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>slaveof_linenum</name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterport</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_state</name></name> <operator>=</operator> <name>REPL_STATE_CONNECT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-ping-slave-period"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-ping-replica-period"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                    <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"repl-ping-replica-period must be 1 or greater"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"repl-timeout must be 1 or greater"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-disable-tcp-nodelay"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name><operator>==</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_disable_tcp_nodelay</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-diskless-sync"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name><operator>==</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-diskless-sync-delay"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name><operator>==</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"repl-diskless-sync-delay can't be negative"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-backlog-size"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>size</name> <init>= <expr><call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"repl-backlog-size must be 1 or greater."</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>resizeReplicationBacklog</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"repl-backlog-ttl"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"repl-backlog-ttl can't be negative "</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"masterauth"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-serve-stale-data"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-serve-stale-data"</literal></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-read-only"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-read-only"</literal></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-ignore-maxmemory"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-ignore-maxmemory"</literal></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rdbcompression"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>rdb_compression</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rdbchecksum"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"activerehashing"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>activerehashing</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lazyfree-lazy-eviction"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>lazyfree_lazy_eviction</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lazyfree-lazy-expire"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lazyfree-lazy-server-del"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-lazy-flush"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-lazy-flush"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"activedefrag"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_DEFRAG</name></cpp:ifndef>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active defrag can't be enabled without proper jemalloc support"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"daemonize"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"dynamic-hz"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"hz"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&lt;</operator> <name>CONFIG_MIN_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MIN_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&gt;</operator> <name>CONFIG_MAX_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MAX_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"appendonly"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>yes</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>yes</name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>=</operator> <ternary><condition><expr><name>yes</name></expr> ?</condition><then> <expr><name>AOF_ON</name></expr> </then><else>: <expr><name>AOF_OFF</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"appendfilename"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathIsBaseName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"appendfilename can't be a path, just a filename"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"no-appendfsync-on-rewrite"</literal></expr></argument>)</argument_list></call>
                   <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_no_fsync_on_rewrite</name></name><operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"appendfsync"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_fsync</name></name> <operator>=</operator> <call><name>configEnumGetValue</name><argument_list>(<argument><expr><name>aof_fsync_enum</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_fsync</name></name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'no', 'always' or 'everysec'"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"auto-aof-rewrite-percentage"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid negative percentage for AOF auto rewrite"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"auto-aof-rewrite-min-size"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"aof-rewrite-incremental-fsync"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_rewrite_incremental_fsync</name></name> <operator>=</operator>
                 <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rdb-save-incremental-fsync"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name> <operator>=</operator>
                 <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"aof-load-truncated"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_load_truncated</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"aof-use-rdb-preamble"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>aof_use_rdb_preamble</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"requirepass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CONFIG_AUTHPASS_MAX_LEN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Password is longer than CONFIG_AUTHPASS_MAX_LEN"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name> <operator>=</operator> <ternary><condition><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"pidfile"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"dbfilename"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathIsBaseName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"dbfilename can't be a path, just a filename"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"active-defrag-threshold-lower"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
                <name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active-defrag-threshold-lower must be between 0 and 1000"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"active-defrag-threshold-upper"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
                <name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active-defrag-threshold-upper must be between 0 and 1000"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"active-defrag-ignore-bytes"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active-defrag-ignore-bytes must above 0"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"active-defrag-cycle-min"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active-defrag-cycle-min must be between 1 and 99"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"active-defrag-cycle-max"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name> <operator>&gt;</operator> <literal type="number">99</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active-defrag-cycle-max must be between 1 and 99"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"active-defrag-max-scan-fields"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"active-defrag-max-scan-fields must be positive"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"hash-max-ziplist-entries"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"hash-max-ziplist-value"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"stream-node-max-bytes"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stream_node_max_bytes</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"stream-node-max-entries"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stream_node_max_entries</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"list-max-ziplist-entries"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
            <comment type="block">/* DEAD OPTION */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"list-max-ziplist-value"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* DEAD OPTION */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"list-max-ziplist-size"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>list_max_ziplist_size</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"list-compress-depth"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"set-max-intset-entries"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"zset-max-ziplist-entries"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_entries</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"zset-max-ziplist-value"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_value</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"hll-sparse-max-bytes"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hll_sparse_max_bytes</name></name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rename-command"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>lookupCommand</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"No such command in rename-command"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* If the target command name is the empty string we just
             * remove it from the command table. */</comment>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Otherwise we re-add the command under a different name. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>copy</name> <init>= <expr><call><name>sdsdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Target command name already exists"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-enabled"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-config-file"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-announce-ip"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-announce-port"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
                <name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid port"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-announce-bus-port"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
                <name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid port"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-require-full-coverage"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>cluster_require_full_coverage</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-node-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"cluster node timeout must be 1 or greater"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-migration-barrier"</literal></expr></argument>)</argument_list></call>
                   <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"cluster migration barrier must zero or positive"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-slave-validity-factor"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-replica-validity-factor"</literal></expr></argument>)</argument_list></call><operator>)</operator>
                   <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"cluster replica validity factor must be zero or positive"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-slave-no-failover"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"cluster-replica-no-failover"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lua-time-limit"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"lua-replicate-commands"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_always_replicate_commands</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slowlog-log-slower-than"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slowlog_log_slower_than</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"latency-monitor-threshold"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"The latency threshold can't be negative"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slowlog-max-len"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slowlog_max_len</name></name> <operator>=</operator> <operator>(</operator><name>PORT_ULONG</name><operator>)</operator><operator>(</operator><call><name>strtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>    <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (PORT_ULONG) */</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"client-output-buffer-limit"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>class</name> <init>= <expr><call><name>getClientTypeByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_ULONGLONG</name></type> <name>hard</name></decl>, <decl><type ref="prev"/><name>soft</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>soft_seconds</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>class</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>class</name> <operator>==</operator> <name>CLIENT_TYPE_MASTER</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Unrecognized client limit class: the user specified "</literal>
                <literal type="string">"an invalid one, or 'master' which has no buffer limits."</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>hard</name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>soft</name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>soft_seconds</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>soft_seconds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Negative number of seconds in soft limit is invalid"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name> <operator>=</operator> <name>hard</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name> <operator>=</operator> <name>soft</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name> <operator>=</operator> <name>soft_seconds</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"stop-writes-on-bgsave-error"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"argument must be 'yes' or 'no'"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-priority"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-priority"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-announce-ip"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-announce-ip"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave-announce-port"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"replica-announce-port"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
                <name><name>server</name><operator>.</operator><name>slave_announce_port</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid port"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"min-slaves-to-write"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"min-replicas-to-write"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid value for min-replicas-to-write."</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"min-slaves-max-lag"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"min-replicas-max-lag"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid value for min-replicas-max-lag."</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"notify-keyspace-events"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>keyspaceEventsStringToFlags</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid event class character. Use 'g$lshzxeA'."</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"supervised"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>=</operator>
                <call><name>configEnumGetValue</name><argument_list>(<argument><expr><name>supervised_mode_enum</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Invalid option for 'supervised'. "</literal>
                    <literal type="string">"Allowed values: 'upstart', 'systemd', 'auto', or 'no'"</literal></expr>;</expr_stmt>
                <goto>goto <name>loaderr</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"loadmodule"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>queueLoadModule</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* argc == 1 is handled by main() as we need to enter the sentinel
             * mode ASAP. */</comment>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"sentinel directive while not in sentinel mode"</literal></expr>;</expr_stmt>
                    <goto>goto <name>loaderr</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sentinelHandleConfiguration</name><argument_list>(<argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>loaderr</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"service-name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// ignore. This is taken care of in the win32_service code.</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"persistence-available"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// remove BGSAVE, BGREWRITEAOF and replication commands</comment>
                <comment type="line">// when persistence is disabled</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sds</name></type> <name>bgsave</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sds</name></type> <name>bgrewriteaof</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sds</name></type> <name>replconf</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sds</name></type> <name>psync</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>sds</name></type> <name>sync</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>bgsave</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"bgsave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>bgrewriteaof</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"bgrewriteaof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>replconf</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"replconf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>psync</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"psync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sync</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>bgsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>bgrewriteaof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>replconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>psync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictDelete</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>bgsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>bgrewriteaof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>replconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>psync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"Bad directive or wrong number of arguments"</literal></expr>;</expr_stmt> <goto>goto <name>loaderr</name>;</goto>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Sanity checks. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>linenum</name> <operator>=</operator> <name>slaveof_linenum</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>linenum</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"replicaof directive not allowed in cluster mode"</literal></expr>;</expr_stmt>
        <goto>goto <name>loaderr</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,<argument><expr><name>totlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

<label><name>loaderr</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\n*** FATAL CONFIG FILE ERROR ***\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Reading the configuration file, at line %d\n"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; '%s'\n"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n*** FATAL CONFIG FILE ERROR ***\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reading the configuration file, at line %d\n"</literal></expr></argument>, <argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; '%s'\n"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Load the server configuration from the specified filename.
 * The function appends the additional configuration directives stored
 * in the 'options' string to the config file before loading.
 *
 * Both filename and options can be NULL, in such a case are considered
 * empty. This way loadServerConfig can be used to just load a file or
 * just load a string. */</comment>
<function><type><name>void</name></type> <name>loadServerConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>config</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Load the file content */</comment>
    <if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><literal type="string">"rb"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                    <argument><expr><literal type="string">"Fatal error, can't open config file '%s'"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Append the additional options */</comment>
    <if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>config</name></expr></argument>,<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>loadServerConfigFromString</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*-----------------------------------------------------------------------------
 * CONFIG SET implementation
 *----------------------------------------------------------------------------*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_bool_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>} else if (!strcasecmp(c-&gt;argv[2]-&gt;ptr,_name)) { \
        int yn = yesnotoi(o-&gt;ptr); \
        if (yn == -1) goto badfmt; \
        _var = yn;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_numerical_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>min</name></type></parameter>,<parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>} else if (!strcasecmp(c-&gt;argv[2]-&gt;ptr,_name)) { \
        if (getLongLongFromObject(o,&amp;ll) == C_ERR) goto badfmt; \
        if (min != LLONG_MIN &amp;&amp; ll &lt; min) goto badfmt; \
        if (max != LLONG_MAX &amp;&amp; ll &gt; max) goto badfmt; \
        _var = ll;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_memory_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>} else if (!strcasecmp(c-&gt;argv[2]-&gt;ptr,_name)) { \
        ll = memtoll(o-&gt;ptr,&amp;err); \
        if (err || ll &lt; 0) goto badfmt; \
        _var = ll;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_enum_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_enumvar</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>} else if (!strcasecmp(c-&gt;argv[2]-&gt;ptr,_name)) { \
        int enumval = configEnumGetValue(_enumvar,o-&gt;ptr); \
        if (enumval == INT_MIN) goto badfmt; \
        _var = enumval;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_special_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>} else if (!strcasecmp(c-&gt;argv[2]-&gt;ptr,_name)) {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_special_field_with_alias</name><parameter_list>(<parameter><type><name>_name1</name></type></parameter>,<parameter><type><name>_name2</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>} else if (!strcasecmp(c-&gt;argv[2]-&gt;ptr,_name1) || \
               !strcasecmp(c-&gt;argv[2]-&gt;ptr,_name2)) {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_set_else</name></cpp:macro> <cpp:value>} else</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>configSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ll</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* this starts the config_set macros else-if chain. */</comment>

    <comment type="block">/* Special fields that can't be handled with general macros. */</comment>
    <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"dbfilename"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pathIsBaseName</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"dbfilename can't be a path, just a filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name> <operator>=</operator> <call><name>zstrdup</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"requirepass"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CONFIG_AUTHPASS_MAX_LEN</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"masterauth"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"cluster-announce-ip"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"maxclients"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>orig_value</name> <init>= <expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Try to check if the OS is capable of supporting so many FDs. */</comment>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator><name>ll</name></expr>;</expr_stmt>                                            <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (PORT_ULONGLONG) */</comment>
        <if_stmt><if>if <condition>(<expr><name>ll</name> <operator>&gt;</operator> <name>orig_value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>adjustOpenFilesLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>!=</operator> <name>ll</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The operating system is not able to handle the specified number of clients, try with %lld"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <name>orig_value</name></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>aeGetSetSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
                <name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>+</operator> <name>CONFIG_FDSET_INCR</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>aeResizeSetSize</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,
                    <argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>+</operator> <name>CONFIG_FDSET_INCR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AE_ERR</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The event loop API used by Redis is not able to handle the specified number of clients"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name> <operator>=</operator> <name>orig_value</name></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"appendonly"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>enable</name> <init>= <expr><call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>enable</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>stopAppendOnly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enable</name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_OFF</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>startAppendOnly</name><argument_list>()</argument_list></call> <operator>==</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                    <argument><expr><literal type="string">"Unable to turn on AOF. Check server logs."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"save"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Perform sanity check before setting the new config:
         * - Even number of args
         * - Seconds &gt;= 1, changes &gt;= 0 */</comment>
        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>badfmt</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>val</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>eptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator>
                <operator>(</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
                <operator>(</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>badfmt</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="block">/* Finally set the new config */</comment>
        <expr_stmt><expr><call><name>resetServerSaveParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vlen</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>time_t</name></type> <name>seconds</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>changes</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>seconds</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendServerSaveParams</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"dir"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Changing directory: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"client-output-buffer-limit"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* We need a multiple of 4: &lt;class&gt; &lt;hard&gt; &lt;soft&gt; &lt;soft_seconds&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>badfmt</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Sanity check of single arguments, so that we either refuse the
         * whole configuration string or accept it all, even if a single
         * error in a single client class is present. */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>val</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>class</name> <init>= <expr><call><name>getClientTypeByName</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>class</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>class</name> <operator>==</operator> <name>CLIENT_TYPE_MASTER</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>badfmt</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>err</name> <operator>||</operator> <name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>badfmt</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <comment type="block">/* Finally set the new config */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vlen</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>class</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_ULONGLONG</name></type> <name>hard</name></decl>, <decl><type ref="prev"/><name>soft</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>soft_seconds</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>class</name> <operator>=</operator> <call><name>getClientTypeByName</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hard</name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>soft</name> <operator>=</operator> <call><name>memtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>soft_seconds</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name> <operator>=</operator> <name>hard</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name> <operator>=</operator> <name>soft</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>class</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name> <operator>=</operator> <name>soft_seconds</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field</name><argument_list>(<argument><literal type="string">"notify-keyspace-events"</literal></argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>keyspaceEventsStringToFlags</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>badfmt</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_special_field_with_alias</name><argument_list>(<argument><literal type="string">"slave-announce-ip"</literal></argument>,
                                          <argument><literal type="string">"replica-announce-ip"</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr> ?</condition><then> <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block">/* Boolean fields.
     * config_set_bool_field(name,var). */</comment>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"rdbcompression"</literal></argument>, <argument>server.rdb_compression</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"repl-disable-tcp-nodelay"</literal></argument>,<argument>server.repl_disable_tcp_nodelay</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"repl-diskless-sync"</literal></argument>,<argument>server.repl_diskless_sync</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"cluster-require-full-coverage"</literal></argument>,<argument>server.cluster_require_full_coverage</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"cluster-slave-no-failover"</literal></argument>,<argument>server.cluster_slave_no_failover</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"cluster-replica-no-failover"</literal></argument>,<argument>server.cluster_slave_no_failover</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"aof-rewrite-incremental-fsync"</literal></argument>,<argument>server.aof_rewrite_incremental_fsync</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"rdb-save-incremental-fsync"</literal></argument>,<argument>server.rdb_save_incremental_fsync</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"aof-load-truncated"</literal></argument>,<argument>server.aof_load_truncated</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"aof-use-rdb-preamble"</literal></argument>,<argument>server.aof_use_rdb_preamble</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"slave-serve-stale-data"</literal></argument>,<argument>server.repl_serve_stale_data</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"replica-serve-stale-data"</literal></argument>,<argument>server.repl_serve_stale_data</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"slave-read-only"</literal></argument>,<argument>server.repl_slave_ro</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"replica-read-only"</literal></argument>,<argument>server.repl_slave_ro</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"slave-ignore-maxmemory"</literal></argument>,<argument>server.repl_slave_ignore_maxmemory</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"replica-ignore-maxmemory"</literal></argument>,<argument>server.repl_slave_ignore_maxmemory</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"activerehashing"</literal></argument>,<argument>server.activerehashing</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"activedefrag"</literal></argument>,<argument>server.active_defrag_enabled</argument>)</argument_list></macro> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_DEFRAG</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                <argument><expr><literal type="string">"-DISABLED Active defragmentation cannot be enabled: it "</literal>
                <literal type="string">"requires a Redis server compiled with a modified Jemalloc "</literal>
                <literal type="string">"like the one shipped by default with the Redis source "</literal>
                <literal type="string">"distribution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"protected-mode"</literal></argument>,<argument>server.protected_mode</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"stop-writes-on-bgsave-error"</literal></argument>,<argument>server.stop_writes_on_bgsave_err</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"lazyfree-lazy-eviction"</literal></argument>,<argument>server.lazyfree_lazy_eviction</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"lazyfree-lazy-expire"</literal></argument>,<argument>server.lazyfree_lazy_expire</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"lazyfree-lazy-server-del"</literal></argument>,<argument>server.lazyfree_lazy_server_del</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"slave-lazy-flush"</literal></argument>,<argument>server.repl_slave_lazy_flush</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"replica-lazy-flush"</literal></argument>,<argument>server.repl_slave_lazy_flush</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"no-appendfsync-on-rewrite"</literal></argument>,<argument>server.aof_no_fsync_on_rewrite</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_bool_field</name><argument_list>(
      <argument><literal type="string">"dynamic-hz"</literal></argument>,<argument>server.dynamic_hz</argument>)</argument_list></macro> <block>{<block_content>

    <comment type="block">/* Numerical fields.
     * config_set_numerical_field(name,var,min,max) */</comment>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"tcp-keepalive"</literal></argument>,<argument>server.tcpkeepalive</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"maxmemory-samples"</literal></argument>,<argument>server.maxmemory_samples</argument>,<argument><literal type="number">1</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"lfu-log-factor"</literal></argument>,<argument>server.lfu_log_factor</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"lfu-decay-time"</literal></argument>,<argument>server.lfu_decay_time</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"timeout"</literal></argument>,<argument>server.maxidletime</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"active-defrag-threshold-lower"</literal></argument>,<argument>server.active_defrag_threshold_lower</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"active-defrag-threshold-upper"</literal></argument>,<argument>server.active_defrag_threshold_upper</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1000</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_memory_field</name><argument_list>(
      <argument><literal type="string">"active-defrag-ignore-bytes"</literal></argument>,<argument>server.active_defrag_ignore_bytes</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"active-defrag-cycle-min"</literal></argument>,<argument>server.active_defrag_cycle_min</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">99</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"active-defrag-cycle-max"</literal></argument>,<argument>server.active_defrag_cycle_max</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">99</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"active-defrag-max-scan-fields"</literal></argument>,<argument>server.active_defrag_max_scan_fields</argument>,<argument><literal type="number">1</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"auto-aof-rewrite-percentage"</literal></argument>,<argument>server.aof_rewrite_perc</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro><block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"hash-max-ziplist-entries"</literal></argument>,<argument>server.hash_max_ziplist_entries</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"hash-max-ziplist-value"</literal></argument>,<argument>server.hash_max_ziplist_value</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"stream-node-max-bytes"</literal></argument>,<argument>server.stream_node_max_bytes</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"stream-node-max-entries"</literal></argument>,<argument>server.stream_node_max_entries</argument>,<argument><literal type="number">0</literal></argument>,<argument>LLONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"list-max-ziplist-size"</literal></argument>,<argument>server.list_max_ziplist_size</argument>,<argument>INT_MIN</argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"list-compress-depth"</literal></argument>,<argument>server.list_compress_depth</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"set-max-intset-entries"</literal></argument>,<argument>server.set_max_intset_entries</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"zset-max-ziplist-entries"</literal></argument>,<argument>server.zset_max_ziplist_entries</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"zset-max-ziplist-value"</literal></argument>,<argument>server.zset_max_ziplist_value</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"hll-sparse-max-bytes"</literal></argument>,<argument>server.hll_sparse_max_bytes</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"lua-time-limit"</literal></argument>,<argument>server.lua_time_limit</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"slowlog-log-slower-than"</literal></argument>,<argument>server.slowlog_log_slower_than</argument>,<argument>-<literal type="number">1</literal></argument>,<argument>LLONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"slowlog-max-len"</literal></argument>,<argument>ll</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
      <comment type="block">/* Cast to unsigned. */</comment>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>slowlog_max_len</name></name> <operator>=</operator> <operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>ll</name></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"latency-monitor-threshold"</literal></argument>,<argument>server.latency_monitor_threshold</argument>,<argument><literal type="number">0</literal></argument>,<argument>LLONG_MAX</argument>)</argument_list></macro><block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"repl-ping-slave-period"</literal></argument>,<argument>server.repl_ping_slave_period</argument>,<argument><literal type="number">1</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"repl-ping-replica-period"</literal></argument>,<argument>server.repl_ping_slave_period</argument>,<argument><literal type="number">1</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"repl-timeout"</literal></argument>,<argument>server.repl_timeout</argument>,<argument><literal type="number">1</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"repl-backlog-ttl"</literal></argument>,<argument>server.repl_backlog_time_limit</argument>,<argument><literal type="number">0</literal></argument>,<argument>LONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"repl-diskless-sync-delay"</literal></argument>,<argument>server.repl_diskless_sync_delay</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"slave-priority"</literal></argument>,<argument>server.slave_priority</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"replica-priority"</literal></argument>,<argument>server.slave_priority</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"slave-announce-port"</literal></argument>,<argument>server.slave_announce_port</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">65535</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"replica-announce-port"</literal></argument>,<argument>server.slave_announce_port</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">65535</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"min-slaves-to-write"</literal></argument>,<argument>server.repl_min_slaves_to_write</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"min-replicas-to-write"</literal></argument>,<argument>server.repl_min_slaves_to_write</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"min-slaves-max-lag"</literal></argument>,<argument>server.repl_min_slaves_max_lag</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"min-replicas-max-lag"</literal></argument>,<argument>server.repl_min_slaves_max_lag</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>refreshGoodSlavesCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"cluster-node-timeout"</literal></argument>,<argument>server.cluster_node_timeout</argument>,<argument><literal type="number">0</literal></argument>,<argument>LLONG_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"cluster-announce-port"</literal></argument>,<argument>server.cluster_announce_port</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">65535</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"cluster-announce-bus-port"</literal></argument>,<argument>server.cluster_announce_bus_port</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">65535</literal></argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"cluster-migration-barrier"</literal></argument>,<argument>server.cluster_migration_barrier</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro><block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"cluster-slave-validity-factor"</literal></argument>,<argument>server.cluster_slave_validity_factor</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"cluster-replica-validity-factor"</literal></argument>,<argument>server.cluster_slave_validity_factor</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"hz"</literal></argument>,<argument>server.config_hz</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
        <comment type="block">/* Hz is more an hint from the user, so we accept values out of range
         * but cap them to reasonable values. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&lt;</operator> <name>CONFIG_MIN_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MIN_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>&gt;</operator> <name>CONFIG_MAX_HZ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name> <operator>=</operator> <name>CONFIG_MAX_HZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block> <macro><name>config_set_numerical_field</name><argument_list>(
      <argument><literal type="string">"watchdog-period"</literal></argument>,<argument>ll</argument>,<argument><literal type="number">0</literal></argument>,<argument>INT_MAX</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ll</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>enableWatchdog</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>disableWatchdog</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Memory fields.
     * config_set_memory_field(name,var) */</comment>
    </block_content>}</block> <macro><name>config_set_memory_field</name><argument_list>(<argument><literal type="string">"maxmemory"</literal></argument>,<argument>server.maxmemory</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name> <operator>&lt;</operator> <call><name>zmalloc_used_memory</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: the new maxmemory value set via CONFIG SET is smaller than the current memory usage. This will result in key eviction and/or the inability to accept new write commands depending on the maxmemory-policy."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>freeMemoryIfNeededAndSafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> <macro><name>config_set_memory_field</name><argument_list>(
      <argument><literal type="string">"proto-max-bulk-len"</literal></argument>,<argument>server.proto_max_bulk_len</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_memory_field</name><argument_list>(
      <argument><literal type="string">"client-query-buffer-limit"</literal></argument>,<argument>server.client_max_querybuf_len</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_memory_field</name><argument_list>(<argument><literal type="string">"repl-backlog-size"</literal></argument>,<argument>ll</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>resizeReplicationBacklog</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <macro><name>config_set_memory_field</name><argument_list>(<argument><literal type="string">"auto-aof-rewrite-min-size"</literal></argument>,<argument>ll</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>

    <comment type="block">/* Enumeration fields.
     * config_set_enum_field(name,var,enum_var) */</comment>
    </block_content>}</block> <macro><name>config_set_enum_field</name><argument_list>(
      <argument><literal type="string">"loglevel"</literal></argument>,<argument>server.verbosity</argument>,<argument>loglevel_enum</argument>)</argument_list></macro> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <expr_stmt><expr><call><name>setLogVerbosityLevel</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block> <macro><name>config_set_enum_field</name><argument_list>(
      <argument><literal type="string">"maxmemory-policy"</literal></argument>,<argument>server.maxmemory_policy</argument>,<argument>maxmemory_policy_enum</argument>)</argument_list></macro> <block>{<block_content>
    </block_content>}</block> <macro><name>config_set_enum_field</name><argument_list>(
      <argument><literal type="string">"appendfsync"</literal></argument>,<argument>server.aof_fsync</argument>,<argument>aof_fsync_enum</argument>)</argument_list></macro> <block>{<block_content>

    <comment type="block">/* Everyhing else is an error... */</comment>
    </block_content>}</block> <macro><name>config_set_else</name></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unsupported CONFIG parameter: %s"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block>

    <comment type="block">/* On success we just return a generic OK for all the options. */</comment>
    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

<label><name>badfmt</name>:</label> <comment type="block">/* Bad format errors */</comment>
    <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid argument '%s' for CONFIG SET '%s'"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<comment type="block">/*-----------------------------------------------------------------------------
 * CONFIG GET implementation
 *----------------------------------------------------------------------------*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_get_string_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (stringmatch(pattern,_name,1)) { \
        addReplyBulkCString(c,_name); \
        addReplyBulkCString(c,_var ? _var : ""); \
        matches++; \
    } \
} while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_get_bool_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (stringmatch(pattern,_name,1)) { \
        addReplyBulkCString(c,_name); \
        addReplyBulkCString(c,_var ? "yes" : "no"); \
        matches++; \
    } \
} while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_get_numerical_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (stringmatch(pattern,_name,1)) { \
        ll2string(buf,sizeof(buf),_var); \
        addReplyBulkCString(c,_name); \
        addReplyBulkCString(c,buf); \
        matches++; \
    } \
} while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>config_get_enum_field</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_enumvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (stringmatch(pattern,_name,1)) { \
        addReplyBulkCString(c,_name); \
        addReplyBulkCString(c,configEnumGetNameOrUnknown(_enumvar,_var)); \
        matches++; \
    } \
} while(0);</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>configGetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>replylen</name> <init>= <expr><call><name>addDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* String values */</comment>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"dbfilename"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"requirepass"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"masterauth"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-ip"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"unixsocket"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"logfile"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"pidfile"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"slave-announce-ip"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_string_field</name><argument_list>(<argument><expr><literal type="string">"replica-announce-ip"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Numerical values */</comment>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"maxmemory"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"proto-max-bulk-len"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>proto_max_bulk_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"client-query-buffer-limit"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>client_max_querybuf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"maxmemory-samples"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"lfu-log-factor"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lfu_log_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"lfu-decay-time"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lfu_decay_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"timeout"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"active-defrag-threshold-lower"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"active-defrag-threshold-upper"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"active-defrag-ignore-bytes"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"active-defrag-cycle-min"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"active-defrag-cycle-max"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"active-defrag-max-scan-fields"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"auto-aof-rewrite-percentage"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"auto-aof-rewrite-min-size"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"hash-max-ziplist-entries"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"hash-max-ziplist-value"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"stream-node-max-bytes"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stream_node_max_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"stream-node-max-entries"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stream_node_max_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"list-max-ziplist-size"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>list_max_ziplist_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"list-compress-depth"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"set-max-intset-entries"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"zset-max-ziplist-entries"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"zset-max-ziplist-value"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"hll-sparse-max-bytes"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>hll_sparse_max_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"lua-time-limit"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"slowlog-log-slower-than"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>slowlog_log_slower_than</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"latency-monitor-threshold"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"slowlog-max-len"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>slowlog_max_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"cluster-announce-bus-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"tcp-backlog"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"databases"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"repl-ping-slave-period"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"repl-ping-replica-period"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"repl-timeout"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"repl-backlog-size"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"repl-backlog-ttl"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"maxclients"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"watchdog-period"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"slave-priority"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"replica-priority"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"slave-announce-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"replica-announce-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"min-slaves-to-write"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"min-replicas-to-write"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"min-slaves-max-lag"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"min-replicas-max-lag"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"hz"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"cluster-node-timeout"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"cluster-migration-barrier"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"cluster-slave-validity-factor"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"cluster-replica-validity-factor"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"repl-diskless-sync-delay"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_numerical_field</name><argument_list>(<argument><expr><literal type="string">"tcp-keepalive"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>tcpkeepalive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Bool (yes/no) values */</comment>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"cluster-require-full-coverage"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>cluster_require_full_coverage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"cluster-slave-no-failover"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"cluster-replica-no-failover"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"no-appendfsync-on-rewrite"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_no_fsync_on_rewrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"slave-serve-stale-data"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"replica-serve-stale-data"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"slave-read-only"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"replica-read-only"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"slave-ignore-maxmemory"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"replica-ignore-maxmemory"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"stop-writes-on-bgsave-error"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"daemonize"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>daemonize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"rdbcompression"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"rdbchecksum"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"activerehashing"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>activerehashing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"activedefrag"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"protected-mode"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>protected_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"repl-disable-tcp-nodelay"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_disable_tcp_nodelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"repl-diskless-sync"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"aof-rewrite-incremental-fsync"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_incremental_fsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"rdb-save-incremental-fsync"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"aof-load-truncated"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_load_truncated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"aof-use-rdb-preamble"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_use_rdb_preamble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-eviction"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_eviction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-expire"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"lazyfree-lazy-server-del"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"slave-lazy-flush"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"replica-lazy-flush"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_bool_field</name><argument_list>(<argument><expr><literal type="string">"dynamic-hz"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Enum values */</comment>
    <expr_stmt><expr><call><name>config_get_enum_field</name><argument_list>(<argument><expr><literal type="string">"maxmemory-policy"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name></expr></argument>,<argument><expr><name>maxmemory_policy_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_enum_field</name><argument_list>(<argument><expr><literal type="string">"loglevel"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name></expr></argument>,<argument><expr><name>loglevel_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_enum_field</name><argument_list>(<argument><expr><literal type="string">"supervised"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name></expr></argument>,<argument><expr><name>supervised_mode_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>config_get_enum_field</name><argument_list>(<argument><expr><literal type="string">"appendfsync"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>aof_fsync</name></name></expr></argument>,<argument><expr><name>aof_fsync_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <expr_stmt><expr><call><name>config_get_enum_field</name><argument_list>(<argument><expr><literal type="string">"syslog-facility"</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name></expr></argument>,<argument><expr><name>syslog_facility_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Everything we can't handle with macros follows. */</comment>

    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"appendonly"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"appendonly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>==</operator> <name>AOF_OFF</name></expr> ?</condition><then> <expr><literal type="string">"no"</literal></expr> </then><else>: <expr><literal type="string">"yes"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"dir"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>getcwd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%jd %d"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>seconds</name></expr></argument>,
                    <argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"client-output-buffer-limit"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>buf</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>buf</argument>,<argument><literal type="string">"%s %llu %llu %Id"</literal></argument>,                                <argument>WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id */</comment>
                    getClientTypeName(j)</argument>,
                    <argument>server.client_obuf_limits[j].hard_limit_bytes</argument>,
                    <argument>server.client_obuf_limits[j].soft_limit_bytes</argument>,
                    <argument>(PORT_LONG) server.client_obuf_limits[j].soft_limit_seconds</argument>)</argument_list></macro></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>CLIENT_TYPE_OBUF_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"client-output-buffer-limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"unixsocketperm"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%o"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"unixsocketperm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"slaveof"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"replicaof"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optname</name> <init>= <expr><ternary><condition><expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"slaveof"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
                        <expr><literal type="string">"slaveof"</literal></expr> </then><else>: <expr><literal type="string">"replicaof"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%s %d"</literal></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"notify-keyspace-events"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>flagsobj</name> <init>= <expr><call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>,
            <argument><expr><call><name>keyspaceEventsFlagsToString</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"notify-keyspace-events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulk</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>flagsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>flagsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><literal type="string">"bind"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>aux</name> <init>= <expr><call><name>sdsjoin</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>replylen</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name>matches</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cat (PORT_LONG) */</comment>
</block_content>}</block></function>

<comment type="block">/*-----------------------------------------------------------------------------
 * CONFIG REWRITE implementation
 *----------------------------------------------------------------------------*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_CONFIG_REWRITE_SIGNATURE</name></cpp:macro> <cpp:value>"# Generated by CONFIG REWRITE"</cpp:value></cpp:define>

<comment type="block">/* We use the following dictionary type to store where a configuration
 * option is mentioned in the old configuration file, so it's
 * like "maxmemory" -&gt; list of line numbers (first line is zero). */</comment>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dictSdsCaseHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dictSdsKeyCaseCompare</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dictSdsDestructor</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dictListDestructor</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>privdata</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>val</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block">/* Sentinel config rewriting is implemented inside sentinel.c by
 * rewriteConfigSentinelOption(). */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>rewriteConfigSentinelOption</name><argument_list>(<argument><expr>struct <name>rewriteConfigState</name> <operator>*</operator><name>state</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictType</name></type> <name>optionToLineDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>dictListDestructor</name></expr>          <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictType</name></type> <name>optionSetDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,            <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,      <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,          <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                        <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* The config rewrite state. */</comment>
<struct>struct <name>rewriteConfigState</name> <block>{
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>option_to_line</name></decl>;</decl_stmt> <comment type="block">/* Option -&gt; list of config file lines map */</comment>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>rewritten</name></decl>;</decl_stmt>      <comment type="block">/* Dictionary of already processed options */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>numlines</name></decl>;</decl_stmt>         <comment type="block">/* Number of lines in current config */</comment>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>           <comment type="block">/* Current lines as an array of sds strings */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>has_tail</name></decl>;</decl_stmt>         <comment type="block">/* True if we already added directives that were
                             not present in the original config file. */</comment>
}</block>;</struct>

<comment type="block">/* Append the new line to the current configuration state. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigAppendLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cat (PORT_ULONG) */</comment>
    <name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name><operator>++</operator></expr>]</index></name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></function>

<comment type="block">/* Populate the option -&gt; list of line numbers map. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigAddLineNumberToOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenum</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><call><name>sdsdup</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Add the specified option to the set of processed options.
 * This is useful as only unused lines of processed options will be blanked
 * in the config file, while options the rewrite process does not understand
 * remain untouched. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigMarkAsProcessed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>opt</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name></expr></argument>,<argument><expr><name>opt</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Read the old file, split it into lines to populate a newly created
 * config rewrite state, and return it to the caller.
 *
 * If it is impossible to read the old file, NULL is returned.
 * If the old file does not exist at all, an empty state is returned. */</comment>
<function><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>rewriteConfigReadOldFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optionToLineDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optionSetDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>has_tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>state</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Read the old file line by line, populate the state. */</comment>
    <while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>CONFIG_MAX_LINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdstrim</name><argument_list>(<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\r\n\t "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>linenum</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Zero based, so we init at -1 */</comment>

        <comment type="block">/* Handle comments and empty lines. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>has_tail</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><name>REDIS_CONFIG_REWRITE_SIGNATURE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>has_tail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Not a comment, split into arguments. */</comment>
        <expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>sdssplitargs</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Apparently the line is unparsable for some reason, for
             * instance it may have unbalanced quotes. Load it as a
             * comment. */</comment>
            <decl_stmt><decl><type><name>sds</name></type> <name>aux</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"# ??? "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>aux</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sdstolower</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* We only want lowercase config directives. */</comment>

        <comment type="block">/* Now we populate the state according to the content of this line.
         * Append the line and populate the option -&gt; line numbers map. */</comment>
        <expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Translate options using the word "slave" to the corresponding name
         * "replica", before adding such option to the config name -&gt; lines
         * mapping. */</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>alt</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>alt</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>alt</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><name>alt</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>alt</name></expr></argument>,<argument><expr><literal type="string">"replica"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>alt</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>alt</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>alt</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>rewriteConfigAddLineNumberToOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>argv</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Rewrite the specified configuration option with the new "line".
 * It progressively uses lines of the file that were already used for the same
 * configuration option in the old version of the file, removing that line from
 * the map of options -&gt; line numbers.
 *
 * If there are lines associated with a given configuration option and
 * "force" is non-zero, the line is appended to the configuration file.
 * Usually "force" is true when an option has not its default value, so it
 * must be rewritten even if not present previously.
 *
 * The first time a line is appended into a configuration file, a comment
 * is added to show that starting from that point the config file was generated
 * by CONFIG REWRITE.
 *
 * "line" is either used, or freed, so the caller does not need to free it
 * in any way. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigRewriteLine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>o</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Option not used previously, and we are not forced to use it. */</comment>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>PORT_LONG</name><operator>)</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>                             <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>

        <comment type="block">/* There are still lines in the old configuration file we can reuse
         * for this option. Replace the line with the new one. */</comment>
        <name>listDelNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Append a new line. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>has_tail</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,
                <argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>REDIS_CONFIG_REWRITE_SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>has_tail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>rewriteConfigAppendLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Write the long long 'bytes' value as a string in a way that is parsable
 * inside redis.conf. If possible uses the GB, MB, KB notation. */</comment>
<function><type><name>int</name></type> <name>rewriteConfigFormatMemory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>gb</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kb</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes</name> <operator>%</operator> <name>gb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lldgb"</literal></expr></argument>,<argument><expr><name>bytes</name><operator>/</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes</name> <operator>%</operator> <name>mb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lldmb"</literal></expr></argument>,<argument><expr><name>bytes</name><operator>/</operator><name>mb</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bytes</name> <operator>%</operator> <name>kb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lldkb"</literal></expr></argument>,<argument><expr><name>bytes</name><operator>/</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite a simple "option-name &lt;bytes&gt;" configuration option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigBytesOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>rewriteConfigFormatMemory</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite a yes/no option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigYesNoOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite a string option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigStringOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>

    <comment type="block">/* String options set to NULL need to be not present at all in the
     * configuration file to be set to NULL again at the next reboot. */</comment>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set force to zero if the value is set to its default. */</comment>
    <if_stmt><if>if <condition>(<expr><name>defvalue</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>defvalue</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite a numerical (long long range) option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigNumericalOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %lld"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite a octal option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigOctalOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defvalue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name> <init>= <expr><call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %o"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite an enumeration option. It takes as usually state and option name,
 * and in addition the enumeration array and the default value for the
 * option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigEnumOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>configEnum</name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defval</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>configEnumGetNameOrUnknown</name><argument_list>(<argument><expr><name>ce</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>defval</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<comment type="block">/* Rewrite the syslog-facility option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigSyslogfacilityOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name><name>server</name><operator>.</operator><name>syslog_facility</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>value</name> <operator>!=</operator> <name>LOG_LOCAL0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>option</name> <init>= <expr><literal type="string">"syslog-facility"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>configEnumGetNameOrUnknown</name><argument_list>(<argument><expr><name>syslog_facility_enum</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Rewrite the save option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigSaveOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>

    <comment type="block">/* Note that if there are no save parameters at all, all the current
     * config line with "save" will be detected as orphaned and deleted,
     * resulting into no RDB persistence as expected. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>saveparamslen</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"save %Id %d"</literal></expr></argument>,                                      <argument><expr><macro><name>WIN_PORT_FIX</name> <comment type="block">/* %ld -&gt; %Id */</comment>
            <argument_list>(<argument>PORT_LONG</argument>)</argument_list></macro> <name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>seconds</name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>saveparams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Mark "save" as processed in case server.saveparamslen is zero. */</comment>
    <expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite the dir option, always using absolute paths.*/</comment>
<function><type><name>void</name></type> <name>rewriteConfigDirOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cwd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return> <comment type="block">/* no rewrite on error. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"dir"</literal></expr></argument>,<argument><expr><name>cwd</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite the slaveof option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigSlaveofOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>

    <comment type="block">/* If this is a master, we want all the slaveof config options
     * in the file to be removed. Note that if this is a cluster instance
     * we don't want a slaveof directive inside redis.conf. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name> <operator>||</operator> <name><name>server</name><operator>.</operator><name>masterhost</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%s %s %d"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>,
        <argument><expr><name><name>server</name><operator>.</operator><name>masterhost</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>masterport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite the notify-keyspace-events option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigNotifykeyspaceeventsOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><literal type="string">"notify-keyspace-events"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>keyspaceEventsFlagsToString</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rewrite the client-output-buffer-limit option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigClientoutputbufferlimitOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><literal type="string">"client-output-buffer-limit"</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CLIENT_TYPE_OBUF_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><operator>(</operator><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name> <operator>!=</operator>
                    <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name> <operator>!=</operator>
                    <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name> <operator>!=</operator>
                    <name><name>clientBufferLimitsDefaults</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_seconds</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>hard</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>soft</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>rewriteConfigFormatMemory</name><argument_list>(<argument><expr><name>hard</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hard</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hard_limit_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigFormatMemory</name><argument_list>(<argument><expr><name>soft</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>soft</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><name><name>server</name><operator>.</operator><name>client_obuf_limits</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>soft_limit_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>getClientTypeName</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>typename</name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"replica"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>sdsempty()</argument>,<argument><literal type="string">"%s %s %s %s %Id"</literal></argument>, <argument>WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id */</comment>
                option</argument>, <argument>typename</argument>, <argument>hard</argument>, <argument>soft</argument>,
                <argument>(PORT_LONG) server.client_obuf_limits[j].soft_limit_seconds</argument>)</argument_list></macro></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Rewrite the bind option. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigBindOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>addresses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><literal type="string">"bind"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Nothing to rewrite if we don't have bind addresses. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rewriteConfigMarkAsProcessed</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Rewrite as bind &lt;addr1&gt; &lt;addr2&gt; ... &lt;addrN&gt; */</comment>
    <expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>sdsjoin</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr</name></name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>bindaddr_count</name></name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>option</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Glue together the configuration lines in the current configuration
 * rewrite state into a single string, stripping multiple empty lines. */</comment>
<function><type><name>sds</name></type> <name>rewriteConfigGetContentFromState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>content</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>was_empty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>numlines</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* Every cluster of empty lines is turned into a single empty line. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>was_empty</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>was_empty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>was_empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>content</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>content</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free the configuration rewrite state. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigReleaseState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>,<argument><expr><name><name>state</name><operator>-&gt;</operator><name>numlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* At the end of the rewrite process the state contains the remaining
 * map between "option name" =&gt; "lines in the original config file".
 * Lines used by the rewrite process were removed by the function
 * rewriteConfigRewriteLine(), all the other lines are "orphaned" and
 * should be replaced by empty lines.
 *
 * This function does just this, iterating all the option names and
 * blanking all the lines still associated. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigRemoveOrphaned</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>option_to_line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>option</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Don't blank lines about options the rewrite process
         * don't understand. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rewritten</name></name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"Not rewritten option: %s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <while>while<condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name> <init>= <expr><call><name>listFirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>linenum</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>PORT_LONG</name><operator>)</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>                         <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>

            <name>sdsfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>linenum</name></expr>]</index></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function overwrites the old configuration file with the new content.
 *
 * 1) The old file length is obtained.
 * 2) If the new content is smaller, padding is added.
 * 3) A single write(2) call is used to replace the content of the file.
 * 4) Later the file is truncated to the length of the new content.
 *
 * This way we are sure the file is left in a consistent state even if the
 * process is stopped between any of the four operations.
 *
 * The function returns 0 on success, otherwise -1 is returned and errno
 * set accordingly. */</comment>
<function><type><name>int</name></type> <name>rewriteConfigOverwriteFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>configfile</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>content</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>configfile</name></expr></argument>,<argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>content_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                       <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast (int) */</comment>
    <name><name>struct</name> <name>IF_WIN32</name></name></type><argument_list>(<argument><expr><name>_stat64</name></expr></argument>,<argument><expr><name>stat</name></expr></argument>)</argument_list> <name>sb</name></decl>;</decl_stmt>                                           <comment type="line">// TODO: verify for 32-bit</comment>
    <decl_stmt><decl><type><name>sds</name></type> <name>content_padded</name></decl>;</decl_stmt>

    <comment type="block">/* 1) Open the old file (or create a new one if it does not
     *    exist), get the size. */</comment>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* errno set by open(). */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* errno set by fstat(). */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 2) Pad the content at least match the old file size. */</comment>
    <expr_stmt><expr><name>content_padded</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>content_size</name> <operator>&lt;</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* If the old file was bigger, pad the content with
         * a newline plus as many "#" chars as required. */</comment>
        <expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>sb</name><operator>.</operator><name>st_size</name></name> <operator>-</operator> <name>content_size</name><operator>)</operator></expr>;</expr_stmt>                             <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
        <name>content_padded</name> <init>= <expr><call><name>sdsgrowzero</name><argument_list>(<argument><expr><name>content_padded</name></expr></argument>,<argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>content_padded</name><index>[<expr><name>content_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>content_padded</name><operator>+</operator><name>content_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="char">'#'</literal></expr></argument>,<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>padding</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cat (size_t) */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 3) Write the new content using a single write(2). */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>content_padded</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>content_padded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 4) Truncate the file to the right length if we used padding. */</comment>
    <if_stmt><if>if <condition>(<expr><name>padding</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>content_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Non critical error... */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>content_padded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Rewrite the configuration file at "path".
 * If the configuration file already exists, we try at best to retain comments
 * and overall structure.
 *
 * Configuration parameters that are at their default value, unless already
 * explicitly included in the old configuration file, are not rewritten.
 *
 * On error -1 is returned and errno is set accordingly, otherwise 0. */</comment>
<function><type><name>int</name></type> <name>rewriteConfig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>newcontent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <comment type="block">/* Step 1: read the old config into our rewrite state. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>rewriteConfigReadOldFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Step 2: rewrite every single option, replacing or appending it inside
     * the rewrite state. */</comment>

    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"daemonize"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>daemonize</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"pidfile"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_PID_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-announce-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_port</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_CLUSTER_ANNOUNCE_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-announce-bus-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_bus_port</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_CLUSTER_ANNOUNCE_BUS_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"tcp-backlog"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>tcp_backlog</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_TCP_BACKLOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBindOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"unixsocket"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocket</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigOctalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"unixsocketperm"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>unixsocketperm</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_UNIX_SOCKET_PERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"timeout"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxidletime</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_CLIENT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"tcp-keepalive"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>tcpkeepalive</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_TCP_KEEPALIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-announce-port"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_port</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_ANNOUNCE_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigEnumOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"loglevel"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>verbosity</name></name></expr></argument>,<argument><expr><name>loglevel_enum</name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_VERBOSITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"logfile"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LOGFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"syslog-enabled"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>syslog_enabled</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SYSLOG_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"syslog-ident"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>syslog_ident</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SYSLOG_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <expr_stmt><expr><call><name>rewriteConfigSyslogfacilityOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>rewriteConfigSaveOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"databases"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>dbnum</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DBNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"stop-writes-on-bgsave-error"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stop_writes_on_bgsave_err</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_STOP_WRITES_ON_BGSAVE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"rdbcompression"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_compression</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_RDB_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"rdbchecksum"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_checksum</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_RDB_CHECKSUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"dbfilename"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_RDB_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigDirOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigSlaveofOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replicaof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-announce-ip"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_announce_ip</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_ANNOUNCE_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"masterauth"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>masterauth</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-announce-ip"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_announce_ip</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-serve-stale-data"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_serve_stale_data</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-read-only"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ro</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-ignore-maxmemory"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_ignore_maxmemory</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_IGNORE_MAXMEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-ping-replica-period"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_ping_slave_period</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_PING_SLAVE_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-timeout"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_timeout</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-backlog-size"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_size</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_BACKLOG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-backlog-ttl"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_backlog_time_limit</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-disable-tcp-nodelay"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_disable_tcp_nodelay</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-diskless-sync"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_DISKLESS_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"repl-diskless-sync-delay"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_diskless_sync_delay</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_REPL_DISKLESS_SYNC_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-priority"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slave_priority</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_PRIORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"min-replicas-to-write"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_to_write</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_MIN_SLAVES_TO_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"min-replicas-max-lag"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_min_slaves_max_lag</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_MIN_SLAVES_MAX_LAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"requirepass"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"maxclients"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxclients</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_MAX_CLIENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"maxmemory"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_MAXMEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"proto-max-bulk-len"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>proto_max_bulk_len</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_PROTO_MAX_BULK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"client-query-buffer-limit"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>client_max_querybuf_len</name></name></expr></argument>,<argument><expr><name>PROTO_MAX_QUERYBUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigEnumOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"maxmemory-policy"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_policy</name></name></expr></argument>,<argument><expr><name>maxmemory_policy_enum</name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_MAXMEMORY_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"maxmemory-samples"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>maxmemory_samples</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_MAXMEMORY_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"lfu-log-factor"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lfu_log_factor</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LFU_LOG_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"lfu-decay-time"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lfu_decay_time</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LFU_DECAY_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"active-defrag-threshold-lower"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_lower</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DEFRAG_THRESHOLD_LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"active-defrag-threshold-upper"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_threshold_upper</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DEFRAG_THRESHOLD_UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"active-defrag-ignore-bytes"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_ignore_bytes</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DEFRAG_IGNORE_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"active-defrag-cycle-min"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_min</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DEFRAG_CYCLE_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"active-defrag-cycle-max"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_cycle_max</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DEFRAG_CYCLE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"active-defrag-max-scan-fields"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_max_scan_fields</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DEFRAG_MAX_SCAN_FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"appendonly"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"appendfilename"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_AOF_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigEnumOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"appendfsync"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_fsync</name></name></expr></argument>,<argument><expr><name>aof_fsync_enum</name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_AOF_FSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"no-appendfsync-on-rewrite"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_no_fsync_on_rewrite</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"auto-aof-rewrite-percentage"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_perc</name></name></expr></argument>,<argument><expr><name>AOF_REWRITE_PERC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigBytesOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"auto-aof-rewrite-min-size"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_min_size</name></name></expr></argument>,<argument><expr><name>AOF_REWRITE_MIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"lua-time-limit"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lua_time_limit</name></name></expr></argument>,<argument><expr><name>LUA_SCRIPT_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-enabled"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_enabled</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigStringOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-config-file"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_configfile</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_CLUSTER_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-require-full-coverage"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_require_full_coverage</name></name></expr></argument>,<argument><expr><name>CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-replica-no-failover"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_no_failover</name></name></expr></argument>,<argument><expr><name>CLUSTER_DEFAULT_SLAVE_NO_FAILOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-node-timeout"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_node_timeout</name></name></expr></argument>,<argument><expr><name>CLUSTER_DEFAULT_NODE_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-migration-barrier"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_migration_barrier</name></name></expr></argument>,<argument><expr><name>CLUSTER_DEFAULT_MIGRATION_BARRIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"cluster-replica-validity-factor"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>cluster_slave_validity_factor</name></name></expr></argument>,<argument><expr><name>CLUSTER_DEFAULT_SLAVE_VALIDITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"slowlog-log-slower-than"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slowlog_log_slower_than</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"latency-monitor-threshold"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>latency_monitor_threshold</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LATENCY_MONITOR_THRESHOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"slowlog-max-len"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>slowlog_max_len</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLOWLOG_MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNotifykeyspaceeventsOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"hash-max-ziplist-entries"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_entries</name></name></expr></argument>,<argument><expr><name>OBJ_HASH_MAX_ZIPLIST_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"hash-max-ziplist-value"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>hash_max_ziplist_value</name></name></expr></argument>,<argument><expr><name>OBJ_HASH_MAX_ZIPLIST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"stream-node-max-bytes"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stream_node_max_bytes</name></name></expr></argument>,<argument><expr><name>OBJ_STREAM_NODE_MAX_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"stream-node-max-entries"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>stream_node_max_entries</name></name></expr></argument>,<argument><expr><name>OBJ_STREAM_NODE_MAX_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"list-max-ziplist-size"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>list_max_ziplist_size</name></name></expr></argument>,<argument><expr><name>OBJ_LIST_MAX_ZIPLIST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"list-compress-depth"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>list_compress_depth</name></name></expr></argument>,<argument><expr><name>OBJ_LIST_COMPRESS_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"set-max-intset-entries"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>set_max_intset_entries</name></name></expr></argument>,<argument><expr><name>OBJ_SET_MAX_INTSET_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"zset-max-ziplist-entries"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_entries</name></name></expr></argument>,<argument><expr><name>OBJ_ZSET_MAX_ZIPLIST_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"zset-max-ziplist-value"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>zset_max_ziplist_value</name></name></expr></argument>,<argument><expr><name>OBJ_ZSET_MAX_ZIPLIST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"hll-sparse-max-bytes"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>hll_sparse_max_bytes</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"activerehashing"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>activerehashing</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_ACTIVE_REHASHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"activedefrag"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>active_defrag_enabled</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_ACTIVE_DEFRAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"protected-mode"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>protected_mode</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_PROTECTED_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigClientoutputbufferlimitOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigNumericalOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"hz"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>config_hz</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_HZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"aof-rewrite-incremental-fsync"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_rewrite_incremental_fsync</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"rdb-save-incremental-fsync"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>rdb_save_incremental_fsync</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_RDB_SAVE_INCREMENTAL_FSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"aof-load-truncated"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_load_truncated</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_AOF_LOAD_TRUNCATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"aof-use-rdb-preamble"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>aof_use_rdb_preamble</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_AOF_USE_RDB_PREAMBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigEnumOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"supervised"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>supervised_mode</name></name></expr></argument>,<argument><expr><name>supervised_mode_enum</name></expr></argument>,<argument><expr><name>SUPERVISED_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"lazyfree-lazy-eviction"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_eviction</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LAZYFREE_LAZY_EVICTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"lazyfree-lazy-expire"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_expire</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LAZYFREE_LAZY_EXPIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"lazyfree-lazy-server-del"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>lazyfree_lazy_server_del</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_LAZYFREE_LAZY_SERVER_DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"replica-lazy-flush"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>repl_slave_lazy_flush</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_SLAVE_LAZY_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigYesNoOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"dynamic-hz"</literal></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>dynamic_hz</name></name></expr></argument>,<argument><expr><name>CONFIG_DEFAULT_DYNAMIC_HZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Rewrite Sentinel config if in Sentinel mode. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>sentinel_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rewriteConfigSentinelOption</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Step 3: remove all the orphaned lines in the old file, that is, lines
     * that were used by a config option and are no longer used, like in case
     * of multiple "save" options or duplicated options. */</comment>
    <expr_stmt><expr><call><name>rewriteConfigRemoveOrphaned</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Step 4: generate a new configuration file from the modified state
     * and write it into the original file. */</comment>
    <expr_stmt><expr><name>newcontent</name> <operator>=</operator> <call><name>rewriteConfigGetContentFromState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rewriteConfigOverwriteFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><name>newcontent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>newcontent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigReleaseState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*-----------------------------------------------------------------------------
 * CONFIG command entry point
 *----------------------------------------------------------------------------*/</comment>

<function><type><name>void</name></type> <name>configCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Only allow CONFIG GET while loading. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>loading</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Only CONFIG GET is allowed during loading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"GET &lt;pattern&gt; -- Return parameters matching the glob-like &lt;pattern&gt; and their values."</literal></expr>,
<expr><literal type="string">"SET &lt;parameter&gt; &lt;value&gt; -- Set parameter to value."</literal></expr>,
<expr><literal type="string">"RESETSTAT -- Reset statistics reported by INFO."</literal></expr>,
<expr><literal type="string">"REWRITE -- Rewrite the configuration file."</literal></expr>,
<expr><name>NULL</name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>configSetCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>configGetCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"resetstat"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>resetServerStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resetCommandTableStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"rewrite"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The server is running without a config file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rewriteConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"CONFIG REWRITE failed: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Rewriting config file: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"CONFIG REWRITE executed with success."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function></block_content></block></function>
</unit>
