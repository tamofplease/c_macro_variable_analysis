<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/debug.c"><comment type="block">/*
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>   <comment type="block">/* SHA1 is used for DEBUG DIGEST */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc64.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/dlfcn.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__OpenBSD__</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucontext.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>ucontext_t</name></type> <name>sigcontext_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_BACKTRACE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__CYGWIN__</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SA_ONSTACK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_ONSTACK</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ================================= Debugging ============================== */</comment>

<comment type="block">/* Compute the sha1 of string at 's' with 'len' bytes long.
 * The SHA1 is then xored against the string pointed by digest.
 * Since xor is commutative, this operation is used in order to
 * "add" digests relative to unordered elements.
 *
 * So digest(a,b,c,d) will be the same of digest(b,a,c,d) */</comment>
<function><type><name>void</name></type> <name>xorDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator><name>u_int32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                          <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (u_int32_t) */</comment>
    <name>SHA1Final</name><argument_list>(<argument><expr><name>hash</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>digest</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>hash</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>xorStringObjectDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function instead of just computing the SHA1 and xoring it
 * against digest, also perform the digest of "digest" itself and
 * replace the old value with the new one.
 *
 * So the final digest will be:
 *
 * digest = SHA1(digest xor SHA1(data))
 *
 * This function is used every time we want to preserve the order so
 * that digest(a,b,c,d) will be different than digest(b,c,d,a)
 *
 * Also note that mixdigest("foo") followed by mixdigest("bar")
 * will lead to a different digest compared to "fo", "obar".
 */</comment>
<function><type><name>void</name></type> <name>mixDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>digest</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mixStringObjectDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function computes the digest of a data structure stored in the
 * object 'o'. It is the core of the DEBUG DIGEST command: when taking the
 * digest of a whole dataset, we take the digest of the key and the value
 * pair, and xor all those together.
 *
 * Note that this function does not reset the initial 'digest' passed, it
 * will continue mixing this object digest to anything that was already
 * present. */</comment>
<function><type><name>void</name></type> <name>xorObjectDigest</name><parameter_list>(<parameter><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>aux</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>expiretime</name> <init>= <expr><call><name>getExpire</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Save the key and associated value */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mixStringObjectDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>listTypeIterator</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>listTypeInitIterator</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>LIST_TAIL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>listTypeEntry</name></type> <name>entry</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><call><name>listTypeNext</name><argument_list>(<argument><expr><name>li</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>eleobj</name> <init>= <expr><call><name>listTypeGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>mixStringObjectDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>eleobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>eleobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>listTypeReleaseIterator</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>setTypeIterator</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>setTypeInitIterator</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>sdsele</name> <operator>=</operator> <call><name>setTypeNextObject</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>setTypeReleaseIterator</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>eledigest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zl</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vlen</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>vll</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>eptr</name> <operator>=</operator> <call><name>ziplistIndex</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>eptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>ziplistNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>sptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><name>eptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>ziplistGet</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>vll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>zzlGetScore</name><argument_list>(<argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>vstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>vstr</name></expr></argument>,<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>vll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>zzlNext</name><argument_list>(<argument><expr><name>zl</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

            <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><operator>*</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown sorted set encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>hashTypeIterator</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><call><name>hashTypeInitIterator</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name>hashTypeNext</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_ERR</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>eledigest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sds</name></type> <name>sdsele</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sdsele</name> <operator>=</operator> <call><name>hashTypeCurrentObjectNewSds</name><argument_list>(<argument><expr><name>hi</name></expr></argument>,<argument><expr><name>OBJ_HASH_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sdsele</name> <operator>=</operator> <call><name>hashTypeCurrentObjectNewSds</name><argument_list>(<argument><expr><name>hi</name></expr></argument>,<argument><expr><name>OBJ_HASH_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><name>sdsele</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsele</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>eledigest</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>hashTypeReleaseIterator</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STREAM</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>streamIterator</name></type> <name>si</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>streamIteratorStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>streamID</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>numfields</name></decl>;</decl_stmt>

        <while>while<condition>(<expr><call><name>streamIteratorGetID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>numfields</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>itemid</name> <init>= <expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%U.%U"</literal></expr></argument>,<argument><expr><name><name>id</name><operator>.</operator><name>ms</name></name></expr></argument>,<argument><expr><name><name>id</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>itemid</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>itemid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>itemid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while<condition>(<expr><name>numfields</name><operator>--</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>field</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>field_len</name></decl>, <decl><type ref="prev"/><name>value_len</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>streamIteratorGetField</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>,
                                           <argument><expr><operator>&amp;</operator><name>field_len</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>field</name></expr></argument>,<argument><expr><name>field_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>streamIteratorStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_MODULE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>RedisModuleDigest</name></type> <name>md</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>moduleValue</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>moduleType</name> <modifier>*</modifier></type><name>mt</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>moduleInitDigestContext</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mt</name><operator>-&gt;</operator><name>digest</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>digest</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>,<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name><name>md</name><operator>.</operator><name>x</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"Unknown object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* If the key has an expire, add it to the mix */</comment>
    <if_stmt><if>if <condition>(<expr><name>expiretime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><literal type="string">"!!expire!!"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Compute the dataset digest. Since keys, sets elements, hashes elements
 * are not ordered, we use a trick: every aggregate digest is the xor
 * of the digests of their elements. This way the order will not change
 * the result. For list instead we use a feedback entering the output digest
 * as input in order to ensure that a different ordered list will result in
 * a different digest. */</comment>
<function><type><name>void</name></type> <name>computeDatasetDigest</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>final</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>aux</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>final</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Start with a clean result */</comment>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>redisDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>server</name><operator>.</operator><name>db</name></name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* hash the DB id, so the same dataset moved in a different
         * DB will lead to a different digest */</comment>
        <expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>final</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Iterate this DB writing every entry */</comment>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>key</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>keyobj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* This key-val digest */</comment>
            <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>keyobj</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mixDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>xorObjectDigest</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>keyobj</name></expr></argument>,<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* We can finally xor the key-val digest to the final digest */</comment>
            <expr_stmt><expr><call><name>xorDigest</name><argument_list>(<argument><expr><name>final</name></expr></argument>,<argument><expr><name>digest</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>keyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>debugCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>help</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"ASSERT -- Crash by assertion failed."</literal></expr>,
<expr><literal type="string">"CHANGE-REPL-ID -- Change the replication IDs of the instance. Dangerous, should be used only for testing the replication subsystem."</literal></expr>,
<expr><literal type="string">"CRASH-AND-RECOVER &lt;milliseconds&gt; -- Hard crash and restart after &lt;milliseconds&gt; delay."</literal></expr>,
<expr><literal type="string">"DIGEST -- Output a hex signature representing the current DB content."</literal></expr>,
<expr><literal type="string">"DIGEST-VALUE &lt;key-1&gt; ... &lt;key-N&gt;-- Output a hex signature of the values of all the specified keys."</literal></expr>,
<expr><literal type="string">"ERROR &lt;string&gt; -- Return a Redis protocol error with &lt;string&gt; as message. Useful for clients unit tests to simulate Redis errors."</literal></expr>,
<expr><literal type="string">"LOG &lt;message&gt; -- write message to the server log."</literal></expr>,
<expr><literal type="string">"HTSTATS &lt;dbid&gt; -- Return hash table statistics of the specified Redis database."</literal></expr>,
<expr><literal type="string">"HTSTATS-KEY &lt;key&gt; -- Like htstats but for the hash table stored as key's value."</literal></expr>,
<expr><literal type="string">"LOADAOF -- Flush the AOF buffers on disk and reload the AOF in memory."</literal></expr>,
<expr><literal type="string">"LUA-ALWAYS-REPLICATE-COMMANDS &lt;0|1&gt; -- Setting it to 1 makes Lua replication defaulting to replicating single commands, without the script having to enable effects replication."</literal></expr>,
<expr><literal type="string">"OBJECT &lt;key&gt; -- Show low level info about key and associated value."</literal></expr>,
<expr><literal type="string">"PANIC -- Crash the server simulating a panic."</literal></expr>,
<expr><literal type="string">"POPULATE &lt;count&gt; [prefix] [size] -- Create &lt;count&gt; string keys named key:&lt;num&gt;. If a prefix is specified is used instead of the 'key' prefix."</literal></expr>,
<expr><literal type="string">"RELOAD -- Save the RDB on disk and reload it back in memory."</literal></expr>,
<expr><literal type="string">"RESTART -- Graceful restart: save config, db, restart."</literal></expr>,
<expr><literal type="string">"SDSLEN &lt;key&gt; -- Show low level SDS string info representing key and value."</literal></expr>,
<expr><literal type="string">"SEGFAULT -- Crash the server with sigsegv."</literal></expr>,
<expr><literal type="string">"SET-ACTIVE-EXPIRE &lt;0|1&gt; -- Setting it to 0 disables expiring keys in background when they are not accessed (otherwise the Redis behavior). Setting it to 1 reenables back the default."</literal></expr>,
<expr><literal type="string">"SLEEP &lt;seconds&gt; -- Stop the server for &lt;seconds&gt;. Decimals allowed."</literal></expr>,
<expr><literal type="string">"STRUCTSIZE -- Return the size of different Redis core C structures."</literal></expr>,
<expr><literal type="string">"ZIPLIST &lt;key&gt; -- Show low level info about the ziplist encoding."</literal></expr>,
<expr><literal type="string">"STRINGMATCH-TEST -- Run a fuzz tester against the stringmatchlen() function."</literal></expr>,
<expr><name>NULL</name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addReplyHelp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"segfault"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"panic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverPanic</name><argument_list>(<argument><expr><literal type="string">"DEBUG PANIC called at Unix time %Id"</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* %ld -&gt; %Id */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"restart"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
               <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"crash-and-recover"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
                <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"restart"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
            <expr><operator>(</operator><name>RESTART_SERVER_GRACEFULLY</name><operator>|</operator><name>RESTART_SERVER_CONFIG_REWRITE</name><operator>)</operator></expr> </then><else>:
             <expr><name>RESTART_SERVER_NONE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>restartServer</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"failed to restart the server. Check server logs."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"oom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>PORT_ULONG_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* Should trigger an out of memory. */</comment>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverAssertWithInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DEBUG LOG: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"reload"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>rdbSave</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>emptyDb</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>EMPTYDB_NO_FLAGS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>rdbLoad</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_filename</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>unprotectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Error trying to load the RDB dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"DB reloaded by DEBUG RELOAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"loadaof"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>aof_state</name></name> <operator>!=</operator> <name>AOF_OFF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>flushAppendOnlyFile</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>emptyDb</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>EMPTYDB_NO_FLAGS</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>loadAppendOnlyFile</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>aof_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>unprotectClient</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>dirty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Prevent AOF / replication */</comment>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Append Only File loaded by DEBUG LOADAOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"object"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strenc</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>strenc</name> <operator>=</operator> <call><name>strEncoding</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>extra</name><index>[<expr><literal type="number">138</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_QUICKLIST</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextra</name> <init>= <expr><name>extra</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>quicklist</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Add number of quicklist nodes */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nextra</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">" ql_nodes:%Iu"</literal></expr></argument>, <argument><expr><name><name>ql</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		<expr_stmt><expr><name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
            <name>nextra</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
            <comment type="block">/* Add average quicklist fill factor */</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>avg</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>ql</name><operator>-&gt;</operator><name>count</name></name><operator>/</operator><name><name>ql</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>nextra</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">" ql_avg_node:%.2f"</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextra</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
            <comment type="block">/* Add quicklist fill level / max ziplist size */</comment>
            <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>nextra</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">" ql_ziplist_max:%d"</literal></expr></argument>, <argument><expr><name><name>ql</name><operator>-&gt;</operator><name>fill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextra</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
            <comment type="block">/* Add isCompressed? */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>compressed</name> <init>= <expr><name><name>ql</name><operator>-&gt;</operator><name>compress</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>nextra</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">" ql_compressed:%d"</literal></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextra</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
            <comment type="block">/* Add total uncompressed size */</comment>
            <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>quicklistNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>ql</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</init> <condition><expr><name>node</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>sz</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>sz</name></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>nextra</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">" ql_uncompressed_size:%Iu"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <expr_stmt><expr><name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
            <name>nextra</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>addReplyStatusFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
            <argument><expr><literal type="string">"Value at:%p refcount:%d "</literal>
            <literal type="string">"encoding:%s serializedlength:%Iu "</literal>                                 <name>WIN_PORT_FIX</name> <comment type="block">/* %zu -&gt; %Iu */</comment>
            <literal type="string">"lru:%d lru_seconds_idle:%llu%s"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>,
            <argument><expr><name>strenc</name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>rdbSavedObjectLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>val</name><operator>-&gt;</operator><name>lru</name></name></expr></argument>, <argument><expr><call><name>estimateObjectIdleTime</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sdslen"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>key</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_STRING</name> <operator>||</operator> <operator>!</operator><call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Not an sds encoded string."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyStatusFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                <argument><expr><literal type="string">"key_sds_len:%lld, key_sds_avail:%lld, key_zmalloc: %lld, "</literal>
                <literal type="string">"val_sds_len:%lld, val_sds_avail:%lld, val_zmalloc: %lld"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>sdsZmallocSize</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator> <call><name>getStringObjectSdsUsedMemory</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"ziplist"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>objectCommandLookupOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>OBJ_ENCODING_ZIPLIST</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Not an sds encoded string."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>ziplistRepr</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Ziplist structure printed on stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"populate"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>keys</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>dictExpand</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>,<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>keys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>valsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%s:%Iu"</literal></expr></argument>,                                  <argument><expr><ternary><condition><expr><call><name>WIN_PORT_FIX</name> <comment type="block">/* %lu -&gt; %Iu */</comment>
                <argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"key"</literal></expr> </then><else>: <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></else></ternary></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lookupKeyWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"value:%Iu"</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* %lu -&gt; %Iu */</comment>
            <if_stmt><if>if <condition>(<expr><name>valsize</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>valsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>valsize</name><operator>&lt;=</operator><name>buflen</name></expr>?</condition><then> <expr><name>valsize</name></expr></then><else>: <expr><name>buflen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>dbAdd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>signalModifiedKey</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"digest"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* DEBUG DIGEST (form without keys specified) */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>d</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>computeDatasetDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>,<argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"digest-value"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* DEBUG DIGEST-VALUE key key key ... key. */</comment>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Start with a clean result */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>lookupKeyReadWithFlags</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>LOOKUP_NOTOUCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xorObjectDigest</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>sds</name></type> <name>d</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>,<argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sleep"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>dtime</name> <init>= <expr><call><name>strtod</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>utime</name> <init>= <expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><operator>(</operator><name>dtime</name><operator>*</operator><literal type="number">1000000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>                   <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (PORT_LONGLONG) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <name>usleep</name><argument_list>(<argument><expr><name>utime</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>utime</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>utime</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"set-active-expire"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>active_expire_enabled</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"lua-always-replicate-commands"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>lua_always_replicate_commands</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>errstr</name> <init>= <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>errstr</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errstr</name> <operator>=</operator> <call><name>sdsmapchars</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>,<argument><expr><literal type="string">"\n\r"</literal></expr></argument>,<argument><expr><literal type="string">"  "</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* no newlines in errors. */</comment>
        <expr_stmt><expr><name>errstr</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>errstr</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"structsize"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>sizes</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"bits:%d "</literal></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">64</literal></expr></then><else>:<expr><literal type="number">32</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"robj:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>robj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"dictentry:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dictEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"sdshdr5:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"sdshdr8:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"sdshdr16:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"sdshdr32:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sizes</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>,<argument><expr><literal type="string">"sdshdr64:%d "</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"htstats"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>dbid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>stats</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>dbid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dbid</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>dbnum</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Out of range database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>stats</name></expr></argument>,<argument><expr><literal type="string">"[Dictionary HT]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictGetStats</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>stats</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>stats</name></expr></argument>,<argument><expr><literal type="string">"[Expires HT]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictGetStats</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>db</name><index>[<expr><name>dbid</name></expr>]</index></name><operator>.</operator><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>stats</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"htstats-key"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>objectCommandLookupOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nokeyerr</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Get the hash table reference from the object, if possible. */</comment>
        <switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>OBJ_ENCODING_SKIPLIST</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>zset</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>zs</name><operator>-&gt;</operator><name>dict</name></name></expr>;</expr_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>OBJ_ENCODING_HT</name></expr>:</case>
            <expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"The value stored at the specified key is not "</literal>
                            <literal type="string">"represented using an hash table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>dictGetStats</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"change-repl-id"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Changing replication IDs after receiving DEBUG change-repl-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>changeReplicationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearReplicationId2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"stringmatch-test"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stringmatchlen_fuzz_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyStatus</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Apparently Redis did not crash: test passed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplySubcommandSyntaxError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* =========================== Crash handling  ============================== */</comment>

<function><type><name>void</name></type> <name>_serverAssert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>estr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>bugReportStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"=== ASSERTION FAILED ==="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"==&gt; %s:%d '%s' is not true"</literal></expr></argument>,<argument><expr><name>file</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>estr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>assert_failed</name></name> <operator>=</operator> <name>estr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>assert_file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>assert_line</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"(forcing SIGSEGV to print the bug report.)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_serverAssertPrintClientInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>bugReportStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"=== ASSERTION FAILED CLIENT CONTEXT ==="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"client-&gt;flags = %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"client-&gt;fd = %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"client-&gt;argc = %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>OBJ_STRING</name> <operator>&amp;&amp;</operator> <call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"Object type: %u, encoding: %u"</literal></expr></argument>,
                <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>arg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"client-&gt;argv[%d] = \"%s\" (refcount: %d)"</literal></expr></argument>,
            <argument><expr><name>j</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>serverLogObjectDebugInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Object type: %d"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Object encoding: %d"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Object refcount: %d"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_STRING</name> <operator>&amp;&amp;</operator> <call><name>sdsEncodedObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Object raw string len: %Iu"</literal></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* %zu -&gt; %Iu */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>repr</name> <init>= <expr><call><name>sdscatrepr</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Object raw string content: %s"</literal></expr></argument>, <argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>repr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_LIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"List length: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>listTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_SET</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Set size: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>setTypeSize</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_HASH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Hash size: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>hashTypeLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_ZSET</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Sorted set size: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>zsetLength</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>OBJ_ENCODING_SKIPLIST</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Skiplist level: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>zset</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator><operator>-&gt;</operator><name><name>zsl</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_serverAssertPrintObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>bugReportStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"=== ASSERTION FAILED OBJECT CONTEXT ==="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLogObjectDebugInfo</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_serverAssertWithInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>robj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>estr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_serverAssertPrintClientInfo</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_serverAssertPrintObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>_serverAssert</name><argument_list>(<argument><expr><name>estr</name></expr></argument>,<argument><expr><name>file</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_serverPanic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fmtmsg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>fmtmsg</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmtmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bugReportStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"------------------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Fatal Error: %s #%s:%d"</literal></expr></argument>, <argument><expr><name>fmtmsg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"!!! Software Failure. Press left mouse button to continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Guru Meditation: %s #%s:%d"</literal></expr></argument>,<argument><expr><name>fmtmsg</name></expr></argument>,<argument><expr><name>file</name></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"(forcing SIGSEGV in order to print the stack trace)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"------------------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bugReportStart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>bug_report_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,
        <argument><expr><literal type="string">"\n\n=== REDIS BUG REPORT START: Cut &amp; paste starting from here ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>bug_report_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <macro><name>WIN32_ONLY</name><argument_list>(<argument>serverLog(LL_WARNING|LL_RAW, <literal type="string">"Redis version: %s\n"</literal>, REDIS_VERSION);</argument>)</argument_list></macro>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>getMcontextEip</name><parameter_list>(<parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAC_OS_X_VERSION_10_6</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* OSX &lt; 10.6 */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rip</name></name></expr>;</return>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__eip</name></name></expr>;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__srr0</name></name></expr>;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MAC_OS_X_VERSION_10_6</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* OSX &gt;= 10.6 */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_STRUCT_X86_THREAD_STATE64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rip</name></name></expr>;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__eip</name></name></expr>;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Linux */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</return> <comment type="block">/* Linux 32 */</comment>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__X86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</return> <comment type="block">/* Linux 64 */</comment>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ia64__</name></expr></argument>)</argument_list></call></expr></cpp:elif> <comment type="block">/* Linux IA64 */</comment>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>sc_ip</name></name></expr>;</return>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif> <comment type="block">/* Linux ARM */</comment>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>arm_pc</name></name></expr>;</return>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif> <comment type="block">/* Linux AArch64 */</comment>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>pc</name></name></expr>;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* FreeBSD */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_eip</name></name></expr>;</return>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rip</name></name></expr>;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* OpenBSD */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_eip</name></name></expr>;</return>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rip</name></name></expr>;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rip</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logStackContent</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name>sp</name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>sp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PORT_LONG</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"(%08lx) -&gt; %08lx"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"(%016lx) -&gt; %016lx"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>logRegisters</name><parameter_list>(<parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><literal type="string">"\n------ REGISTERS ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* OSX */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MAC_OS_X_VERSION_10_6</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* OSX AMD64 */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_STRUCT_X86_THREAD_STATE64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"RAX:%016lx RBX:%016lx\nRCX:%016lx RDX:%016lx\n"</literal>
    <literal type="string">"RDI:%016lx RSI:%016lx\nRBP:%016lx RSP:%016lx\n"</literal>
    <literal type="string">"R8 :%016lx R9 :%016lx\nR10:%016lx R11:%016lx\n"</literal>
    <literal type="string">"R12:%016lx R13:%016lx\nR14:%016lx R15:%016lx\n"</literal>
    <literal type="string">"RIP:%016lx EFL:%016lx\nCS :%016lx FS:%016lx  GS:%016lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rbx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rcx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rdx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rdi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rsi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rbp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rsp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r8</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r9</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r10</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r11</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r12</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r13</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r14</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__r15</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__cs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__fs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__gs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* OSX x86 */</comment>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"EAX:%08lx EBX:%08lx ECX:%08lx EDX:%08lx\n"</literal>
    <literal type="string">"EDI:%08lx ESI:%08lx EBP:%08lx ESP:%08lx\n"</literal>
    <literal type="string">"SS:%08lx  EFL:%08lx EIP:%08lx CS :%08lx\n"</literal>
    <literal type="string">"DS:%08lx  ES:%08lx  FS :%08lx GS :%08lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__eax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__ebx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__ecx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__edx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__edi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__esi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__ebp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__esp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__ss</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__eflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__eip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__cs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__ds</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__es</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__fs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__gs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>__ss</name><operator>.</operator><name>__esp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* Linux */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Linux x86 */</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"EAX:%08lx EBX:%08lx ECX:%08lx EDX:%08lx\n"</literal>
    <literal type="string">"EDI:%08lx ESI:%08lx EBP:%08lx ESP:%08lx\n"</literal>
    <literal type="string">"SS :%08lx EFL:%08lx EIP:%08lx CS:%08lx\n"</literal>
    <literal type="string">"DS :%08lx ES :%08lx FS :%08lx GS:%08lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__X86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* Linux AMD64 */</comment>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"RAX:%016lx RBX:%016lx\nRCX:%016lx RDX:%016lx\n"</literal>
    <literal type="string">"RDI:%016lx RSI:%016lx\nRBP:%016lx RSP:%016lx\n"</literal>
    <literal type="string">"R8 :%016lx R9 :%016lx\nR10:%016lx R11:%016lx\n"</literal>
    <literal type="string">"R12:%016lx R13:%016lx\nR14:%016lx R15:%016lx\n"</literal>
    <literal type="string">"RIP:%016lx EFL:%016lx\nCSGSFS:%016lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>gregs</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"RAX:%016lx RBX:%016lx\nRCX:%016lx RDX:%016lx\n"</literal>
    <literal type="string">"RDI:%016lx RSI:%016lx\nRBP:%016lx RSP:%016lx\n"</literal>
    <literal type="string">"R8 :%016lx R9 :%016lx\nR10:%016lx R11:%016lx\n"</literal>
    <literal type="string">"R12:%016lx R13:%016lx\nR14:%016lx R15:%016lx\n"</literal>
    <literal type="string">"RIP:%016lx EFL:%016lx\nCSGSFS:%016lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rbx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rcx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rdx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rdi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rsi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rbp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rsp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r8</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r9</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r10</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r11</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r12</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r13</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r14</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r15</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_cs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"EAX:%08lx EBX:%08lx ECX:%08lx EDX:%08lx\n"</literal>
    <literal type="string">"EDI:%08lx ESI:%08lx EBP:%08lx ESP:%08lx\n"</literal>
    <literal type="string">"SS :%08lx EFL:%08lx EIP:%08lx CS:%08lx\n"</literal>
    <literal type="string">"DS :%08lx ES :%08lx FS :%08lx GS:%08lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_eax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_ebx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_ebx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_edx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_edi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_esi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_ebp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_esp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_ss</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_eflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_eip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_cs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_es</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_fs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_gs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_esp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"RAX:%016lx RBX:%016lx\nRCX:%016lx RDX:%016lx\n"</literal>
    <literal type="string">"RDI:%016lx RSI:%016lx\nRBP:%016lx RSP:%016lx\n"</literal>
    <literal type="string">"R8 :%016lx R9 :%016lx\nR10:%016lx R11:%016lx\n"</literal>
    <literal type="string">"R12:%016lx R13:%016lx\nR14:%016lx R15:%016lx\n"</literal>
    <literal type="string">"RIP:%016lx EFL:%016lx\nCSGSFS:%016lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rbx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rcx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rdx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rdi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rsi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rbp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rsp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r8</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r9</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r10</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r11</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r12</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r13</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r14</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_r15</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_rflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_cs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>sc_rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"EAX:%08lx EBX:%08lx ECX:%08lx EDX:%08lx\n"</literal>
    <literal type="string">"EDI:%08lx ESI:%08lx EBP:%08lx ESP:%08lx\n"</literal>
    <literal type="string">"SS :%08lx EFL:%08lx EIP:%08lx CS:%08lx\n"</literal>
    <literal type="string">"DS :%08lx ES :%08lx FS :%08lx GS:%08lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_eax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_ebx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_ebx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_edx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_edi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_esi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_ebp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_esp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_ss</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_eflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_eip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_cs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_es</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_fs</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>sc_gs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>sc_esp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
    <argument><expr><literal type="string">"\n"</literal>
    <literal type="string">"RAX:%016lx RBX:%016lx\nRCX:%016lx RDX:%016lx\n"</literal>
    <literal type="string">"RDI:%016lx RSI:%016lx\nRBP:%016lx RSP:%016lx\n"</literal>
    <literal type="string">"R8 :%016lx R9 :%016lx\nR10:%016lx R11:%016lx\n"</literal>
    <literal type="string">"R12:%016lx R13:%016lx\nR14:%016lx R15:%016lx\n"</literal>
    <literal type="string">"RIP:%016lx EFL:%016lx\nCSGSFS:%016lx"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rax</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rbx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rcx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rdx</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rdi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rsi</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rbp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rsp</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r8</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r9</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r10</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r11</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r12</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r13</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r14</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_r15</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rip</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rflags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_cs</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackContent</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>uc</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>.</operator><name>mc_rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"  Dumping of registers not supported for this OS/arch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Return a file descriptor to write directly to the Redis log with the
 * write(2) syscall, that can be used in critical sections of the code
 * where the rest of Redis can't be trusted (for example during the memory
 * test) or when an API call requires a raw fd.
 *
 * Close it with closeDirectLogFiledes(). */</comment>
<function><type><name>int</name></type> <name>openDirectLogFiledes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>log_to_stdout</name> <init>= <expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><ternary><condition><expr><name>log_to_stdout</name></expr> ?</condition><then>
        <expr><name>STDOUT_FILENO</name></expr> </then><else>:
        <expr><call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>logfile</name></name></expr></argument>, <argument><expr><name>O_APPEND</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Used to close what closeDirectLogFiledes() returns. */</comment>
<function><type><name>void</name></type> <name>closeDirectLogFiledes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>log_to_stdout</name> <init>= <expr><name><name>server</name><operator>.</operator><name>logfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_to_stdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Logs the stack trace using the backtrace() call. This function is designed
 * to be called from signal handlers safely. */</comment>
<function><type><name>void</name></type> <name>logStackTrace</name><parameter_list>(<parameter><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>trace</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>trace_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><call><name>openDirectLogFiledes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* If we can't log there is anything to do. */</comment>

    <comment type="block">/* Generate the stack trace */</comment>
    <expr_stmt><expr><name>trace_size</name> <operator>=</operator> <call><name>backtrace</name><argument_list>(<argument><expr><name>trace</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getMcontextEip</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg1</name> <init>= <expr><literal type="string">"EIP:\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg2</name> <init>= <expr><literal type="string">"\nBacktrace:\n"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>msg1</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content><comment type="block">/* Avoid warning. */</comment></block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><name><name>trace</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>getMcontextEip</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>backtrace_symbols_fd</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>msg2</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content><comment type="block">/* Avoid warning. */</comment></block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Write symbols to log file */</comment>
    <expr_stmt><expr><call><name>backtrace_symbols_fd</name><argument_list>(<argument><expr><name>trace</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>trace_size</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Cleanup */</comment>
    <expr_stmt><expr><call><name>closeDirectLogFiledes</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Log information about the "current" client, that is, the client that is
 * currently being served by Redis. May be NULL if Redis is not serving a
 * client right now. */</comment>
<function><type><name>void</name></type> <name>logCurrentClient</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>current_client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>client</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>server</name><operator>.</operator><name>current_client</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>client</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><literal type="string">"\n------ CURRENT CLIENT INFO ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>catClientInfoString</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>cc</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>decoded</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,<argument><expr><literal type="string">"argv[%d]: '%s'\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>,
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>decoded</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Check if the first argument, usually a key, is found inside the
     * selected DB, and if so print info about the associated object. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>val</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>getDecodedObject</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictFind</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"key '%s' found in DB containing the following object:"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLogObjectDebugInfo</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROC_MAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMTEST_MAX_REGIONS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<comment type="block">/* A non destructive memory test executed during segfauls. */</comment>
<function><type><name>int</name></type> <name>memtest_test_linux_anonymous_maps</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>logbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>start_addr</name></decl>, <decl><type ref="prev"/><name>end_addr</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>start_vect</name><index>[<expr><name>MEMTEST_MAX_REGIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>size_vect</name><index>[<expr><name>MEMTEST_MAX_REGIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>regions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>openDirectLogFiledes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/self/maps"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>start</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"stack"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"vdso"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"vsyscall"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"00:00"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"rw"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>start_addr</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>start</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>end_addr</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>end_addr</name><operator>-</operator><name>start_addr</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>start_vect</name><index>[<expr><name>regions</name></expr>]</index></name> <operator>=</operator> <name>start_addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>size_vect</name><index>[<expr><name>regions</name></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
            <argument><expr><literal type="string">"*** Preparing to test memory region %lx (%lu bytes)\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>start_vect</name><index>[<expr><name>regions</name></expr>]</index></name></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator> <name><name>size_vect</name><index>[<expr><name>regions</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><name>logbuf</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* Nothing to do. */</comment> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>regions</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>int</name></type> <name>errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>regions</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* Nothing to do. */</comment> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>errors</name> <operator>+=</operator> <call><name>memtest_preserving_test</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>start_vect</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>size_vect</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>errors</name></expr> ?</condition><then> <expr><literal type="string">"E"</literal></expr> </then><else>: <expr><literal type="string">"O"</literal></expr></else></ternary></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* Nothing to do. */</comment> </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* Nothing to do. */</comment> </block_content>}</block></if></if_stmt>

    <comment type="block">/* NOTE: It is very important to close the file descriptor only now
     * because closing it before may result into unmapping of some memory
     * region that we are testing. */</comment>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closeDirectLogFiledes</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>errors</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Scans the (assumed) x86 code starting at addr, for a max of `len`
 * bytes, searching for E8 (callq) opcodes, and dumping the symbols
 * and the call offset if they appear to be valid. */</comment>
<function><type><name>void</name></type> <name>dumpX86Calls</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dl_info</name></type> <name>info</name></decl>;</decl_stmt>
    <comment type="block">/* Hash table to best-effort avoid printing the same symbol
     * multiple times. */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name><name>ht</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name><operator>-</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xE8</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* Not an E8 CALL opcode. */</comment>
        <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>target</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>addr</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>target</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>dladdr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>dli_sname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ht</name><index>[<expr><name>target</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>]</index></name> <operator>!=</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Function at 0x%lx is %s\n"</literal></expr></argument>,<argument><expr><name>target</name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>dli_sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ht</name><index>[<expr><name>target</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* Skip the 32 bit immediate. */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sigsegvHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>(</operator><name>ucontext_t</name><operator>*</operator><operator>)</operator> <name>secret</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>eip</name> <init>= <expr><call><name>getMcontextEip</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>infostring</name></decl>, <decl><type ref="prev"/><name>clients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bugReportStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"Redis %s crashed by signal: %d"</literal></expr></argument>, <argument><expr><name>REDIS_VERSION</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>eip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"Crashed running the instruction at: %p"</literal></expr></argument>, <argument><expr><name>eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGSEGV</name> <operator>||</operator> <name>sig</name> <operator>==</operator> <name>SIGBUS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"Accessing address: %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>si_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"Failed assertion: %s (%s:%d)"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>assert_failed</name></name></expr></argument>,
                        <argument><expr><name><name>server</name><operator>.</operator><name>assert_file</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>.</operator><name>assert_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Log the stack trace */</comment>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><literal type="string">"\n------ STACK TRACE ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logStackTrace</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Log INFO and CLIENT LIST */</comment>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><literal type="string">"\n------ INFO OUTPUT ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>infostring</name> <operator>=</operator> <call><name>genRedisInfoString</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><name>infostring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><literal type="string">"\n------ CLIENT LIST OUTPUT ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>clients</name> <operator>=</operator> <call><name>getAllClientsInfoString</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><name>clients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>infostring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>clients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Log the current client */</comment>
    <expr_stmt><expr><call><name>logCurrentClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Log dump of processor registers */</comment>
    <expr_stmt><expr><call><name>logRegisters</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROC_MAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Test memory */</comment>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>, <argument><expr><literal type="string">"\n------ FAST MEMORY TEST ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bioKillThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>memtest_test_linux_anonymous_maps</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,
            <argument><expr><literal type="string">"!!! MEMORY ERROR DETECTED! Check your memory ASAP !!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,
            <argument><expr><literal type="string">"Fast memory test PASSED, however your memory can still be broken. Please run a memory test for several hours if possible.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>eip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Dl_info</name></type> <name>info</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>dladdr</name><argument_list>(<argument><expr><name>eip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,
                <argument><expr><literal type="string">"\n------ DUMPING CODE AROUND EIP ------\n"</literal>
                <literal type="string">"Symbol: %s (base: %p)\n"</literal>
                <literal type="string">"Module: %s (base %p)\n"</literal>
                <literal type="string">"$ xxd -r -p /tmp/dump.hex /tmp/dump.bin\n"</literal>
                <literal type="string">"$ objdump --adjust-vma=%p -D -b binary -m i386:x86-64 /tmp/dump.bin\n"</literal>
                <literal type="string">"------\n"</literal></expr></argument>,
                <argument><expr><name><name>info</name><operator>.</operator><name>dli_sname</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dli_saddr</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dli_fname</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dli_fbase</name></name></expr></argument>,
                <argument><expr><name><name>info</name><operator>.</operator><name>dli_saddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name>eip</name> <operator>-</operator> <operator>(</operator><name>PORT_LONG</name><operator>)</operator><name><name>info</name><operator>.</operator><name>dli_saddr</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>sz</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">13</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* we don't have functions over 8k (verified) */</comment>
                <comment type="block">/* Find the address of the next page, which is our "safety"
                 * limit when dumping. Then try to dump just 128 bytes more
                 * than EIP if there is room, or stop sooner. */</comment>
                <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>next</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>eip</name> <operator>+</operator> <name>sz</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>sz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name>eip</name> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>next</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <operator>(</operator><name>PORT_ULONG</name><operator>)</operator><name><name>info</name><operator>.</operator><name>dli_saddr</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLogHexDump</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"dump of function"</literal></expr></argument>,
                    <argument><expr><name><name>info</name><operator>.</operator><name>dli_saddr</name></name></expr></argument> ,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dumpX86Calls</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>dli_saddr</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>LL_WARNING</name><operator>|</operator><name>LL_RAW</name></expr></argument>,
<argument><expr><literal type="string">"\n=== REDIS BUG REPORT END. Make sure to include from START to END. ===\n\n"</literal>
<literal type="string">"       Please report the crash by opening an issue on github:\n\n"</literal>
<literal type="string">"           https://github.com/tporadowski/redis/issues\n\n"</literal>
<literal type="string">"  Suspect RAM error? Use redis-server --test-memory to verify it.\n\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* free(messages); Don't call free() with possibly corrupted memory. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>daemonize</name></name> <operator>&amp;&amp;</operator> <name><name>server</name><operator>.</operator><name>supervised</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>pidfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Make sure we exit with the right signal at the end. So for instance
     * the core will be dumped if enabled. */</comment>
    <expr_stmt><expr><call><name>sigemptyset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name> <operator>|</operator> <name>SA_ONSTACK</name> <operator>|</operator> <name>SA_RESETHAND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name> <argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_BACKTRACE */</comment>

<comment type="block">/* ==================== Logging functions for debugging ===================== */</comment>

<function><type><name>void</name></type> <name>serverLogHexDump</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>charset</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><literal type="string">"%s (hexdump of %Iu bytes):"</literal></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* %zu -&gt; %Iu */</comment>
    <name>b</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>charset</name><index>[<expr><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>charset</name><index>[<expr><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name><operator>-</operator><name>buf</name> <operator>==</operator> <literal type="number">64</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name><operator>|</operator><name>LL_RAW</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name><operator>|</operator><name>LL_RAW</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* =========================== Software Watchdog ============================ */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<comment type="block">/* No support for debug watchdog */</comment>
<function><type><name>void</name></type> <name>watchdogScheduleSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>enableWatchdog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>disableWatchdog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>watchdogSignalHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>(</operator><name>ucontext_t</name><operator>*</operator><operator>)</operator> <name>secret</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>secret</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"\n--- WATCHDOG TIMER EXPIRED ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>logStackTrace</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Sorry: no support for backtrace()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>serverLogFromHandler</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"--------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Schedule a SIGALRM delivery after the specified period in milliseconds.
 * If a timer is already scheduled, this function will re-schedule it to the
 * specified time. If period is 0 the current timer is disabled. */</comment>
<function><type><name>void</name></type> <name>watchdogScheduleSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>it</name></decl>;</decl_stmt>

    <comment type="block">/* Will stop the timer if period is 0. */</comment>
    <expr_stmt><expr><name><name>it</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>period</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>it</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>period</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
    <comment type="block">/* Don't automatically restart. */</comment>
    <expr_stmt><expr><name><name>it</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>it</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Enable the software watchdog with the specified period in milliseconds. */</comment>
<function><type><name>void</name></type> <name>enableWatchdog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>min_period</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>

        <comment type="block">/* Watchdog was actually disabled, so we have to setup the signal
         * handler. */</comment>
        <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_ONSTACK</name> <operator>|</operator> <name>SA_SIGINFO</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_sigaction</name></name> <operator>=</operator> <name>watchdogSignalHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* If the configured period is smaller than twice the timer period, it is
     * too short for the software watchdog to work reliably. Fix it now
     * if needed. */</comment>
    <expr_stmt><expr><name>min_period</name> <operator>=</operator> <operator>(</operator><literal type="number">1000</literal><operator>/</operator><name><name>server</name><operator>.</operator><name>hz</name></name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>period</name> <operator>&lt;</operator> <name>min_period</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>period</name> <operator>=</operator> <name>min_period</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>watchdogScheduleSignal</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Adjust the current timer. */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name> <operator>=</operator> <name>period</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Disable the software watchdog. */</comment>
<function><type><name>void</name></type> <name>disableWatchdog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* Already disabled. */</comment>
    <expr_stmt><expr><call><name>watchdogScheduleSignal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Stop the current timer. */</comment>

    <comment type="block">/* Set the signal handler to SIG_IGN, this will also remove pending
     * signals from the queue. */</comment>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>SIG_IGN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>watchdog_period</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
