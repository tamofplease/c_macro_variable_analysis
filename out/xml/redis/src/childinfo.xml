<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/childinfo.c"><comment type="block">/*
 * Copyright (c) 2016, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;unistd.h&gt;</argument>)</argument_list></macro>

<comment type="block">/* Open a child-parent channel used in order to move information about the
 * RDB / AOF saving process from the child to the parent (for instance
 * the amount of copy on write memory used) */</comment>
<function><type><name>void</name></type> <name>openChildInfoPipe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* On error our two file descriptors should be still set to -1,
         * but we call anyway cloesChildInfoPipe() since can't hurt. */</comment>
        <expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>anetNonBlock</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANET_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>closeChildInfoPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>child_info_data</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Close the pipes opened with openChildInfoPipe(). */</comment>
<function><type><name>void</name></type> <name>closeChildInfoPipe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
        <name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Send COW data to parent. The child should call this function after populating
 * the corresponding fields it want to sent (according to the process type). */</comment>
<function><type><name>void</name></type> <name>sendChildInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ptype</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>CHILD_INFO_MAGIC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>process_type</name></name> <operator>=</operator> <name>ptype</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_data</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>child_info_data</name></name></expr></argument>,<argument><expr><name>wlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>wlen</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Nothing to do on error, this will be detected by the other side. */</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Receive COW data from parent. */</comment>
<function><type><name>void</name></type> <name>receiveChildInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_data</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>child_info_pipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>child_info_data</name></name></expr></argument>,<argument><expr><name>wlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>wlen</name> <operator>&amp;&amp;</operator>
        <name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>magic</name></name> <operator>==</operator> <name>CHILD_INFO_MAGIC</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>process_type</name></name> <operator>==</operator> <name>CHILD_INFO_TYPE_RDB</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_rdb_cow_bytes</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>cow_size</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>process_type</name></name> <operator>==</operator> <name>CHILD_INFO_TYPE_AOF</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>server</name><operator>.</operator><name>stat_aof_cow_bytes</name></name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>child_info_data</name><operator>.</operator><name>cow_size</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
