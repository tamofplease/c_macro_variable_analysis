<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/sentinel.c"><comment type="block">/* Redis Sentinel implementation
 *
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Error.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>          <comment type="line">// This should not be here in the first place since it's not used by the posix code either</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hiredis.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoull</name></cpp:macro> <cpp:value>_strtoui64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_SENTINEL_PORT</name></cpp:macro> <cpp:value>26379</cpp:value></cpp:define>

<comment type="block">/* ======================== Sentinel global state =========================== */</comment>

<comment type="block">/* Address object, used to describe an ip:port pair. */</comment>
<typedef>typedef <type><struct>struct <name>sentinelAddr</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
}</block></struct></type> <name>sentinelAddr</name>;</typedef>

<comment type="block">/* A Sentinel Redis Instance object is monitoring. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_MASTER</name></cpp:macro>  <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_SLAVE</name></cpp:macro>   <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_SENTINEL</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_S_DOWN</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>   <comment type="block">/* Subjectively down (no quorum). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_O_DOWN</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>   <comment type="block">/* Objectively down (confirmed by others). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_MASTER_DOWN</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define> <comment type="block">/* A Sentinel with this flag set thinks that
                                   its master is down. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_FAILOVER_IN_PROGRESS</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define> <comment type="block">/* Failover is in progress for
                                           this master. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_PROMOTED</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>            <comment type="block">/* Slave selected for promotion. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_RECONF_SENT</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>     <comment type="block">/* SLAVEOF &lt;newmaster&gt; sent. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_RECONF_INPROG</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>   <comment type="block">/* Slave synchronization in progress. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_RECONF_DONE</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>     <comment type="block">/* Slave synchronized with new master. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_FORCE_FAILOVER</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>  <comment type="block">/* Force failover with master up. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRI_SCRIPT_KILL_SENT</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define> <comment type="block">/* SCRIPT KILL already sent on -BUSY */</comment>

<comment type="block">/* Note: times are in milliseconds. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_INFO_PERIOD</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_PING_PERIOD</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ASK_PERIOD</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_PUBLISH_PERIOD</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_DOWN_AFTER</name></cpp:macro> <cpp:value>30000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_HELLO_CHANNEL</name></cpp:macro> <cpp:value>"__sentinel__:hello"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_TILT_TRIGGER</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_TILT_PERIOD</name></cpp:macro> <cpp:value>(SENTINEL_PING_PERIOD*30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_SLAVE_PRIORITY</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SLAVE_RECONF_TIMEOUT</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_PARALLEL_SYNCS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MIN_LINK_RECONNECT_PERIOD</name></cpp:macro> <cpp:value>15000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_FAILOVER_TIMEOUT</name></cpp:macro> <cpp:value>(60*3*1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MAX_PENDING_COMMANDS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ELECTION_TIMEOUT</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MAX_DESYNC</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Failover machine different states. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>  <comment type="block">/* No failover in progress. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_WAIT_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>  <comment type="block">/* Wait for failover_start_time*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* Select slave to promote */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> <comment type="block">/* Slave -&gt; Master */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> <comment type="block">/* Wait slave to change role */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> <comment type="block">/* SLAVEOF newmaster */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> <comment type="block">/* Monitor promoted slave. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MASTER_LINK_STATUS_UP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_MASTER_LINK_STATUS_DOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Generic flags that can be used with different functions.
 * They use higher bits to avoid colliding with the function specific
 * flags. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_NO_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_GENERATE_EVENT</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_LEADER</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_OBSERVER</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define>

<comment type="block">/* Script execution flags and limits. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_RUNNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_QUEUE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_RUNNING</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_RUNTIME</name></cpp:macro> <cpp:value>60000</cpp:value></cpp:define> <comment type="block">/* 60 seconds max exec time. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_RETRY</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_RETRY_DELAY</name></cpp:macro> <cpp:value>30000</cpp:value></cpp:define> <comment type="block">/* 30 seconds between retries. */</comment>

<comment type="block">/* SENTINEL SIMULATE-FAILURE command flags. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SIMFAILURE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<comment type="block">/* The link to a sentinelRedisInstance. When we have the same set of Sentinels
 * monitoring many masters, we have different instances representing the
 * same Sentinels, one per master, and we need to share the hiredis connections
 * among them. Oherwise if 5 Sentinels are monitoring 100 masters we create
 * 500 outgoing connections instead of 5.
 *
 * So this structure represents a reference counted link in terms of the two
 * hiredis connections for commands and Pub/Sub, and the fields needed for
 * failure detection, since the ping/pong time are now local to the link: if
 * the link is available, the instance is avaialbe. This way we don't just
 * have 5 connections instead of 500, we also send 5 pings instead of 500.
 *
 * Links are shared only for Sentinels: master and slave instances have
 * a link with refcount = 1, always. */</comment>
<typedef>typedef <type><struct>struct <name>instanceLink</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>          <comment type="block">/* Number of sentinelRedisInstance owners. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>disconnected</name></decl>;</decl_stmt>      <comment type="block">/* Non-zero if we need to reconnect cc or pc. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>pending_commands</name></decl>;</decl_stmt>  <comment type="block">/* Number of commands sent waiting for a reply. */</comment>
    <decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt> <comment type="block">/* Hiredis context for commands. */</comment>
    <decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt> <comment type="block">/* Hiredis context for Pub / Sub. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>cc_conn_time</name></decl>;</decl_stmt> <comment type="block">/* cc connection time. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>pc_conn_time</name></decl>;</decl_stmt> <comment type="block">/* pc connection time. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>pc_last_activity</name></decl>;</decl_stmt> <comment type="block">/* Last time we received any message. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_avail_time</name></decl>;</decl_stmt> <comment type="block">/* Last time the instance replied to ping with
                                 a reply we consider valid. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>act_ping_time</name></decl>;</decl_stmt>   <comment type="block">/* Time at which the last pending ping (no pong
                                 received after it) was sent. This field is
                                 set to 0 when a pong is received, and set again
                                 to the current time if the value is 0 and a new
                                 ping is sent. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_ping_time</name></decl>;</decl_stmt>  <comment type="block">/* Time at which we sent the last ping. This is
                                 only used to avoid sending too many pings
                                 during failure. Idle time is computed using
                                 the act_ping_time field. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_pong_time</name></decl>;</decl_stmt>  <comment type="block">/* Last time the instance replied to ping,
                                 whatever the reply was. That's used to check
                                 if the link is idle and must be reconnected. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_reconn_time</name></decl>;</decl_stmt>  <comment type="block">/* Last reconnection attempt performed when
                                   the link was down. */</comment>
}</block></struct></type> <name>instanceLink</name>;</typedef>

<typedef>typedef <type><struct>struct <name>sentinelRedisInstance</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>      <comment type="block">/* See SRI_... defines */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>     <comment type="block">/* Master name from the point of view of this sentinel. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl>;</decl_stmt>    <comment type="block">/* Run ID of this instance, or unique ID if is a Sentinel.*/</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>config_epoch</name></decl>;</decl_stmt>  <comment type="block">/* Configuration epoch. */</comment>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt> <comment type="block">/* Master host. */</comment>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name></decl>;</decl_stmt> <comment type="block">/* Link to the instance, may be shared for Sentinels. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_pub_time</name></decl>;</decl_stmt>   <comment type="block">/* Last time we sent hello via Pub/Sub. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_hello_time</name></decl>;</decl_stmt> <comment type="block">/* Only used if SRI_SENTINEL is set. Last time
                                 we received a hello from this Sentinel
                                 via Pub/Sub. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>last_master_down_reply_time</name></decl>;</decl_stmt> <comment type="block">/* Time of last reply to
                                             SENTINEL is-master-down command. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>s_down_since_time</name></decl>;</decl_stmt> <comment type="block">/* Subjectively down since time. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>o_down_since_time</name></decl>;</decl_stmt> <comment type="block">/* Objectively down since time. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>down_after_period</name></decl>;</decl_stmt> <comment type="block">/* Consider it down after that period. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>info_refresh</name></decl>;</decl_stmt>  <comment type="block">/* Time at which we received INFO output from it. */</comment>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>renamed_commands</name></decl>;</decl_stmt>     <comment type="block">/* Commands renamed in this instance:
                                   Sentinel will use the alternative commands
                                   mapped on this table to send things like
                                   SLAVEOF, CONFING, INFO, ... */</comment>

    <comment type="block">/* Role and the first time we observed it.
     * This is useful in order to delay replacing what the instance reports
     * with our own configuration. We need to always wait some time in order
     * to give a chance to the leader to report the new configuration before
     * we do silly things. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>role_reported</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>role_reported_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>slave_conf_change_time</name></decl>;</decl_stmt> <comment type="block">/* Last time slave master addr changed. */</comment>

    <comment type="block">/* Master specific. */</comment>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>sentinels</name></decl>;</decl_stmt>    <comment type="block">/* Other sentinels monitoring the same master. */</comment>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>slaves</name></decl>;</decl_stmt>       <comment type="block">/* Slaves for this master instance. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quorum</name></decl>;</decl_stmt><comment type="block">/* Number of sentinels that need to agree on failure. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>parallel_syncs</name></decl>;</decl_stmt> <comment type="block">/* How many slaves to reconfigure at same time. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_pass</name></decl>;</decl_stmt>    <comment type="block">/* Password to use for AUTH against master &amp; slaves. */</comment>

    <comment type="block">/* Slave specific. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>master_link_down_time</name></decl>;</decl_stmt> <comment type="block">/* Slave replication link down time. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>slave_priority</name></decl>;</decl_stmt> <comment type="block">/* Slave priority according to its INFO output. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>slave_reconf_sent_time</name></decl>;</decl_stmt> <comment type="block">/* Time at which we sent SLAVE OF &lt;new&gt; */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>sentinelRedisInstance</name></name> <modifier>*</modifier></type><name>master</name></decl>;</decl_stmt> <comment type="block">/* Master instance if it's slave. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slave_master_host</name></decl>;</decl_stmt>    <comment type="block">/* Master host as reported by INFO */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>slave_master_port</name></decl>;</decl_stmt>      <comment type="block">/* Master port as reported by INFO */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>slave_master_link_status</name></decl>;</decl_stmt> <comment type="block">/* Master link status as reported by INFO */</comment>
    <decl_stmt><decl><type><name>PORT_ULONGLONG</name></type> <name>slave_repl_offset</name></decl>;</decl_stmt> <comment type="block">/* Slave replication offset. */</comment>
    <comment type="block">/* Failover */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>leader</name></decl>;</decl_stmt>       <comment type="block">/* If this is a master instance, this is the runid of
                           the Sentinel that should perform the failover. If
                           this is a Sentinel, this is the runid of the Sentinel
                           that this Sentinel voted as leader. */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>leader_epoch</name></decl>;</decl_stmt> <comment type="block">/* Epoch of the 'leader' field. */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>failover_epoch</name></decl>;</decl_stmt> <comment type="block">/* Epoch of the currently started failover. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>failover_state</name></decl>;</decl_stmt> <comment type="block">/* See SENTINEL_FAILOVER_STATE_* defines. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_state_change_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_start_time</name></decl>;</decl_stmt>   <comment type="block">/* Last failover attempt start time. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_timeout</name></decl>;</decl_stmt>      <comment type="block">/* Max time to refresh failover state. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>failover_delay_logged</name></decl>;</decl_stmt> <comment type="block">/* For what failover_start_time value we
                                       logged the failover delay. */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>sentinelRedisInstance</name></name> <modifier>*</modifier></type><name>promoted_slave</name></decl>;</decl_stmt> <comment type="block">/* Promoted slave instance. */</comment>
    <comment type="block">/* Scripts executed to notify admin or reconfigure clients: when they
     * are set to NULL no script is executed. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>notification_script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_reconfig_script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>info</name></decl>;</decl_stmt> <comment type="block">/* cached INFO output */</comment>
}</block></struct></type> <name>sentinelRedisInstance</name>;</typedef>

<comment type="block">/* Main state. */</comment>
<struct>struct <name>sentinelState</name> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>myid</name><index>[<expr><name>CONFIG_RUN_ID_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* This sentinel ID. */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>current_epoch</name></decl>;</decl_stmt>         <comment type="block">/* Current epoch. */</comment>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>masters</name></decl>;</decl_stmt>      <comment type="block">/* Dictionary of master sentinelRedisInstances.
                           Key is the instance name, value is the
                           sentinelRedisInstance structure pointer. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tilt</name></decl>;</decl_stmt>           <comment type="block">/* Are we in TILT mode? */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>running_scripts</name></decl>;</decl_stmt>    <comment type="block">/* Number of scripts in execution right now. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>tilt_start_time</name></decl>;</decl_stmt>       <comment type="block">/* When TITL started. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>previous_time</name></decl>;</decl_stmt>         <comment type="block">/* Last time we ran the time handler. */</comment>
    <decl_stmt><decl><type><name>list</name> <modifier>*</modifier></type><name>scripts_queue</name></decl>;</decl_stmt>            <comment type="block">/* Queue of user scripts to execute. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>announce_ip</name></decl>;</decl_stmt>  <comment type="block">/* IP addr that is gossiped to other sentinels if
                           not NULL. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>announce_port</name></decl>;</decl_stmt>  <comment type="block">/* Port that is gossiped to other sentinels if
                           non zero. */</comment>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>simfailure_flags</name></decl>;</decl_stmt> <comment type="block">/* Failures simulation. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>deny_scripts_reconfig</name></decl>;</decl_stmt> <comment type="block">/* Allow SENTINEL SET ... to change script
                                  paths at runtime? */</comment>
}</block> <decl><name>sentinel</name></decl>;</struct>

<comment type="block">/* A script execution job. */</comment>
<typedef>typedef <type><struct>struct <name>sentinelScriptJob</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>              <comment type="block">/* Script job flags: SENTINEL_SCRIPT_* */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>retry_num</name></decl>;</decl_stmt>          <comment type="block">/* Number of times we tried to execute it. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>            <comment type="block">/* Arguments to call the script. */</comment>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>start_time</name></decl>;</decl_stmt>    <comment type="block">/* Script execution time if the script is running,
                               otherwise 0 if we are allowed to retry the
                               execution at any time. If the script is not
                               running and it's not 0, it means: do not run
                               before the specified time. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hScriptProcess</name></decl>;</decl_stmt>  <comment type="block">/* handle of process executing script */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>              <comment type="block">/* Script execution pid. */</comment>
}</block></struct></type> <name>sentinelScriptJob</name>;</typedef>

<comment type="block">/* ======================= hiredis ae.c adapters =============================
 * Note: this implementation is taken from hiredis/adapters/ae.h, however
 * we have our modified copy for Sentinel in order to use our allocator
 * and to have full control over how the adapter works. */</comment>

<typedef>typedef <type><struct>struct <name>redisAeEvents</name> <block>{
    <decl_stmt><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>reading</name></decl>, <name>writing</name>;</decl_stmt>
}</block></struct></type> <name>redisAeEvents</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeReadEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>redisAsyncHandleRead</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>WSIOCP_QueueNextRead(fd);</argument>)</argument_list></macro>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>writeHandlerDone</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nwritten</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>WSIOCP_Request</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>WSIOCP_Request</name> <operator>*</operator><operator>)</operator> <name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name> <operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>client</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>redisAsyncHandleWriteComplete</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeWriteEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>redisAsyncHandleWritePrep</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WSIOCP_SocketSend</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                                   <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>,
                                   <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
                                   <argument><expr><name>el</name></expr></argument>,
                                   <argument><expr><name>e</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><name>writeHandlerDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SOCKET_ERROR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>WSA_IO_PENDING</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Writing to socket %s (%d)\n"</literal></expr></argument>, <argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeWriteEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>el</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>el</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>fd</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>redisAsyncHandleWrite</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeAddRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>,<argument><expr><name>redisAeReadEvent</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeDelRead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_READABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeAddWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeCreateFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>,<argument><expr><name>redisAeWriteEvent</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeDelWrite</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>aeDeleteFileEvent</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,<argument><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,<argument><expr><name>AE_WRITABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>redisAeCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><name>privdata</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>redisAeDelRead</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisAeDelWrite</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>redisAeAttach</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>redisContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisAeEvents</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

    <comment type="block">/* Nothing should be attached when something is already attached */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Create container for context and r/w events */</comment>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>redisAeEvents</name><operator>*</operator><operator>)</operator><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reading</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>writing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Register functions to start/stop listening for events */</comment>
    <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addRead</name></name> <operator>=</operator> <name>redisAeAddRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delRead</name></name> <operator>=</operator> <name>redisAeDelRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>addWrite</name></name> <operator>=</operator> <name>redisAeAddWrite</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>delWrite</name></name> <operator>=</operator> <name>redisAeDelWrite</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>redisAeCleanup</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ============================= Prototypes ================================= */</comment>

<function_decl><type><name>void</name></type> <name>sentinelLinkEstablishedCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelDisconnectCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelReceiveHelloMessages</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelGetMasterByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetSubjectiveLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetObjectiveLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>yesnotoi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>instanceLinkConnectionError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelRedisInstanceTypeStr</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelAbortFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelSelectSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelScheduleScriptExecution</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelStartFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelDiscardReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelSendSlaveOf</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sentinelVoteLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>req_epoch</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>req_runid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>leader_epoch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelFlushConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelGenerateInitialMonitorEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelSendPing</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sentinelForceHelloUpdateForMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>getSentinelRedisInstanceByAddrAndRunID</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelSimFailureCrash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* ========================= Dictionary types =============================== */</comment>

<function_decl><type><name>uint64_t</name></type> <name>dictSdsHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>dictSdsCaseHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictSdsKeyCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>dictSdsKeyCaseCompare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>releaseSentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>dictInstancesValDestructor</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseSentinelRedisInstance</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Instance name (sds) -&gt; instance (sentinelRedisInstance pointer)
 *
 * also used for: sentinelRedisInstance-&gt;sentinels dictionary that maps
 * sentinels ip:port to last seen time in Pub/Sub hello message. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>instancesDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,               <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,         <comment type="block">/* key compare */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key destructor */</comment>
    <expr><name>dictInstancesValDestructor</name></expr> <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Instance runid (sds) -&gt; votes (long casted to void*)
 *
 * This is useful into sentinelGetObjectiveLeader() function in order to
 * count the votes and understand who is the leader. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>leaderVotesDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsHash</name></expr>,               <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCompare</name></expr>,         <comment type="block">/* key compare */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key destructor */</comment>
    <expr><name>NULL</name></expr>                       <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Instance renamed commands table. */</comment>
<decl_stmt><decl><type><name>dictType</name></type> <name>renamedCommandsDictType</name> <init>= <expr><block>{
    <expr><name>dictSdsCaseHash</name></expr>,           <comment type="block">/* hash function */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* key dup */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* val dup */</comment>
    <expr><name>dictSdsKeyCaseCompare</name></expr>,     <comment type="block">/* key compare */</comment>
    <expr><name>dictSdsDestructor</name></expr>,         <comment type="block">/* key destructor */</comment>
    <expr><name>dictSdsDestructor</name></expr>          <comment type="block">/* val destructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* =========================== Initialization =============================== */</comment>

<function_decl><type><name>void</name></type> <name>sentinelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelInfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelPublishCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sentinelRoleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name></type> <name><name>sentinelcmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"ping"</literal></expr>,<expr><name>pingCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"sentinel"</literal></expr>,<expr><name>sentinelCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"subscribe"</literal></expr>,<expr><name>subscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"unsubscribe"</literal></expr>,<expr><name>unsubscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"psubscribe"</literal></expr>,<expr><name>psubscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"punsubscribe"</literal></expr>,<expr><name>punsubscribeCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"publish"</literal></expr>,<expr><name>sentinelPublishCommand</name></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"info"</literal></expr>,<expr><name>sentinelInfoCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"role"</literal></expr>,<expr><name>sentinelRoleCommand</name></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="string">"l"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"client"</literal></expr>,<expr><name>clientCommand</name></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="string">"rs"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"shutdown"</literal></expr>,<expr><name>shutdownCommand</name></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="string">""</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"auth"</literal></expr>,<expr><name>authCommand</name></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="string">"sltF"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* This function overwrites a few normal Redis config default with Sentinel
 * specific defaults. */</comment>
<function><type><name>void</name></type> <name>initSentinelConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>REDIS_SENTINEL_PORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>protected_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Sentinel must be exposed. */</comment>
</block_content>}</block></function>

<comment type="block">/* Perform the Sentinel mode initialization. */</comment>
<function><type><name>void</name></type> <name>initSentinel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <comment type="block">/* Remove usual Redis commands from the command table, then just add
     * the SENTINEL command. */</comment>
    <expr_stmt><expr><call><name>dictEmpty</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sentinelcmds</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sentinelcmds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>redisCommand</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>sentinelcmds</name><operator>+</operator><name>j</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>dictAdd</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>commands</name></name></expr></argument>, <argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DICT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Initialize various data structures. */</comment>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>previous_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name> <operator>=</operator> <call><name>listCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>=</operator> <name>SENTINEL_SIMFAILURE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function gets called when the server is in Sentinel mode, started,
 * loaded the configuration, and is ready for normal operations. */</comment>
<function><type><name>void</name></type> <name>sentinelIsRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>configfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Sentinel started without a config file. Exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><name>W_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
            <argument><expr><literal type="string">"Sentinel config file %s is not writable: %s. Exiting..."</literal></expr></argument>,
            <argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If this Sentinel has yet no ID set in the configuration file, we
     * pick a random one and persist the config on disk. From now on this
     * will be this Sentinel ID across restarts. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>myid</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Pick ID and persist the config. */</comment>
        <expr_stmt><expr><call><name>getRandomHexChars</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Log its ID to make debugging of issues simpler. */</comment>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Sentinel ID is %s"</literal></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We want to generate a +monitor event for every configured master
     * at startup. */</comment>
    <expr_stmt><expr><call><name>sentinelGenerateInitialMonitorEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ============================== sentinelAddr ============================== */</comment>

<comment type="block">/* Create a sentinelAddr object and return it on success.
 * On error NULL is returned and errno is set to:
 *  ENOENT: Can't resolve the hostname.
 *  EINVAL: Invalid port number.
 */</comment>
<function><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>createSentinelAddr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>port</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>port</name></expr></argument> &gt;</argument_list></name> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>anetResolve</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>hostname</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sa</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
    <return>return <expr><name>sa</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return a duplicate of the source address. */</comment>
<function><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>dupSentinelAddr</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sa</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
    <return>return <expr><name>sa</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free a Sentinel address. Can't fail. */</comment>
<function><type><name>void</name></type> <name>releaseSentinelAddr</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return non-zero if two addresses are equal. */</comment>
<function><type><name>int</name></type> <name>sentinelAddrIsEqual</name><parameter_list>(<parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>port</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* =========================== Events notification ========================== */</comment>

<comment type="block">/* Send an event to log, pub/sub, user notification script.
 *
 * 'level' is the log level for logging. Only LL_WARNING events will trigger
 * the execution of the user notification script.
 *
 * 'type' is the message type, also used as a pub/sub channel name.
 *
 * 'ri', is the redis instance target of this event if applicable, and is
 * used to obtain the path of the notification script to execute.
 *
 * The remaining arguments are printf-alike.
 * If the format specifier starts with the two characters "%@" then ri is
 * not NULL, and the message is prefixed with an instance identifier in the
 * following format:
 *
 *  &lt;instance type&gt; &lt;instance name&gt; &lt;ip&gt; &lt;port&gt;
 *
 *  If the instance type is not master, than the additional string is
 *  added to specify the originating master:
 *
 *  @ &lt;master name&gt; &lt;master ip&gt; &lt;master port&gt;
 *
 *  Any other specifier after "%@" is processed by printf itself.
 */</comment>
<function><type><name>void</name></type> <name>sentinelEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>channel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt>

    <comment type="block">/* Handle %@ */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then>
                                         <expr><name>NULL</name></expr> </then><else>: <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>master</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s %s %d @ %s %s %d"</literal></expr></argument>,
                <argument><expr><call><name>sentinelRedisInstanceTypeStr</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s %s %d"</literal></expr></argument>,
                <argument><expr><call><name>sentinelRedisInstanceTypeStr</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>fmt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Use vsprintf for the rest of the formatting if any. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Log the message if the log level allows it to be logged. */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name><name>server</name><operator>.</operator><name>verbosity</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><literal type="string">"%s %s"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Publish the message via Pub/Sub if it's not a debugging one. */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <name>LL_DEBUG</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>type</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>msg</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pubsubPublishMessage</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Call the notification script if applicable. */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>LL_WARNING</name> <operator>&amp;&amp;</operator> <name>ri</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then>
                                         <expr><name>ri</name></expr> </then><else>: <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>master</name> <operator>&amp;&amp;</operator> <name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelScheduleScriptExecution</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>,
                <argument><expr><name>type</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is called only at startup and is used to generate a
 * +monitor event for every configured master. The same events are also
 * generated when a master to monitor is added at runtime via the
 * SENTINEL MONITOR command. */</comment>
<function><type><name>void</name></type> <name>sentinelGenerateInitialMonitorEvents</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+monitor"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ quorum %d"</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ============================ script execution ============================ */</comment>

<comment type="block">/* Release a script job structure and all the associated data. */</comment>
<function><type><name>void</name></type> <name>sentinelReleaseScriptJob</name><parameter_list>(<parameter><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_SCRIPT_MAX_ARGS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelScheduleScriptExecution</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>SENTINEL_SCRIPT_MAX_ARGS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>SENTINEL_SCRIPT_MAX_ARGS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Copy the string. */</comment>
        <expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sj</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SENTINEL_SCRIPT_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>WIN32_ONLY</name><argument_list>(<argument>sj-&gt;hScriptProcess = INVALID_HANDLE_VALUE;</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name>argv</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>argc</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Remove the oldest non running script if we already hit the limit. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SENTINEL_SCRIPT_MAX_QUEUE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sj</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <comment type="block">/* The first node is the oldest as we add on tail. */</comment>
            <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelReleaseScriptJob</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
                    <name>SENTINEL_SCRIPT_MAX_QUEUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Lookup a script in the scripts queue via pid, and returns the list node
 * (so that we can easily remove it from the queue if needed). */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<function><type><name>listNode</name> <modifier>*</modifier></type><name>sentinelGetScriptListNodeByPid</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ln</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Run pending scripts if we are not already at max number of running
 * scripts. */</comment>
<function><type><name>void</name></type> <name>sentinelRunPendingScripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Find jobs that are not running and run them, from the top to the
     * tail of the queue, so we run older jobs first. */</comment>
    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name> <operator>&lt;</operator> <name>SENTINEL_SCRIPT_MAX_RUNNING</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>POSIX_ONLY</name><argument_list>(<argument>pid_t pid;</argument>)</argument_list></macro>

        <comment type="block">/* Skip if already running. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Skip if it's a retry, but not enough time has elapsed. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&amp;&amp;</operator> <name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
        <comment type="block">/* The notification script is called passing two arguments:
         * - the first argument doesn't contain spaces
         * - the second argument contains spaces therefore we quote it */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>args</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>args</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>arglen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>args</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>arglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>arglen</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>args</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">"\"\0"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>args</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TRUE</name> <operator>==</operator> <call><name>CreateProcessA</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"+script-child"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%Id"</literal></expr></argument>, 
                          <argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator> <name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-script-error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Parent (fork error).
             * We report fork errors as signal 99, in order to unify the
             * reporting with other kind of errors. */</comment>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-script-error"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Child */</comment>
            <expr_stmt><expr><call><name>execve</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,<argument><expr><name>environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* If we are here an error occurred. */</comment>
            <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Don't retry execution. */</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"+script-child"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"%ld"</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* How much to delay the execution of a script that we need to retry after
 * an error?
 *
 * We double the retry delay for every further retry we do. So for instance
 * if RETRY_DELAY is set to 30 seconds and the max number of retries is 10
 * starting from the second attempt to execute the script the delays are:
 * 30 sec, 60 sec, 2 min, 4 min, 8 min, 16 min, 32 min, 64 min, 128 min. */</comment>
<function><type><name>mstime_t</name></type> <name>sentinelScriptRetryDelay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retry_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>delay</name> <init>= <expr><name>SENTINEL_SCRIPT_RETRY_DELAY</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>retry_num</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delay</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>delay</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check for scripts that terminated, and remove them from the queue if the
 * script terminated successfully. If instead the script was terminated by
 * a signal, or returned exit code "1", it is scheduled to run again if
 * the max number of retries did not already elapsed. */</comment>
<function><type><name>void</name></type> <name>sentinelCollectTerminatedScripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>exitCode</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name> <operator>&lt;</operator> <name>SENTINEL_SCRIPT_MAX_RUNNING</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"-script-child"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%Id %d %d"</literal></expr></argument>,      <argument><expr><macro><name>WIN_PORT_FIX</name> <comment type="block">/* %ld -&gt; %Id*/</comment>
                <argument_list>(<argument>PORT_LONG</argument>)</argument_list></macro> <name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>exitCode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* at this point the process ID may be recycled by Windows */</comment>
            <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If the script returns an exit code of "1" (that means: please retry), 
            * we reschedule it if the max number of retries is not already reached. */</comment>
            <if_stmt><if>if <condition>(<expr><name>exitCode</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name> <operator>!=</operator> <name>SENTINEL_SCRIPT_MAX_RETRY</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>+</operator>
                                 <call><name>sentinelScriptRetryDelay</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Otherwise let's remove the script, but log the event if the
                 * execution did not terminated in the best of the ways. */</comment>
                <if_stmt><if>if <condition>(<expr><name>exitCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-script-error"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sentinelReleaseScriptJob</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>statloc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>wait3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statloc</name></expr></argument>,<argument><expr><name>WNOHANG</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>exitcode</name> <init>= <expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bysignal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bysignal</name> <operator>=</operator> <call><name>WTERMSIG</name><argument_list>(<argument><expr><name>statloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-script-child"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"%ld %d %d"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>sentinelGetScriptListNodeByPid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"wait3() returned a pid (%ld) we can't find in our scripts execution queue!"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>sj</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

        <comment type="block">/* If the script was terminated by a signal or returns an
         * exit code of "1" (that means: please retry), we reschedule it
         * if the max number of retries is not already reached. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bysignal</name> <operator>||</operator> <name>exitcode</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name> <operator>!=</operator> <name>SENTINEL_SCRIPT_MAX_RETRY</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SENTINEL_SCRIPT_RUNNING</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>+</operator>
                             <call><name>sentinelScriptRetryDelay</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Otherwise let's remove the script, but log the event if the
             * execution did not terminated in the best of the ways. */</comment>
            <if_stmt><if>if <condition>(<expr><name>bysignal</name> <operator>||</operator> <name>exitcode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-script-error"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><literal type="string">"%s %d %d"</literal></expr></argument>, <argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bysignal</name></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>listDelNode</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelReleaseScriptJob</name><argument_list>(<argument><expr><name>sj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>running_scripts</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Kill scripts in timeout, they'll be collected by the
 * sentinelCollectTerminatedScripts() function. */</comment>
<function><type><name>void</name></type> <name>sentinelKillTimedoutScripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>now</name> <operator>-</operator> <name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>SENTINEL_SCRIPT_MAX_RUNTIME</name></expr>)</condition>
        <block>{<block_content>
            <macro><name>sentinelEvent</name><argument_list>(<argument>LL_WARNING</argument>,<argument><literal type="string">"-script-timeout"</literal></argument>,<argument>NULL</argument>,<argument><literal type="string">"%s %Id"</literal></argument>,        <argument>WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id*/</comment>
                sj-&gt;argv[<literal type="number">0</literal>]</argument>, <argument>(PORT_LONG)sj-&gt;pid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
            <expr_stmt><expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>hScriptProcess</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,<argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Implements SENTINEL PENDING-SCRIPTS command. */</comment>
<function><type><name>void</name></type> <name>sentinelPendingScriptsCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>listNode</name> <modifier>*</modifier></type><name>ln</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>listIter</name></type> <name>li</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>listLength</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>listRewind</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>scripts_queue</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>listNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelScriptJob</name> <modifier>*</modifier></type><name>sj</name> <init>= <expr><name><name>ln</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"argv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"running"</literal></expr> </then><else>: <expr><literal type="string">"scheduled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>sj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SCRIPT_RUNNING</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"run-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>mstime_t</name></type> <name>delay</name> <init>= <expr><ternary><condition><expr><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>sj</name><operator>-&gt;</operator><name>start_time</name></name><operator>-</operator><call><name>mstime</name><argument_list>()</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"run-delay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"retry-num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sj</name><operator>-&gt;</operator><name>retry_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* This function calls, if any, the client reconfiguration script with the
 * following parameters:
 *
 * &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;
 *
 * It is called every time a failover is performed.
 *
 * &lt;state&gt; is currently always "failover".
 * &lt;role&gt; is either "leader" or "observer".
 *
 * from/to fields are respectively master -&gt; promoted slave addresses for
 * "start" and "end". */</comment>
<function><type><name>void</name></type> <name>sentinelCallClientReconfScript</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fromport</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>toport</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>fromport</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fromport</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>from</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>toport</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>toport</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>to</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelScheduleScriptExecution</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>,
        <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>role</name> <operator>==</operator> <name>SENTINEL_LEADER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"leader"</literal></expr> </then><else>: <expr><literal type="string">"observer"</literal></expr></else></ternary></expr></argument>,
        <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>fromport</name></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>toport</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* =============================== instanceLink ============================= */</comment>

<comment type="block">/* Create a not yet connected link object. */</comment>
<function><type><name>instanceLink</name> <modifier>*</modifier></type><name>createInstanceLink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>link</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc_conn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc_conn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_reconn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc_last_activity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* We set the act_ping_time to "now" even if we actually don't have yet
     * a connection with the node, nor we sent a ping.
     * This is useful to detect a timeout in case we'll not be able to connect
     * with the node at all. */</comment>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>link</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Disconnect an hiredis connection in the context of an instance link. */</comment>
<function><type><name>void</name></type> <name>instanceLinkCloseConnection</name><parameter_list>(<parameter><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>redisAsyncFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Decrement the refcount of a link object, if it drops to zero, actually
 * free it and return NULL. Otherwise don't do anything and return the pointer
 * to the object.
 *
 * If we are not going to free the link and ri is not NULL, we rebind all the
 * pending requests in link-&gt;cc (hiredis connection for commands) to a
 * callback that will just ignore them. This is useful to avoid processing
 * replies for an instance that no longer exists. */</comment>
<function><type><name>instanceLink</name> <modifier>*</modifier></type><name>releaseInstanceLink</name><parameter_list>(<parameter><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ri</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* This instance may have pending callbacks in the hiredis async
             * context, having as 'privdata' the instance that we are going to
             * free. Let's rewrite the callback list, directly exploiting
             * hiredis internal data structures, in order to bind them with
             * a callback that will ignore the reply at all. */</comment>
            <decl_stmt><decl><type><name>redisCallback</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>redisCallbackList</name> <modifier>*</modifier></type><name>callbacks</name> <init>= <expr><operator>&amp;</operator><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>replies</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>callbacks</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>cb</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>privdata</name></name> <operator>==</operator> <name>ri</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>sentinelDiscardReplyCallback</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>privdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* Not strictly needed. */</comment>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>link</name></expr>;</return> <comment type="block">/* Other active users. */</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function will attempt to share the instance link we already have
 * for the same Sentinel in the context of a different master, with the
 * instance we are passing as argument.
 *
 * This way multiple Sentinel objects that refer all to the same physical
 * Sentinel instance but in the context of different masters will use
 * a single connection, will send a single PING per second for failure
 * detection and so forth.
 *
 * Return C_OK if a matching Sentinel was found in the context of a
 * different master and sharing was performed. Otherwise C_ERR
 * is returned. */</comment>
<function><type><name>int</name></type> <name>sentinelTryConnectionSharing</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* No way to identify it. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Already shared. */</comment>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
        <comment type="block">/* We want to share with the same physical Sentinel referenced
         * in other masters, so skip our master. */</comment>
        <if_stmt><if>if <condition>(<expr><name>master</name> <operator>==</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,
                                                       <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* No match. */</comment>
        <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>ri</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* Should never happen but... safer. */</comment>

        <comment type="block">/* We identified a matching Sentinel, great! Let's free our link
         * and use the one of the matching Sentinel. */</comment>
        <expr_stmt><expr><call><name>releaseInstanceLink</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>link</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_OK</name></expr>;</return>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_ERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* When we detect a Sentinel to switch address (reporting a different IP/port
 * pair in Hello messages), let's update all the matching Sentinels in the
 * context of other masters as well and disconnect the links, so that everybody
 * will be updated.
 *
 * Return the number of updated Sentinel addresses. */</comment>
<function><type><name>int</name></type> <name>sentinelUpdateSentinelAddressInAllMasters</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>reconfigured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,
                                                       <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* If there is no match, this master does not know about this
         * Sentinel, try with the next one. */</comment>
        <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Disconnect the old links if connected. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>match</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>ri</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* Address already updated for it. */</comment>

        <comment type="block">/* Update the address of the matching Sentinel by copying the address
         * of the Sentinel object that received the address update. */</comment>
        <expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>dupSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>reconfigured</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>reconfigured</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel-address-update"</literal></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
                    <argument><expr><literal type="string">"%@ %d additional matching instances"</literal></expr></argument>, <argument><expr><name>reconfigured</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>reconfigured</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is called when an hiredis connection reported an error.
 * We set it to NULL and mark the link as disconnected so that it will be
 * reconnected again.
 *
 * Note: we don't free the hiredis context as hiredis will do it for us
 * for async connections. */</comment>
<function><type><name>void</name></type> <name>instanceLinkConnectionError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pubsub</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pubsub</name> <operator>=</operator> <operator>(</operator><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pubsub</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Hiredis connection established / disconnected callbacks. We need them
 * just to cleanup our link state. */</comment>
<function><type><name>void</name></type> <name>sentinelLinkEstablishedCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>instanceLinkConnectionError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelDisconnectCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>instanceLinkConnectionError</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ========================== sentinelRedisInstance ========================= */</comment>

<comment type="block">/* Create a redis instance, the following fields must be populated by the
 * caller if needed:
 * runid: set to NULL but will be populated once INFO output is received.
 * info_refresh: is set to 0 to mean that we never received INFO so far.
 *
 * If SRI_MASTER is set into initial flags the instance is added to
 * sentinel.masters table.
 *
 * if SRI_SLAVE or SRI_SENTINEL is set then 'master' must be not NULL and the
 * instance is added into master-&gt;slaves or master-&gt;sentinels table.
 *
 * If the instance is a slave or sentinel, the name parameter is ignored and
 * is created automatically as hostname:port.
 *
 * The function fails if hostname can't be resolved or port is out of range.
 * When this happens NULL is returned and errno is set accordingly to the
 * createSentinelAddr() function.
 *
 * The function may also fail and return NULL with errno set to EBUSY if
 * a master with the same name, a slave with the same address, or a sentinel
 * with the same ID already exists. */</comment>

<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>createSentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quorum</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>slavename</name><index>[<expr><name>NET_PEER_ID_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sdsname</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>|</operator><name>SRI_SENTINEL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator> <operator>||</operator> <name>master</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check address validity. */</comment>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* For slaves use ip:port as name. */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>anetFormatAddr</name><argument_list>(<argument><expr><name>slavename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>slavename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <name>slavename</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Make sure the entry is not duplicated. This may happen when the same
     * name for a master is used multiple times inside the configuration or
     * if we try to add multiple times a slave or sentinel with same ip/port
     * to a master. */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>sdsname</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>dictFind</name><argument_list>(<argument><expr><name>table</name></expr></argument>,<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Create the instance object. */</comment>
    <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Note that all the instances are started in the disconnected state,
     * the event loop will take care of connecting them. */</comment>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>sdsname</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <call><name>createInstanceLink</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_hello_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <ternary><condition><expr><name>master</name></expr> ?</condition><then> <expr><name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name></expr> </then><else>:
                            <expr><name>SENTINEL_DEFAULT_DOWN_AFTER</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_priority</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_SLAVE_PRIORITY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_reconf_sent_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>=</operator> <name>SENTINEL_MASTER_LINK_STATUS_DOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <name>quorum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_PARALLEL_SYNCS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>renamedCommandsDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Failover state. */</comment>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>=</operator> <name>SENTINEL_DEFAULT_FAILOVER_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_delay_logged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Role */</comment>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add into the right table. */</comment>
    <expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Release this instance and all its slaves, sentinels, hiredis connections.
 * This function does not take care of unlinking the instance from the main
 * masters table (if it is a master) or from its master sentinels/slaves table
 * if it is a slave or sentinel. */</comment>
<function><type><name>void</name></type> <name>releaseSentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Release all its slaves or sentinels if any. */</comment>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Disconnect the instance. */</comment>
    <expr_stmt><expr><call><name>releaseInstanceLink</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Free other resources. */</comment>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear state into the master if needed. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Lookup a slave in a master Redis instance, by ip and port. */</comment>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelRedisInstanceLookupSlave</name><parameter_list>(
                <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NET_PEER_ID_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>anetFormatAddr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>slave</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the name of the type of the instance as a string. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelRedisInstanceTypeStr</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"master"</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"slave"</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"sentinel"</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This function remove the Sentinel with the specified ID from the
 * specified master.
 *
 * If "runid" is NULL the function returns ASAP.
 *
 * This function is useful because on Sentinels address switch, we want to
 * remove our old entry and add a new one for the same ID but with the new
 * address.
 *
 * The function returns 1 if the matching Sentinel was removed, otherwise
 * 0 if there was no Sentinel with this ID. */</comment>
<function><type><name>int</name></type> <name>removeMatchingSentinelFromMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>,<argument><expr><name>runid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>removed</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>removed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Search an instance with the same runid, ip and port into a dictionary
 * of instances. Return NULL if not found, otherwise return the instance
 * pointer.
 *
 * runid or ip can be NULL. In such a case the search is performed only
 * by the non-NULL field. */</comment>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>getSentinelRedisInstanceByAddrAndRunID</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>ip</name> <operator>||</operator> <name>runid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* User must pass at least one search param. */</comment>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>runid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>runid</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>, <argument><expr><name>runid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                            <name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>port</name><operator>)</operator><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>instance</name> <operator>=</operator> <name>ri</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>instance</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Master lookup by name */</comment>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelGetMasterByName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>sdsname</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sdsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add the specified flags to all the instances in the specified dictionary. */</comment>
<function><type><name>void</name></type> <name>sentinelAddFlagsToDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Remove the specified flags to all the instances in the specified
 * dictionary. */</comment>
<function><type><name>void</name></type> <name>sentinelDelFlagsToDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Reset the state of a monitored master:
 * 1) Remove all slaves.
 * 2) Remove all sentinels.
 * 3) Remove most of the flags resulting from runtime operations.
 * 4) Reset timers to their default value. For example after a reset it will be
 *    possible to failover again the same master ASAP, without waiting the
 *    failover timeout delay.
 * 5) In the process of doing this undo the failover if in progress.
 * 6) Disconnect the connections with the master (will reconnect automatically).
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_RESET_NO_SENTINELS</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelResetMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SENTINEL_RESET_NO_SENTINELS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>instancesDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SRI_MASTER</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* We can failover again ASAP. */</comment>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>=</operator> <name>SRI_MASTER</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SENTINEL_GENERATE_EVENT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+reset-master"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Call sentinelResetMaster() on every master with a name matching the specified
 * pattern. */</comment>
<function><type><name>int</name></type> <name>sentinelResetMastersByPattern</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>reset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>stringmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sentinelResetMaster</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>reset</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>reset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reset the specified master with sentinelResetMaster(), and also change
 * the ip:port address, but take the name of the instance unmodified.
 *
 * This is used to handle the +switch-master event.
 *
 * The function returns C_ERR if the address can't be resolved for some
 * reason. Otherwise C_OK is returned.  */</comment>
<function><type><name>int</name></type> <name>sentinelResetMasterAndChangeAddress</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>oldaddr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newaddr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier><modifier>*</modifier></type><name>slaves</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numslaves</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>newaddr</name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>newaddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Make a list of slaves to add back after the reset.
     * Don't include the one having the address we are switching to. */</comment>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>sentinelAddrIsEqual</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,<argument><expr><name>newaddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>slaves</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sentinelAddr</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>numslaves</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>slaves</name><index>[<expr><name>numslaves</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
                                                 <argument><expr><name><name>slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If we are switching to a different address, include the old address
     * as a slave as well, so that we'll be able to sense / reconfigure
     * the old master. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sentinelAddrIsEqual</name><argument_list>(<argument><expr><name>newaddr</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>slaves</name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sentinelAddr</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>numslaves</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>slaves</name><index>[<expr><name>numslaves</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>createSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
                                                 <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Reset and switch address. */</comment>
    <expr_stmt><expr><call><name>sentinelResetMaster</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>SENTINEL_RESET_NO_SENTINELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldaddr</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>newaddr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>s_down_since_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Add slaves back. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numslaves</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>SRI_SLAVE</name></expr></argument>,<argument><expr><name><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ip</name></expr></argument>,
                    <argument><expr><name><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>port</name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name><name>slaves</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>slave</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>slaves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Release the old address at the end so we are safe even if the function
     * gets the master-&gt;addr-&gt;ip and master-&gt;addr-&gt;port as arguments. */</comment>
    <expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>oldaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return non-zero if there was no SDOWN or ODOWN error associated to this
 * instance in the latest 'ms' milliseconds. */</comment>
<function><type><name>int</name></type> <name>sentinelRedisInstanceNoDownFor</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>mstime_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>most_recent</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>most_recent</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>&gt;</operator> <name>most_recent</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>most_recent</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>most_recent</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>most_recent</name><operator>)</operator> <operator>&gt;</operator> <name>ms</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the current master address, that is, its address or the address
 * of the promoted slave if already operational. */</comment>
<function><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>sentinelGetCurrentMasterAddress</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* If we are failing over the master, and the state is already
     * SENTINEL_FAILOVER_STATE_RECONF_SLAVES or greater, it means that we
     * already have the new configuration epoch in the master, and the
     * slave acknowledged the configuration switch. Advertise the new
     * address. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>&amp;&amp;</operator>
        <name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>&gt;=</operator> <name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This function sets the down_after_period field value in 'master' to all
 * the slaves and sentinel instances connected to this master. */</comment>
<function><type><name>void</name></type> <name>sentinelPropagateDownAfterPeriod</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name><name>d</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr>, <expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetInstanceTypeString</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"master"</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"slave"</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"sentinel"</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is used in order to send commands to Redis instances: the
 * commands we send from Sentinel may be renamed, a common case is a master
 * with CONFIG and SLAVEOF commands renamed for security concerns. In that
 * case we check the ri-&gt;renamed_command table (or if the instance is a slave,
 * we check the one of the master), and map the command that we should send
 * to the set of renamed commads. However, if the command was not renamed,
 * we just return "command" itself. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelInstanceMapCommand</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>sc</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ri</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>retval</name></expr> ?</condition><then> <expr><name>retval</name></expr> </then><else>: <expr><name>command</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ============================ Config handling ============================= */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelHandleConfiguration</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* monitor &lt;name&gt; &lt;host&gt; &lt;port&gt; &lt;quorum&gt; */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>quorum</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>quorum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Quorum must be 1 or greater."</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>SRI_MASTER</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
                                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>quorum</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <switch>switch<condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>EBUSY</name></expr>:</case> <return>return <expr><literal type="string">"Duplicated master name."</literal></expr>;</return>
            <case>case <expr><name>ENOENT</name></expr>:</case> <return>return <expr><literal type="string">"Can't resolve master instance hostname."</literal></expr>;</return>
            <case>case <expr><name>EINVAL</name></expr>:</case> <return>return <expr><literal type="string">"Invalid port number"</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"down-after-milliseconds"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* down-after-milliseconds &lt;name&gt; &lt;milliseconds&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"negative or zero time parameter."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelPropagateDownAfterPeriod</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"failover-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* failover-timeout &lt;name&gt; &lt;milliseconds&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"negative or zero time parameter."</literal></expr>;</return></block_content></block></if></if_stmt>
   </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"parallel-syncs"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* parallel-syncs &lt;name&gt; &lt;milliseconds&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"notification-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* notification-script &lt;name&gt; &lt;path&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"Notification script seems non existing or non executable."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"client-reconfig-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* client-reconfig-script &lt;name&gt; &lt;path&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"Client reconfiguration script seems non existing or "</literal>
                   <literal type="string">"non executable."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"auth-pass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* auth-pass &lt;name&gt; &lt;password&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"current-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* current-epoch &lt;epoch&gt; */</comment>
        <decl_stmt><decl><type><name>PORT_ULONGLONG</name></type> <name>current_epoch</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>current_epoch</name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name>current_epoch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"myid"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONFIG_RUN_ID_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"Malformed Sentinel id in myid option."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>CONFIG_RUN_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"config-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* config-epoch &lt;name&gt; &lt;epoch&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* The following update of current_epoch is not really useful as
         * now the current epoch is persisted on the config file, but
         * we leave this check here for redundancy. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"leader-epoch"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* leader-epoch &lt;name&gt; &lt;epoch&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"known-slave"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"known-replica"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>

        <comment type="block">/* known-replica &lt;name&gt; &lt;ip&gt; &lt;port&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>slave</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>SRI_SLAVE</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="string">"Wrong hostname or port for replica."</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"known-sentinel"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>argc</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* Ignore the old form without runid. */</comment>
            <comment type="block">/* known-sentinel &lt;name&gt; &lt;ip&gt; &lt;port&gt; [runid] */</comment>
            <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>si</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name>SRI_SENTINEL</name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="string">"Wrong hostname or port for sentinel."</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelTryConnectionSharing</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rename-command"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* rename-command &lt;name&gt; &lt;command&gt; &lt;renamed-command&gt; */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"No such master with specified name."</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>oldcmd</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>newcmd</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldcmd</name></expr></argument>,<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DICT_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>oldcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="string">"Same command renamed multiple times with rename-command."</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"announce-ip"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* announce-ip &lt;ip-address&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"announce-port"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* announce-port &lt;port&gt; */</comment>
        <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"deny-scripts-reconfig"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* deny-scripts-reconfig &lt;yes|no&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name> <operator>=</operator> <call><name>yesnotoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"Please specify yes or no for the "</literal>
                   <literal type="string">"deny-scripts-reconfig options."</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="string">"Unrecognized sentinel configuration statement."</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Implements CONFIG REWRITE for "sentinel" option.
 * This is used not just to rewrite the configuration given by the user
 * (the configured masters) but also in order to retain the state of
 * Sentinel across restarts: config epoch of masters, associated slaves
 * and sentinel instances, and so forth. */</comment>
<function><type><name>void</name></type> <name>rewriteConfigSentinelOption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rewriteConfigState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>di2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>line</name></decl>;</decl_stmt>

    <comment type="block">/* sentinel unique ID. */</comment>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel myid %s"</literal></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* sentinel deny-scripts-reconfig. */</comment>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sentinel deny-scripts-reconfig %s"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,
        <argument><expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* For every master emit a "sentinel monitor" config entry. */</comment>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>master_addr</name></decl>;</decl_stmt>

        <comment type="block">/* sentinel monitor */</comment>
        <expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>master_addr</name> <operator>=</operator> <call><name>sentinelGetCurrentMasterAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"sentinel monitor %s %s %d %d"</literal></expr></argument>,
            <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master_addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>master_addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
            <argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* sentinel down-after-milliseconds */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_DOWN_AFTER</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>sdsempty()</argument>,
                <argument><literal type="string">"sentinel down-after-milliseconds %s %Id"</literal></argument>,                      <argument>WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id*/</comment>
                master-&gt;name</argument>, <argument>(PORT_LONG) master-&gt;down_after_period</argument>)</argument_list></macro></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* sentinel failover-timeout */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_FAILOVER_TIMEOUT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>sdsempty()</argument>,
                <argument><literal type="string">"sentinel failover-timeout %s %Id"</literal></argument>,                             <argument>WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id*/</comment>
                master-&gt;name</argument>, <argument>(PORT_LONG) master-&gt;failover_timeout</argument>)</argument_list></macro></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* sentinel parallel-syncs */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>!=</operator> <name>SENTINEL_DEFAULT_PARALLEL_SYNCS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel parallel-syncs %s %d"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>parallel_syncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* sentinel notification-script */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel notification-script %s %s"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* sentinel client-reconfig-script */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel client-reconfig-script %s %s"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* sentinel auth-pass */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>auth_pass</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel auth-pass %s %s"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* sentinel config-epoch */</comment>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"sentinel config-epoch %s %llu"</literal></expr></argument>,
            <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* sentinel leader-epoch */</comment>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"sentinel leader-epoch %s %llu"</literal></expr></argument>,
            <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* sentinel known-slave */</comment>
        <expr_stmt><expr><name>di2</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>slave_addr</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>slave_addr</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

            <comment type="block">/* If master_addr (obtained using sentinelGetCurrentMasterAddress()
             * so it may be the address of the promoted slave) is equal to this
             * slave's address, a failover is in progress and the slave was
             * already successfully promoted. So as the address of this slave
             * we use the old master address instead. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sentinelAddrIsEqual</name><argument_list>(<argument><expr><name>slave_addr</name></expr></argument>,<argument><expr><name>master_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>slave_addr</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel known-replica %s %s %d"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>slave_addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>slave_addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* sentinel known-sentinel */</comment>
        <expr_stmt><expr><name>di2</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel known-sentinel %s %s %d %s"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* sentinel rename-command */</comment>
        <expr_stmt><expr><name>di2</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>oldname</name> <init>= <expr><call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sds</name></type> <name>newname</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"sentinel rename-command %s %s %s"</literal></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>oldname</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* sentinel current-epoch is a global state valid for all the masters. */</comment>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"sentinel current-epoch %llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* sentinel announce-ip. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"sentinel announce-ip "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* sentinel announce-port. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"sentinel announce-port %d"</literal></expr></argument>,
                            <argument><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rewriteConfigRewriteLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function uses the config rewriting Redis engine in order to persist
 * the state of the Sentinel in the current configuration file.
 *
 * Before returning the function calls fsync() against the generated
 * configuration file to make sure changes are committed to disk.
 *
 * On failure the function logs a warning on the Redis log. */</comment>
<function><type><name>void</name></type> <name>sentinelFlushConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>saved_hz</name> <init>= <expr><name><name>server</name><operator>.</operator><name>hz</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rewrite_status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HZ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rewrite_status</name> <operator>=</operator> <call><name>rewriteConfig</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>saved_hz</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rewrite_status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>configfile</name></name></expr></argument>,<argument><expr><name>O_RDONLY</name></expr></argument>,<argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><name>_S_IREAD</name><operator>|</operator><name>_S_IWRITE</name></expr></argument>,<argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>POSIX_ONLY</name><argument_list>(<argument>if (fsync(fd) == -<literal type="number">1</literal>) goto werr;</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>werr</name>;</goto></block_content></block></if></if_stmt>
    <return>return;</return>

<label><name>werr</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"WARNING: Sentinel was not able to save the new configuration on disk!!!: %s"</literal></expr></argument>, <argument><expr><call><name>IF_WIN32</name><argument_list>(<argument><expr><call><name>wsa_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ====================== hiredis connection handling ======================= */</comment>

<comment type="block">/* Send the AUTH command with the specified master password if needed.
 * Note that for slaves the password set for the master is used.
 *
 * In case this Sentinel requires a password as well, via the "requirepass"
 * configuration directive, we assume we should use the local password in
 * order to authenticate when connecting with the other Sentinels as well.
 * So basically all the Sentinels share the same password and use it to
 * authenticate reciprocally.
 *
 * We don't check at all if the command was successfully transmitted
 * to the instance as if it fails Sentinel will detect the instance down,
 * will disconnect and reconnect the link and so forth. */</comment>
<function><type><name>void</name></type> <name>sentinelSendAuthIfNeeded</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_pass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>auth_pass</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>requirepass</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>auth_pass</name> <operator>=</operator> <name><name>server</name><operator>.</operator><name>requirepass</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>auth_pass</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
            <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"AUTH"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>auth_pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Use CLIENT SETNAME to name the connection in the Redis instance as
 * sentinel-&lt;first_8_chars_of_runid&gt;-&lt;connection_type&gt;
 * The connection type is "cmd" or "pubsub" as specified by 'type'.
 *
 * This makes it possible to list all the sentinel instances connected
 * to a Redis servewr with CLIENT LIST, grepping for a specific name format. */</comment>
<function><type><name>void</name></type> <name>sentinelSetClientName</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"sentinel-%.8s-%s"</literal></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
        <argument><expr><literal type="string">"%s SETNAME %s"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Create the async connections for the instance link if the link
 * is disconnected. Note that link-&gt;disconnected is true even if just
 * one of the two links (commands and pub/sub) is missing. */</comment>
<function><type><name>void</name></type> <name>sentinelReconnectInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* port == 0 means invalid address. */</comment>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_reconn_time</name></name> <operator>&lt;</operator> <name>SENTINEL_PING_PERIOD</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_reconn_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

    <comment type="block">/* Commands connection. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <call><name>redisAsyncConnectBind</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,<argument><expr><name>NET_FIRST_BIND_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-cmd-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #%s"</literal></expr></argument>,
                <argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc_conn_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>redisAeAttach</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>redisAsyncSetConnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
                    <argument><expr><name>sentinelLinkEstablishedCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>redisAsyncSetDisconnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
                    <argument><expr><name>sentinelDisconnectCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelSendAuthIfNeeded</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelSetClientName</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,<argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Send a PING ASAP when reconnecting. */</comment>
            <expr_stmt><expr><call><name>sentinelSendPing</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Pub / Sub */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <call><name>redisAsyncConnectBind</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,<argument><expr><name>NET_FIRST_BIND_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>err</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"-pubsub-link-reconnection"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ #%s"</literal></expr></argument>,
                <argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>errstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc_conn_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>link</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>redisAeAttach</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>el</name></name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>redisAsyncSetConnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,
                    <argument><expr><name>sentinelLinkEstablishedCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>redisAsyncSetDisconnectCallback</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,
                    <argument><expr><name>sentinelDisconnectCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelSendAuthIfNeeded</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelSetClientName</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,<argument><expr><literal type="string">"pubsub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Now we subscribe to the Sentinels "Hello" channel. */</comment>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>,
                <argument><expr><name>sentinelReceiveHelloMessages</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,
                <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SUBSCRIBE"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>SENTINEL_HELLO_CHANNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* If we can't subscribe, the Pub/Sub connection is useless
                 * and we can simply disconnect it and try again. */</comment>
                <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name>link</name></expr></argument>,<argument><expr><name><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Clear the disconnected status only if we have both the connections
     * (or just the commands connection if this is a sentinel instance). */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name> <operator>||</operator> <name><name>link</name><operator>-&gt;</operator><name>pc</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>disconnected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ======================== Redis instances pinging  ======================== */</comment>

<comment type="block">/* Return true if master looks "sane", that is:
 * 1) It is actually a master in the current configuration.
 * 2) It reports itself as a master.
 * 3) It is not SDOWN or ODOWN.
 * 4) We obtained last INFO no more than two times the INFO period time ago. */</comment>
<function><type><name>int</name></type> <name>sentinelMasterLooksSane</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return
        <expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator>
        <name><name>master</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>==</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_O_DOWN</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator> <operator>&lt;</operator> <name>SENTINEL_INFO_PERIOD</name><operator>*</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Process the INFO output from masters. */</comment>
<function><type><name>void</name></type> <name>sentinelRefreshInstanceInfo</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numlines</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>role</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* cache full INFO output for instance */</comment>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* The following fields must be reset to a given value in the case they
     * are not found at all in the INFO output. */</comment>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Process line by line. */</comment>
    <expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>sdssplitlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>numlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numlines</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sds</name></type> <name>l</name> <init>= <expr><name><name>lines</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* run_id:&lt;40 hex chars&gt;*/</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">47</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"run_id:"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>,<argument><expr><name>l</name><operator>+</operator><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+reboot"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* old versions: slave0:&lt;ip&gt;,&lt;port&gt;,&lt;state&gt;
         * new versions: slave0:ip=127.0.0.1,port=9999,... */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator>
            <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"slave"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"ip="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Old format. */</comment>
                <expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Now ip points to start of ip address. */</comment>
                <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>port</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="block">/* nul term for easy access. */</comment>
                <expr_stmt><expr><name>port</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Now port points to start of port number. */</comment>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="block">/* nul term for easy access. */</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* New format. */</comment>
                <expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"ip="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ip</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <comment type="block">/* Now ip points to start of ip address. */</comment>
                <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"port="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name>port</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>port</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <comment type="block">/* Now port points to start of port number. */</comment>
                <comment type="block">/* Nul term both fields for easy access. */</comment>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Check if we already have this slave into our table,
             * otherwise add it. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sentinelRedisInstanceLookupSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>slave</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>SRI_SLAVE</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* master_link_down_since_seconds:&lt;seconds&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator>
            <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_link_down_since_seconds"</literal></expr></argument>,<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">31</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* role:&lt;role&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"role:master"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>role</name> <operator>=</operator> <name>SRI_MASTER</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"role:slave"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>role</name> <operator>=</operator> <name>SRI_SLAVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* master_host:&lt;host&gt; */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_host:"</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
                    <call><name>strcasecmp</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">12</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* master_port:&lt;port&gt; */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_port:"</literal></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>slave_master_port</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>!=</operator> <name>slave_master_port</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>=</operator> <name>slave_master_port</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* master_link_status:&lt;status&gt; */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">19</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"master_link_status:"</literal></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>=</operator>
                    <ternary><condition><expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">19</literal></expr></argument>,<argument><expr><literal type="string">"up"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
                    <expr><name>SENTINEL_MASTER_LINK_STATUS_UP</name></expr> </then><else>:
                    <expr><name>SENTINEL_MASTER_LINK_STATUS_DOWN</name></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* slave_priority:&lt;priority&gt; */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"slave_priority:"</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_priority</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block">/* slave_repl_offset:&lt;offset&gt; */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">18</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="string">"slave_repl_offset:"</literal></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">18</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>lines</name></expr></argument>,<argument><expr><name>numlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ---------------------------- Acting half -----------------------------
     * Some things will not happen if sentinel.tilt is true, but some will
     * still be processed. */</comment>

    <comment type="block">/* Remember when the role changed. */</comment>
    <if_stmt><if>if <condition>(<expr><name>role</name> <operator>!=</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>=</operator> <name>role</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* Log the event with +role-change if the new role is coherent or
         * with -role-change if there is a mismatch with the current config. */</comment>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_VERBOSE</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>role</name><operator>)</operator></expr> ?</condition><then>
            <expr><literal type="string">"+role-change"</literal></expr> </then><else>: <expr><literal type="string">"-role-change"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%@ new reported role is %s"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name>role</name> <operator>==</operator> <name>SRI_MASTER</name></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>: <expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>: <expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* None of the following conditions are processed when in tilt mode, so
     * return asap. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Handle master -&gt; slave role switch. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Nothing to do, but masters claiming to be slaves are
         * considered to be unreachable by Sentinel, so eventually
         * a failover will be triggered. */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle slave -&gt; master role switch. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* If this is a promoted slave we can change state to the
         * failover state machine. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>==</operator>
                <name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Now that we are sure the slave was reconfigured as a master
             * set the master configuration epoch to the epoch we won the
             * election to perform this failover. This will force the other
             * Sentinels to update their config (assuming there is not
             * a newer one already available). */</comment>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_epoch</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+promoted-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>&amp;</operator>
                <name>SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sentinelSimFailureCrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-state-reconf-slaves"</literal></expr></argument>,
                <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelCallClientReconfScript</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>,<argument><expr><name>SENTINEL_LEADER</name></expr></argument>,
                <argument><expr><literal type="string">"start"</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelForceHelloUpdateForMaster</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* A slave turned into a master. We want to force our view and
             * reconfigure as slave. Wait some time after the change before
             * going forward, to receive new configs if any. */</comment>
            <decl_stmt><decl><type><name>mstime_t</name></type> <name>wait_time</name> <init>= <expr><name>SENTINEL_PUBLISH_PERIOD</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name><operator>)</operator> <operator>&amp;&amp;</operator>
                 <call><name>sentinelMasterLooksSane</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                 <call><name>sentinelRedisInstanceNoDownFor</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                 <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>&gt;</operator> <name>wait_time</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,
                        <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
                        <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+convert-to-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handle slaves replicating to a different master address. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <name>role</name> <operator>==</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>!=</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>||</operator>
         <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>wait_time</name> <init>= <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Make sure the master is sane before reconfiguring this instance
         * into a slave. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sentinelMasterLooksSane</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>sentinelRedisInstanceNoDownFor</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>slave_conf_change_time</name></name> <operator>&gt;</operator> <name>wait_time</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,
                    <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
                    <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+fix-slave-config"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Detect if the slave that is in the process of being reconfigured
     * changed state. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>role</name> <operator>==</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_RECONF_SENT</name><operator>|</operator><name>SRI_RECONF_INPROG</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* SRI_RECONF_SENT -&gt; SRI_RECONF_INPROG. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_SENT</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name> <operator>&amp;&amp;</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr></argument>,
                    <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name> <operator>==</operator> <name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_INPROG</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-inprog"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* SRI_RECONF_INPROG -&gt; SRI_RECONF_DONE */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_INPROG</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>==</operator> <name>SENTINEL_MASTER_LINK_STATUS_UP</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_RECONF_INPROG</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_DONE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-done"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelInfoReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STRING</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sentinelRefreshInstanceInfo</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Just discard the reply. We use this when we are not monitoring the return
 * value of the command but its effects directly. */</comment>
<function><type><name>void</name></type> <name>sentinelDiscardReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>privdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>link</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelPingReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_STATUS</name> <operator>||</operator>
        <name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ERROR</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Update the "instance available" field only if this is an
         * acceptable reply. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"PONG"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"LOADING"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"MASTERDOWN"</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Flag the pong as received. */</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Send a SCRIPT KILL command if the instance appears to be
             * down because of a busy script. */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"BUSY"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
                <operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SCRIPT_KILL_SENT</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
                        <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
                        <argument><expr><literal type="string">"%s KILL"</literal></expr></argument>,
                        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_OK</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_SCRIPT_KILL_SENT</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This is called when we get the reply about the PUBLISH command we send
 * to the master to advertise this sentinel. */</comment>
<function><type><name>void</name></type> <name>sentinelPublishReplyCallback</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>

    <comment type="block">/* Only update pub_time if we actually published our message. Otherwise
     * we'll retry again in 100 milliseconds. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDIS_REPLY_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Process an hello message received via Pub/Sub in master or slave instance,
 * or sent directly to this sentinel via the (fake) PUBLISH command of Sentinel.
 *
 * If the master name specified in the message is not known, the message is
 * discarded. */</comment>
<function><type><name>void</name></type> <name>sentinelProcessHelloMessage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hello</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hello_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Format is composed of 8 tokens:
     * 0=ip,1=port,2=runid,3=current_epoch,4=master_name,
     * 5=master_ip,6=master_port,7=master_config_epoch. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>numtokens</name></decl>, <decl><type ref="prev"/><name>port</name></decl>, <decl><type ref="prev"/><name>removed</name></decl>, <decl><type ref="prev"/><name>master_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>current_epoch</name></decl>, <decl><type ref="prev"/><name>master_config_epoch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>sdssplitlen</name><argument_list>(<argument><expr><name>hello</name></expr></argument>, <argument><expr><name>hello_len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numtokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>master</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>numtokens</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Obtain a reference to the master this hello message is about */</comment>
        <expr_stmt><expr><name>master</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>master</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Unknown master, skip the message. */</comment>

        <comment type="block">/* First, try to see if we already have this sentinel. */</comment>
        <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>master_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(
                        <argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>current_epoch</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>master_config_epoch</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>si</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* If not, remove all the sentinels that have the same runid
             * because there was an address change, and add the same Sentinel
             * with the new address back. */</comment>
            <expr_stmt><expr><name>removed</name> <operator>=</operator> <call><name>removeMatchingSentinelFromMaster</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>removed</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel-address-switch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,
                    <argument><expr><literal type="string">"%@ ip %s port %d for %s"</literal></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Check if there is another Sentinel with the same address this
                 * new one is reporting. What we do if this happens is to set its
                 * port to 0, to signal the address is invalid. We'll update it
                 * later if we get an HELLO message. */</comment>
                <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>other</name> <init>=
                    <expr><call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(
                        <argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel-invalid-addr"</literal></expr></argument>,<argument><expr><name>other</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>other</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* It means: invalid address. */</comment>
                    <expr_stmt><expr><call><name>sentinelUpdateSentinelAddressInAllMasters</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Add the new sentinel. */</comment>
            <expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>SRI_SENTINEL</name></expr></argument>,
                            <argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>port</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>,<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>si</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>removed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+sentinel"</literal></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <comment type="block">/* The runid is NULL after a new instance creation and
                 * for Sentinels we don't have a later chance to fill it,
                 * so do it now. */</comment>
                <expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>runid</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sentinelTryConnectionSharing</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>removed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelUpdateSentinelAddressInAllMasters</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Update local current_epoch if received current_epoch is greater.*/</comment>
        <if_stmt><if>if <condition>(<expr><name>current_epoch</name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name>current_epoch</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+new-epoch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Update master info if received configuration is newer. */</comment>
        <if_stmt><if>if <condition>(<expr><name>si</name> <operator>&amp;&amp;</operator> <name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>&lt;</operator> <name>master_config_epoch</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name> <operator>=</operator> <name>master_config_epoch</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>master_port</name> <operator>!=</operator> <name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>||</operator>
                <call><name>strcmp</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>old_addr</name></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+config-update-from"</literal></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+switch-master"</literal></expr></argument>,
                    <argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%s %s %d %s %d"</literal></expr></argument>,
                    <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                    <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
                    <argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>master_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>old_addr</name> <operator>=</operator> <call><name>dupSentinelAddr</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sentinelResetMasterAndChangeAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>master_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sentinelCallClientReconfScript</name><argument_list>(<argument><expr><name>master</name></expr></argument>,
                    <argument><expr><name>SENTINEL_OBSERVER</name></expr></argument>,<argument><expr><literal type="string">"start"</literal></expr></argument>,
                    <argument><expr><name>old_addr</name></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>releaseSentinelAddr</name><argument_list>(<argument><expr><name>old_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Update the state of the Sentinel. */</comment>
        <if_stmt><if>if <condition>(<expr><name>si</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>last_hello_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>sdsfreesplitres</name><argument_list>(<argument><expr><name>token</name></expr></argument>,<argument><expr><name>numtokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* This is our Pub/Sub callback for the Hello channel. It's useful in order
 * to discover other sentinels attached at the same master. */</comment>
<function><type><name>void</name></type> <name>sentinelReceiveHelloMessages</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>

    <comment type="block">/* Update the last activity in the pubsub channel. Note that since we
     * receive our messages as well this timestamp can be used to detect
     * if the link is probably disconnected even if it seems otherwise. */</comment>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc_last_activity</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Sanity check in the reply we expect, so that the code that follows
     * can avoid to check for details. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>REDIS_REPLY_ARRAY</name> <operator>||</operator>
        <name><name>r</name><operator>-&gt;</operator><name>elements</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator>
        <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
        <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
        <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>REDIS_REPLY_STRING</name> <operator>||</operator>
        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* We are not interested in meeting ourselves */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>sentinelProcessHelloMessage</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Send an "Hello" message via Pub/Sub to the specified 'ri' Redis
 * instance in order to broadcast the current configuration for this
 * master, and to advertise the existence of this Sentinel at the same time.
 *
 * The message has the following format:
 *
 * sentinel_ip,sentinel_port,sentinel_runid,current_epoch,
 * master_name,master_ip,master_port,master_config_epoch.
 *
 * Returns C_OK if the PUBLISH was queued correctly, otherwise
 * C_ERR is returned. */</comment>
<function><type><name>int</name></type> <name>sentinelSendHello</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>payload</name><index>[<expr><name>NET_IP_STR_LEN</name><operator>+</operator><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>announce_ip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>announce_port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then> <expr><name>ri</name></expr> </then><else>: <expr><name><name>ri</name><operator>-&gt;</operator><name>master</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>master_addr</name> <init>= <expr><call><name>sentinelGetCurrentMasterAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Use the specified announce address if specified, otherwise try to
     * obtain our own IP address. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>announce_ip</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>announce_ip</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>anetSockName</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>fd</name></name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>announce_ip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>announce_port</name> <operator>=</operator> <ternary><condition><expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr> ?</condition><then>
                    <expr><name><name>sentinel</name><operator>.</operator><name>announce_port</name></name></expr> </then><else>: <expr><name><name>server</name><operator>.</operator><name>port</name></name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block">/* Format and send the Hello message. */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>payload</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></sizeof></expr></argument>,
        <argument><expr><literal type="string">"%s,%d,%s,%llu,"</literal> <comment type="block">/* Info about this sentinel. */</comment>
        <literal type="string">"%s,%s,%d,%llu"</literal></expr></argument>, <comment type="block">/* Info about current master. */</comment>
        <argument><expr><name>announce_ip</name></expr></argument>, <argument><expr><name>announce_port</name></expr></argument>, <argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>,
        <comment type="block">/* --- */</comment>
        <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name><name>master_addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>master_addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>config_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelPublishReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"PUBLISH"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>SENTINEL_HELLO_CHANNEL</name></expr></argument>,<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reset last_pub_time in all the instances in the specified dictionary
 * in order to force the delivery of an Hello update ASAP. */</comment>
<function><type><name>void</name></type> <name>sentinelForceHelloUpdateDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetSafeIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>&gt;=</operator> <operator>(</operator><name>SENTINEL_PUBLISH_PERIOD</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>-=</operator> <operator>(</operator><name>SENTINEL_PUBLISH_PERIOD</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function forces the delivery of an "Hello" message (see
 * sentinelSendHello() top comment for further information) to all the Redis
 * and Sentinel instances related to the specified 'master'.
 *
 * It is technically not needed since we send an update to every instance
 * with a period of SENTINEL_PUBLISH_PERIOD milliseconds, however when a
 * Sentinel upgrades a configuration it is a good idea to deliever an update
 * to the other Sentinels ASAP. */</comment>
<function><type><name>int</name></type> <name>sentinelForceHelloUpdateForMaster</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>C_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>&gt;=</operator> <operator>(</operator><name>SENTINEL_PUBLISH_PERIOD</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>last_pub_time</name></name> <operator>-=</operator> <operator>(</operator><name>SENTINEL_PUBLISH_PERIOD</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sentinelForceHelloUpdateDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelForceHelloUpdateDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Send a PING to the specified instance and refresh the act_ping_time
 * if it is zero (that is, if we received a pong for the previous ping).
 *
 * On error zero is returned, and we can't consider the PING command
 * queued in the connection. */</comment>
<function><type><name>int</name></type> <name>sentinelSendPing</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelPingReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"PING"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* We update the active ping time only if we received the pong for
         * the previous ping, otherwise we are technically waiting since the
         * first ping that did not receive a reply. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Send periodic PING, INFO, and PUBLISH to the Hello channel to
 * the specified master or slave instance. */</comment>
<function><type><name>void</name></type> <name>sentinelSendPeriodicCommands</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>info_period</name></decl>, <decl><type ref="prev"/><name>ping_period</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <comment type="block">/* Return ASAP if we have already a PING or INFO already pending, or
     * in the case the instance is not properly connected. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* For INFO, PING, PUBLISH that are not critical commands to send we
     * also have a limit of SENTINEL_MAX_PENDING_COMMANDS. We don't
     * want to use a lot of memory just because a link is not working
     * properly (note that anyway there is a redundant protection about this,
     * that is, the link will be disconnected and reconnected if a long
     * timeout condition is detected. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name> <operator>&gt;=</operator>
        <name>SENTINEL_MAX_PENDING_COMMANDS</name> <operator>*</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* If this is a slave of a master in O_DOWN condition we start sending
     * it INFO every second, instead of the usual SENTINEL_INFO_PERIOD
     * period. In this state we want to closely monitor slaves in case they
     * are turned into masters by another Sentinel, or by the sysadmin.
     *
     * Similarly we monitor the INFO output more often if the slave reports
     * to be disconnected from the master, so that we can have a fresh
     * disconnection time figure. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_O_DOWN</name><operator>|</operator><name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>info_period</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>info_period</name> <operator>=</operator> <name>SENTINEL_INFO_PERIOD</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* We ping instances every time the last received pong is older than
     * the configured 'down-after-milliseconds' time, but every second
     * anyway if 'down-after-milliseconds' is greater than 1 second. */</comment>
    <expr_stmt><expr><name>ping_period</name> <operator>=</operator> <name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ping_period</name> <operator>&gt;</operator> <name>SENTINEL_PING_PERIOD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ping_period</name> <operator>=</operator> <name>SENTINEL_PING_PERIOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Send INFO to masters and slaves, not sentinels. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name><operator>)</operator> <operator>&gt;</operator> <name>info_period</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
            <argument><expr><name>sentinelInfoReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
            <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"INFO"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send PING to all the three kinds of instances. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>ping_period</name> <operator>&amp;&amp;</operator>
               <operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_ping_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>ping_period</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelSendPing</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* PUBLISH hello messages to all the three kinds of instances. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_pub_time</name></name><operator>)</operator> <operator>&gt;</operator> <name>SENTINEL_PUBLISH_PERIOD</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelSendHello</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* =========================== SENTINEL command ============================= */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sentinelFailoverStateStr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_NONE</name></expr>:</case> <return>return <expr><literal type="string">"none"</literal></expr>;</return>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_START</name></expr>:</case> <return>return <expr><literal type="string">"wait_start"</literal></expr>;</return>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></expr>:</case> <return>return <expr><literal type="string">"select_slave"</literal></expr>;</return>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></expr>:</case> <return>return <expr><literal type="string">"send_slaveof_noone"</literal></expr>;</return>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr>:</case> <return>return <expr><literal type="string">"wait_promotion"</literal></expr>;</return>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>:</case> <return>return <expr><literal type="string">"reconf_slaves"</literal></expr>;</return>
    <case>case <expr><name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></expr>:</case> <return>return <expr><literal type="string">"update_config"</literal></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Redis instance to Redis protocol representation. */</comment>
<function><type><name>void</name></type> <name>addReplySentinelRedisInstance</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mbl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>mbl</name> <operator>=</operator> <call><name>addDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"ip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"runid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr> ?</condition><then> <expr><name><name>ri</name><operator>-&gt;</operator><name>runid</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"s_down,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"o_down,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"master,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"slave,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"sentinel,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"disconnected,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"master_down,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"failover_in_progress,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_PROMOTED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"promoted,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_SENT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"reconf_sent,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_INPROG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"reconf_inprog,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_DONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="string">"reconf_done,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>flags</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* remove last "," */</comment>
    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"link-pending-commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"link-refcount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"failover-state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sentinelFailoverStateStr</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-ping-sent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-ok-ping-reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-ping-reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"s-down-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"o-down-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>ri</name><operator>-&gt;</operator><name>o_down_since_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"down-after-milliseconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Masters and Slaves */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"info-refresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"role-reported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>==</operator> <name>SRI_MASTER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"master"</literal></expr> </then><else>:
                                                                   <expr><literal type="string">"slave"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"role-reported-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only masters */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"config-epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>config_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"num-slaves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"num-other-sentinels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"quorum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"failover-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"parallel-syncs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"notification-script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"client-reconfig-script"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only slaves */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SLAVE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-link-down-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>master_link_down_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-link-status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>slave_master_link_status</name></name> <operator>==</operator> <name>SENTINEL_MASTER_LINK_STATUS_UP</name><operator>)</operator></expr> ?</condition><then>
            <expr><literal type="string">"ok"</literal></expr> </then><else>: <expr><literal type="string">"err"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr> ?</condition><then> <expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_host</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"master-port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_master_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"slave-priority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"slave-repl-offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slave_repl_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only sentinels */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_SENTINEL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"last-hello-message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_hello_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"voted-leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr> ?</condition><then> <expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"voted-leader-epoch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setDeferredMultiBulkLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>mbl</name></expr></argument>,<argument><expr><name>fields</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Output a number of instances contained inside a dictionary as
 * Redis protocol. */</comment>
<function><type><name>void</name></type> <name>addReplyDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><call><name>dictSize</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (PORT_LONG) */</comment>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplySentinelRedisInstance</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Lookup the named master into sentinel.masters.
 * If the master is not found reply to the client with an error and returns
 * NULL. */</comment>
<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelGetMasterByNameOrReplyError</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
                        <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>dictFetchValue</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,<argument><expr><name><name>name</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"No such master with that name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ri</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ISQR_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ISQR_NOQUORUM</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ISQR_NOAUTH</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>sentinelIsQuorumReachable</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>usableptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>usable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Number of usable Sentinels. Init to 1 to count myself. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>SENTINEL_ISQR_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>voters</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Known Sentinels + myself. */</comment> <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>

    <name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_O_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>usable</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>usable</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>|=</operator> <name>SENTINEL_ISQR_NOQUORUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>usable</name> <operator>&lt;</operator> <name>voters</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>|=</operator> <name>SENTINEL_ISQR_NOAUTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>usableptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>usableptr</name> <operator>=</operator> <name>usable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"masters"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL MASTERS */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>addReplyDictOfRedisInstances</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL MASTER &lt;name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
            <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>addReplySentinelRedisInstance</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"slaves"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
               <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"replicas"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* SENTINEL REPLICAS &lt;master-name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>addReplyDictOfRedisInstances</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"sentinels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL SENTINELS &lt;master-name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>addReplyDictOfRedisInstances</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"is-master-down-by-addr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL IS-MASTER-DOWN-BY-ADDR &lt;ip&gt; &lt;port&gt; &lt;current-epoch&gt; &lt;runid&gt;
         *
         * Arguments:
         *
         * ip and port are the ip and port of the master we want to be
         * checked by Sentinel. Note that the command will not check by
         * name but just by master, in theory different Sentinels may monitor
         * differnet masters with the same name.
         *
         * current-epoch is needed in order to understand if we are allowed
         * to vote for a failover leader or not. Each Sentinel can vote just
         * one time per epoch.
         *
         * runid is "*" if we are not seeking for a vote from the Sentinel
         * in order to elect the failover leader. Otherwise it is set to the
         * runid we want the Sentinel to vote if it did not already voted.
         */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>req_epoch</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>leader_epoch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>leader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>port</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>isdown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name> <operator>||</operator>
            <call><name>getLongLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>req_epoch</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
                                                              <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>getSentinelRedisInstanceByAddrAndRunID</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,
            <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                 <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>

        <comment type="block">/* It exists? Is actually a master? Is subjectively down? It's down.
         * Note: if we are in tilt mode we always reply with "0". */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>&amp;&amp;</operator> <name>ri</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
                                    <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>isdown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Vote for the master (or fetch the previous vote) if the request
         * includes a runid, otherwise the sender is not seeking for a vote. */</comment>
        <if_stmt><if>if <condition>(<expr><name>ri</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>leader</name> <operator>=</operator> <call><name>sentinelVoteLeader</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>req_epoch</name></expr></argument>,
                                            <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Reply with a three-elements multi-bulk reply:
         * down state, leader, vote epoch. */</comment>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isdown</name></expr> ?</condition><then> <expr><name><name>shared</name><operator>.</operator><name>cone</name></name></expr> </then><else>: <expr><name><name>shared</name><operator>.</operator><name>czero</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>leader</name></expr> ?</condition><then> <expr><name>leader</name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>leader</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL RESET &lt;pattern&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sentinelResetMastersByPattern</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>SENTINEL_GENERATE_EVENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"get-master-addr-by-name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL GET-MASTER-ADDR-BY-NAME &lt;master-name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nullmultibulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>sentinelGetCurrentMasterAddress</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyBulkLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"failover"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL FAILOVER &lt;master-name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-INPROG Failover already in progress\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sentinelSelectSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"-NOGOODSLAVE No suitable replica to promote\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Executing user requested FAILOVER of '%s'"</literal></expr></argument>,
            <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelStartFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_FORCE_FAILOVER</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"pending-scripts"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL PENDING-SCRIPTS */</comment>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelPendingScriptsCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL MONITOR &lt;name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>quorum</name></decl>, <decl><type ref="prev"/><name>port</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><name>NET_IP_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>quorum</name></expr></argument>,<argument><expr><literal type="string">"Invalid quorum"</literal></expr></argument>)</argument_list></call>
            <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,<argument><expr><literal type="string">"Invalid port"</literal></expr></argument>)</argument_list></call>
            <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>quorum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Quorum must be 1 or greater."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Make sure the IP field is actually a valid IP before passing it
         * to createSentinelRedisInstance(), otherwise we may trigger a
         * DNS lookup at runtime. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>anetResolveIP</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>ip</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANET_ERR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid IP address specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Parameters are valid. Try to create the master instance. */</comment>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>createSentinelRedisInstance</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>SRI_MASTER</name></expr></argument>,
                <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>quorum</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
        <if_stmt><if>if <condition>(<expr><name>ri</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <switch>switch<condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>EBUSY</name></expr>:</case>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Duplicated master name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>EINVAL</name></expr>:</case>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid port number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unspecified error adding the instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+monitor"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ quorum %d"</literal></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"flushconfig"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL REMOVE &lt;name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
            <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-monitor"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"ckquorum"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL CKQUORUM &lt;name&gt; */</comment>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>usable</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
            <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>sentinelIsQuorumReachable</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>usable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SENTINEL_ISQR_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"+OK %i usable Sentinels. Quorum and failover authorization "</literal>
                <literal type="string">"can be reached\r\n"</literal></expr></argument>,<argument><expr><name>usable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name></type> <name>e</name> <init>= <expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"-NOQUORUM %i usable Sentinels. "</literal></expr></argument>,<argument><expr><name>usable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>SENTINEL_ISQR_NOQUORUM</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="string">"Not enough available Sentinels to reach the"</literal>
                             <literal type="string">" specified quorum for this master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>SENTINEL_ISQR_NOAUTH</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>SENTINEL_ISQR_NOQUORUM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="string">". "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Not enough available Sentinels to reach the"</literal>
                              <literal type="string">" majority and authorize a failover"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplySds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelSetCommand</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"info-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL INFO-CACHE &lt;name&gt; */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>numargserr</name>;</goto></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Create an ad-hoc dictionary type so that we can iterate
         * a dictionary composed of just the master groups the user
         * requested. */</comment>
        <decl_stmt><decl><type><name>dictType</name></type> <name>copy_keeper</name> <init>= <expr><name>instancesDictType</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>copy_keeper</name><operator>.</operator><name>valDestructor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>masters_local</name> <init>= <expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>masters_local</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_keeper</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByName</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ri</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* ignore non-existing names */</comment>
                <expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Reply format:
         *   1.) master name
         *   2.) 1.) info from master
         *       2.) info from replica
         *       ...
         *   3.) other master name
         *   ...
         */</comment>
        <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>dictIterator</name>  <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>dictSize</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* +1 for self */</comment>
            <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>now</name> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>info_refresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>sdi</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>sde</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>sdi</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>sde</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>sdi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>sde</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>now</name> <operator>-</operator> <name><name>sri</name><operator>-&gt;</operator><name>info_refresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>sri</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>sri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>sri</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>nullbulk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>sdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>masters_local</name> <operator>!=</operator> <name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>masters_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"simulate-failure"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* SENTINEL SIMULATE-FAILURE &lt;flag&gt; &lt;flag&gt; ... &lt;flag&gt; */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>=</operator> <name>SENTINEL_SIMFAILURE_NONE</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"crash-after-election"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>|=</operator>
                    <name>SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Failure simulation: this Sentinel "</literal>
                    <literal type="string">"will crash after being successfully elected as failover "</literal>
                    <literal type="string">"leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"crash-after-promotion"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>|=</operator>
                    <name>SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"Failure simulation: this Sentinel "</literal>
                    <literal type="string">"will crash after promoting the selected replica to master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"crash-after-election"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"crash-after-promotion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown failure simulation specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown sentinel subcommand '%s'"</literal></expr></argument>,
                               <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>

<label><name>numargserr</name>:</label>
    <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Wrong number of arguments for 'sentinel %s'"</literal></expr></argument>,
                          <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info_section_from_redis</name><parameter_list>(<parameter><type><name>section_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (defsections || allsections || !strcasecmp(section,section_name)) { \
        sds redissection; \
        if (sections++) info = sdscat(info,"\r\n"); \
        redissection = genRedisInfoString(section_name); \
        info = sdscatlen(info,redissection,sdslen(redissection)); \
        sdsfree(redissection); \
    } \
} while(0)</cpp:value></cpp:define>

<comment type="block">/* SENTINEL INFO [section] */</comment>
<function><type><name>void</name></type> <name>sentinelInfoCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>syntaxerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>defsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>allsections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>section</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>allsections</name> <operator>=</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>defsections</name> <operator>=</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>defsections</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>info</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"clients"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>info_section_from_redis</name><argument_list>(<argument><expr><literal type="string">"stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>defsections</name> <operator>||</operator> <name>allsections</name> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>master_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>sections</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>info</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>info</argument>,
            <argument><literal type="string">"# Sentinel\r\n"</literal>
            <literal type="string">"sentinel_masters:%Iu\r\n"</literal>                                          WIN_PORT_FIX <comment type="block">/* %lu -&gt; %Iu */</comment>
            <literal type="string">"sentinel_tilt:%d\r\n"</literal>
            <literal type="string">"sentinel_running_scripts:%d\r\n"</literal>
            <literal type="string">"sentinel_scripts_queue_length:%Id\r\n"</literal>                             WIN_PORT_FIX <comment type="block">/* %ld -&gt; %Id */</comment>
            <literal type="string">"sentinel_simulate_failure_flags:%Iu\r\n"</literal></argument>,                          <argument>WIN_PORT_FIX <comment type="block">/* %lu -&gt; %Iu */</comment>
            dictSize(sentinel.masters)</argument>,
            <argument>sentinel.tilt</argument>,
            <argument>sentinel.running_scripts</argument>,
            <argument>listLength(sentinel.scripts_queue)</argument>,
            <argument>sentinel.simfailure_flags</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><literal type="string">"ok"</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"odown"</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"sdown"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <macro><name>sdscatprintf</name><argument_list>(<argument>info</argument>,
                <argument><literal type="string">"master%d:name=%s,status=%s,address=%s:%d,"</literal>
                <literal type="string">"slaves=%Iu,sentinels=%Iu\r\n"</literal></argument>,                                 <argument>WIN_PORT_FIX <comment type="block">/* %lu -&gt; %Iu */</comment>
                master_id++</argument>, <argument>ri-&gt;name</argument>, <argument>status</argument>,
                <argument>ri-&gt;addr-&gt;ip</argument>, <argument>ri-&gt;addr-&gt;port</argument>,
                <argument>dictSize(ri-&gt;slaves)</argument>,
                <argument>dictSize(ri-&gt;sentinels)+<literal type="number">1</literal></argument>)</argument_list></macro></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Implements Sentinel version of the ROLE command. The output is
 * "sentinel" and the list of currently monitored master names. */</comment>
<function><type><name>void</name></type> <name>sentinelRoleCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkCBuffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"sentinel"</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyMultiBulkLen</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addReplyBulkCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SENTINEL SET &lt;mastername&gt; [&lt;option&gt; &lt;value&gt; ...] */</comment>
<function><type><name>void</name></type> <name>sentinelSetCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>changes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>badarg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Bad argument position for error reporting. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ri</name> <operator>=</operator> <call><name>sentinelGetMasterByNameOrReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
        <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Process option - value pairs. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>moreargs</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>argc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ll</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>old_j</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Used to know what to log as an event. */</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"down-after-milliseconds"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* down-after-millisecodns &lt;milliseconds&gt; */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <goto>goto <name>badfmt</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelPropagateDownAfterPeriod</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"failover-timeout"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* failover-timeout &lt;milliseconds&gt; */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <goto>goto <name>badfmt</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"parallel-syncs"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* parallel-syncs &lt;milliseconds&gt; */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <goto>goto <name>badfmt</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"notification-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* notification-script &lt;path&gt; */</comment>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                    <argument><expr><literal type="string">"Reconfiguration of scripts path is denied for "</literal>
                    <literal type="string">"security reasons. Check the deny-scripts-reconfig "</literal>
                    <literal type="string">"configuration directive in your Sentinel configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>access</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                    <argument><expr><literal type="string">"Notification script seems non existing or non executable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>changes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>notification_script</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"client-reconfig-script"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* client-reconfig-script &lt;path&gt; */</comment>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>deny_scripts_reconfig</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                    <argument><expr><literal type="string">"Reconfiguration of scripts path is denied for "</literal>
                    <literal type="string">"security reasons. Check the deny-scripts-reconfig "</literal>
                    <literal type="string">"configuration directive in your Sentinel configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>access</name><argument_list>(<argument><expr><name>value</name></expr></argument>,<argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                    <argument><expr><literal type="string">"Client reconfiguration script seems non existing or "</literal>
                    <literal type="string">"non executable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>changes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>client_reconfig_script</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"auth-pass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* auth-pass &lt;password&gt; */</comment>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>auth_pass</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"quorum"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* quorum &lt;count&gt; */</comment>
            <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>getLongLongFromObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>C_ERR</name> <operator>||</operator> <name>ll</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>badarg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <goto>goto <name>badfmt</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>quorum</name></name> <operator>=</operator> <name>ll</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>,<argument><expr><literal type="string">"rename-command"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>moreargs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="block">/* rename-command &lt;oldname&gt; &lt;newname&gt; */</comment>
            <decl_stmt><decl><type><name>sds</name></type> <name>oldname</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sds</name></type> <name>newname</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>badarg</name> <operator>=</operator> <ternary><condition><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr>;</expr_stmt>
                <goto>goto <name>badfmt</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Remove any older renaming for this command. */</comment>
            <expr_stmt><expr><call><name>dictDelete</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If the target name is the same as the source name there
             * is no need to add an entry mapping to itself. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dictSdsKeyCaseCompare</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>,<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>oldname</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>newname</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dictAdd</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>renamed_commands</name></name></expr></argument>,<argument><expr><name>oldname</name></expr></argument>,<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>changes</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Unknown option or number of arguments for "</literal>
                                  <literal type="string">"SENTINEL SET '%s'"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>changes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Log the event. */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>numargs</name> <init>= <expr><name>j</name><operator>-</operator><name>old_j</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <switch>switch<condition>(<expr><name>numargs</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+set"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ %s %s"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
                                                          <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+set"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ %s %s %s"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
                                                             <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,
                                                             <argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+set"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@ %s"</literal></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>old_j</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>changes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>addReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>shared</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

<label><name>badfmt</name>:</label> <comment type="block">/* Bad format errors */</comment>
    <if_stmt><if>if <condition>(<expr><name>changes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>addReplyErrorFormat</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="string">"Invalid argument '%s' for SENTINEL SET '%s'"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>badarg</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Our fake PUBLISH command: it is actually useful only to receive hello messages
 * from the other sentinel instances, and publishing to a channel other than
 * SENTINEL_HELLO_CHANNEL is forbidden.
 *
 * Because we have a Sentinel PUBLISH, the code to send hello messages is the same
 * for all the three kind of instances: masters, slaves, sentinels. */</comment>
<function><type><name>void</name></type> <name>sentinelPublishCommand</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><name>SENTINEL_HELLO_CHANNEL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>addReplyError</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"Only HELLO messages are accepted by Sentinel instances."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sentinelProcessHelloMessage</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sdslen</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (int) */</comment>
    <name>addReplyLongLong</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<comment type="block">/* ===================== SENTINEL availability checks ======================= */</comment>

<comment type="block">/* Is this instance down from our point of view? */</comment>
<function><type><name>void</name></type> <name>sentinelCheckSubjectivelyDown</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Check if we are in need for a reconnection of one of the
     * links, because we are detecting low activity.
     *
     * 1) Check if the command link seems connected, was connected not less
     *    than SENTINEL_MIN_LINK_RECONNECT_PERIOD, but still we have a
     *    pending ping for more than half the timeout. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc_conn_time</name></name><operator>)</operator> <operator>&gt;</operator>
        <name>SENTINEL_MIN_LINK_RECONNECT_PERIOD</name> <operator>&amp;&amp;</operator>
        <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <comment type="block">/* There is a pending ping... */</comment>
        <comment type="block">/* The pending ping is delayed, and we did not receive
         * error replies as well. */</comment>
        <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>act_ping_time</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_pong_time</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 2) Check if the pubsub link seems connected, was connected not less
     *    than SENTINEL_MIN_LINK_RECONNECT_PERIOD, but still we have no
     *    activity in the Pub/Sub channel for more than
     *    SENTINEL_PUBLISH_PERIOD * 3.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc_conn_time</name></name><operator>)</operator> <operator>&gt;</operator>
         <name>SENTINEL_MIN_LINK_RECONNECT_PERIOD</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc_last_activity</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>SENTINEL_PUBLISH_PERIOD</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>instanceLinkCloseConnection</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name></name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Update the SDOWN flag. We believe the instance is SDOWN if:
     *
     * 1) It is not replying.
     * 2) We believe it is a master, it reports to be a slave for enough time
     *    to meet the down_after_period, plus enough time to get two times
     *    INFO report from the instance. */</comment>
    <if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>||</operator>
        <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name> <operator>&amp;&amp;</operator>
         <name><name>ri</name><operator>-&gt;</operator><name>role_reported</name></name> <operator>==</operator> <name>SRI_SLAVE</name> <operator>&amp;&amp;</operator>
         <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>role_reported_time</name></name> <operator>&gt;</operator>
          <operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>down_after_period</name></name><operator>+</operator><name>SENTINEL_INFO_PERIOD</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Is subjectively down */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+sdown"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>s_down_since_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_S_DOWN</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Is subjectively up */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-sdown"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_SCRIPT_KILL_SENT</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Is this instance down according to the configured quorum?
 *
 * Note that ODOWN is a weak quorum, it only means that enough Sentinels
 * reported in a given time range that the instance was not reachable.
 * However messages can be delayed so there are no strong guarantees about
 * N instances agreeing at the same time about the down state. */</comment>
<function><type><name>void</name></type> <name>sentinelCheckObjectivelyDown</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quorum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>odown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Is down for enough sentinels? */</comment>
        <expr_stmt><expr><name>quorum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* the current sentinel. */</comment>
        <comment type="block">/* Count all the other sentinels. */</comment>
        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quorum</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>quorum</name> <operator>&gt;=</operator> <name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>odown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set the flag accordingly to the outcome. */</comment>
    <if_stmt><if>if <condition>(<expr><name>odown</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+odown"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@ #quorum %d/%d"</literal></expr></argument>,
                <argument><expr><name>quorum</name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>quorum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_O_DOWN</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>o_down_since_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-odown"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_O_DOWN</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Receive the SENTINEL is-master-down-by-addr reply, see the
 * sentinelAskMasterStateToOtherSentinels() function for more information. */</comment>
<function><type><name>void</name></type> <name>sentinelReceiveIsMasterDownReply</name><parameter_list>(<parameter><decl><type><name>redisAsyncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><name>privdata</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>instanceLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>redisReply</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply</name> <operator>||</operator> <operator>!</operator><name>link</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>

    <comment type="block">/* Ignore every error or unexpected reply.
     * Note that if the command returns an error for any reason we'll
     * end clearing the SRI_MASTER_DOWN flag for timeout anyway. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REDIS_REPLY_ARRAY</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>elements</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
        <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name> <operator>&amp;&amp;</operator>
        <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_STRING</name> <operator>&amp;&amp;</operator>
        <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>REDIS_REPLY_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_MASTER_DOWN</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_MASTER_DOWN</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* If the runid in the reply is not "*" the Sentinel actually
             * replied with a vote. */</comment>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>PORT_LONGLONG</name><operator>)</operator><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                    <argument><expr><literal type="string">"%s voted for %s %llu"</literal></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                    <argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>integer</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* If we think the master is down, we start sending
 * SENTINEL IS-MASTER-DOWN-BY-ADDR requests to other sentinels
 * in order to get the replies that allow to reach the quorum
 * needed to mark the master in ODOWN state and trigger a failover. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SENTINEL_ASK_FORCED</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>sentinelAskMasterStateToOtherSentinels</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>port</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

        <comment type="block">/* If the master state from other sentinel is too old, we clear it. */</comment>
        <if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name>SENTINEL_ASK_PERIOD</name><operator>*</operator><literal type="number">5</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_MASTER_DOWN</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Only ask if master is down to other sentinels if:
         *
         * 1) We believe it is down, or there is a failover in progress.
         * 2) Sentinel is connected.
         * 3) We did not receive the info within SENTINEL_ASK_PERIOD ms. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SENTINEL_ASK_FORCED</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>last_master_down_reply_time</name></name> <operator>&lt;</operator> <name>SENTINEL_ASK_PERIOD</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Ask */</comment>
        <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>port</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
                    <argument><expr><name>sentinelReceiveIsMasterDownReply</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>,
                    <argument><expr><literal type="string">"%s is-master-down-by-addr %s %s %llu %s"</literal></expr></argument>,
                    <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SENTINEL"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
                    <argument><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>&gt;</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name><operator>)</operator></expr> ?</condition><then>
                    <expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* =============================== FAILOVER ================================= */</comment>

<comment type="block">/* Crash because of user request via SENTINEL simulate-failure command. */</comment>
<function><type><name>void</name></type> <name>sentinelSimFailureCrash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
        <argument><expr><literal type="string">"Sentinel CRASH because of SENTINEL simulate-failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Vote for the sentinel with 'req_runid' or return the old vote if already
 * voted for the specified 'req_epoch' or one greater.
 *
 * If a vote is not available returns NULL, otherwise return the Sentinel
 * runid and populate the leader_epoch with the epoch of the vote. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelVoteLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>req_epoch</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>req_runid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>leader_epoch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>req_epoch</name> <operator>&gt;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>=</operator> <name>req_epoch</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+new-epoch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>&lt;</operator> <name>req_epoch</name> <operator>&amp;&amp;</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name> <operator>&lt;=</operator> <name>req_epoch</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><name>req_runid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelFlushConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+vote-for-leader"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%s %llu"</literal></expr></argument>,
            <argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* If we did not voted for ourselves, set the master failover start
         * time to now, in order to force a delay before we can start a
         * failover for the same master. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call><operator>+</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name>SENTINEL_MAX_DESYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>leader_epoch</name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>leader_epoch</name></name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>sentinelLeader</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_ULONG</name></type> <name>votes</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Helper function for sentinelGetLeader, increment the counter
 * relative to the specified runid. */</comment>
<function><type><name>int</name></type> <name>sentinelLeaderIncr</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>counters</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>runid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>existing</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>oldval</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>de</name> <operator>=</operator> <call><name>dictAddRaw</name><argument_list>(<argument><expr><name>counters</name></expr></argument>,<argument><expr><name>runid</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>existing</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>oldval</name> <operator>=</operator> <call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>existing</name></expr></argument>,<argument><expr><name>oldval</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>oldval</name><operator>+</operator><literal type="number">1</literal></expr>;</return>                                                   <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name>de</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dictSetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Scan all the Sentinels attached to this master to check if there
 * is a leader for the specified epoch.
 *
 * To be a leader for a given epoch, we should have the majority of
 * the Sentinels we know (ever seen since the last SENTINEL RESET) that
 * reported the same instance as leader for the same epoch. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>sentinelGetLeader</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>epoch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dict</name> <modifier>*</modifier></type><name>counters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>voters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>voters_quorum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>myvote</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>winner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>leader_epoch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>max_votes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_O_DOWN</name><operator>|</operator><name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>counters</name> <operator>=</operator> <call><name>dictCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leaderVotesDictType</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>voters</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* All the other sentinels and me.*/</comment>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (unsigned int) */</comment>

    <comment type="block">/* Count other sentinels votes */</comment>
    <name>di</name> <init>= <expr><call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ri</name><operator>-&gt;</operator><name>leader_epoch</name></name> <operator>==</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sentinelLeaderIncr</name><argument_list>(<argument><expr><name>counters</name></expr></argument>,<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>leader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check what's the winner. For the winner to win, it needs two conditions:
     * 1) Absolute majority between voters (50% + 1).
     * 2) And anyway at least master-&gt;quorum votes. */</comment>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>votes</name> <init>= <expr><call><name>dictGetUnsignedIntegerVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>votes</name> <operator>&gt;</operator> <name>max_votes</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>max_votes</name> <operator>=</operator> <name>votes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>winner</name> <operator>=</operator> <call><name>dictGetKey</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Count this Sentinel vote:
     * if this Sentinel did not voted yet, either vote for the most
     * common voted sentinel, or for itself if no vote exists at all. */</comment>
    <if_stmt><if>if <condition>(<expr><name>winner</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>myvote</name> <operator>=</operator> <call><name>sentinelVoteLeader</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>epoch</name></expr></argument>,<argument><expr><name>winner</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>myvote</name> <operator>=</operator> <call><name>sentinelVoteLeader</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name>epoch</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>leader_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>myvote</name> <operator>&amp;&amp;</operator> <name>leader_epoch</name> <operator>==</operator> <name>epoch</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>votes</name> <init>= <expr><call><name>sentinelLeaderIncr</name><argument_list>(<argument><expr><name>counters</name></expr></argument>,<argument><expr><name>myvote</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>votes</name> <operator>&gt;</operator> <name>max_votes</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>max_votes</name> <operator>=</operator> <name>votes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>winner</name> <operator>=</operator> <name>myvote</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>voters_quorum</name> <operator>=</operator> <name>voters</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>winner</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>max_votes</name> <operator>&lt;</operator> <name>voters_quorum</name> <operator>||</operator> <name>max_votes</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>quorum</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>winner</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>winner</name> <operator>=</operator> <ternary><condition><expr><name>winner</name></expr> ?</condition><then> <expr><call><name>sdsnew</name><argument_list>(<argument><expr><name>winner</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>myvote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictRelease</name><argument_list>(<argument><expr><name>counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>winner</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Send SLAVEOF to the specified instance, always followed by a
 * CONFIG REWRITE command in order to store the new configuration on disk
 * when possible (that is, if the Redis instance is recent enough to support
 * config rewriting, and if the server was started with a configuration file).
 *
 * If Host is NULL the function sends "SLAVEOF NO ONE".
 *
 * The command returns C_OK if the SLAVEOF command was accepted for
 * (later) delivery otherwise C_ERR. The command replies are just
 * discarded. */</comment>
<function><type><name>int</name></type> <name>sentinelSendSlaveOf</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ll2string</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If host is NULL we send SLAVEOF NO ONE that will turn the instance
     * into a master. */</comment>
    <if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>host</name> <operator>=</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>,<argument><expr><literal type="string">"ONE"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* In order to send SLAVEOF in a safe way, we send a transaction performing
     * the following tasks:
     * 1) Reconfigure the instance according to the specified host/port params.
     * 2) Rewrite the configuration.
     * 3) Disconnect all clients (but this one sending the commnad) in order
     *    to trigger the ask-master-on-reconnection protocol for connected
     *    clients.
     *
     * Note that we don't check the replies returned by commands, since we
     * will observe instead the effects in the next INFO output. */</comment>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"MULTI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"SLAVEOF"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>host</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s REWRITE"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"CONFIG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* CLIENT KILL TYPE &lt;type&gt; is only supported starting from Redis 2.8.12,
     * however sending it to an instance not understanding this command is not
     * an issue because CLIENT is variadic command, so Redis will not
     * recognized as a syntax error, and the transaction will not fail (but
     * only the unsupported command will fail). */</comment>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s KILL TYPE normal"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"CLIENT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>redisAsyncCommand</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>,
        <argument><expr><name>sentinelDiscardReplyCallback</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
        <argument><expr><call><name>sentinelInstanceMapCommand</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"EXEC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_ERR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>pending_commands</name></name><operator>++</operator></expr>;</expr_stmt>

    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Setup the master state to start a failover. */</comment>
<function><type><name>void</name></type> <name>sentinelStartFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_WAIT_START</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_epoch</name></name> <operator>=</operator> <operator>++</operator><name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+new-epoch"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>PORT_ULONGLONG</name><operator>)</operator> <name><name>sentinel</name><operator>.</operator><name>current_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+try-failover"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call><operator>+</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name>SENTINEL_MAX_DESYNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function checks if there are the conditions to start the failover,
 * that is:
 *
 * 1) Master must be in ODOWN condition.
 * 2) No failover already in progress.
 * 3) No failover already attempted recently.
 *
 * We still don't know if we'll win the election so it is possible that we
 * start the failover but that we'll not be able to act.
 *
 * Return non-zero if a failover was started. */</comment>
<function><type><name>int</name></type> <name>sentinelStartFailoverIfNeeded</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* We can't failover if the master is not in O_DOWN state. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_O_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Failover already in progress? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Last failover attempt started too little time ago? */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>&lt;</operator>
        <name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name><operator>*</operator><literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>failover_delay_logged</name></name> <operator>!=</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>time_t</name></type> <name>clock</name> <init>= <expr><operator>(</operator><name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>+</operator>
                            <name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>ctimebuf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>ctime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>,<argument><expr><name>ctimebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctimebuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="block">/* Remove newline. */</comment>
            <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_delay_logged</name></name> <operator>=</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_start_time</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,
                <argument><expr><literal type="string">"Next failover delay: I will not start a failover before %s"</literal></expr></argument>,
                <argument><expr><name>ctimebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sentinelStartFailover</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Select a suitable slave to promote. The current algorithm only uses
 * the following parameters:
 *
 * 1) None of the following conditions: S_DOWN, O_DOWN, DISCONNECTED.
 * 2) Last time the slave replied to ping no more than 5 times the PING period.
 * 3) info_refresh not older than 3 times the INFO refresh period.
 * 4) master_link_down_time no more than:
 *     (now - master-&gt;s_down_since_time) + (master-&gt;down_after_period * 10).
 *    Basically since the master is down from our POV, the slave reports
 *    to be disconnected no more than 10 times the configured down-after-period.
 *    This is pretty much black magic but the idea is, the master was not
 *    available so the slave may be lagging, but not over a certain time.
 *    Anyway we'll select the best slave according to replication offset.
 * 5) Slave priority can't be zero, otherwise the slave is discarded.
 *
 * Among all the slaves matching the above conditions we select the slave
 * with, in order of sorting key:
 *
 * - lower slave_priority.
 * - bigger processed replication offset.
 * - lexicographically smaller runid.
 *
 * Basically if runid is the same, the slave that processed more commands
 * from the master is selected.
 *
 * The function returns the pointer to the selected slave, otherwise
 * NULL if no suitable slave was found.
 */</comment>

<comment type="block">/* Helper for sentinelSelectSlave(). This is used by qsort() in order to
 * sort suitable slaves in a "better first" order, to take the first of
 * the list. */</comment>
<function><type><name>int</name></type> <name>compareSlavesForPromotion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier><modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator><name>sentinelRedisInstance</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>,
                          <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>(</operator><name>sentinelRedisInstance</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sa_runid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb_runid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_priority</name></name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* If priority is the same, select the slave with greater replication
     * offset (processed more data from the master). */</comment>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> <comment type="block">/* a &lt; b */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>slave_repl_offset</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* a &gt; b */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the replication offset is the same select the slave with that has
     * the lexicographically smaller runid. Note that we try to handle runid
     * == NULL as there are old Redis versions that don't publish runid in
     * INFO. A NULL runid is considered bigger than any other runid. */</comment>
    <expr_stmt><expr><name>sa_runid</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>runid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sb_runid</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>sb</name><operator>)</operator><operator>-&gt;</operator><name>runid</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sa_runid</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>sb_runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>sa_runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* a &gt; b */</comment>
    <if type="elseif">else if <condition>(<expr><name>sb_runid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* a &lt; b */</comment>
    <return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>sa_runid</name></expr></argument>, <argument><expr><name>sb_runid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>sentinelSelectSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier><modifier>*</modifier></type><name>instance</name> <init>=
        <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>instance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><call><name>dictSize</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>selected</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>instances</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>max_master_down_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>max_master_down_time</name> <operator>+=</operator> <call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>s_down_since_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>max_master_down_time</name> <operator>+=</operator> <name><name>master</name><operator>-&gt;</operator><name>down_after_period</name></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mstime_t</name></type> <name>info_validity_time</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_S_DOWN</name><operator>|</operator><name>SRI_O_DOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>last_avail_time</name></name> <operator>&gt;</operator> <name>SENTINEL_PING_PERIOD</name><operator>*</operator><literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>slave_priority</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* If the master is in SDOWN state we get INFO for slaves every second.
         * Otherwise we get it with the usual period so we need to account for
         * a larger delay. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>info_validity_time</name> <operator>=</operator> <name>SENTINEL_PING_PERIOD</name><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>info_validity_time</name> <operator>=</operator> <name>SENTINEL_INFO_PERIOD</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>info_refresh</name></name> <operator>&gt;</operator> <name>info_validity_time</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>master_link_down_time</name></name> <operator>&gt;</operator> <name>max_master_down_time</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>instance</name><index>[<expr><name>instances</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>instances</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>instance</name></expr></argument>,<argument><expr><name>instances</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sentinelRedisInstance</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
            <argument><expr><name>compareSlavesForPromotion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selected</name> <operator>=</operator> <name><name>instance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>selected</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ---------------- Failover state machine implementation ------------------- */</comment>
<function><type><name>void</name></type> <name>sentinelFailoverWaitStart</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>leader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>isleader</name></decl>;</decl_stmt>

    <comment type="block">/* Check if we are the leader for the failover epoch. */</comment>
    <expr_stmt><expr><name>leader</name> <operator>=</operator> <call><name>sentinelGetLeader</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isleader</name> <operator>=</operator> <name>leader</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>leader</name></expr></argument>,<argument><expr><name><name>sentinel</name><operator>.</operator><name>myid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If I'm not the leader, and it is not a forced failover via
     * SENTINEL FAILOVER, then I can't continue with the failover. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isleader</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FORCE_FAILOVER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>election_timeout</name> <init>= <expr><name>SENTINEL_ELECTION_TIMEOUT</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* The election timeout is the MIN between SENTINEL_ELECTION_TIMEOUT
         * and the configured failover timeout. */</comment>
        <if_stmt><if>if <condition>(<expr><name>election_timeout</name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>election_timeout</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>                       <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
        <comment type="block">/* Abort the failover if I'm not the leader after some time. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_start_time</name></name> <operator>&gt;</operator> <name>election_timeout</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-not-elected"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+elected-leader"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>simfailure_flags</name></name> <operator>&amp;</operator> <name>SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sentinelSimFailureCrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-state-select-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelFailoverSelectSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>sentinelSelectSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We don't handle the timeout in this state as the function aborts
     * the failover or go forward in the next state. */</comment>
    <if_stmt><if>if <condition>(<expr><name>slave</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-no-good-slave"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+selected-slave"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_PROMOTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+failover-state-send-slaveof-noone"</literal></expr></argument>,
            <argument><expr><name>slave</name></expr></argument>, <argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelFailoverSendSlaveOfNoOne</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <comment type="block">/* We can't send the command to the promoted slave if it is now
     * disconnected. Retry again and again with this state until the timeout
     * is reached, then abort the failover. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-slave-timeout"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send SLAVEOF NO ONE command to turn the slave into a master.
     * We actually register a generic callback for this command as we don't
     * really care about the reply. We check if it worked indirectly observing
     * if INFO returns a different role (master instead of slave). */</comment>
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"+failover-state-wait-promotion"</literal></expr></argument>,
        <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* We actually wait for promotion indirectly checking with INFO when the
 * slave turns into a master. */</comment>
<function><type><name>void</name></type> <name>sentinelFailoverWaitPromotion</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Just handle the timeout. Switching to the next state is handled
     * by the function parsing the INFO command of the promoted slave. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>&gt;</operator> <name><name>ri</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-failover-abort-slave-timeout"</literal></expr></argument>,<argument><expr><name>ri</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelAbortFailover</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelFailoverDetectEnd</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>not_reconfigured</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>elapsed</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We can't consider failover finished if the promoted slave is
     * not reachable. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* The failover terminates once all the reachable slaves are properly
     * configured. */</comment>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_PROMOTED</name><operator>|</operator><name>SRI_RECONF_DONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_S_DOWN</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>not_reconfigured</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Force end of failover on timeout. */</comment>
    <if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name><name>master</name><operator>-&gt;</operator><name>failover_timeout</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>not_reconfigured</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-end-for-timeout"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>not_reconfigured</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+failover-end"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>master</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If I'm the leader it is a good idea to send a best effort SLAVEOF
     * command to all the slaves still not reconfigured to replicate with
     * the new master. */</comment>
    <if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_PROMOTED</name><operator>|</operator><name>SRI_RECONF_DONE</name><operator>|</operator><name>SRI_RECONF_SENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,
                    <argument><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
                    <argument><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-sent-be"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Send SLAVE OF &lt;new master address&gt; to all the remaining slaves that
 * still don't appear to have the configuration updated. */</comment>
<function><type><name>void</name></type> <name>sentinelFailoverReconfNextSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>in_progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_RECONF_SENT</name><operator>|</operator><name>SRI_RECONF_INPROG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>in_progress</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name><name>master</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>in_progress</name> <operator>&lt;</operator> <name><name>master</name><operator>-&gt;</operator><name>parallel_syncs</name></name> <operator>&amp;&amp;</operator>
          <operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

        <comment type="block">/* Skip the promoted slave, and already configured slaves. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_PROMOTED</name><operator>|</operator><name>SRI_RECONF_DONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* If too much time elapsed without the slave moving forward to
         * the next state, consider it reconfigured even if it is not.
         * Sentinels will detect the slave as misconfigured and fix its
         * configuration later. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_RECONF_SENT</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>slave</name><operator>-&gt;</operator><name>slave_reconf_sent_time</name></name><operator>)</operator> <operator>&gt;</operator>
            <name>SENTINEL_SLAVE_RECONF_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"-slave-reconf-sent-timeout"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_DONE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Nothing to do for instances that are disconnected or already
         * in RECONF_SENT state. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_RECONF_SENT</name><operator>|</operator><name>SRI_RECONF_INPROG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>slave</name><operator>-&gt;</operator><name>link</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Send SLAVEOF &lt;new master&gt;. */</comment>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sentinelSendSlaveOf</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,
                <argument><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SRI_RECONF_SENT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>slave_reconf_sent_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_NOTICE</name></expr></argument>,<argument><expr><literal type="string">"+slave-reconf-sent"</literal></expr></argument>,<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="string">"%@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>in_progress</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check if all the slaves are reconfigured and handle timeout. */</comment>
    <expr_stmt><expr><call><name>sentinelFailoverDetectEnd</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is called when the slave is in
 * SENTINEL_FAILOVER_STATE_UPDATE_CONFIG state. In this state we need
 * to remove it from the master table and add the promoted slave instead. */</comment>
<function><type><name>void</name></type> <name>sentinelFailoverSwitchToPromotedSlave</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>master</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><ternary><condition><expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr> ?</condition><then>
                                 <expr><name><name>master</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr> </then><else>: <expr><name>master</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+switch-master"</literal></expr></argument>,<argument><expr><name>master</name></expr></argument>,<argument><expr><literal type="string">"%s %s %d %s %d"</literal></expr></argument>,
        <argument><expr><name><name>master</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
        <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sentinelResetMasterAndChangeAddress</name><argument_list>(<argument><expr><name>master</name></expr></argument>,<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>,<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelFailoverStateMachine</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <switch>switch<condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_START</name></expr>:</case>
            <expr_stmt><expr><call><name>sentinelFailoverWaitStart</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SENTINEL_FAILOVER_STATE_SELECT_SLAVE</name></expr>:</case>
            <expr_stmt><expr><call><name>sentinelFailoverSelectSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE</name></expr>:</case>
            <expr_stmt><expr><call><name>sentinelFailoverSendSlaveOfNoOne</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr>:</case>
            <expr_stmt><expr><call><name>sentinelFailoverWaitPromotion</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SENTINEL_FAILOVER_STATE_RECONF_SLAVES</name></expr>:</case>
            <expr_stmt><expr><call><name>sentinelFailoverReconfNextSlave</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Abort a failover in progress:
 *
 * This function can only be called before the promoted slave acknowledged
 * the slave -&gt; master switch. Otherwise the failover can't be aborted and
 * will reach its end (possibly by timeout). */</comment>
<function><type><name>void</name></type> <name>sentinelAbortFailover</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_FAILOVER_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>&lt;=</operator> <name>SENTINEL_FAILOVER_STATE_WAIT_PROMOTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SRI_FAILOVER_IN_PROGRESS</name><operator>|</operator><name>SRI_FORCE_FAILOVER</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>=</operator> <name>SENTINEL_FAILOVER_STATE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state_change_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SRI_PROMOTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ri</name><operator>-&gt;</operator><name>promoted_slave</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ======================== SENTINEL timer handler ==========================
 * This is the "main" our Sentinel, being sentinel completely non blocking
 * in design. The function is called every second.
 * -------------------------------------------------------------------------- */</comment>

<comment type="block">/* Perform scheduled operations for the specified Redis instance. */</comment>
<function><type><name>void</name></type> <name>sentinelHandleRedisInstance</name><parameter_list>(<parameter><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* ========== MONITORING HALF ============ */</comment>
    <comment type="block">/* Every kind of instance */</comment>
    <expr_stmt><expr><call><name>sentinelReconnectInstance</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelSendPeriodicCommands</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ============== ACTING HALF ============= */</comment>
    <comment type="block">/* We don't proceed with the acting half if we are in TILT mode.
     * TILT happens when we find something odd with the time, like a
     * sudden change in the clock. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mstime</name><argument_list>()</argument_list></call><operator>-</operator><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name> <operator>&lt;</operator> <name>SENTINEL_TILT_PERIOD</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"-tilt"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"#tilt mode exited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Every kind of instance */</comment>
    <expr_stmt><expr><call><name>sentinelCheckSubjectivelyDown</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Masters and slaves */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SRI_MASTER</name><operator>|</operator><name>SRI_SLAVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Nothing so far. */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only masters */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sentinelCheckObjectivelyDown</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sentinelStartFailoverIfNeeded</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sentinelAskMasterStateToOtherSentinels</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>SENTINEL_ASK_FORCED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sentinelFailoverStateMachine</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelAskMasterStateToOtherSentinels</name><argument_list>(<argument><expr><name>ri</name></expr></argument>,<argument><expr><name>SENTINEL_NO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Perform scheduled operations for all the instances in the dictionary.
 * Recursively call the function against dictionaries of slaves. */</comment>
<function><type><name>void</name></type> <name>sentinelHandleDictOfRedisInstances</name><parameter_list>(<parameter><decl><type><name>dict</name> <modifier>*</modifier></type><name>instances</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dictIterator</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dictEntry</name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>switch_to_promoted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* There are a number of things we need to perform against every master. */</comment>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dictGetIterator</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>dictNext</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sentinelRedisInstance</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>dictGetVal</name><argument_list>(<argument><expr><name>de</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>sentinelHandleRedisInstance</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRI_MASTER</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sentinelHandleDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>slaves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sentinelHandleDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>sentinels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ri</name><operator>-&gt;</operator><name>failover_state</name></name> <operator>==</operator> <name>SENTINEL_FAILOVER_STATE_UPDATE_CONFIG</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>switch_to_promoted</name> <operator>=</operator> <name>ri</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>switch_to_promoted</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sentinelFailoverSwitchToPromotedSlave</name><argument_list>(<argument><expr><name>switch_to_promoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>dictReleaseIterator</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function checks if we need to enter the TITL mode.
 *
 * The TILT mode is entered if we detect that between two invocations of the
 * timer interrupt, a negative amount of time, or too much time has passed.
 * Note that we expect that more or less just 100 milliseconds will pass
 * if everything is fine. However we'll see a negative number or a
 * difference bigger than SENTINEL_TILT_TRIGGER milliseconds if one of the
 * following conditions happen:
 *
 * 1) The Sentiel process for some time is blocked, for every kind of
 * random reason: the load is huge, the computer was frozen for some time
 * in I/O or alike, the process was stopped by a signal. Everything.
 * 2) The system clock was altered significantly.
 *
 * Under both this conditions we'll see everything as timed out and failing
 * without good reasons. Instead we enter the TILT mode and wait
 * for SENTINEL_TILT_PERIOD to elapse before starting to act again.
 *
 * During TILT time we still collect information, we just do not act. */</comment>
<function><type><name>void</name></type> <name>sentinelCheckTiltCondition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>now</name> <init>= <expr><call><name>mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mstime_t</name></type> <name>delta</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>sentinel</name><operator>.</operator><name>previous_time</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>delta</name></expr></argument> &gt;</argument_list></name> <name>SENTINEL_TILT_TRIGGER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>tilt_start_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sentinelEvent</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"+tilt"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"#tilt mode entered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>previous_time</name></name> <operator>=</operator> <call><name>mstime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sentinelTimer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sentinelCheckTiltCondition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelHandleDictOfRedisInstances</name><argument_list>(<argument><expr><name><name>sentinel</name><operator>.</operator><name>masters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelRunPendingScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelCollectTerminatedScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sentinelKillTimedoutScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We continuously change the frequency of the Redis "timer interrupt"
     * in order to desynchronize every Sentinel from every other.
     * This non-determinism avoids that Sentinels started at the same time
     * exactly continue to stay synchronized asking to be voted at the
     * same time again and again (resulting in nobody likely winning the
     * election because of split brain voting). */</comment>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>hz</name></name> <operator>=</operator> <name>CONFIG_DEFAULT_HZ</name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>CONFIG_DEFAULT_HZ</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
