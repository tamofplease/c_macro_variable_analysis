<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/lolwut5.c"><comment type="block">/*
 * Copyright (c) 2018, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * ----------------------------------------------------------------------------
 *
 * This file implements the LOLWUT command. The command should do something
 * fun and interesting, and should be replaced by a new implementation at
 * each new version of Redis.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<comment type="block">/* This structure represents our canvas. Drawing functions will take a pointer
 * to a canvas to write to it. Later the canvas can be rendered to a string
 * suitable to be printed on the screen, using unicode Braille characters. */</comment>
<typedef>typedef <type><struct>struct <name>lwCanvas</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
}</block></struct></type> <name>lwCanvas</name>;</typedef>

<comment type="block">/* Translate a group of 8 pixels (2x4 vertical rectangle) to the corresponding
 * braille character. The byte should correspond to the pixels arranged as
 * follows, where 0 is the least significant bit, and 7 the most significant
 * bit:
 *
 *   0 3
 *   1 4
 *   2 5
 *   6 7
 *
 * The corresponding utf8 encoded character is set into the three bytes
 * pointed by 'output'.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>lwTranslatePixelsGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>byte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0x2800</literal> <operator>+</operator> <name>byte</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Convert to unicode. This is in the U0800-UFFFF range, so we need to
     * emit it like this in three bytes:
     * 1110xxxx 10xxxxxx 10xxxxxx. */</comment>
    <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>          <comment type="block">/* 1110-xxxx */</comment>
    <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* 10-xxxxxx */</comment>
    <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>         <comment type="block">/* 10-xxxxxx */</comment>
</block_content>}</block></function>

<comment type="block">/* Allocate and return a new canvas of the specified size. */</comment>
<function><type><name>lwCanvas</name> <modifier>*</modifier></type><name>lwCreateCanvas</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>canvas</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>canvas</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free the canvas created by lwCreateCanvas(). */</comment>
<function><type><name>void</name></type> <name>lwFreeCanvas</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Set a pixel to the specified color. Color is 0 or 1, where zero means no
 * dot will be displyed, and 1 means dot will be displayed.
 * Coordinates are arranged so that left-top corner is 0,0. You can write
 * out of the size of the canvas without issues. */</comment>
<function><type><name>void</name></type> <name>lwDrawPixel</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
        <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return the value of the specified pixel on the canvas. */</comment>
<function><type><name>int</name></type> <name>lwGetPixel</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
        <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>canvas</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Draw a line from x1,y1 to x2,y2 using the Bresenham algorithm. */</comment>
<function><type><name>void</name></type> <name>lwDrawLine</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>x2</name><operator>-</operator><name>x1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>y2</name><operator>-</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x1</name> <operator>&lt;</operator> <name>x2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>y1</name> <operator>&lt;</operator> <name>y2</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>dx</name><operator>-</operator><name>dy</name></expr></init></decl>, <decl><type ref="prev"/><name>e2</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lwDrawPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>x1</name> <operator>==</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>==</operator> <name>y2</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>e2</name> <operator>=</operator> <name>err</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator> <operator>-</operator><name>dy</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x1</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <name>dx</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Draw a square centered at the specified x,y coordinates, with the specified
 * rotation angle and size. In order to write a rotated square, we use the
 * trivial fact that the parametric equation:
 *
 *  x = sin(k)
 *  y = cos(k)
 *
 * Describes a circle for values going from 0 to 2*PI. So basically if we start
 * at 45 degrees, that is k = PI/4, with the first point, and then we find
 * the other three points incrementing K by PI/2 (90 degrees), we'll have the
 * points of the square. In order to rotate the square, we just start with
 * k = PI/4 + rotation_angle, and we are done.
 *
 * Of course the vanilla equations above will describe the square inside a
 * circle of radius 1, so in order to draw larger squares we'll have to
 * multiply the obtained coordinates, and then translate them. However this
 * is much simpler than implementing the abstract concept of 2D shape and then
 * performing the rotation/translation transformation, so for LOLWUT it's
 * a good approach. */</comment>
<function><type><name>void</name></type> <name>lwDrawSquare</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name><name>px</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>py</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Adjust the desired size according to the fact that the square inscribed
     * into a circle of radius 1 has the side of length SQRT(2). This way
     * size becomes a simple multiplication factor we can use with our
     * coordinates to magnify them. */</comment>
    <expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">1.4142135623</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Compute the four points. */</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>k</name> <init>= <expr><name>M_PI</name><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <name>angle</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>px</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>size</name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>py</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>size</name> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>M_PI</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Draw the square. */</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lwDrawLine</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name><name>px</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>py</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>px</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>py</name><index>[<expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Schotter, the output of LOLWUT of Redis 5, is a computer graphic art piece
 * generated by Georg Nees in the 60s. It explores the relationship between
 * caos and order.
 *
 * The function creates the canvas itself, depending on the columns available
 * in the output display and the number of squares per row and per column
 * requested by the caller. */</comment>
<function><type><name>lwCanvas</name> <modifier>*</modifier></type><name>lwDrawSchotter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>console_cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>squares_per_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>squares_per_col</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Calculate the canvas size. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>canvas_width</name> <init>= <expr><name>console_cols</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><ternary><condition><expr><name>canvas_width</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>square_side</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>canvas_width</name><operator>-</operator><name>padding</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>squares_per_row</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>canvas_height</name> <init>= <expr><name>square_side</name> <operator>*</operator> <name>squares_per_col</name> <operator>+</operator> <name>padding</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>lwCreateCanvas</name><argument_list>(<argument><expr><name>canvas_width</name></expr></argument>, <argument><expr><name>canvas_height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>squares_per_col</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>squares_per_row</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name>x</name> <operator>*</operator> <name>square_side</name> <operator>+</operator> <name>square_side</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>padding</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><name>y</name> <operator>*</operator> <name>square_side</name> <operator>+</operator> <name>square_side</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>padding</name></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Rotate and translate randomly as we go down to lower
             * rows. */</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name> <operator>/</operator> <name>squares_per_col</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>r2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name> <operator>/</operator> <name>squares_per_col</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>r3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name> <operator>/</operator> <name>squares_per_col</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>-</operator><name>r1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>-</operator><name>r2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r3</name> <operator>=</operator> <operator>-</operator><name>r3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>angle</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sx</name> <operator>+=</operator> <name>r2</name><operator>*</operator><name>square_side</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>sy</name> <operator>+=</operator> <name>r3</name><operator>*</operator><name>square_side</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>lwDrawSquare</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>,<argument><expr><name>square_side</name></expr></argument>,<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><name>canvas</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Converts the canvas to an SDS string representing the UTF8 characters to
 * print to the terminal in order to obtain a graphical representaiton of the
 * logical canvas. The actual returned string will require a terminal that is
 * width/2 large and height/4 tall in order to hold the whole image without
 * overflowing or scrolling, since each Barille character is 2x4. */</comment>
<function><type><name>sds</name></type> <name>lwRenderCanvas</name><parameter_list>(<parameter><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>text</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>canvas</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <comment type="block">/* We need to emit groups of 8 bits according to a specific
             * arrangement. See lwTranslatePixelsGroup() for more info. */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lwGetPixel</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>byte</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>unicode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>lwTranslatePixelsGroup</name><argument_list>(<argument><expr><name>byte</name></expr></argument>,<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>,<argument><expr><name>unicode</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name><name>canvas</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>text</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The LOLWUT command:
 *
 * LOLWUT [terminal columns] [squares-per-row] [squares-per-col]
 *
 * By default the command uses 66 columns, 8 squares per row, 12 squares
 * per column.
 */</comment>
<function><type><name>void</name></type> <name>lolwut5Command</name><parameter_list>(<parameter><decl><type><name>client</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>PORT_LONG</name></type> <name>cols</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>squares_per_row</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PORT_LONG</name></type> <name>squares_per_col</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Parse the optional arguments if any. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
        <call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
        <call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>squares_per_row</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
        <call><name>getLongFromObjectOrReply</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>c</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>squares_per_col</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Limits. We want LOLWUT to be always reasonably fast and cheap to execute
     * so we have maximum number of columns, rows, and output resulution. */</comment>
    <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>squares_per_row</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_row</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>squares_per_row</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_row</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>squares_per_col</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>squares_per_col</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>squares_per_col</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Generate some computer art and reply. */</comment>
    <decl_stmt><decl><type><name>lwCanvas</name> <modifier>*</modifier></type><name>canvas</name> <init>= <expr><call><name>lwDrawSchotter</name><argument_list>(<argument><expr><name>cols</name></expr></argument>,<argument><expr><name>squares_per_row</name></expr></argument>,<argument><expr><name>squares_per_col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>rendered</name> <init>= <expr><call><name>lwRenderCanvas</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,
        <argument><expr><literal type="string">"\nGeorg Nees - schotter, plotter on paper, 1968. Redis ver. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><name>REDIS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rendered</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>rendered</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addReplyBulkSds</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>rendered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lwFreeCanvas</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
