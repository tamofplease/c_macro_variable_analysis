<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/rio.c"><comment type="block">/* rio.c is a simple stream-oriented I/O abstraction that provides an interface
 * to write code that can consume/produce data using different concrete input
 * and output devices. For instance the same rdb.c code using the rio
 * abstraction can be used to read and write the RDB format using in-memory
 * buffers or files.
 *
 * A rio object provides the following methods:
 *  read: read from stream.
 *  write: write to stream.
 *  tell: get the current offset.
 *
 * It is also possible to set a 'checksum' method that is used by rio.c in order
 * to compute a checksum of the data written or read, or to query the rio object
 * for the current checksum.
 *
 * ----------------------------------------------------------------------------
 *
 * Copyright (c) 2009-2012, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_interop/win32_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_FDAPI.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<macro><name>POSIX_ONLY</name><argument_list>(<argument>#include &lt;unistd.h&gt;</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------- Buffer I/O implementation ----------------------- */</comment>

<comment type="block">/* Returns 1 or 0 for success/failure. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioBufferWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>                                             <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (off_t) */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns 1 or 0 for success/failure. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioBufferRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* not enough buffer to return len bytes. */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>                                             <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (off_t) */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns read/write position in buffer. */</comment>
<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioBufferTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Flushes any buffer to target device if applicable. Returns 1 on success
 * and 0 on failures. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rioBufferFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* Nothing to do, our write just appends to the buffer. */</comment>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioBufferIO</name> <init>= <expr><block>{
    <expr><name>rioBufferRead</name></expr>,
    <expr><name>rioBufferWrite</name></expr>,
    <expr><name>rioBufferTell</name></expr>,
    <expr><name>rioBufferFlush</name></expr>,
    <expr><name>NULL</name></expr>,           <comment type="block">/* update_checksum */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* current checksum */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* bytes read or written */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* read/write chunk size */</comment>
    <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> <comment type="block">/* union for io-specific vars */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rioInitWithBuffer</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioBufferIO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>buffer</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------- Stdio file pointer implementation ------------------- */</comment>

<comment type="block">/* Returns 1 or 0 for success/failure. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFileWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>retval</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>+=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>                                          <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (off_t) */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>&amp;&amp;</operator>
        <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>redis_fsync</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns 1 or 0 for success/failure. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFileRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns read/write position in file. */</comment>
<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioFileTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>off_t</name><operator>)</operator><call><name>ftello</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>                                        <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<comment type="block">/* Flushes any buffer to target device if applicable. Returns 1 on success
 * and 0 on failures. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rioFileFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioFileIO</name> <init>= <expr><block>{
    <expr><name>rioFileRead</name></expr>,
    <expr><name>rioFileWrite</name></expr>,
    <expr><name>rioFileTell</name></expr>,
    <expr><name>rioFileFlush</name></expr>,
    <expr><name>NULL</name></expr>,           <comment type="block">/* update_checksum */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* current checksum */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* bytes read or written */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* read/write chunk size */</comment>
    <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> <comment type="block">/* union for io-specific vars */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rioInitWithFile</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioFileIO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>buffered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ------------------- File descriptors set implementation ------------------- */</comment>

<comment type="block">/* Returns 1 or 0 for success/failure.
 * The function returns success as long as we are able to correctly write
 * to at least one file descriptor.
 *
 * When buf is NULL and len is 0, the function performs a flush operation
 * if there is some pending buffer, so this function is also used in order
 * to implement rioFdsetFlush(). */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFdsetWrite</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>doflush</name> <init>= <expr><operator>(</operator><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* To start we always append to our buffer. If it gets larger than
     * a given size, we actually write to the sockets. */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Prevent entering the while below if we don't flush. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PROTO_IOBUF_LEN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>doflush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>doflush</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Write in little chunchs so that when there are big writes we
     * parallelize while the kernel is sending data in background to
     * the TCP socket. */</comment>
    <while>while<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>broken</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>numfds</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Skip FDs alraedy in error. */</comment>
                <expr_stmt><expr><name>broken</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Make sure to write 'count' bytes to the socket regardless
             * of short writes. */</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>nwritten</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>fds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>nwritten</name></expr></argument>,<argument><expr><name>count</name><operator>-</operator><name>nwritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="block">/* With blocking sockets, which is the sole user of this
                     * rio target, EWOULDBLOCK is returned only because of
                     * the SO_SNDTIMEO socket option, so we translate the error
                     * into one more recognizable by the user. */</comment>
                    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>retval</name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Mark this FD as broken. */</comment>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>broken</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>numfds</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* All the FDs in error. */</comment>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>doflush</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsclear</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Returns 1 or 0 for success/failure. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rioFdsetRead</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Error, this target does not support reading. */</comment>
</block_content>}</block></function>

<comment type="block">/* Returns read/write position in file. */</comment>
<function><type><specifier>static</specifier> <name>off_t</name></type> <name>rioFdsetTell</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Flushes any buffer to target device if applicable. Returns 1 on success
 * and 0 on failures. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rioFdsetFlush</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Our flush is implemented by the write method, that recognizes a
     * buffer set to NULL with a count of zero as a flush request. */</comment>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rioFdsetWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>                                        <expr_stmt><expr><name>WIN_PORT_FIX</name></expr></expr_stmt> <comment type="block">/* cast (int) */</comment>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rio</name></type> <name>rioFdsetIO</name> <init>= <expr><block>{
    <expr><name>rioFdsetRead</name></expr>,
    <expr><name>rioFdsetWrite</name></expr>,
    <expr><name>rioFdsetTell</name></expr>,
    <expr><name>rioFdsetFlush</name></expr>,
    <expr><name>NULL</name></expr>,           <comment type="block">/* update_checksum */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* current checksum */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* bytes read or written */</comment>
    <expr><literal type="number">0</literal></expr>,              <comment type="block">/* read/write chunk size */</comment>
    <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> <comment type="block">/* union for io-specific vars */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>rioInitWithFdset</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numfds</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>rioFdsetIO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>fds</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>fds</name></name></expr></argument>,<argument><expr><name>fds</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numfds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>numfds</name></name> <operator>=</operator> <name>numfds</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* release the rio stream. */</comment>
<function><type><name>void</name></type> <name>rioFreeFdset</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>fds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ---------------------------- Generic functions ---------------------------- */</comment>

<comment type="block">/* This function can be installed both in memory and file streams when checksum
 * computation is needed. */</comment>
<function><type><name>void</name></type> <name>rioGenericUpdateChecksum</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cksum</name></name> <operator>=</operator> <call><name>crc64</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>cksum</name></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Set the file-based rio object to auto-fsync every 'bytes' file written.
 * By default this is set to zero that means no automatic file sync is
 * performed.
 *
 * This feature is useful in a few contexts since when we rely on OS write
 * buffers sometimes the OS buffers way too much, resulting in too many
 * disk I/O concentrated in very little time. When we fsync in an explicit
 * way instead the I/O pressure is more distributed across time. */</comment>
<function><type><name>void</name></type> <name>rioSetAutoSync</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>serverAssert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>read</name></name> <operator>==</operator> <name><name>rioFileIO</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>file</name><operator>.</operator><name>autosync</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------- Higher level interface --------------------------
 *
 * The following higher level functions use lower level rio.c functions to help
 * generating the Redis protocol for the Append Only File. */</comment>

<comment type="block">/* Write multi bulk count in the format: "*&lt;count&gt;\r\n". */</comment>
<function><type><name>size_t</name></type> <name>rioWriteBulkCount</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><call><name>ll2string</name><argument_list>(<argument><expr><name>cbuf</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cbuf</name><index>[<expr><name>clen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cbuf</name><index>[<expr><name>clen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>cbuf</name></expr></argument>,<argument><expr><name>clen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write binary-safe string in the format: "$&lt;count&gt;\r\n&lt;payload&gt;\r\n". */</comment>
<function><type><name>size_t</name></type> <name>rioWriteBulkString</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nwritten</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nwritten</name> <operator>=</operator> <call><name>rioWriteBulkCount</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="char">'$'</literal></expr></argument>,<argument><expr><operator>(</operator><name>PORT_LONG</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>          <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (PORT_LONG) */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rioWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rioWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="string">"\r\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>nwritten</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write a long long value in format: "$&lt;count&gt;\r\n&lt;payload&gt;\r\n". */</comment>
<function><type><name>size_t</name></type> <name>rioWriteBulkLongLong</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>lbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>llen</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>lbuf</name></expr></argument>,<argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write a double value in the format: "$&lt;count&gt;\r\n&lt;payload&gt;\r\n" */</comment>
<function><type><name>size_t</name></type> <name>rioWriteBulkDouble</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dlen</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><literal type="string">"%.17g"</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>rioWriteBulkString</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>dbuf</name></expr></argument>,<argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
