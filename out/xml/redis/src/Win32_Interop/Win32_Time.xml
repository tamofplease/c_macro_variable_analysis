<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_Time.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* Credits Henry Rawas (henryr@schakra.com) */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA_EPOCH_IN_MICROSECS</name></cpp:macro>  <cpp:value>11644473600000000Ui64</cpp:value></cpp:define>

<comment type="block">/* fnGetSystemTimePreciseAsFileTime is NULL if and only if it hasn't been initialized. */</comment>
<function_decl><type><specifier>static</specifier> <name>VOID</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>fnGetSystemTimePreciseAsFileTime</name>)<parameter_list>(<parameter><decl><type><name>LPFILETIME</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<comment type="block">/* Interval (in seconds) of the high-resolution clock.
* Special values:
*   0 : it hasn't been initialized
*  -1 : the system doesn't have high-resolution clock support
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>highResTimeInterval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>InitHighResRelativeTime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>perfFrequency</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>highResTimeInterval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Retrieve high-resolution timer frequency
    * and precompute its reciprocal.
    */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>perfFrequency</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>highResTimeInterval</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name><name>perfFrequency</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>highResTimeInterval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>highResTimeInterval</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitHighResAbsoluteTime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FARPROC</name></type> <name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HMODULE</name></type> <name>module</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fnGetSystemTimePreciseAsFileTime</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Use GetSystemTimeAsFileTime as fallbcak where GetSystemTimePreciseAsFileTime is not available */</comment>
    <expr_stmt><expr><name>fnGetSystemTimePreciseAsFileTime</name> <operator>=</operator> <name>GetSystemTimeAsFileTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>GetModuleHandleA</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>module</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"GetSystemTimePreciseAsFileTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fnGetSystemTimePreciseAsFileTime</name> <operator>=</operator> <operator>(</operator><call><call><name>VOID</name><argument_list>(<argument><expr><name>WINAPI</name><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>LPFILETIME</name></expr></argument>)</argument_list></call><operator>)</operator> <name>fp</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fnGetSystemTimePreciseAsFileTime</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitTimeFunctions</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>InitHighResRelativeTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InitHighResAbsoluteTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>GetHighResRelativeTime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>counter</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>highResTimeInterval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>highResTimeInterval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>InitHighResRelativeTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* If the performance interval is less than zero, there's no support. */</comment>
        <if_stmt><if>if <condition>(<expr><name>highResTimeInterval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Because we have no guarantee about the order of magnitude of the
    * performance counter interval, integer math could cause this computation
    * to overflow. Therefore we resort to floating point math.
    */</comment>
    <return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>counter</name><operator>.</operator><name>QuadPart</name></name> <operator>*</operator> <name>highResTimeInterval</name> <operator>*</operator> <name>scale</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>gettimeofdaysecs</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>usec</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>tmpres</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmpres</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpres</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpres</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

    <comment type="block">/*converting file time to unix epoch*/</comment>
    <expr_stmt><expr><name>tmpres</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>  <comment type="block">/*convert into microseconds*/</comment>
    <expr_stmt><expr><name>tmpres</name> <operator>-=</operator> <name>DELTA_EPOCH_IN_MICROSECS</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>usec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>usec</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>tmpres</name> <operator>%</operator> <literal type="number">1000000UL</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>tmpres</name> <operator>/</operator> <literal type="number">1000000UL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gettimeofday_fast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>__int64</name></type> <name>tmpres</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tzflag</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>tv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tmpres</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmpres</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmpres</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

        <comment type="block">/*converting file time to unix epoch*/</comment>
        <expr_stmt><expr><name>tmpres</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>  <comment type="block">/*convert into microseconds*/</comment>
        <expr_stmt><expr><name>tmpres</name> <operator>-=</operator> <name>DELTA_EPOCH_IN_MICROSECS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>tmpres</name> <operator>/</operator> <literal type="number">1000000UL</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>tmpres</name> <operator>%</operator> <literal type="number">1000000UL</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>tz</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tzflag</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>_tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tzflag</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>tz</name><operator>-&gt;</operator><name>tz_minuteswest</name></name> <operator>=</operator> <name>_timezone</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tz</name><operator>-&gt;</operator><name>tz_dsttime</name></name> <operator>=</operator> <name>_daylight</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gettimeofday_highres</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>__int64</name></type> <name>tmpres</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tzflag</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>fnGetSystemTimePreciseAsFileTime</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>InitHighResAbsoluteTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>tv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fnGetSystemTimePreciseAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tmpres</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmpres</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmpres</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

        <comment type="block">/*converting file time to unix epoch*/</comment>
        <expr_stmt><expr><name>tmpres</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>  <comment type="block">/*convert into microseconds*/</comment>
        <expr_stmt><expr><name>tmpres</name> <operator>-=</operator> <name>DELTA_EPOCH_IN_MICROSECS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>tmpres</name> <operator>/</operator> <literal type="number">1000000UL</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>tmpres</name> <operator>%</operator> <literal type="number">1000000UL</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>tz</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tzflag</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tzflag</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>tz</name><operator>-&gt;</operator><name>tz_minuteswest</name></name> <operator>=</operator> <name>_timezone</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tz</name><operator>-&gt;</operator><name>tz_dsttime</name></name> <operator>=</operator> <name>_daylight</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ctime_r is documented (http://www.mkssoftware.com/docs/man3/ctime_r.3.asp)
 * to be reentrant. 
 * _ctime64 is not thread safe. 
 * Since this is used only in sentinel.c and Redis is single threaded this
 * is not a problem */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>ctime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>  <block>{<block_content>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>_ctime64</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function></unit>
