<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/dlfcn.c"><comment type="block">/*
 * dlfcn-win32
 * Copyright (c) 2007 Ramiro Polla
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * dlfcn-win32 is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * dlfcn-win32 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with dlfcn-win32; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRTDBG_MAP_ALLOC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtdbg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSAPI_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHARED</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLFCN_WIN32_EXPORTS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dlfcn.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>sprintf_s</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNICODE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR</name></cpp:macro>	<cpp:value>wchar_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_L</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>L##s</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR</name></cpp:macro>	<cpp:value>char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_L</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>s</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Note:
 * MSDN says these functions are not thread-safe. We make no efforts to have
 * any kind of thread safety.
 */</comment>

<typedef>typedef <type><struct>struct <name>global_object</name> <block>{
    <decl_stmt><decl><type><name>HMODULE</name></type> <name>hModule</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>global_object</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>global_object</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>global_object</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>global_object</name></type> <name>first_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>global_object</name></type> <name>first_automatic_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>auto_ref_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* These functions implement a double linked list for the global objects. */</comment>
<function><type><specifier>static</specifier> <name>global_object</name> <modifier>*</modifier></type><name>global_search</name><parameter_list>( <parameter><decl><type><name>global_object</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>HMODULE</name></type> <name>hModule</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>pobject</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>hModule</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>pobject</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>pobject</name></expr>;</condition> <incr><expr><name>pobject</name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pobject</name><operator>-&gt;</operator><name>hModule</name></name> <operator>==</operator> <name>hModule</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return <expr><name>pobject</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>global_add</name><parameter_list>( <parameter><decl><type><name>global_object</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>HMODULE</name></type> <name>hModule</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>pobject</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>nobject</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>hModule</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pobject</name> <operator>=</operator> <call><name>global_search</name><argument_list>( <argument><expr><name>start</name></expr></argument>, <argument><expr><name>hModule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Do not add object again if it's already on the list */</comment>
    <if_stmt><if>if<condition>( <expr><name>pobject</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>start</name> <operator>==</operator> <operator>&amp;</operator><name>first_automatic_object</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>pobject</name> <operator>=</operator> <call><name>global_search</name><argument_list>( <argument><expr><operator>&amp;</operator><name>first_object</name></expr></argument>, <argument><expr><name>hModule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pobject</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>pobject</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>pobject</name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

    <expr_stmt><expr><name>nobject</name> <operator>=</operator> <operator>(</operator><name>global_object</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>global_object</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Should this be enough to fail global_add, and therefore also fail
     * dlopen?
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>nobject</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pobject</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nobject</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nobject</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nobject</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>pobject</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nobject</name><operator>-&gt;</operator><name>hModule</name></name> <operator>=</operator> <name>hModule</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>global_rem</name><parameter_list>( <parameter><decl><type><name>global_object</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>HMODULE</name></type> <name>hModule</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>pobject</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>hModule</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pobject</name> <operator>=</operator> <call><name>global_search</name><argument_list>( <argument><expr><name>start</name></expr></argument>, <argument><expr><name>hModule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pobject</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pobject</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pobject</name><operator>-&gt;</operator><name>previous</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pobject</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pobject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* POSIX says dlerror( ) doesn't have to be thread-safe, so we use one
 * static buffer.
 * MSDN says the buffer cannot be larger than 64K bytes, so we set it to
 * the limit.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>CHAR</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">65535</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CHAR</name> <modifier>*</modifier></type><name>current_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dlerror_buffer</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_string</name><parameter_list>( <parameter><decl><type><name>CHAR</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CHAR</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* gcc should optimize this out */</comment>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>dest</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dest_size</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_err_str</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>CHAR</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwMessageId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>pos</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dwMessageId</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>dwMessageId</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Format error message to:
     * "&lt;argument to function that failed&gt;": &lt;Windows localized error message&gt;
      */</comment>
    <expr_stmt><expr><name>pos</name>  <operator>=</operator> <call><name>copy_string</name><argument_list>( <argument><expr><name>error_buffer</name></expr></argument>,     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,     <argument><expr><call><name>UNICODE_L</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>copy_string</name><argument_list>( <argument><expr><name>error_buffer</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>pos</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>copy_string</name><argument_list>( <argument><expr><name>error_buffer</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>pos</name></expr></argument>, <argument><expr><call><name>UNICODE_L</name><argument_list>(<argument><expr><literal type="string">"\": "</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>FormatMessage</name><argument_list>( <argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dwMessageId</name></expr></argument>,
        <argument><expr><call><name>MAKELANGID</name><argument_list>( <argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument> )</argument_list></call></expr></argument>,
        <argument><expr><name>error_buffer</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>pos</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* POSIX says the string must not have trailing &lt;newline&gt; */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>error_buffer</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>error_buffer</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>error_buffer</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>current_error</name> <operator>=</operator> <name>error_buffer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_err_ptr_str</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CHAR</name></type> <name><name>ptr_buf</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* 0x&lt;pointer&gt; up to 64 bits. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNICODE</name></cpp:ifdef>

<cpp:if>#	<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name>swprintf_s</name><argument_list>( <argument><expr><name>ptr_buf</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><call><name>UNICODE_L</name><argument_list>(<argument><expr><literal type="string">"0x%p"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>swprintf</name><argument_list>(<argument><expr><name>ptr_buf</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><call><name>UNICODE_L</name><argument_list>(<argument><expr><literal type="string">"0x%p"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>ptr_buf</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="string">"0x%p"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>save_err_str</name><argument_list>( <argument><expr><name>ptr_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>dlopen</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HMODULE</name></type> <name>hModule</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UINT</name></type> <name>uMode</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>current_error</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Do not let Windows display the critical-error-handler message box */</comment>
    <expr_stmt><expr><name>uMode</name> <operator>=</operator> <call><name>SetErrorMode</name><argument_list>( <argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>file</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HMODULE</name></type> <name><name>hAddtnlMods</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// Already loaded modules</comment>
        <decl_stmt><decl><type><name>HANDLE</name></type> <name>hCurrentProc</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DWORD</name></type> <name>cbNeeded</name></decl>;</decl_stmt>

        <comment type="block">/* POSIX says that if the value of file is 0, a handle on a global
         * symbol object must be provided. That object must be able to access
         * all symbols from the original program file, and any objects loaded
         * with the RTLD_GLOBAL flag.
         * The return value from GetModuleHandle( ) allows us to retrieve
         * symbols only from the original program file. For objects loaded with
         * the RTLD_GLOBAL flag, we create our own list later on. For objects
         * outside of the program file but already loaded (e.g. linked DLLs)
         * they are added below.
         */</comment>
        <expr_stmt><expr><name>hModule</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>hModule</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>save_err_ptr_str</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


        <comment type="block">/* GetModuleHandle( NULL ) only returns the current program file. So
         * if we want to get ALL loaded module including those in linked DLLs,
         * we have to use EnumProcessModules( ).
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>EnumProcessModules</name><argument_list>( <argument><expr><name>hCurrentProc</name></expr></argument>, <argument><expr><name>hAddtnlMods</name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hAddtnlMods</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbNeeded</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cbNeeded</name> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>HMODULE</name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>global_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>first_automatic_object</name></expr></argument>, <argument><expr><name><name>hAddtnlMods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>auto_ref_count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>CHAR</name></type> <name><name>lpFileName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <comment type="block">/* MSDN says backslashes *must* be used instead of forward slashes. */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lpFileName</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if>
            <if type="elseif">else if<condition>( <expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>lpFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>lpFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>lpFileName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <comment type="block">/* POSIX says the search path is implementation-defined.
         * LOAD_WITH_ALTERED_SEARCH_PATH is used to make it behave more closely
         * to UNIX's search paths (start with system folders instead of current
         * folder).
         */</comment>
        <expr_stmt><expr><name>hModule</name> <operator>=</operator> <call><name>LoadLibraryEx</name><argument_list>(<argument><expr><name>lpFileName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                                <argument><expr><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* If the object was loaded with RTLD_GLOBAL, add it to list of global
         * objects, so that its symbols may be retrieved even if the handle for
         * the original program file is passed. POSIX says that if the same
         * file is specified in multiple invocations, and any of them are
         * RTLD_GLOBAL, even if any further invocations use RTLD_LOCAL, the
         * symbols will remain global.
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>hModule</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>save_err_str</name><argument_list>( <argument><expr><name>lpFileName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>RTLD_GLOBAL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>global_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>first_object</name></expr></argument>, <argument><expr><name>hModule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Return to previous state of the error-mode bit flags. */</comment>
    <expr_stmt><expr><call><name>SetErrorMode</name><argument_list>( <argument><expr><name>uMode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>hModule</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_auto</name><parameter_list>( )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>pobject</name> <init>= <expr><name><name>first_automatic_object</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pobject</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
        <for>for <control>( <init>;</init> <condition><expr><name>pobject</name></expr>;</condition> <incr><expr><name>pobject</name> <operator>=</operator> <name>next</name></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pobject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>first_automatic_object</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dlclose</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HMODULE</name></type> <name>hModule</name> <init>= <expr><operator>(</operator><name>HMODULE</name><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>current_error</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FreeLibrary</name><argument_list>( <argument><expr><name>hModule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the object was loaded with RTLD_GLOBAL, remove it from list of global
     * objects.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>ret</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HMODULE</name></type> <name>cur</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>global_rem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>first_object</name></expr></argument>, <argument><expr><name>hModule</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>hModule</name> <operator>==</operator> <name>cur</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>auto_ref_count</name><operator>--</operator></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>auto_ref_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>auto_ref_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if<condition>( <expr><operator>!</operator><name>auto_ref_count</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>free_auto</name><argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>save_err_ptr_str</name><argument_list>( <argument><expr><name>handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* dlclose's return value in inverted in relation to FreeLibrary's. */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><name>ret</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>dlsym</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FARPROC</name></type> <name>symbol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HMODULE</name></type> <name>hModule</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNICODE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>wchar_t</name></type> <name><name>namew</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wmemset</name><argument_list>(<argument><expr><name>namew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>current_error</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>( <argument><expr><operator>(</operator><name>HMODULE</name><operator>)</operator> <name>handle</name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>symbol</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* If the handle for the original program file is passed, also search
     * in all globally loaded objects.
     */</comment>

    <expr_stmt><expr><name>hModule</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>hModule</name> <operator>==</operator> <name>handle</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>global_object</name> <modifier>*</modifier></type><name>pobject</name></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>pobject</name> <operator>=</operator> <operator>&amp;</operator><name>first_object</name></expr>;</init> <condition><expr><name>pobject</name></expr>;</condition> <incr><expr><name>pobject</name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>pobject</name><operator>-&gt;</operator><name>hModule</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>( <argument><expr><name><name>pobject</name><operator>-&gt;</operator><name>hModule</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>symbol</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                    <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <for>for<control>( <init><expr><name>pobject</name> <operator>=</operator> <operator>&amp;</operator><name>first_automatic_object</name></expr>;</init> <condition><expr><name>pobject</name></expr>;</condition> <incr><expr><name>pobject</name> <operator>=</operator> <name><name>pobject</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>pobject</name><operator>-&gt;</operator><name>hModule</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>( <argument><expr><name><name>pobject</name><operator>-&gt;</operator><name>hModule</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>symbol</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                    <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
    <if_stmt><if>if<condition>( <expr><name>symbol</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNICODE</name></cpp:ifdef>
        <decl_stmt><decl><type><name>size_t</name></type> <name>converted_chars</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>str_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr></cpp:if>
        <decl_stmt><decl><type><name>errno_t</name></type> <name>err</name> <init>= <expr><call><name>mbstowcs_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>converted_chars</name></expr></argument>, <argument><expr><name>namew</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>namew</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>save_err_str</name><argument_list>( <argument><expr><name>namew</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>save_err_str</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//  warning C4054: 'type cast' : from function pointer 'FARPROC' to data pointer 'void *'</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>suppress</name><name>:</name> <name>4054</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>symbol</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>dlerror</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error_pointer</name> <init>= <expr><name>dlerror_buffer</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* If this is the second consecutive call to dlerror, return NULL */</comment>
    <if_stmt><if>if <condition>(<expr><name>current_error</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNICODE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>errno_t</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>converted_chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>str_len</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>current_error</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>error_pointer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#	<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>wcstombs_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>converted_chars</name></expr></argument>, 
        <argument><expr><name>error_pointer</name></expr></argument>, <argument><expr><name>str_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>,
        <argument><expr><name>current_error</name></expr></argument>, <argument><expr><name>str_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>wcstombs</name><argument_list>(<argument><expr><name>error_pointer</name></expr></argument>, <argument><expr><name>current_error</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>error_pointer</name></expr></argument>, <argument><expr><name>current_error</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>current_error</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* POSIX says that invoking dlerror( ) a second time, immediately following
     * a prior invocation, shall result in NULL being returned.
     */</comment>
    <expr_stmt><expr><name>current_error</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>error_pointer</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHARED</name></cpp:ifdef>
<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name><parameter_list>( <parameter><decl><type><name>HINSTANCE</name></type> <name>hinstDLL</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>fdwReason</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>lpvReserved</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>hinstDLL</name></expr>;</expr_stmt>
    <comment type="block">/*
     * https://msdn.microsoft.com/en-us/library/windows/desktop/ms682583(v=vs.85).aspx 
     *
     *     When handling DLL_PROCESS_DETACH, a DLL should free resources such as heap
     *     memory only if the DLL is being unloaded dynamically (the lpReserved
     *     parameter is NULL).
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>fdwReason</name> <operator>==</operator> <name>DLL_PROCESS_DETACH</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lpvReserved</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>auto_ref_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free_auto</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
