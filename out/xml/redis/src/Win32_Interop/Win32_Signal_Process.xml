<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_Signal_Process.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Signal_Process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Redefined here to avoid server.h so it can be used in other projects */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>

<comment type="block">/* Behaves as posix, works without ifdefs, makes compiler happy */</comment>
<function><type><name>int</name></type> <name>sigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* When the SA_SIGINFO flag is set in sa_flags then sa_sigaction
    * is used. Otherwise, sa_handler is used */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>sa_flags</name></name> <operator>&amp;</operator> <name>SA_SIGINFO</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>sa_sigaction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>sa_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Terminates process, implemented only for SIGKILL */</comment>
<function><type><name>int</name></type> <name>kill</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGUSR1</name></expr>)</condition> <block>{<block_content>
        <comment type="line">//AbortForkOperation();</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sig</name> <operator>==</operator> <name>SIGKILL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_TERMINATE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <comment type="block">/* GetLastError() */</comment>
            <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Redis CPU GetProcessTimes -&gt; rusage  */</comment>
<function><type><name>int</name></type> <name>getrusage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>who</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rusage</name></name> <modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILETIME</name></type> <name>starttime</name></decl>, <decl><type ref="prev"/><name>exittime</name></decl>, <decl><type ref="prev"/><name>kerneltime</name></decl>, <decl><type ref="prev"/><name>usertime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rusage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>who</name> <operator>==</operator> <name>RUSAGE_SELF</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetProcessTimes</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>exittime</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>kerneltime</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>usertime</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>who</name> <operator>==</operator> <name>RUSAGE_CHILDREN</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Childless on windows */</comment>
        <expr_stmt><expr><name><name>starttime</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>starttime</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>exittime</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>exittime</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>kerneltime</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>kerneltime</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>usertime</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>usertime</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kerneltime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILETIME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/=</operator> <literal type="number">10L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ru_stime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">1000000L</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ru_stime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">1000000L</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>li</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usertime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILETIME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/=</operator> <literal type="number">10L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ru_utime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">1000000L</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ru_utime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">1000000L</literal><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
