<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_RedisLog.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_RedisLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32Fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_EventLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ellipsis</name><index>[]</index></name> <init>= <expr><literal type="string">"[...]"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ellipsisWithNewLine</name><index>[]</index></name> <init>= <expr><literal type="string">"[...]\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbosity</name> <init>= <expr><name>LL_WARNING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>hLogFile</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>isStdout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>logFilename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>setLogVerbosityLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>verbosity</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>getLogFilename</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>logFilename</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>logFilename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"stdout"</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>logFilename</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* We keep the file handle open to improve performance.
 * This assumes that calls to serverLog and setLogFile will not happen
 * concurrently.
 */</comment>
<function><type><name>void</name></type> <name>setLogFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>logFilename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>logFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFilename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>logFilename</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>logFilename</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"memory allocation failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>logFilename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>logFilename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>hLogFile</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isStdout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>hLogFile</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>_stricmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hLogFile</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isStdout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UINT</name></type> <name>codePage</name> <init>= <expr><name>CP_ACP</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>widePath</name></decl>;</decl_stmt>

        <comment type="block">/* Convert the path from ansi to unicode, to support paths longer than MAX_PATH */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>codePage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>widePath</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>codePage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>widePath</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>widePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Passing FILE_APPEND_DATA without FILE_WRITE_DATA is essential for getting atomic appends across processes. */</comment>
        <expr_stmt><expr><name>hLogFile</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(
            <argument><expr><name>widePath</name></expr></argument>,
            <argument><expr><name>FILE_APPEND_DATA</name></expr></argument>,
            <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>OPEN_ALWAYS</name></expr></argument>,
            <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, 
            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>hLogFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LPSTR</name></type> <name>messageBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>FormatMessageA</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator> <name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator> <name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><operator>&amp;</operator><name>messageBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not open logfile %s: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>widePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isStdout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
    
<function><type><name>void</name></type> <name>serverLogRaw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><literal type="string">".-*#"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwBytesWritten</name></decl>;</decl_stmt>
    <comment type="block">/* The complete message needs to be passed to WriteFile at once, to ensure
     * atomicity of log entries across processes.
     * So we format the complete message into a buffer first.
     * Any output that doesn't fit the size of this buffer will be truncated.
     */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>completeMessage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>completeMessageLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rawmode</name> <init>= <expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <name>LL_RAW</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>level</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> <comment type="block">/* clear flags */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>verbosity</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>hLogFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rawmode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>completeMessage</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>completeMessageLength</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>time_t</name></type> <name>secs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>usecs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type> <name>now</name></decl> ;</decl_stmt>

        <expr_stmt><expr><name>completeMessage</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name>secs</name> <operator>=</operator> <call><name>gettimeofdaysecs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>usecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><literal type="string">"[%d] "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>_getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>vlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><literal type="string">"%d %b %H:%M:%S."</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>vlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><literal type="string">"%03d %c "</literal></expr></argument>, <argument><expr><name>usecs</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>vlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>vlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>completeMessageLength</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name>vlen</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <comment type="block">/* The MS CRT implementation of vsnprintf/snprintf returns -1 if the formatted output doesn't fit the buffer,
            * in addition to when an encoding error occurs. Proceeding with a zero-terminated ellipsis at the end of the
            * buffer seems a better option than not logging this message at all.
            */</comment>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ellipsisWithNewLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ellipsisWithNewLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ellipsisWithNewLine</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>completeMessageLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>hLogFile</name></expr></argument>, <argument><expr><name>completeMessage</name></expr></argument>, <argument><expr><name>completeMessageLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwBytesWritten</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* FlushFileBuffers() ensures that all data and metadata is written to disk, but it's effect
     * on performance is severe.
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FLUSH_LOG_WRITES</name></cpp:ifdef>
    <expr_stmt><expr><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>hLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>IsEventLogEnabled</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>WriteEventLog</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Like serverLogRaw() but with printf-alike support. This is the function that
 * is used across the code. The raw version is only used in order to dump
 * the INFO output on crash. */</comment>
<function><type><name>void</name></type> <name>serverLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>LOG_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vlen</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator> <operator>&lt;</operator> <name>verbosity</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* The MS CRT implementation of vsnprintf/snprintf returns -1 if the formatted output doesn't fit the buffer,
     * in addition to when an encoding error occurs. Proceeding with a zero-terminated ellipsis at the end of the
     * buffer seems a better option than not logging this message at all.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>vlen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ellipsis</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ellipsis</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ellipsis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>serverLogRaw</name><argument_list>(<argument><expr><name>level</name></expr></argument>,<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Log a fixed message without printf-alike capabilities, in a way that is
 * safe to call from a signal handler.
 *
 * We actually use this only for signals that are not fatal from the point
 * of view of Redis. Signals that are going to kill the server anyway and
 * where we need printf-alike features are served by serverLog(). */</comment>
<function><type><name>void</name></type> <name>serverLogFromHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>





</unit>
