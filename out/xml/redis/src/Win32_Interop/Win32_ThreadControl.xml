<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_ThreadControl.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>volatile</specifier> <name>LONG</name></type> <name>g_NumWorkerThreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Safe mode means the threads are not touching the heap, or they are suspended because of an explicit suspension request</comment>
<comment type="line">// Threads in safe mode because they are not touching the heap will block if trying to transition to unsafe mode while a suspension is requested</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>LONG</name></type> <name>g_NumWorkerThreadsInSafeMode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>LONG</name></type> <name>g_SuspensionRequested</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>g_hResumeFromSuspension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>g_ThreadControlMutex</name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>InitThreadControl</name><parameter_list>()</parameter_list> <block>{<block_content>    
    <expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_hResumeFromSuspension</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_hResumeFromSuspension</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>IncrementWorkerThreadCount</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_NumWorkerThreads</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DecrementWorkerThreadCount</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_NumWorkerThreads</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// Returns TRUE if threads are already in safe mode or suspended</comment>
<function><type><name>BOOL</name></type> <name>SuspensionCompleted</name><parameter_list>()</parameter_list> <block>{<block_content> 
    <decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>g_NumWorkerThreadsInSafeMode</name> <operator>==</operator> <name>g_NumWorkerThreads</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// This is meant to be called from the main thread only. </comment>
<function><type><name>void</name></type> <name>RequestSuspension</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_SuspensionRequested</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ResetEvent</name><argument_list>(<argument><expr><name>g_hResumeFromSuspension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>_InterlockedOr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_SuspensionRequested</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ResumeFromSuspension</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// This is meant to be called from the main thread only. </comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>g_SuspensionRequested</name> <operator>&amp;&amp;</operator> <call><name>SuspensionCompleted</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>_InterlockedAnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_SuspensionRequested</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEvent</name><argument_list>(<argument><expr><name>g_hResumeFromSuspension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>WorkerThread_EnterSafeMode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_NumWorkerThreadsInSafeMode</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>WorkerThread_ExitSafeMode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_SuspensionRequested</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>g_hResumeFromSuspension</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>g_NumWorkerThreadsInSafeMode</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_ThreadControlMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
