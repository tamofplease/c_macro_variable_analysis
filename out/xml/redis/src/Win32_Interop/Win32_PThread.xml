<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_PThread.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_PThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_ThreadControl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIS_THREAD_STACK_SIZE</name></cpp:macro> <cpp:value>(1024*1024*4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE_PARAM_IS_A_RESERVATION</name></cpp:macro>   <cpp:value>0x00010000</cpp:value></cpp:define>    <comment type="line">// Threads only</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNUSED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) V)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Proxy structure to pass func and arg to thread */</comment>
<typedef>typedef <type><struct>struct <name>thread_params</name> <block>{
    <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>thread_params</name>;</typedef>

<comment type="block">/* Proxy function by windows thread requirements */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>win32_proxy_threadproc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>IncrementWorkerThreadCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>__try</name></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>thread_params</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>thread_params</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Dealocate params */</comment>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>__finally</name></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>DecrementWorkerThreadCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>_endthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_create</name><parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>thread_params</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><operator>(</operator><name>thread_params</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>thread_params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>start_routine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,                              <comment type="block">/* Security not used */</comment>
                                <argument><expr><name>REDIS_THREAD_STACK_SIZE</name></expr></argument>,           <comment type="block">/* Set custom stack size */</comment>
                                <argument><expr><name>win32_proxy_threadproc</name></expr></argument>,            <comment type="block">/* calls win32 stdcall proxy */</comment>
                                <argument><expr><name>params</name></expr></argument>,                            <comment type="block">/* real threadproc is passed as paremeter */</comment>
                                <argument><expr><name>STACK_SIZE_PARAM_IS_A_RESERVATION</name></expr></argument>, <comment type="block">/* reserve stack */</comment>
                                <argument><expr><name>thread</name></expr></argument>                             <comment type="block">/* returned thread id */</comment>
                                )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Noop in Windows */</comment>
<function><type><name>int</name></type> <name>pthread_detach</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>pthread_t</name></type> <name>pthread_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_sigmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>oset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>how</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SIG_BLOCK</name></expr>:</case>
        <case>case <expr><name>SIG_UNBLOCK</name></expr>:</case>
        <case>case <expr><name>SIG_SETMASK</name></expr>:</case>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>win32_pthread_join</name><parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenThread</name><argument_list>(<argument><expr><name>SYNCHRONIZE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>*</operator><name>thread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>value_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>WAIT_ABANDONED</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_cond_init</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>was_broadcast</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>sema</name></name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cond</name><operator>-&gt;</operator><name>sema</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>continue_broadcast</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,    <comment type="block">/* security */</comment>
                                           <argument><expr><name>FALSE</name></expr></argument>,   <comment type="block">/* auto-reset */</comment>
                                           <argument><expr><name>FALSE</name></expr></argument>,   <comment type="block">/* not signaled */</comment>
                                           <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* name */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cond</name><operator>-&gt;</operator><name>continue_broadcast</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_cond_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>continue_broadcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_cond_wait</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>last_waiter</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
    * Unlock external mutex and wait for signal.
    * NOTE: we've held mutex locked long enough to increment
    * waiters count above, so there's no problem with
    * leaving mutex unlocked before we wait on semaphore.
    */</comment>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Let's wait - ignore return value */</comment>
    <expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
    * Decrease waiters count. If we are the last waiter, then we must
    * notify the broadcasting thread that it can continue.
    * But if we continued due to cond_signal, we do not have to do that
    * because the signaling thread knows that only one waiter continued.
    */</comment>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_waiter</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>was_broadcast</name></name> <operator>&amp;&amp;</operator> <name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>last_waiter</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
        * cond_broadcast was issued while mutex was held. This means
        * that all other waiters have continued, but are contending
        * for the mutex at the end of this function because the
        * broadcasting thread did not leave cond_broadcast, yet.
        * (This is so that it can be sure that each waiter has
        * consumed exactly one slice of the semaphor.)
        * The last waiter must tell the broadcasting thread that it
        * can go on.
        */</comment>
        <expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>continue_broadcast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        * Now we go on to contend with all other waiters for
        * the mutex. Auf in den Kampf!
        */</comment>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Lock external mutex again */</comment>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
* IMPORTANT: This implementation requires that pthread_cond_signal
* is called while the mutex is held that is used in the corresponding
* pthread_cond_wait calls!
*/</comment>
<function><type><name>int</name></type> <name>pthread_cond_signal</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>have_waiters</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>have_waiters</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>waiters</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>waiters_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Signal only when there are waiters */</comment>
    <if_stmt><if>if <condition>(<expr><name>have_waiters</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>sema</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
        <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">//TODO</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
