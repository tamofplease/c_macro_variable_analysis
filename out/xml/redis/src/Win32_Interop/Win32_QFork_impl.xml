<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_QFork_impl.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"..\server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Portability.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>SetupRedisGlobals</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>redisData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>redisDataSize</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dictHashSeed</name></decl></parameter>, <parameter><decl><type><name>LPVOID</name></type> <name>redisModules</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_QFORKIMPL</name></cpp:ifndef>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><name>redisData</name></expr></argument>, <argument><expr><name>redisDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dictSetHashFunctionSeed</name><argument_list>(<argument><expr><name>dictHashSeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>modules</name> <operator>=</operator> <operator>(</operator><name>dict</name><operator>*</operator><operator>)</operator> <name>redisModules</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_rdbSave</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_QFORKIMPL</name></cpp:ifndef>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>rdbSaveInfo</name></type> <name>rsi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rsiptr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rsiptr</name> <operator>=</operator> <call><name>rdbPopulateSaveInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>rdbSave</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>rsiptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>,<argument><expr><literal type="string">"rdbSave failed in qfork: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_aofSave</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aof_pipe_read_ack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aof_pipe_read_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aof_pipe_write_ack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_QFORKIMPL</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>rewriteAppendOnlyFile</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_child_pid</name></name> <operator>=</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_pipe_write_ack_to_parent</name></name> <operator>=</operator> <name>aof_pipe_write_ack</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_pipe_read_ack_from_parent</name></name> <operator>=</operator> <name>aof_pipe_read_ack</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_pipe_read_data_from_parent</name></name> <operator>=</operator> <name>aof_pipe_read_data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_pipe_read_ack_from_child</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_pipe_write_ack_to_child</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>aof_pipe_write_data_to_child</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rewriteAppendOnlyFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>serverLog</name><argument_list>(<argument><expr><name>LL_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rewriteAppendOnlyFile failed in qfork: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>C_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>rdbSaveRioWithEOFMark</name><parameter_list>(<parameter><decl><type><name>rio</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// This function is meant to be an exact replica of the fork() child path in rdbSaveToSlavesSockets</comment>
<function><type><name>int</name></type> <name>do_rdbSaveToSlavesSockets</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numfds</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>clientids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_QFORKIMPL</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rio</name></type> <name>slave_sockets</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_child_pid</name></name> <operator>=</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rioInitWithFdset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>,<argument><expr><name>fds</name></expr></argument>,<argument><expr><name>numfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// On Windows we need to use the fds after do_socketSave2 has finished</comment>
    <comment type="line">// so we don't free them here, moreover since we allocate the fds in</comment>
    <comment type="line">// QFork.cpp it's better to use malloc instead of zmalloc.</comment>
    <macro><name>POSIX_ONLY</name><argument_list>(<argument>zfree(fds);</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="line">// On Windows we haven't duplicated the listening sockets so we shouldn't close them</comment>
    <macro><name>POSIX_ONLY</name><argument_list>(<argument>closeListeningSockets(<literal type="number">0</literal>);</argument>)</argument_list></macro>

    <expr_stmt><expr><call><name>redisSetProcTitle</name><argument_list>(<argument><expr><literal type="string">"redis-rdb-to-slaves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rdbSaveRioWithEOFMark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name> <operator>&amp;&amp;</operator> <call><name>rioFlush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slave_sockets</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>C_OK</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>private_dirty</name> <init>= <expr><call><name>zmalloc_get_private_dirty</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
        <if_stmt><if>if <condition>(<expr><name>private_dirty</name></expr>)</condition> <block>{<block_content>
            <macro><name>serverLog</name><argument_list>(<argument>LL_NOTICE</argument>,
                <argument><literal type="string">"RDB: %Iu MB of memory used by copy-on-write"</literal></argument>,                  <argument>WIN_PORT_FIX <comment type="block">/* %zu -&gt; %Iu */</comment>
                private_dirty/(<literal type="number">1024</literal>*<literal type="number">1024</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if></if_stmt>
    
        <comment type="block">/* If we are returning OK, at least one slave was served
         * with the RDB file as expected, so we need to send a report
         * to the parent via the pipe. The format of the message is:
         *
         * &lt;len&gt; &lt;slave[0].id&gt; &lt;slave[0].error&gt; ...
         *
         * len, slave IDs, and slave errors, are all uint64_t integers,
         * so basically the reply is composed of 64 bits for the len field
         * plus 2 additional 64 bit integers for each entry, for a total
         * of 'len' entries.
         *
         * The 'id' represents the slave's client ID, so that the master
         * can match the report with a specific slave, and 'error' is
         * set to 0 if the replication process terminated with a success
         * or the error code if an error occurred. */</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>numfds</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>len</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ids</name> <init>= <expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>msglen</name></decl>;</decl_stmt>
    
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>numfds</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numfds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ids</name><operator>++</operator> <operator>=</operator> <name><name>clientids</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>ids</name><operator>++</operator> <operator>=</operator> <name><name>slave_sockets</name><operator>.</operator><name>io</name><operator>.</operator><name>fdset</name><operator>.</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    
        <comment type="block">/* Write the message to the parent. If we have no good slaves or
         * we are unable to transfer the message to the parent, we exit
         * with an error so that the parent will abort the replication
         * process with all the childre that were waiting. */</comment>
        <expr_stmt><expr><name>msglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>numfds</name><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>write</name><argument_list>(<argument><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_write_result_to_parent</name></name></expr></argument>,<argument><expr><name>msg</name></expr></argument>,<argument><expr><name>msglen</name></expr></argument>)</argument_list></call>
            <operator>!=</operator> <name>msglen</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>C_ERR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>C_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_socketSave</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numfds</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>clientids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pipe_write_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>.</operator><name>rdb_pipe_write_result_to_parent</name></name> <operator>=</operator> <name>pipe_write_fd</name></expr>;</expr_stmt>
    <return>return <expr><call><name>do_rdbSaveToSlavesSockets</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>numfds</name></expr></argument>, <argument><expr><name>clientids</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
