<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/win32_wsiocp.c"><comment type="block">/*
 * Copyright (c), Microsoft Open Technologies, Inc.
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32fixes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"..\ae.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"..\adlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mswsock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_wsiocp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_FDAPI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>iocph</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCEEDED_WITH_IOCP</name><parameter_list>(<parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((result) || (GetLastError() == ERROR_IO_PENDING))</cpp:value></cpp:define>

<comment type="block">/* For zero length reads use shared buf */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>wsarecvflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>zreadchar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>iocpSockState</name><modifier>*</modifier></type> <name>WSIOCP_GetExistingSocketState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name><modifier>*</modifier><modifier>*</modifier></type> <name>socketState</name> <init>= <expr><operator>(</operator><name>iocpSockState</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>FDAPI_GetSocketStatePtr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>socketState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>*</operator><name>socketState</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Get the socket state. Create if not found. */</comment>
<function><type><name>iocpSockState</name><modifier>*</modifier></type> <name>WSIOCP_GetSocketState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name><modifier>*</modifier><modifier>*</modifier></type> <name>socketState</name> <init>= <expr><operator>(</operator><name>iocpSockState</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>FDAPI_GetSocketStatePtr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>socketState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>socketState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Not found. Do lazy create of socket state.</comment>
            <expr_stmt><expr><operator>*</operator><name>socketState</name> <operator>=</operator> <operator>(</operator><name>iocpSockState</name> <operator>*</operator><operator>)</operator> <call><name>CallocMemoryNoCOW</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iocpSockState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>socketState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>socketState</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>*</operator><name>socketState</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Closes the socket state or sets the CLOSE_PENDING mask bit.
 * Returns TRUE if closed, FALSE if pending. */</comment>
<function><type><name>BOOL</name></type> <name>WSIOCP_CloseSocketState</name><parameter_list>(<parameter><decl><type><name>iocpSockState</name><modifier>*</modifier></type> <name>socketState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>socketState</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SOCKET_ATTACHED</name> <operator>|</operator> <name>AE_WRITABLE</name> <operator>|</operator> <name>AE_READABLE</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>socketState</name><operator>-&gt;</operator><name>wreqs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>socketState</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <operator>(</operator><name>READ_QUEUED</name> <operator>|</operator> <name>CONNECT_PENDING</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>socketState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>socketState</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>CLOSE_PENDING</name></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>BOOL</name></type> <name>WSIOCP_CloseSocketStateRFD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rfd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>WSIOCP_CloseSocketState</name><argument_list>(<argument><expr><call><name>WSIOCP_GetExistingSocketState</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For each asynch socket, need to associate completion port */</comment>
<function><type><name>int</name></type> <name>WSIOCP_SocketAttach</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>socketState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>socketState</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>socketState</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>iocph</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>socketState</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>FDAPI_SocketAttachIOCP</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iocph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>socketState</name><operator>-&gt;</operator><name>masks</name></name> <operator>=</operator> <name>SOCKET_ATTACHED</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>socketState</name><operator>-&gt;</operator><name>wreqs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ACCEPTEX_ADDRESS_BUFFER_SIZE</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>WSIOCP_QueueAccept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>listenfd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>accsockstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>acceptfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aacceptreq</name> <modifier>*</modifier></type> <name>areq</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>acceptfd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>acceptfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>accsockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>acceptfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>accsockstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>accsockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>=</operator> <name>SOCKET_ATTACHED</name></expr>;</expr_stmt>
    <comment type="line">// Keep accept socket in buf len until accepted</comment>
    <expr_stmt><expr><name>areq</name> <operator>=</operator> <operator>(</operator><name>aacceptreq</name> <operator>*</operator><operator>)</operator> <call><name>CallocMemoryNoCOW</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aacceptreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>CallocMemoryNoCOW</name><argument_list>(<argument><expr><name>ACCEPTEX_ADDRESS_BUFFER_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>accept</name></name> <operator>=</operator> <name>acceptfd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_AcceptEx</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>, <argument><expr><name>acceptfd</name></expr></argument>,
                            <argument><expr><name><name>areq</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                            <argument><expr><name>ACCEPTEX_ADDRESS_BUFFER_SIZE</name></expr></argument>,
                            <argument><expr><name>ACCEPTEX_ADDRESS_BUFFER_SIZE</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>areq</name><operator>-&gt;</operator><name>ov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED_WITH_IOCP</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>ACCEPT_PENDING</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACCEPT_PENDING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>accsockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>acceptfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name><name>areq</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Listen using extension function to get faster accepts */</comment>
<function><type><name>int</name></type> <name>WSIOCP_Listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name> <init>= <expr><call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sockstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_SocketAttach</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>, <argument><expr><name>sockstate</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>LISTEN_SOCK</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_QueueAccept</name><argument_list>(<argument><expr><name>rfd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the queued accept socket */</comment>
<function><type><name>int</name></type> <name>WSIOCP_Accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>acceptfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SOCKADDR</name> <modifier>*</modifier></type><name>plocalsa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SOCKADDR</name> <modifier>*</modifier></type><name>premotesa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>locallen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remotelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aacceptreq</name> <modifier>*</modifier></type> <name>areq</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>areq</name> <operator>=</operator> <name><name>sockstate</name><operator>-&gt;</operator><name>reqs</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>areq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name><name>areq</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>acceptfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>areq</name><operator>-&gt;</operator><name>accept</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_UpdateAcceptContext</name><argument_list>(<argument><expr><name>acceptfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name><name>areq</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FDAPI_GetAcceptExSockaddrs</name><argument_list>(<argument><expr><name>acceptfd</name></expr></argument>,
                               <argument><expr><name><name>areq</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
                               <argument><expr><literal type="number">0</literal></expr></argument>,
                               <argument><expr><name>ACCEPTEX_ADDRESS_BUFFER_SIZE</name></expr></argument>,
                               <argument><expr><name>ACCEPTEX_ADDRESS_BUFFER_SIZE</name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name>plocalsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>locallen</name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name>premotesa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remotelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sa</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>remotelen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>remotelen</name> <operator>&lt;</operator> <operator>*</operator><name>len</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>remotelen</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>premotesa</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>WSIOCP_SocketAttach</name><argument_list>(<argument><expr><name>acceptfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name><name>areq</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Queue another accept</comment>
    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_QueueAccept</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>acceptfd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* After doing a read, the caller needs to call this method in
 * order to continue to check for read events.
 * This is not necessary if the caller will delete read events */</comment>
<function><type><name>int</name></type> <name>WSIOCP_QueueNextRead</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WSABUF</name></type> <name>zreadbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>bytesReceived</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>recvFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>SOCKET_ATTACHED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Use zero length read with overlapped to get notification</comment>
    <comment type="line">// of when data is available</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>zreadbuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>zreadchar</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zreadbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_WSARecv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>zreadbuf</name></expr></argument>,
                           <argument><expr><literal type="number">1</literal></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>bytesReceived</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>recvFlags</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED_WITH_IOCP</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>READ_QUEUED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>READ_QUEUED</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wrapper for send.
 * Enables use of WSA Send to get IOCP notification of completion.
 * Returns -1 with errno = WSA_IO_PENDING if callback will be invoked later */</comment>
<function><type><name>int</name></type> <name>WSIOCP_SocketSend</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>,
                      <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>asendreq</name> <modifier>*</modifier></type><name>areq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>bytesSent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sockstate</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>CONNECT_PENDING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>aeWait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>AE_WRITABLE</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If not an async socket, do normal send</comment>
    <if_stmt><if>if <condition>(<expr><name>sockstate</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <operator>(</operator><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>&amp;</operator> <name>SOCKET_ATTACHED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <name>proc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Use overlapped structure to send using IOCP</comment>
    <expr_stmt><expr><name>areq</name> <operator>=</operator> <operator>(</operator><name>asendreq</name> <operator>*</operator><operator>)</operator> <call><name>CallocMemoryNoCOW</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>asendreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>wbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>wbuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>eventLoop</name></name> <operator>=</operator> <operator>(</operator><name>aeEventLoop</name> <operator>*</operator><operator>)</operator> <name>eventLoop</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>areq</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <operator>(</operator><name>aeFileProc</name> <operator>*</operator><operator>)</operator> <name>proc</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_WSASend</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>areq</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>,
                           <argument><expr><literal type="number">1</literal></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>bytesSent</name></expr></argument>,
                           <argument><expr><literal type="number">0</literal></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>areq</name><operator>-&gt;</operator><name>ov</name></name></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
    <if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED_WITH_IOCP</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSA_IO_PENDING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>wreqs</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>listAddNodeTail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>wreqlist</name></name></expr></argument>, <argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeMemoryNoCOW</name><argument_list>(<argument><expr><name>areq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For non-blocking connect with IOCP */</comment>
<function><type><name>int</name></type> <name>WSIOCP_SocketConnect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SOCKADDR_STORAGE</name> <modifier>*</modifier></type><name>socketAddrStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>wsaid_connectex</name> <init>= <expr><name>WSAID_CONNECTEX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_SocketAttach</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sockstate</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">// Need to bind sock before connectex</comment>
    <switch>switch <condition>(<expr><name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AF_INET</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SOCKADDR_IN</name></type> <name>addr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOCKADDR_IN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>S_un</name><operator>.</operator><name>S_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKADDR</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_ConnectEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
                                     <argument><expr><operator>(</operator><name>SOCKADDR</name><operator>*</operator><operator>)</operator> <name>socketAddrStorage</name></expr></argument>,
                                     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOCKADDR_IN</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AF_INET6</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SOCKADDR_IN6</name></type> <name>addr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOCKADDR_IN6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>u</name><operator>.</operator><name>Byte</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKADDR</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_ConnectEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
                                     <argument><expr><operator>(</operator><name>SOCKADDR</name><operator>*</operator><operator>)</operator> <name>socketAddrStorage</name></expr></argument>,
                                     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SOCKADDR_IN6</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
            <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSA_IO_PENDING</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>CONNECT_PENDING</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>WSIOCP_SocketConnectBind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SOCKADDR_STORAGE</name> <modifier>*</modifier></type><name>socketAddrStorage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>source_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>wsaid_connectex</name> <init>= <expr><name>WSAID_CONNECTEX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iocpSockState</name> <modifier>*</modifier></type><name>sockstate</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockstate</name> <operator>=</operator> <call><name>WSIOCP_GetSocketState</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>WSIOCP_SocketAttach</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>sockstate</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Need to bind sock before connectex</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>storageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AF_INET</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>storageSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SOCKADDR_IN</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SOCKADDR_IN</name></type> <name>addr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>storageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>S_un</name><operator>.</operator><name>S_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKADDR</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AF_INET6</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>storageSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SOCKADDR_IN6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SOCKADDR_IN6</name></type> <name>addr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>storageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>u</name><operator>.</operator><name>Byte</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKADDR</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>socketAddrStorage</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSAEINVAL</name></expr>;</expr_stmt>
            <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_ConnectEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>LPSOCKADDR</name><operator>)</operator> <name>socketAddrStorage</name></expr></argument>,
                             <argument><expr><name>storageSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockstate</name><operator>-&gt;</operator><name>ov_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FDAPI_WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>WSA_IO_PENDING</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sockstate</name><operator>-&gt;</operator><name>masks</name></name> <operator>|=</operator> <name>CONNECT_PENDING</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            <return>return <expr><name>SOCKET_ERROR</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>WSIOCP_Init</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>iocp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>iocph</name> <operator>=</operator> <name>iocp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FDAPI_SetCloseSocketState</name><argument_list>(<argument><expr><name>WSIOCP_CloseSocketStateRFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>WSIOCP_Cleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>iocph</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>privateheap</name></decl>;</decl_stmt>

<function><type><name>void</name><modifier>*</modifier></type> <name>CallocMemoryNoCOW</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>privateheap</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>privateheap</name> <operator>=</operator> <call><name>HeapCreate</name><argument_list>(<argument><expr><name>HEAP_GENERATE_EXCEPTIONS</name> <operator>|</operator> <name>HEAP_NO_SERIALIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>HeapAlloc</name><argument_list>(<argument><expr><name>privateheap</name></expr></argument>, <argument><expr><name>HEAP_ZERO_MEMORY</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeMemoryNoCOW</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><name>privateheap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
