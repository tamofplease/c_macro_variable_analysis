<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/Win32_Interop/Win32_ANSI.c"><comment type="block">/*
* Copyright (c), Microsoft Open Technologies, Inc.
* All rights reserved.
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*  - Redistributions of source code must retain the above copyright notice,
*    this list of conditions and the following disclaimer.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/</comment>

<comment type="block">/* Derived from ANSI.c by Jason Hood, from his ansicon project (https://github.com/adoxa/ansicon), with modifications. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_ANSI.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lenof</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(array)/sizeof(*(array)))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>BYTE</name></type> <name>foreground</name></decl>;</decl_stmt>	<comment type="line">// ANSI base color (0 to 7; add 30)</comment>
    <decl_stmt><decl><type><name>BYTE</name></type> <name>background</name></decl>;</decl_stmt>	<comment type="line">// ANSI base color (0 to 7; add 40)</comment>
    <decl_stmt><decl><type><name>BYTE</name></type> <name>bold</name></decl>;</decl_stmt>	<comment type="line">// console FOREGROUND_INTENSITY bit</comment>
    <decl_stmt><decl><type><name>BYTE</name></type> <name>underline</name></decl>;</decl_stmt>	<comment type="line">// console BACKGROUND_INTENSITY bit</comment>
    <decl_stmt><decl><type><name>BYTE</name></type> <name>rvideo</name></decl>;</decl_stmt>	<comment type="line">// swap foreground/bold &amp; background/underline</comment>
    <decl_stmt><decl><type><name>BYTE</name></type> <name>concealed</name></decl>;</decl_stmt>	<comment type="line">// set foreground/bold to background/underline</comment>
    <decl_stmt><decl><type><name>BYTE</name></type> <name>reverse</name></decl>;</decl_stmt> <comment type="line">// swap console foreground &amp; background attributes</comment>
}</block></struct></type> <name>GRM</name><operator>,</operator> *<name>PGRM</name>;</typedef>	<comment type="line">// Graphic Rendition Mode</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_digit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('0' &lt;= (c) &amp;&amp; (c) &lt;= '9')</cpp:value></cpp:define>

<comment type="line">// ========== Global variables and constants</comment>

<decl_stmt><decl><type><name>HANDLE</name></type>	  <name>hConOut</name></decl>;</decl_stmt>		<comment type="line">// handle to CONOUT$</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESC</name></cpp:macro>	<cpp:value>'\x1B'</cpp:value></cpp:define>          <comment type="line">// ESCape character</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEL</name></cpp:macro>	<cpp:value>'\x07'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO</name></cpp:macro>	<cpp:value>'\x0E'</cpp:value></cpp:define>          <comment type="line">// Shift Out</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI</name></cpp:macro>	<cpp:value>'\x0F'</cpp:value></cpp:define>          <comment type="line">// Shift In</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ARG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>		<comment type="line">// max number of args in an escape sequence</comment>
<decl_stmt><decl><type><name>int</name></type>   <name>state</name></decl>;</decl_stmt>			<comment type="line">// automata state</comment>
<decl_stmt><decl><type><name>TCHAR</name></type> <name>prefix</name></decl>;</decl_stmt>			<comment type="line">// escape sequence prefix ( '[', ']' or '(' );</comment>
<decl_stmt><decl><type><name>TCHAR</name></type> <name>prefix2</name></decl>;</decl_stmt>			<comment type="line">// secondary prefix ( '?' or '&gt;' );</comment>
<decl_stmt><decl><type><name>TCHAR</name></type> <name>suffix</name></decl>;</decl_stmt>			<comment type="line">// escape sequence suffix</comment>
<decl_stmt><decl><type><name>int</name></type>   <name>es_argc</name></decl>;</decl_stmt>			<comment type="line">// escape sequence args count</comment>
<decl_stmt><decl><type><name>int</name></type>   <name><name>es_argv</name><index>[<expr><name>MAX_ARG</name></expr>]</index></name></decl>;</decl_stmt> 	<comment type="line">// escape sequence args</comment>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>Pt_arg</name><index>[<expr><name>MAX_PATH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line">// text parameter for Operating System Command</comment>
<decl_stmt><decl><type><name>int</name></type>   <name>Pt_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type>  <name>shifted</name></decl>;</decl_stmt>


<comment type="line">// DEC Special Graphics Character Set from</comment>
<comment type="line">// http://vt100.net/docs/vt220-rm/table2-4.html</comment>
<comment type="line">// Some of these may not look right, depending on the font and code page (in</comment>
<comment type="line">// particular, the Control Pictures probably won't work at all).</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name></type> <name><name>G1</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><literal type="char">' '</literal></expr>,          <comment type="line">// _ - blank</comment>
    <expr><name>L</name><literal type="char">'\x2666'</literal></expr>,    <comment type="line">// ` - Black Diamond Suit</comment>
    <expr><name>L</name><literal type="char">'\x2592'</literal></expr>,    <comment type="line">// a - Medium Shade</comment>
    <expr><name>L</name><literal type="char">'\x2409'</literal></expr>,    <comment type="line">// b - HT</comment>
    <expr><name>L</name><literal type="char">'\x240c'</literal></expr>,    <comment type="line">// c - FF</comment>
    <expr><name>L</name><literal type="char">'\x240d'</literal></expr>,    <comment type="line">// d - CR</comment>
    <expr><name>L</name><literal type="char">'\x240a'</literal></expr>,    <comment type="line">// e - LF</comment>
    <expr><name>L</name><literal type="char">'\x00b0'</literal></expr>,    <comment type="line">// f - Degree Sign</comment>
    <expr><name>L</name><literal type="char">'\x00b1'</literal></expr>,    <comment type="line">// g - Plus-Minus Sign</comment>
    <expr><name>L</name><literal type="char">'\x2424'</literal></expr>,    <comment type="line">// h - NL</comment>
    <expr><name>L</name><literal type="char">'\x240b'</literal></expr>,    <comment type="line">// i - VT</comment>
    <expr><name>L</name><literal type="char">'\x2518'</literal></expr>,    <comment type="line">// j - Box Drawings Light Up And Left</comment>
    <expr><name>L</name><literal type="char">'\x2510'</literal></expr>,    <comment type="line">// k - Box Drawings Light Down And Left</comment>
    <expr><name>L</name><literal type="char">'\x250c'</literal></expr>,    <comment type="line">// l - Box Drawings Light Down And Right</comment>
    <expr><name>L</name><literal type="char">'\x2514'</literal></expr>,    <comment type="line">// m - Box Drawings Light Up And Right</comment>
    <expr><name>L</name><literal type="char">'\x253c'</literal></expr>,    <comment type="line">// n - Box Drawings Light Vertical And Horizontal</comment>
    <expr><name>L</name><literal type="char">'\x00af'</literal></expr>,    <comment type="line">// o - SCAN 1 - Macron</comment>
    <expr><name>L</name><literal type="char">'\x25ac'</literal></expr>,    <comment type="line">// p - SCAN 3 - Black Rectangle</comment>
    <expr><name>L</name><literal type="char">'\x2500'</literal></expr>,    <comment type="line">// q - SCAN 5 - Box Drawings Light Horizontal</comment>
    <expr><name>L</name><literal type="char">'_'</literal></expr>,         <comment type="line">// r - SCAN 7 - Low Line</comment>
    <expr><name>L</name><literal type="char">'_'</literal></expr>,         <comment type="line">// s - SCAN 9 - Low Line</comment>
    <expr><name>L</name><literal type="char">'\x251c'</literal></expr>,    <comment type="line">// t - Box Drawings Light Vertical And Right</comment>
    <expr><name>L</name><literal type="char">'\x2524'</literal></expr>,    <comment type="line">// u - Box Drawings Light Vertical And Left</comment>
    <expr><name>L</name><literal type="char">'\x2534'</literal></expr>,    <comment type="line">// v - Box Drawings Light Up And Horizontal</comment>
    <expr><name>L</name><literal type="char">'\x252c'</literal></expr>,    <comment type="line">// w - Box Drawings Light Down And Horizontal</comment>
    <expr><name>L</name><literal type="char">'\x2502'</literal></expr>,    <comment type="line">// x - Box Drawings Light Vertical</comment>
    <expr><name>L</name><literal type="char">'\x2264'</literal></expr>,    <comment type="line">// y - Less-Than Or Equal To</comment>
    <expr><name>L</name><literal type="char">'\x2265'</literal></expr>,    <comment type="line">// z - Greater-Than Or Equal To</comment>
    <expr><name>L</name><literal type="char">'\x03c0'</literal></expr>,    <comment type="line">// { - Greek Small Letter Pi</comment>
    <expr><name>L</name><literal type="char">'\x2260'</literal></expr>,    <comment type="line">// | - Not Equal To</comment>
    <expr><name>L</name><literal type="char">'\x00a3'</literal></expr>,    <comment type="line">// } - Pound Sign</comment>
    <expr><name>L</name><literal type="char">'\x00b7'</literal></expr>,    <comment type="line">// ~ - Middle Dot</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_G1</name></cpp:macro> <cpp:value>'_'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_G1</name></cpp:macro>  <cpp:value>'~'</cpp:value></cpp:define>


<comment type="line">// color constants</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_BLACK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_WHITE</name></cpp:macro> <cpp:value>FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_BLACK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_WHITE</name></cpp:macro> <cpp:value>BACKGROUND_RED|BACKGROUND_GREEN|BACKGROUND_BLUE</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name></type> <name><name>foregroundcolor</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><name>FOREGROUND_BLACK</name></expr>,			<comment type="line">// black foreground</comment>
    <expr><name>FOREGROUND_RED</name></expr>,			<comment type="line">// red foreground</comment>
    <expr><name>FOREGROUND_GREEN</name></expr>,			<comment type="line">// green foreground</comment>
    <expr><name>FOREGROUND_RED</name> <operator>|</operator> <name>FOREGROUND_GREEN</name></expr>,	<comment type="line">// yellow foreground</comment>
    <expr><name>FOREGROUND_BLUE</name></expr>,			<comment type="line">// blue foreground</comment>
    <expr><name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_RED</name></expr>,	<comment type="line">// magenta foreground</comment>
    <expr><name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_GREEN</name></expr>,	<comment type="line">// cyan foreground</comment>
    <expr><name>FOREGROUND_WHITE</name></expr>			<comment type="line">// white foreground</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name></type> <name><name>backgroundcolor</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><name>BACKGROUND_BLACK</name></expr>,			<comment type="line">// black background</comment>
    <expr><name>BACKGROUND_RED</name></expr>,			<comment type="line">// red background</comment>
    <expr><name>BACKGROUND_GREEN</name></expr>,			<comment type="line">// green background</comment>
    <expr><name>BACKGROUND_RED</name> <operator>|</operator> <name>BACKGROUND_GREEN</name></expr>,	<comment type="line">// yellow background</comment>
    <expr><name>BACKGROUND_BLUE</name></expr>,			<comment type="line">// blue background</comment>
    <expr><name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_RED</name></expr>,	<comment type="line">// magenta background</comment>
    <expr><name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_GREEN</name></expr>,	<comment type="line">// cyan background</comment>
    <expr><name>BACKGROUND_WHITE</name></expr>,			<comment type="line">// white background</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name></type> <name><name>attr2ansi</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=		<comment type="line">// map console attribute to ANSI number</comment>
<expr><block>{
    <expr><literal type="number">0</literal></expr>,					<comment type="line">// black</comment>
    <expr><literal type="number">4</literal></expr>,					<comment type="line">// blue</comment>
    <expr><literal type="number">2</literal></expr>,					<comment type="line">// green</comment>
    <expr><literal type="number">6</literal></expr>,					<comment type="line">// cyan</comment>
    <expr><literal type="number">1</literal></expr>,					<comment type="line">// red</comment>
    <expr><literal type="number">5</literal></expr>,					<comment type="line">// magenta</comment>
    <expr><literal type="number">3</literal></expr>,					<comment type="line">// yellow</comment>
    <expr><literal type="number">7</literal></expr>					<comment type="line">// white</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GRM</name></type> <name>grm</name></decl>;</decl_stmt>

<comment type="line">// saved cursor position</comment>
<decl_stmt><decl><type><name>COORD</name></type> <name>SavePos</name></decl>;</decl_stmt>

<comment type="line">// ========== Print Buffer functions</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type>   <name>nCharInBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>ChBuffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">//   FlushBuffer()</comment>
<comment type="line">// Writes the buffer to the console and empties it.</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>FlushBuffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>nWritten</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nCharInBuffer</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>WriteConsole</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>ChBuffer</name></expr></argument>, <argument><expr><name>nCharInBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWritten</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nCharInBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">//   PushBuffer( WCHAR c )</comment>
<comment type="line">// Adds a character in the buffer.</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>PushBuffer</name><parameter_list>(<parameter><decl><type><name>WCHAR</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>shifted</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <name>FIRST_G1</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>LAST_G1</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>G1</name><index>[<expr><name>c</name> <operator>-</operator> <name>FIRST_G1</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ChBuffer</name><index>[<expr><name>nCharInBuffer</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>nCharInBuffer</name> <operator>==</operator> <name>BUFFER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FlushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">//   SendSequence( LPTSTR seq )</comment>
<comment type="line">// Send the string to the input buffer.</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>SendSequence</name><parameter_list>(<parameter><decl><type><name>LPTSTR</name></type> <name>seq</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hStdIn</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>in</name><operator>.</operator><name>EventType</name></name> <operator>=</operator> <name>KEY_EVENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wRepeatCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualScanCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>seq</name></expr>;</condition> <incr><expr><operator>++</operator><name>seq</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>in</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>UnicodeChar</name></name> <operator>=</operator> <operator>*</operator><name>seq</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WriteConsoleInput</name><argument_list>(<argument><expr><name>hStdIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// ========== Print functions</comment>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">//   InterpretEscSeq()</comment>
<comment type="line">// Interprets the last escape sequence scanned by ParseAndPrintANSIString</comment>
<comment type="line">//   prefix             escape sequence prefix</comment>
<comment type="line">//   es_argc            escape sequence args count</comment>
<comment type="line">//   es_argv[]          escape sequence args array</comment>
<comment type="line">//   suffix             escape sequence suffix</comment>
<comment type="line">//</comment>
<comment type="line">// for instance, with \e[33;45;1m we have</comment>
<comment type="line">// prefix = '[',</comment>
<comment type="line">// es_argc = 3, es_argv[0] = 33, es_argv[1] = 45, es_argv[2] = 1</comment>
<comment type="line">// suffix = 'm'</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>InterpretEscSeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WORD</name></type> <name>attribut</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>Info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CONSOLE_CURSOR_INFO</name></type> <name>CursInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>NumberOfCharsWritten</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>COORD</name></type> <name>Pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>Rect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CHAR_INFO</name></type>  <name>CharInfo</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>prefix2</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>suffix</name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <name>suffix</name> <operator>==</operator> <literal type="char">'l'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>GetConsoleCursorInfo</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CursInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CursInfo</name><operator>.</operator><name>bVisible</name></name> <operator>=</operator> <operator>(</operator><name>suffix</name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorInfo</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CursInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Ignore any other \e[? or \e[&gt; sequences.</comment>
        <if_stmt><if>if <condition>(<expr><name>prefix2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>suffix</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'m'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>es_argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><literal type="number">30</literal> <operator>&lt;=</operator> <name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">37</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><literal type="number">40</literal> <operator>&lt;=</operator> <name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">47</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content> <switch>switch <condition>(<expr><name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">0</literal></expr>:</case>
                        <case>case <expr><literal type="number">39</literal></expr>:</case>
                        <case>case <expr><literal type="number">49</literal></expr>:</case>
                        <block>{<block_content>
                                   <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>def</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
                                   <decl_stmt><decl><type><name>int</name></type>   <name>a</name></decl>;</decl_stmt>
                                   <expr_stmt><expr><operator>*</operator><name>def</name> <operator>=</operator> <literal type="char">'7'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>def</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                                   <expr_stmt><expr><call><name>GetEnvironmentVariable</name><argument_list>(<argument><expr><literal type="string">L"ANSICON_DEF"</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><call><name>lenof</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>wcstol</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                                   <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                       <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                                       <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>-</operator><name>a</name></expr>;</expr_stmt>
                                   </block_content>}</block></if></if_stmt>
                                   <if_stmt><if>if <condition>(<expr><name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">49</literal></expr>)</condition><block type="pseudo"><block_content>
                                       <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>attr2ansi</name><index>[<expr><name>a</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                   <if_stmt><if>if <condition>(<expr><name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">39</literal></expr>)</condition><block type="pseudo"><block_content>
                                       <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>attr2ansi</name><index>[<expr><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                   <if_stmt><if>if <condition>(<expr><name><name>es_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                       <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                                           <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt>
                                           <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt>
                                       </block_content>}</block></if> <else>else <block>{<block_content>
                                           <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                           <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                       </block_content>}</block></else></if_stmt>
                                       <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>rvideo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                       <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>concealed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                   </block_content>}</block></if></if_stmt>
                        </block_content>}</block>
                            <break>break;</break>

                        <case>case  <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt> <break>break;</break>
                        <case>case  <expr><literal type="number">5</literal></expr>:</case> <comment type="line">// blink</comment>
                        <case>case  <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt> <break>break;</break>
                        <case>case  <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>rvideo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case  <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>concealed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">21</literal></expr>:</case> <comment type="line">// oops, this actually turns on double underline</comment>
                        <case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">25</literal></expr>:</case>
                        <case>case <expr><literal type="number">24</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">27</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>rvideo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">28</literal></expr>:</case> <expr_stmt><expr><name><name>grm</name><operator>.</operator><name>concealed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
                    </block_content>}</block></switch></block_content></block></else></if_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>concealed</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>rvideo</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>attribut</name> <operator>=</operator> <name><name>foregroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>foreground</name></name></expr>]</index></name>
                            <operator>|</operator> <name><name>backgroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>foreground</name></name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>bold</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>attribut</name> <operator>|=</operator> <name>FOREGROUND_INTENSITY</name> <operator>|</operator> <name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>attribut</name> <operator>=</operator> <name><name>foregroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>background</name></name></expr>]</index></name>
                            <operator>|</operator> <name><name>backgroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>background</name></name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>underline</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>attribut</name> <operator>|=</operator> <name>FOREGROUND_INTENSITY</name> <operator>|</operator> <name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>grm</name><operator>.</operator><name>rvideo</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>attribut</name> <operator>=</operator> <name><name>foregroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>background</name></name></expr>]</index></name>
                        <operator>|</operator> <name><name>backgroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>foreground</name></name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>bold</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>attribut</name> <operator>|=</operator> <name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>underline</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>attribut</name> <operator>|=</operator> <name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>attribut</name> <operator>=</operator> <name><name>foregroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>foreground</name></name></expr>]</index></name> <operator>|</operator> <name><name>grm</name><operator>.</operator><name>bold</name></name>
                    <operator>|</operator> <name><name>backgroundcolor</name><index>[<expr><name><name>grm</name><operator>.</operator><name>background</name></name></expr>]</index></name> <operator>|</operator> <name><name>grm</name><operator>.</operator><name>underline</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>grm</name><operator>.</operator><name>reverse</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>attribut</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>attribut</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>attribut</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>attribut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'J'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[J == ESC[0J</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <switch>switch <condition>(<expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case>		<comment type="line">// ESC[0J erase from cursor to end of display</comment>
                        <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name>
                            <operator>+</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>

                    <case>case <expr><literal type="number">1</literal></expr>:</case>		<comment type="line">// ESC[1J erase from start to cursor.</comment>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>*</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name>
                            <operator>+</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>

                    <case>case <expr><literal type="number">2</literal></expr>:</case>		<comment type="line">// ESC[2J Clear screen and home cursor</comment>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>

                    <default>default:</default>
                        <return>return;</return>
                </block_content>}</block></switch>

            <case>case <expr><literal type="char">'K'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[K == ESC[0K</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <switch>switch <condition>(<expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case>		<comment type="line">// ESC[0K Clear to end of line</comment>
                        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>

                    <case>case <expr><literal type="number">1</literal></expr>:</case>		<comment type="line">// ESC[1K Clear from start of line to cursor</comment>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>

                    <case>case <expr><literal type="number">2</literal></expr>:</case>		<comment type="line">// ESC[2K Clear whole line.</comment>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
                            <argument><expr><name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>

                    <default>default:</default>
                        <return>return;</return>
                </block_content>}</block></switch>

            <case>case <expr><literal type="char">'X'</literal></expr>:</case>                 <comment type="line">// ESC[#X Erase # characters.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[X == ESC[1X</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>, <argument><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>NumberOfCharsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'L'</literal></expr>:</case>                 <comment type="line">// ESC[#L Insert # blank lines.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[L == ESC[1L</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Char</name><operator>.</operator><name>UnicodeChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CharInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'M'</literal></expr>:</case>                 <comment type="line">// ESC[#M Delete # lines.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[M == ESC[1M</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Char</name><operator>.</operator><name>UnicodeChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CharInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'P'</literal></expr>:</case>                 <comment type="line">// ESC[#P Delete # characters.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[P == ESC[1P</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Char</name><operator>.</operator><name>UnicodeChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>CharInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'@'</literal></expr>:</case>                 <comment type="line">// ESC[#@ Insert # blank characters.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[@ == ESC[1@</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Rect</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Char</name><operator>.</operator><name>UnicodeChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>CharInfo</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CharInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'k'</literal></expr>:</case>                 <comment type="line">// ESC[#k</comment>
            <case>case <expr><literal type="char">'A'</literal></expr>:</case>                 <comment type="line">// ESC[#A Moves cursor up # lines</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[A == ESC[1A</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'e'</literal></expr>:</case>                 <comment type="line">// ESC[#e</comment>
            <case>case <expr><literal type="char">'B'</literal></expr>:</case>                 <comment type="line">// ESC[#B Moves cursor down # lines</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[B == ESC[1B</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'a'</literal></expr>:</case>                 <comment type="line">// ESC[#a</comment>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>                 <comment type="line">// ESC[#C Moves cursor forward # spaces</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[C == ESC[1C</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'j'</literal></expr>:</case>                 <comment type="line">// ESC[#j</comment>
            <case>case <expr><literal type="char">'D'</literal></expr>:</case>                 <comment type="line">// ESC[#D Moves cursor back # spaces</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[D == ESC[1D</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'E'</literal></expr>:</case>                 <comment type="line">// ESC[#E Moves cursor down # lines, column 1.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[E == ESC[1E</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'F'</literal></expr>:</case>                 <comment type="line">// ESC[#F Moves cursor up # lines, column 1.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[F == ESC[1F</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'`'</literal></expr>:</case>                 <comment type="line">// ESC[#`</comment>
            <case>case <expr><literal type="char">'G'</literal></expr>:</case>                 <comment type="line">// ESC[#G Moves cursor column # in current row.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[G == ESC[1G</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'d'</literal></expr>:</case>                 <comment type="line">// ESC[#d Moves cursor row #, current column.</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[d == ESC[1d</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'f'</literal></expr>:</case>                 <comment type="line">// ESC[#;#f</comment>
            <case>case <expr><literal type="char">'H'</literal></expr>:</case>                 <comment type="line">// ESC[#;#H Moves cursor to line #, column #</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[H == ESC[1;1H</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// ESC[#H == ESC[#;1H</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>es_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>&gt;=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>Pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'s'</literal></expr>:</case>                 <comment type="line">// ESC[s Saves cursor position for recall later</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>SavePos</name> <operator>=</operator> <name><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'u'</literal></expr>:</case>                 <comment type="line">// ESC[u Return to saved cursor position</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConOut</name></expr></argument>, <argument><expr><name>SavePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>

            <case>case <expr><literal type="char">'n'</literal></expr>:</case>                 <comment type="line">// ESC[#n Device status report</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="line">// ESC[n == ESC[0n -&gt; ignored</comment>
                <switch>switch <condition>(<expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">5</literal></expr>:</case>		<comment type="line">// ESC[5n Report status</comment>
                        <expr_stmt><expr><call><name>SendSequence</name><argument_list>(<argument><expr><literal type="string">L"\33[0n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// "OK"</comment>
                        <return>return;</return>

                    <case>case <expr><literal type="number">6</literal></expr>:</case>		<comment type="line">// ESC[6n Report cursor position</comment>
                    <block>{<block_content>
                                    <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
                                    <expr_stmt><expr><call><name>wsprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">L"\33[%d;%dR"</literal></expr></argument>, <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                        <argument><expr><name><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>SendSequence</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                        <return>return;</return>

                    <default>default:</default>
                        <return>return;</return>
                </block_content>}</block></switch>

            <case>case <expr><literal type="char">'t'</literal></expr>:</case>                 <comment type="line">// ESC[#t Window manipulation</comment>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition>	<comment type="line">// ESC[21t Report xterm window's title</comment>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>GetConsoleTitle</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>lenof</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// Too bad if it's too big or fails.</comment>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SendSequence</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return;</return>

            <default>default:</default>
                <return>return;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <comment type="line">// (prefix == ']')</comment>
    <block>{<block_content>
        <comment type="line">// Ignore any \e]? or \e]&gt; sequences.</comment>
        <if_stmt><if>if <condition>(<expr><name>prefix2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <comment type="line">// ESC]0;titleST</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>SetConsoleTitle</name><argument_list>(<argument><expr><name>Pt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">//   ParseAndPrintANSIString(hDev, lpBuffer, nNumberOfBytesToWrite)</comment>
<comment type="line">// Parses the string lpBuffer, interprets the escapes sequences and prints the</comment>
<comment type="line">// characters in the device hDev (console).</comment>
<comment type="line">// The lexer is a three states automata.</comment>
<comment type="line">// If the number of arguments es_argc &gt; MAX_ARG, only the MAX_ARG-1 firsts and</comment>
<comment type="line">// the last arguments are processed (no es_argv[] overflow).</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>
<function><type><name>BOOL</name></type> <name>ParseAndPrintANSIString</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hDev</name></decl></parameter>, <parameter><decl><type><name>LPCVOID</name></type> <name>lpBuffer</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>nNumberOfBytesToWrite</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>lpNumberOfBytesWritten</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type>   <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LPCSTR</name></type> <name>s</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>hDev</name> <operator>!=</operator> <name>hConOut</name></expr>)</condition>	<comment type="line">// reinit if device has changed</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>hConOut</name> <operator>=</operator> <name>hDev</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>shifted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nNumberOfBytesToWrite</name></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <operator>(</operator><name>LPCSTR</name><operator>)</operator><name>lpBuffer</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>SO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shifted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>SI</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shifted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PushBuffer</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if>	<comment type="line">// \e\e...\e == \e</comment>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>FlushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>prefix</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>prefix2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>Pt_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>Pt_arg</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>is_digit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>es_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>es_argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>es_argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>es_argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>prefix2</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>es_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>suffix</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>InterpretEscSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>is_digit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>es_argv</name><index>[<expr><name>es_argc</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>es_argc</name> <operator>&lt;</operator> <name>MAX_ARG</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>es_argc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>es_argv</name><index>[<expr><name>es_argc</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>es_argc</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>suffix</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>InterpretEscSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>BEL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>Pt_arg</name><index>[<expr><name>Pt_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>InterpretEscSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>Pt_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>Pt_arg</name><index>[<expr><name>Pt_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>Pt_arg</name><index>[<expr><operator>--</operator><name>Pt_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>InterpretEscSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Pt_len</name> <operator>&lt;</operator> <call><name>lenof</name><argument_list>(<argument><expr><name>Pt_arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>Pt_arg</name><index>[<expr><name>Pt_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Ignore it (ESC ) 0 is implicit; nothing else is supported).</comment>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>FlushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lpNumberOfBytesWritten</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>lpNumberOfBytesWritten</name> <operator>=</operator> <name>nNumberOfBytesToWrite</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ANSI_printf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retVal</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cBufLen</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>cBufLen</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cBufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>retVal</name> <operator>=</operator> <call><name>vsprintf_s</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>cBufLen</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retVal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>DWORD</name></type> <name>bytesWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ParseAndPrintANSIString</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


</unit>
