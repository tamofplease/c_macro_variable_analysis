<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/sparkline.c"><comment type="block">/* sparkline.c -- ASCII Sparklines
 * This code is modified from http://github.com/antirez/aspark and adapted
 * in order to return SDS strings instead of outputting directly to
 * the terminal.
 *
 * ---------------------------------------------------------------------------
 *
 * Copyright(C) 2011-2014 Salvatore Sanfilippo &lt;antirez@gmail.com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<comment type="block">/* This is the charset used to display the graphs, but multiple rows are used
 * to increase the resolution. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>charset</name><index>[]</index></name> <init>= <expr><literal type="string">"_-`"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>charset_fill</name><index>[]</index></name> <init>= <expr><literal type="string">"_o#"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>charset_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>label_margin_top</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------------------------------------------------------------------------
 * Sequences are arrays of samples we use to represent data to turn
 * into sparklines. This is the API in order to generate a sparkline:
 *
 * struct sequence *seq = createSparklineSequence();
 * sparklineSequenceAddSample(seq, 10, NULL);
 * sparklineSequenceAddSample(seq, 20, NULL);
 * sparklineSequenceAddSample(seq, 30, "last sample label");
 * sds output = sparklineRender(sdsempty(), seq, 80, 4, SPARKLINE_FILL);
 * freeSparklineSequence(seq);
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* Create a new sequence. */</comment>
<function><type><name><name>struct</name> <name>sequence</name></name> <modifier>*</modifier></type><name>createSparklineSequence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sequence</name></name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>seq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>seq</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add a new sample into a sequence. */</comment>
<function><type><name>void</name></type> <name>sparklineSequenceAddSample</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sequence</name></name> <modifier>*</modifier></type><name>seq</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>label</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>label</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>label</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>zstrdup</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name><name>seq</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>seq</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sample</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>seq</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>seq</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name><operator>.</operator><name>label</name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>label</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>labels</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Free a sequence. */</comment>
<function><type><name>void</name></type> <name>freeSparklineSequence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sequence</name></name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>seq</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------------------
 * ASCII rendering of sequence
 * ------------------------------------------------------------------------- */</comment>

<comment type="block">/* Render part of a sequence, so that render_sequence() call call this function
 * with differnent parts in order to create the full output without overflowing
 * the current terminal columns. */</comment>
<function><type><name>sds</name></type> <name>sparklineRenderRange</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sequence</name></name> <modifier>*</modifier></type><name>seq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>relmax</name> <init>= <expr><name><name>seq</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>seq</name><operator>-&gt;</operator><name>min</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>steps</name> <init>= <expr><name>charset_len</name><operator>*</operator><name>rows</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chars</name> <init>= <expr><call><name>zmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>loop</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>opt_fill</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>SPARKLINE_FILL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>opt_log</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>SPARKLINE_LOG_SCALE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>opt_log</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>relmax</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>relmax</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>relmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>relmax</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>chars</name></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>sample</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>seq</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>j</name><operator>+</operator><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>relval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name> <operator>-</operator> <name><name>seq</name><operator>-&gt;</operator><name>min</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>opt_log</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>relval</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>relval</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>relval</name><operator>*</operator><name>steps</name><operator>)</operator><operator>/</operator><name>relmax</name><operator>)</operator></expr>;</expr_stmt>                               <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) entire expression */</comment>
            <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;=</operator> <name>steps</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>step</name> <operator>=</operator> <name>steps</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Print the character needed to create the sparkline */</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>charidx</name> <init>= <expr><name>step</name><operator>-</operator><operator>(</operator><operator>(</operator><name>rows</name><operator>-</operator><name>row</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>charset_len</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>loop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>charidx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>charidx</name> <operator>&lt;</operator> <name>charset_len</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>chars</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>opt_fill</name></expr> ?</condition><then> <expr><name><name>charset_fill</name><index>[<expr><name>charidx</name></expr>]</index></name></expr> </then><else>:
                                          <expr><name><name>charset</name><index>[<expr><name>charidx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>opt_fill</name> <operator>&amp;&amp;</operator> <name>charidx</name> <operator>&gt;=</operator> <name>charset_len</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>chars</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Labels spacing */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>labels</name></name> <operator>&amp;&amp;</operator> <name>row</name><operator>-</operator><name>rows</name> <operator>&lt;</operator> <name>label_margin_top</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>loop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <comment type="block">/* Print the label if needed. */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>label_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                      <decl_stmt><decl><type><name>WIN_PORT_FIX</name> <comment type="block">/* cast (int) */</comment>
                    <name>int</name></type> <name>label_char</name> <init>= <expr><name>row</name> <operator>-</operator> <name>rows</name> <operator>-</operator> <name>label_margin_top</name></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <name>label_char</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>loop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>chars</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>label</name><index>[<expr><name>label_char</name></expr>]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><name>chars</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Turn a sequence into its ASCII representation */</comment>
<function><type><name>sds</name></type> <name>sparklineRender</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sequence</name></name> <modifier>*</modifier></type><name>seq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>seq</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>columns</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sublen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>length</name></name><operator>-</operator><name>j</name><operator>)</operator> <operator>&lt;</operator> <name>columns</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>length</name></name><operator>-</operator><name>j</name><operator>)</operator></expr> </then><else>: <expr><name>columns</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>sparklineRenderRange</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>sublen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

</unit>
