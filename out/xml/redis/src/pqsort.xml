<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/pqsort.c"><comment type="block">/* The following is the NetBSD libc qsort implementation modified in order to
 * support partial sorting of ranges for Redis.
 *
 * Copyright(C) 2009-2012 Salvatore Sanfilippo. All rights reserved.
 *
 * The original copyright notice follows. */</comment>


<comment type="block">/*	$NetBSD: qsort.c,v 1.19 2009/01/30 23:38:44 lukem Exp $	*/</comment>

<comment type="block">/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/Win32_Portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop/win32_types.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name>	<modifier>*</modifier></type><name>med3</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>	 <name>swapfunc</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(a) &lt; (b) ? a : b</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Qsort routine from Bentley &amp; McIlroy's "Engineering a Sort Function".
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swapcode</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>parmi</name></type></parameter>, <parameter><type><name>parmj</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ 		\
	size_t i = (n) / sizeof (TYPE); 		\
	TYPE *pi = (TYPE *)(void *)(parmi); 		\
	TYPE *pj = (TYPE *)(void *)(parmj); 		\
	do { 						\
		TYPE	t = *pi;			\
		*pi++ = *pj;				\
		*pj++ = t;				\
        } while (--i &gt; 0);				\
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAPINIT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>es</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>swaptype = ((char *)a - (char *)0) % sizeof(PORT_LONG) || \
	es % sizeof(PORT_LONG) ? 2 : es == sizeof(PORT_LONG)? 0 : 1;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>swapfunc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swaptype</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>swaptype</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<macro><name>swapcode</name><argument_list>(<argument>PORT_LONG</argument>, <argument>a</argument>, <argument>b</argument>, <argument>n</argument>)</argument_list></macro></block_content></block>
	<if_stmt><else>else<block type="pseudo"><block_content>
		<macro><name>swapcode</name><argument_list>(<argument>char</argument>, <argument>a</argument>, <argument>b</argument>, <argument>n</argument>)</argument_list></macro></block_content></block></else></if_stmt></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swap</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>						\
	<cpp:value>if (swaptype == 0) {					\
		PORT_LONG t = *(PORT_LONG *)(void *)(a);			\
		*(PORT_LONG *)(void *)(a) = *(PORT_LONG *)(void *)(b);	\
		*(PORT_LONG *)(void *)(b) = t;			\
	} else							\
		swapfunc(a, b, es, swaptype)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vecswap</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((n) &gt; 0) swapfunc((a), (b), (size_t)(n), swaptype)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>med3</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
	       <expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary> <operator>)</operator></expr></else></ternary><operator>)</operator></expr>
              </then><else>:<expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary> <operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_pqsort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>es</name></decl></parameter>,
    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lrange</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rrange</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pa</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>swaptype</name></decl>, <decl><type ref="prev"/><name>cmp_result</name></decl>;</decl_stmt>

<label><name>loop</name>:</label>	<expr_stmt><expr><call><name>SWAPINIT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>es</name></expr>;</init> <condition><expr><name>pm</name> <operator>&lt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>es</name></expr>;</condition> <incr><expr><name>pm</name> <operator>+=</operator> <name>es</name></expr></incr>)</control><block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <name>pm</name></expr>;</init> <condition><expr><name>pl</name> <operator>&gt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>&amp;&amp;</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>pl</name> <operator>-</operator> <name>es</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>
			     <incr><expr><name>pl</name> <operator>-=</operator> <name>es</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pl</name> <operator>-</operator> <name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pl</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pn</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pl</name> <operator>+</operator> <name>d</name></expr></argument>, <argument><expr><name>pl</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>d</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pm</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>pm</name> <operator>+</operator> <name>d</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pn</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>d</name></expr></argument>, <argument><expr><name>pn</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pa</name> <operator>=</operator> <name>pb</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>es</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>pd</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<while>while <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_result</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>cmp_result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pa</name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pb</name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<while>while <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_result</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>cmp_result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pd</name> <operator>-=</operator> <name>es</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pc</name> <operator>-=</operator> <name>es</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>pb</name> <operator>&gt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pb</name> <operator>+=</operator> <name>es</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pc</name> <operator>-=</operator> <name>es</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>pn</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>es</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>pa</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name>pb</name> <operator>-</operator> <name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vecswap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pb</name> <operator>-</operator> <name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>pd</name> <operator>-</operator> <name>pc</name><operator>)</operator></expr></argument>, <argument><expr><name>pn</name> <operator>-</operator> <name>pd</name> <operator>-</operator> <name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vecswap</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pn</name> <operator>-</operator> <name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <name>pb</name> <operator>-</operator> <name>pa</name><operator>)</operator> <operator>&gt;</operator> <name>es</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_l</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_r</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>+</operator><name>r</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>lrange</name> <operator>&lt;</operator> <name>_l</name> <operator>&amp;&amp;</operator> <name>rrange</name> <operator>&lt;</operator> <name>_l</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><name>lrange</name> <operator>&gt;</operator> <name>_r</name> <operator>&amp;&amp;</operator> <name>rrange</name> <operator>&gt;</operator> <name>_r</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>_pqsort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name> <operator>/</operator> <name>es</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>lrange</name></expr></argument>, <argument><expr><name>rrange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <name>pd</name> <operator>-</operator> <name>pc</name><operator>)</operator> <operator>&gt;</operator> <name>es</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_r</name></decl>;</decl_stmt>

		<comment type="block">/* Iterate rather than recurse to save stack space */</comment>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>pn</name> <operator>-</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>r</name> <operator>/</operator> <name>es</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>_l</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>_r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>+</operator><name>r</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>lrange</name> <operator>&lt;</operator> <name>_l</name> <operator>&amp;&amp;</operator> <name>rrange</name> <operator>&lt;</operator> <name>_l</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><name>lrange</name> <operator>&gt;</operator> <name>_r</name> <operator>&amp;&amp;</operator> <name>rrange</name> <operator>&gt;</operator> <name>_r</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <goto>goto <name>loop</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<comment type="block">/*		qsort(pn - r, r / es, es, cmp);*/</comment>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pqsort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>es</name></decl></parameter>,
    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lrange</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rrange</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>_pqsort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>es</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>+</operator><operator>(</operator><name>lrange</name><operator>*</operator><name>es</name><operator>)</operator></expr></argument>,
                       <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>+</operator><operator>(</operator><operator>(</operator><name>rrange</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>es</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
