<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/endianconv.c"><comment type="block">/* endinconv.c -- Endian conversions utilities.
 *
 * This functions are never called directly, but always using the macros
 * defined into endianconv.h, this way we define everything is a non-operation
 * if the arch is already little endian.
 *
 * Redis tries to encode everything as little endian (but a few things that need
 * to be backward compatible are still in big endian) because most of the
 * production environments are little endian, and we have a lot of conversions
 * in a few places because ziplists, intsets, zipmaps, need to be endian-neutral
 * even in memory, since they are serialied on RDB files directly with a single
 * write(2) without other additional steps.
 *
 * ----------------------------------------------------------------------------
 *
 * Copyright (c) 2011-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Toggle the 16 bit unsigned integer pointed by *p from little endian to
 * big endian */</comment>
<function><type><name>void</name></type> <name>memrev16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Toggle the 32 bit unsigned integer pointed by *p from little endian to
 * big endian */</comment>
<function><type><name>void</name></type> <name>memrev32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Toggle the 64 bit unsigned integer pointed by *p from little endian to
 * big endian */</comment>
<function><type><name>void</name></type> <name>memrev64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>intrev16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memrev16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>intrev32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memrev32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>intrev64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memrev64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REDIS_TEST</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>endianconvTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"ciaoroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memrev16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"ciaoroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memrev32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"ciaoroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memrev64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
