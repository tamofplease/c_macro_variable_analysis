<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/siphash.c"><comment type="block">/*
   SipHash reference C implementation

   Copyright (c) 2012-2016 Jean-Philippe Aumasson
   &lt;jeanphilippe.aumasson@gmail.com&gt;
   Copyright (c) 2012-2014 Daniel J. Bernstein &lt;djb@cr.yp.to&gt;
   Copyright (c) 2017 Salvatore Sanfilippo &lt;antirez@gmail.com&gt;

   To the extent possible under law, the author(s) have dedicated all copyright
   and related and neighboring rights to this software to the public domain
   worldwide. This software is distributed without any warranty.

   You should have received a copy of the CC0 Public Domain Dedication along
   with this software. If not, see
   &lt;http://creativecommons.org/publicdomain/zero/1.0/&gt;.

   ----------------------------------------------------------------------------

   This version was modified by Salvatore Sanfilippo &lt;antirez@gmail.com&gt;
   in the following ways:

   1. We use SipHash 1-2. This is not believed to be as strong as the
      suggested 2-4 variant, but AFAIK there are not trivial attacks
      against this reduced-rounds version, and it runs at the same speed
      as Murmurhash2 that we used previously, why the 2-4 variant slowed
      down Redis by a 4% figure more or less.
   2. Hard-code rounds in the hope the compiler can optimize it more
      in this raw from. Anyway we always want the standard 2-4 variant.
   3. Modify the prototype and implementation so that the function directly
      returns an uint64_t value, the hash itself, instead of receiving an
      output buffer. This also means that the output size is set to 8 bytes
      and the 16 bytes output code handling was removed.
   4. Provide a case insensitive variant to be used when hashing strings that
      must be considered identical by the hash table regardless of the case.
      If we don't have directly a case insensitive hash function, we need to
      perform a text transformation in some temporary buffer, which is costly.
   5. Remove debugging code.
   6. Modified the original test.c file to be a stand-alone function testing
      the function in the new form (returing an uint64_t) using just the
      relevant test vector.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Fast tolower() alike function that does not care about locale
 * but just returns a-z insetad of A-Z. */</comment>
<function><type><name>int</name></type> <name>siptlw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>c</name><operator>+</operator><operator>(</operator><literal type="char">'a'</literal><operator>-</operator><literal type="char">'A'</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Test of the CPU is Little Endian and supports not aligned accesses.
 * Two interesting conditions to speedup the function that happen to be
 * in most of x86 servers. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__X86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNALIGNED_LE_CPU</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(((x) &lt;&lt; (b)) | ((x) &gt;&gt; (64 - (b))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U32TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                                                        \
    <cpp:value>(p)[0] = (uint8_t)((v));                                                   \
    (p)[1] = (uint8_t)((v) &gt;&gt; 8);                                              \
    (p)[2] = (uint8_t)((v) &gt;&gt; 16);                                             \
    (p)[3] = (uint8_t)((v) &gt;&gt; 24);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U64TO8_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                                                        \
    <cpp:value>U32TO8_LE((p), (uint32_t)((v)));                                           \
    U32TO8_LE((p) + 4, (uint32_t)((v) &gt;&gt; 32));</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UNALIGNED_LE_CPU</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO64_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint64_t*)(p)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO64_LE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                                           \
    <cpp:value>(((uint64_t)((p)[0])) | ((uint64_t)((p)[1]) &lt;&lt; 8) |                        \
     ((uint64_t)((p)[2]) &lt;&lt; 16) | ((uint64_t)((p)[3]) &lt;&lt; 24) |                 \
     ((uint64_t)((p)[4]) &lt;&lt; 32) | ((uint64_t)((p)[5]) &lt;&lt; 40) |                 \
     ((uint64_t)((p)[6]) &lt;&lt; 48) | ((uint64_t)((p)[7]) &lt;&lt; 56))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO64_LE_NOCASE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                                    \
    <cpp:value>(((uint64_t)(siptlw((p)[0]))) |                                           \
     ((uint64_t)(siptlw((p)[1])) &lt;&lt; 8) |                                      \
     ((uint64_t)(siptlw((p)[2])) &lt;&lt; 16) |                                     \
     ((uint64_t)(siptlw((p)[3])) &lt;&lt; 24) |                                     \
     ((uint64_t)(siptlw((p)[4])) &lt;&lt; 32) |                                              \
     ((uint64_t)(siptlw((p)[5])) &lt;&lt; 40) |                                              \
     ((uint64_t)(siptlw((p)[6])) &lt;&lt; 48) |                                              \
     ((uint64_t)(siptlw((p)[7])) &lt;&lt; 56))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIPROUND</name></cpp:macro>                                                               \
    <cpp:value>do {                                                                       \
        v0 += v1;                                                              \
        v1 = ROTL(v1, 13);                                                     \
        v1 ^= v0;                                                              \
        v0 = ROTL(v0, 32);                                                     \
        v2 += v3;                                                              \
        v3 = ROTL(v3, 16);                                                     \
        v3 ^= v2;                                                              \
        v0 += v3;                                                              \
        v3 = ROTL(v3, 21);                                                     \
        v3 ^= v0;                                                              \
        v2 += v1;                                                              \
        v1 = ROTL(v1, 17);                                                     \
        v1 ^= v2;                                                              \
        v2 = ROTL(v2, 32);                                                     \
    } while (0)</cpp:value></cpp:define>

<function><type><name>uint64_t</name></type> <name>siphash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNALIGNED_LE_CPU</name></cpp:ifndef>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>hash</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><literal type="number">0x736f6d6570736575ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v1</name> <init>= <expr><literal type="number">0x646f72616e646f6dULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v2</name> <init>= <expr><literal type="number">0x6c7967656e657261ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v3</name> <init>= <expr><literal type="number">0x7465646279746573ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>k0</name> <init>= <expr><call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>k1</name> <init>= <expr><call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>in</name> <operator>+</operator> <name>inlen</name> <operator>-</operator> <operator>(</operator><name>inlen</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name> <init>= <expr><name>inlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>inlen</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <name>k0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>k0</name></expr>;</expr_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>in</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <switch>switch <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="number">0</literal></expr>:</case> <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>v0</name> <operator>^</operator> <name>v1</name> <operator>^</operator> <name>v2</name> <operator>^</operator> <name>v3</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNALIGNED_LE_CPU</name></cpp:ifndef>
    <expr_stmt><expr><call><name>U64TO8_LE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hash</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>b</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>siphash_nocase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNALIGNED_LE_CPU</name></cpp:ifndef>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>hash</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name> <init>= <expr><literal type="number">0x736f6d6570736575ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v1</name> <init>= <expr><literal type="number">0x646f72616e646f6dULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v2</name> <init>= <expr><literal type="number">0x6c7967656e657261ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v3</name> <init>= <expr><literal type="number">0x7465646279746573ULL</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>k0</name> <init>= <expr><call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>k1</name> <init>= <expr><call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>in</name> <operator>+</operator> <name>inlen</name> <operator>-</operator> <operator>(</operator><name>inlen</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left</name> <init>= <expr><name>inlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>inlen</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <name>k0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>k0</name></expr>;</expr_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>in</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>U8TO64_LE_NOCASE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>m</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <switch>switch <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <comment type="block">/* fall-thru */</comment>
    <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>siptlw</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="number">0</literal></expr>:</case> <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>^=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIPROUND</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>v0</name> <operator>^</operator> <name>v1</name> <operator>^</operator> <name>v2</name> <operator>^</operator> <name>v3</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNALIGNED_LE_CPU</name></cpp:ifndef>
    <expr_stmt><expr><call><name>U64TO8_LE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hash</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>b</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/* --------------------------------- TEST ------------------------------------ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIPHASH_TEST</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>vectors_sip64</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x74</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x85</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x18</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xab</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x93</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x75</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x14</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x69</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x93</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x17</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xde</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xad</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x32</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x71</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x15</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x02</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xca</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xad</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x18</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xee</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x81</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x24</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xea</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x60</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x66</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x95</literal></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Test siphash using a test vector. Returns 0 if the function passed
 * all the tests, otherwise 1 is returned.
 *
 * IMPORTANT: The test vector is for SipHash 2-4. Before running
 * the test revert back the siphash() function to 2-4 rounds since
 * now it uses 1-2 rounds. */</comment>
<function><type><name>int</name></type> <name>siphash_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>in</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name> <init>= <expr><call><name>siphash</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>vectors_sip64</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/* printf("fail for %d bytes\n", i); */</comment>
            <expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Run a few basic tests with the case insensitive version. */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>siphash</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"hello world"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"1234567812345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>siphash_nocase</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"hello world"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"1234567812345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>h1</name> <operator>!=</operator> <name>h2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>siphash</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"hello world"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"1234567812345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>siphash_nocase</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"HELLO world"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"1234567812345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>h1</name> <operator>!=</operator> <name>h2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>siphash</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"HELLO world"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"1234567812345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>siphash_nocase</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"HELLO world"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"1234567812345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>h1</name> <operator>==</operator> <name>h2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fails</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>siphash_test</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SipHash test: OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SipHash test: FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
