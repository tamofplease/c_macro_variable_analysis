<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/notify.c"><comment type="block">/*
 * Copyright (c) 2013, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>

<comment type="block">/* This file implements keyspace events notification via Pub/Sub and
 * described at https://redis.io/topics/notifications. */</comment>

<comment type="block">/* Turn a string representing notification classes into an integer
 * representing notification classes flags xored.
 *
 * The function returns -1 if the input contains characters not mapping to
 * any class. */</comment>
<function><type><name>int</name></type> <name>keyspaceEventsStringToFlags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>classes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>classes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_ALL</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'g'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_GENERIC</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_STRING</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_LIST</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_SET</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_HASH</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'z'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_ZSET</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_EXPIRED</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_EVICTED</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'K'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_KEYSPACE</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_KEYEVENT</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NOTIFY_STREAM</name></expr>;</expr_stmt> <break>break;</break>
        <default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></while>
    <return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function does exactly the revese of the function above: it gets
 * as input an integer with the xored flags and returns a string representing
 * the selected classes. The string returned is an sds string that needs to
 * be released with sdsfree(). */</comment>
<function><type><name>sds</name></type> <name>keyspaceEventsFlagsToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_ALL</name><operator>)</operator> <operator>==</operator> <name>NOTIFY_ALL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"A"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_GENERIC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"g"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_STRING</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"$"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_LIST</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"l"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_SET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"s"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_HASH</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"h"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_ZSET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"z"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_EXPIRED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"x"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_EVICTED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"e"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_STREAM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"t"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_KEYSPACE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"K"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NOTIFY_KEYEVENT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="string">"E"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The API provided to the rest of the Redis core is a simple function:
 *
 * notifyKeyspaceEvent(char *event, robj *key, int dbid);
 *
 * 'event' is a C string representing the event name.
 * 'key' is a Redis object representing the key name.
 * 'dbid' is the database ID where the key lives.  */</comment>
<function><type><name>void</name></type> <name>notifyKeyspaceEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>robj</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>chan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>robj</name> <modifier>*</modifier></type><name>chanobj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eventobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* If any modules are interested in events, notify the module system now. 
     * This bypasses the notifications configuration, but the module engine
     * will only call event subscribers if the event type matches the types
     * they are interested in. */</comment>
     <expr_stmt><expr><call><name>moduleNotifyKeyspaceEvent</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* If notifications for this class of events are off, return ASAP. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>&amp;</operator> <name>type</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>createStringObject</name><argument_list>(<argument><expr><name>event</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* __keyspace@&lt;db&gt;__:&lt;key&gt; &lt;event&gt; notifications. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>&amp;</operator> <name>NOTIFY_KEYSPACE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"__keyspace@"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><literal type="string">"__:"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chanobj</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pubsubPublishMessage</name><argument_list>(<argument><expr><name>chanobj</name></expr></argument>, <argument><expr><name>eventobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>chanobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* __keyevent@&lt;db&gt;__:&lt;event&gt; &lt;key&gt; notifications. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>.</operator><name>notify_keyspace_events</name></name> <operator>&amp;</operator> <name>NOTIFY_KEYEVENT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"__keyevent@"</literal></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ll2string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><literal type="string">"__:"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name><name>eventobj</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chanobj</name> <operator>=</operator> <call><name>createObject</name><argument_list>(<argument><expr><name>OBJ_STRING</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pubsubPublishMessage</name><argument_list>(<argument><expr><name>chanobj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>chanobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>decrRefCount</name><argument_list>(<argument><expr><name>eventobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
