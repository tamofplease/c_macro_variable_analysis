<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/redis/src/ae.c"><comment type="block">/* A simple event-driven programming library. Originally I wrote this code
 * for the Jim's event-loop (Jim is a Tcl interpreter) but later translated
 * it in form of a library for easy reuse.
 *
 * Copyright (c) 2006-2010, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Win32_Interop\win32_types_hiredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/Win32_Interop/Win32_FDAPI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/Win32_Interop/Win32_Service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<comment type="block">/* Include the best multiplexing layer supported by this system.
 * The following should be ordered by performances, descending. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_wsiocp.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_EVPORT</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_evport.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_EPOLL</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_epoll.c"</cpp:file></cpp:include>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_KQUEUE</name></cpp:ifdef>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_kqueue.c"</cpp:file></cpp:include>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ae_select.c"</cpp:file></cpp:include>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>aeCreateEventLoop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>eventLoop</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eventLoop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFileEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFiredEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name> <operator>=</operator> <name>setsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>lastTime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventNextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>aeApiCreate</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block">/* Events with mask == AE_NONE are not set. So let's initialize the
     * vector with it. */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_NONE</name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>eventLoop</name></expr>;</return>

<label><name>err</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>eventLoop</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the current set size. */</comment>
<function><type><name>int</name></type> <name>aeGetSetSize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Resize the maximum set size of the event loop.
 * If the requested set size is smaller than the current set size, but
 * there is already a file descriptor in use that is &gt;= the requested
 * set size minus one, AE_ERR is returned and the operation is not
 * performed at all.
 *
 * Otherwise AE_OK is returned and the operation is successful. */</comment>
<function><type><name>int</name></type> <name>aeResizeSetSize</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>setsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>setsize</name> <operator>==</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_OK</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&gt;=</operator> <name>setsize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>aeApiResize</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>setsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFileEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name> <operator>=</operator> <call><name>zrealloc</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aeFiredEvent</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>setsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name> <operator>=</operator> <name>setsize</name></expr>;</expr_stmt>

    <comment type="block">/* Make sure that if we created new slots, they are initialized with
     * an AE_NONE mask. */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <name>AE_NONE</name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>AE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeDeleteEventLoop</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>aeApiFree</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeStop</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aeCreateFileEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>,
        <parameter><decl><type><name>aeFileProc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
        <return>return <expr><name>AE_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>aeApiAddEvent</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name> <operator>=</operator> <name>clientData</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>AE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeDeleteFileEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* We want to always remove AE_BARRIER if set when AE_WRITABLE
     * is removed. */</comment>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>AE_BARRIER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>aeApiDelEvent</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <name>AE_NONE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Update the max fd */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>!=</operator> <name>AE_NONE</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aeGetFileEvents</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>setsize</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aeGetTime</name><parameter_list>(<parameter><decl><type><name>PORT_LONG</name> <modifier>*</modifier></type><name>seconds</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name> <modifier>*</modifier></type><name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>struct</name> <name>_timeb</name></name></type> <name>tb</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_timeb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ftime_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>seconds</name><operator>)</operator> <operator>=</operator> <name><name>tb</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>milliseconds</name><operator>)</operator> <operator>=</operator> <name><name>tb</name><operator>.</operator><name>millitm</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>seconds</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>milliseconds</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aeAddMillisecondsToNow</name><parameter_list>(<parameter><decl><type><name>PORT_LONGLONG</name></type> <name>milliseconds</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>PORT_LONG</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>cur_sec</name></decl>, <decl><type ref="prev"/><name>cur_ms</name></decl>, <decl><type ref="prev"/><name>when_sec</name></decl>, <decl><type ref="prev"/><name>when_ms</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>aeGetTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>when_sec</name> <operator>=</operator> <operator>(</operator><name>PORT_LONG</name><operator>)</operator> <operator>(</operator><name>cur_sec</name> <operator>+</operator> <name>milliseconds</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>when_ms</name> <operator>=</operator> <name>cur_ms</name> <operator>+</operator> <name>milliseconds</name><operator>%</operator><literal type="number">1000</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>when_ms</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>when_sec</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>when_ms</name> <operator>-=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>sec</name> <operator>=</operator> <name>when_sec</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ms</name> <operator>=</operator> <name>when_ms</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PORT_LONGLONG</name></type> <name>aeCreateTimeEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>milliseconds</name></decl></parameter>,
        <parameter><decl><type><name>aeTimeProc</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>,
        <parameter><decl><type><name>aeEventFinalizerProc</name> <modifier>*</modifier></type><name>finalizerProc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>id</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventNextId</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>te</name> <operator>=</operator> <call><name>zmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>te</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>te</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aeAddMillisecondsToNow</name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>te</name><operator>-&gt;</operator><name>when_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>timeProc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>finalizerProc</name></name> <operator>=</operator> <name>finalizerProc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>clientData</name></name> <operator>=</operator> <name>clientData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>te</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name> <operator>=</operator> <name>te</name></expr>;</expr_stmt>
    <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>aeDeleteTimeEvent</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>AE_DELETED_EVENT_ID</name></expr>;</expr_stmt>
            <return>return <expr><name>AE_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>AE_ERR</name></expr>;</return> <comment type="block">/* NO event with the specified ID found */</comment>
</block_content>}</block></function>

<comment type="block">/* Search the first timer to fire.
 * This operation is useful to know how many time the select can be
 * put in sleep without to delay any event.
 * If there are no timers NULL is returned.
 *
 * Note that's O(N) since time events are unsorted.
 * Possible optimizations (not needed by Redis so far, but...):
 * 1) Insert the event in order, so that the nearest is just the head.
 *    Much better but still insertion or deletion of timers is O(N).
 * 2) Use a skiplist to have this operation as O(1) and insertion as O(log(N)).
 */</comment>
<function><type><specifier>static</specifier> <name>aeTimeEvent</name> <modifier>*</modifier></type><name>aeSearchNearestTimer</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>nearest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nearest</name> <operator>||</operator> <name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>&lt;</operator> <name><name>nearest</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>||</operator>
                <operator>(</operator><name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>==</operator> <name><name>nearest</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>&amp;&amp;</operator>
                 <name><name>te</name><operator>-&gt;</operator><name>when_ms</name></name> <operator>&lt;</operator> <name><name>nearest</name><operator>-&gt;</operator><name>when_ms</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nearest</name> <operator>=</operator> <name>te</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>nearest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Process time events */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>processTimeEvents</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>maxId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If the system clock is moved to the future, and then set back to the
     * right value, time events may be delayed in a random way. Often this
     * means that scheduled operations will not be performed soon enough.
     *
     * Here we try to detect system clock skews, and force all the time
     * events to be processed ASAP when this happens: the idea is that
     * processing events earlier is less dangerous than delaying them
     * indefinitely, and practice suggests it is. */</comment>
    <if_stmt><if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>lastTime</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>lastTime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxId</name> <operator>=</operator> <name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventNextId</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>te</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>now_sec</name></decl>, <decl><type ref="prev"/><name>now_ms</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>id</name></decl>;</decl_stmt>

        <comment type="block">/* Remove events scheduled for deletion. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AE_DELETED_EVENT_ID</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>timeEventHead</name></name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>finalizerProc</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>te</name><operator>-&gt;</operator><name>finalizerProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>zfree</name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>te</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Make sure we don't process time events created by time events in
         * this iteration. Note that this check is currently useless: we always
         * add new timers on the head, however if we change the implementation
         * detail, this check may be useful again: we keep it here for future
         * defense. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name>maxId</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>aeGetTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>now_sec</name> <operator>&gt;</operator> <name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>||</operator>
            <operator>(</operator><name>now_sec</name> <operator>==</operator> <name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>&amp;&amp;</operator> <name>now_ms</name> <operator>&gt;=</operator> <name><name>te</name><operator>-&gt;</operator><name>when_ms</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>te</name><operator>-&gt;</operator><name>timeProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>te</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>AE_NOMORE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>aeAddMillisecondsToNow</name><argument_list>(<argument><expr><name>retval</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>te</name><operator>-&gt;</operator><name>when_sec</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>te</name><operator>-&gt;</operator><name>when_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>te</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>AE_DELETED_EVENT_ID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>te</name> <operator>=</operator> <name><name>te</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>processed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Process every pending time event, then every pending file event
 * (that may be registered by time event callbacks just processed).
 * Without special flags the function sleeps until some file event
 * fires, or when the next time event occurs (if any).
 *
 * If flags is 0, the function does nothing and returns.
 * if flags has AE_ALL_EVENTS set, all the kind of events are processed.
 * if flags has AE_FILE_EVENTS set, file events are processed.
 * if flags has AE_TIME_EVENTS set, time events are processed.
 * if flags has AE_DONT_WAIT set the function returns ASAP until all
 * if flags has AE_CALL_AFTER_SLEEP set, the aftersleep callback is called.
 * the events that's possible to process without to wait are processed.
 *
 * The function returns the number of events processed. */</comment>
<function><type><name>int</name></type> <name>aeProcessEvents</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>numevents</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name>ServiceStopIssued</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>aeStop</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Nothing to do? return ASAP */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_FILE_EVENTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Note that we want call select() even if there are no
     * file events to process as long as we want to process time
     * events, in order to sleep until the next time event is ready
     * to fire. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>maxfd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
        <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>aeTimeEvent</name> <modifier>*</modifier></type><name>shortest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tvp</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>shortest</name> <operator>=</operator> <call><name>aeSearchNearestTimer</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>shortest</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PORT_LONG</name></type> <name>now_sec</name></decl>, <decl><type ref="prev"/><name>now_ms</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>aeGetTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>

            <comment type="block">/* How many milliseconds we need to wait for the next
             * time event to fire? */</comment>
            <decl_stmt><decl><type><name>PORT_LONGLONG</name></type> <name>ms</name> <init>=
                <expr><operator>(</operator><name><name>shortest</name><operator>-&gt;</operator><name>when_sec</name></name> <operator>-</operator> <name>now_sec</name><operator>)</operator><operator>*</operator><literal type="number">1000</literal> <operator>+</operator>
                <name><name>shortest</name><operator>-&gt;</operator><name>when_ms</name></name> <operator>-</operator> <name>now_ms</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>ms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>tvp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>ms</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>  <decl_stmt><decl><type><name>WIN_PORT_FIX</name></type> <comment type="block">/* cast (long) */</comment>
                <name><name>tvp</name><operator>-&gt;</operator><name>tv_usec</name></name> <init>= <expr><operator>(</operator><name>ms</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>tvp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tvp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* If we have to check for events but need to return
             * ASAP because of AE_DONT_WAIT we need to set the timeout
             * to zero */</comment>
            <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AE_DONT_WAIT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Otherwise we can block */</comment>
                <expr_stmt><expr><name>tvp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* wait forever */</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* Call the multiplexing API, will return only on timeout or when
         * some event fires. */</comment>
        <expr_stmt><expr><name>numevents</name> <operator>=</operator> <call><name>aeApiPoll</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* After sleep callback. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>AE_CALL_AFTER_SLEEP</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numevents</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>aeFileEvent</name> <modifier>*</modifier></type><name>fe</name> <init>= <expr><operator>&amp;</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mask</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>eventLoop</name><operator>-&gt;</operator><name>fired</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>fired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Number of events fired for current fd. */</comment>

            <comment type="block">/* Normally we execute the readable event first, and the writable
             * event laster. This is useful as sometimes we may be able
             * to serve the reply of a query immediately after processing the
             * query.
             *
             * However if AE_BARRIER is set in the mask, our application is
             * asking us to do the reverse: never fire the writable event
             * after the readable. In such a case, we invert the calls.
             * This is useful when, for instance, we want to do things
             * in the beforeSleep() hook, like fsynching a file to disk,
             * before replying to a client. */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>invert</name> <init>= <expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>AE_BARRIER</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Note the "fe-&gt;mask &amp; mask &amp; ..." code: maybe an already
             * processed event removed an element that fired and we still
             * didn't processed, so we check if the event is still valid.
             *
             * Fire the readable event if the call sequence is not
             * inverted. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>invert</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>,<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fired</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Fire the writable event. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fired</name> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>,<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fired</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* If we have to invert the call, fire the readable event now
             * after the writable one. */</comment>
            <if_stmt><if>if <condition>(<expr><name>invert</name> <operator>&amp;&amp;</operator> <name><name>fe</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fired</name> <operator>||</operator> <name><name>fe</name><operator>-&gt;</operator><name>wfileProc</name></name> <operator>!=</operator> <name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>fe</name><operator>-&gt;</operator><name>rfileProc</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>,<argument><expr><name>fd</name></expr></argument>,<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>clientData</name></name></expr></argument>,<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fired</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check time events */</comment>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AE_TIME_EVENTS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>processed</name> <operator>+=</operator> <call><name>processTimeEvents</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>processed</name></expr>;</return> <comment type="block">/* return the number of processed file/time events */</comment>
</block_content>}</block></function>

<comment type="block">/* Wait for milliseconds until the given file descriptor becomes
 * writable/readable/exception */</comment>
<function><type><name>int</name></type> <name>aeWait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>PORT_LONGLONG</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_READABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>AE_WRITABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>milliseconds</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>   <macro><name>WIN_PORT_FIX</name></macro> <comment type="block">/* cast (int) */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLHUP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retmask</name> <operator>|=</operator> <name>AE_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>retmask</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>retval</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeMain</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><name><name>eventLoop</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>aeProcessEvents</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>, <argument><expr><name>AE_ALL_EVENTS</name><operator>|</operator><name>AE_CALL_AFTER_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>aeGetApiName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>aeApiName</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeSetBeforeSleepProc</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>aeBeforeSleepProc</name> <modifier>*</modifier></type><name>beforesleep</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>beforesleep</name></name> <operator>=</operator> <name>beforesleep</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>aeSetAfterSleepProc</name><parameter_list>(<parameter><decl><type><name>aeEventLoop</name> <modifier>*</modifier></type><name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>aeBeforeSleepProc</name> <modifier>*</modifier></type><name>aftersleep</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>eventLoop</name><operator>-&gt;</operator><name>aftersleep</name></name> <operator>=</operator> <name>aftersleep</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
