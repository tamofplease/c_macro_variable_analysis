<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/logging.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:        Domas Mituzas, Facebook ( domas at fb dot com )
                        Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                        Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logoutfile</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>no_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>log_domain</name></decl></parameter>, <parameter><decl><type><name>GLogLevelFlags</name></type> <name>log_level</name></decl></parameter>,
            <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>log_domain</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>log_level</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>message</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_log_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>log_domain</name></decl></parameter>, <parameter><decl><type><name>GLogLevelFlags</name></type> <name>log_level</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>log_domain</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>gchar</name></type> <name><name>date</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>rawtime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timeinfo</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>message_out</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>log_level</name> <operator>&amp;</operator> <name>G_LOG_LEVEL_DEBUG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>message_out</name></expr></argument>, <argument><expr><literal type="string">" [DEBUG] - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>log_level</name> <operator>&amp;</operator> <name>G_LOG_LEVEL_INFO</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name>log_level</name> <operator>&amp;</operator> <name>G_LOG_LEVEL_MESSAGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>message_out</name></expr></argument>, <argument><expr><literal type="string">" [INFO] - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>log_level</name> <operator>&amp;</operator> <name>G_LOG_LEVEL_WARNING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>message_out</name></expr></argument>, <argument><expr><literal type="string">" [WARNING] - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>log_level</name> <operator>&amp;</operator> <name>G_LOG_LEVEL_ERROR</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name>log_level</name> <operator>&amp;</operator> <name>G_LOG_LEVEL_CRITICAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>message_out</name></expr></argument>, <argument><expr><literal type="string">" [ERROR] - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>message_out</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>logoutfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>message_out</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>message_out</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot write to log file with error %d.  Exiting..."</literal></expr></argument>,
            <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>message_out</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
