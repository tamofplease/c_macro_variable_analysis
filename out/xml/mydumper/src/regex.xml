<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/regex.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>filename_regex</name><init>=<expr><literal type="string">"^[\\w\\-_ ]+$"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pcre</name> <modifier>*</modifier></type><name>re</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pcre</name> <modifier>*</modifier></type><name>filename_re</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GOptionEntry</name></type> <name><name>regex_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"regex"</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>regex</name></expr>,
     <expr><literal type="string">"Regular expression for 'db.table' matching"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>load_regex_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>regex_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>check_filename_regex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* This is not going to be used in threads */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>ovector</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>pcre_exec</name><argument_list>(<argument><expr><name>filename_re</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ovector</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_regex</name><parameter_list>(<parameter><decl><type><name>pcre</name> <modifier>*</modifier><modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>erroroffset</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>pcre_compile</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>PCRE_CASELESS</name> <operator>|</operator> <name>PCRE_MULTILINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name>erroroffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Regular expression fail: %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initialize_regex</name><parameter_list>()</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>regex</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>init_regex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>,<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>init_regex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename_re</name></expr></argument>,<argument><expr><name>filename_regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Check database.table string against regular expression */</comment>
<function><type><name>gboolean</name></type> <name>check_regex</name><parameter_list>(<parameter><decl><type><name>pcre</name> <modifier>*</modifier></type><name>tre</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* This is not going to be used in threads */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>ovector</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pcre_exec</name><argument_list>(<argument><expr><name>tre</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ovector</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>eval_regex</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

  <if_stmt><if>if <condition>(<expr><name>re</name></expr>)</condition><block>{<block_content>
    <return>return <expr><call><name>check_regex</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
</unit>
