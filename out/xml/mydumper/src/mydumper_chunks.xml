<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/mydumper_chunks.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_jobs.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>where_option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>detected_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>rows_per_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>split_partitions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint64</name></type> <name>max_rows</name><init>=<expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>give_me_another_innodb_chunk_step_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>give_me_another_non_innodb_chunk_step_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>GList</name> <modifier>*</modifier></type><name>innodb_table</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>non_innodb_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>char_chunk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>char_deep</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>chunks_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"max-rows"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT64</name></expr>, <expr><operator>&amp;</operator><name>max_rows</name></expr>,
     <expr><literal type="string">"Limit the number of rows per block after the table is estimated, default 1000000"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"char-deep"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT64</name></expr>, <expr><operator>&amp;</operator><name>char_deep</name></expr>,
     <expr><literal type="string">""</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"char-chunk"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT64</name></expr>, <expr><operator>&amp;</operator><name>char_chunk</name></expr>,
     <expr><literal type="string">""</literal></expr>,<expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_chunk</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>give_me_another_innodb_chunk_step_queue</name><operator>=</operator><call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>give_me_another_non_innodb_chunk_step_queue</name><operator>=</operator><call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rows_per_file</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>char_chunk</name><operator>=</operator><ternary><condition><expr><name>char_chunk</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>num_threads</name></expr></then><else>:<expr><name>char_chunk</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>char_deep</name><operator>=</operator><ternary><condition><expr><name>char_deep</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>num_threads</name></expr></then><else>:<expr><name>char_deep</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_chunks_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>chunks_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>new_char_step</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <comment type="block">/*GList *list,*/</comment> <parameter><decl><type><name>guint</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>union <name>chunk_step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>=</operator><name>rows_per_file</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_clen</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//  g_message("new_char_step: cmin: `%s` | cmax: `%s`", cs-&gt;char_step.cmin, cs-&gt;char_step.cmax);</comment>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>deep</name></name> <operator>=</operator> <name>deep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
<comment type="line">//  cs-&gt;char_step.list = list; </comment>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s` IS NULL OR `%s` = '%s' OR"</literal></expr></argument>,<argument><expr><name>field</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//  g_message("new_char_step: min: %s | max: %s ", cs-&gt;char_step.cmin_escaped, cs-&gt;char_step.cmax_escaped);</comment>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>next_chunk_in_char_step</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_clen</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_clen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>split_char_step</name><parameter_list>( <parameter><decl><type><name>guint</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>previous_cs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>union <name>chunk_step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>deep</name></name> <operator>=</operator> <name>deep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>step</name></name><operator>=</operator><name>rows_per_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>previous_cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name><operator>=</operator><name>previous_cs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<comment type="line">//  cs-&gt;char_step.list = list;</comment>
  <return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>new_integer_step</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>nmin</name></decl></parameter>, <parameter><decl><type><name>guint64</name></type> <name>nmax</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>check_min</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>check_max</name></decl></parameter>)</parameter_list><block>{<block_content>
<comment type="line">//  g_message("New Integer Step");</comment>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>union <name>chunk_step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>=</operator> <name>nmin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>deep</name></name> <operator>=</operator> <name>deep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name> <operator>=</operator> <name>nmax</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name> <operator>=</operator> <name>rows_per_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>assigned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_max</name></name><operator>=</operator><name>check_max</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_min</name></name><operator>=</operator><name>check_min</name></expr>;</expr_stmt>
  <return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>new_real_partition_step</name><parameter_list>(<parameter><decl><type><name>GList</name> <modifier>*</modifier></type><name>partition</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>deep</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>number</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>union <name>chunk_step</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>partition</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>deep</name></name> <operator>=</operator> <name>deep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
  <return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_char_step</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_integer_step</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>cs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>field</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>get_next_integer_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name><init>=<expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("IN WHILE");</comment>
<comment type="line">//    cs=l-&gt;data;</comment>
    <expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator>union <name>chunk_step</name> <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>assigned</name></name><operator>==</operator><name>FALSE</name></expr>)</condition><block>{<block_content>
<comment type="line">//      g_message("Not assigned");</comment>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>cs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr>)</condition><block>{<block_content>
      
      <decl_stmt><decl><type><name>guint64</name></type> <name>new_minmax</name> <init>= <expr><ternary><condition><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name> <operator>-</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name></expr> ?</condition><then>
                           <expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>+</operator> <operator>(</operator><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name> <operator>-</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr> </then><else>:
                           <expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>cursor</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>new_cs</name> <init>= <expr><call><name>new_integer_step</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name>new_minmax</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>deep</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>number</name></name><operator>+</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>deep</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_max</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>deep</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>check_max</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name> <operator>=</operator> <name>new_minmax</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
 
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name></expr></argument>, <argument><expr><name>new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>new_cs</name></expr>;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Not able to split min %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" step: %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" max: %"</literal><name>G_GUINT64_FORMAT</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>step</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>get_next_char_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name><init>=<expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>l</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>cs</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"This should not happen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>l</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>assigned</name></name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>cs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>deep</name></name> <operator>&lt;=</operator> <name>char_deep</name> <operator>&amp;&amp;</operator> <call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>new_cs</name> <init>= <expr><call><name>split_char_step</name><argument_list>(
          <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>deep</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>number</name></name><operator>+</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>deep</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>deep</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <return>return <expr><name>new_cs</name></expr>;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
<comment type="line">//      g_message("Not able to split because %d &gt; %d | %s == %s | %d != 0", cs-&gt;char_step.deep,num_threads, cs-&gt;char_step.cmax, cs-&gt;char_step.cursor, cs-&gt;char_step.status);</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>get_next_partition_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name><init>=<expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>l</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>cs</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>assigned</name></name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>cs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>g_list_length</name> <argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>guint</name></type> <name>pos</name><init>=<expr><call><name>g_list_length</name> <argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>new_list</name><init>=<expr><call><name>g_list_nth</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>list</name></name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>new_list</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_list</name><operator>-&gt;</operator><name>prev</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>new_cs</name> <init>= <expr><call><name>new_real_partition_step</name><argument_list>(<argument><expr><name>new_list</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>deep</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>number</name></name><operator>+</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>deep</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>deep</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>assigned</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_append</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>new_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>new_cs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>get_next_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name></expr>)</condition><block>{<block_content>
    <case>case <expr><name>CHAR</name></expr>:</case> 
      <return>return <expr><call><name>get_next_char_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>INTEGER</name></expr>:</case>
      <return>return <expr><call><name>get_next_integer_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>PARTITION</name></expr>:</case>
      <return>return <expr><call><name>get_next_partition_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GList</name> <modifier>*</modifier></type> <name>get_partitions_for_table</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>partition_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"select PARTITION_NAME from information_schema.PARTITIONS where PARTITION_NAME is not null and TABLE_SCHEMA='%s' and TABLE_NAME='%s'"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="line">//partitioning is not supported</comment>
    <return>return <expr><name>partition_list</name></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>partition_list</name> <operator>=</operator> <call><name>g_list_append</name><argument_list>(<argument><expr><name>partition_list</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>partition_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gchar</name> <modifier>*</modifier></type> <name>get_escaped_middle_char</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>c1</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>c1len</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>c2len</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>part</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>guint</name></type> <name>cresultlen</name> <init>= <expr><ternary><condition><expr><name>c1len</name> <operator>&lt;</operator> <name>c2len</name></expr> ?</condition><then> <expr><name>c1len</name></expr></then><else>: <expr><name>c2len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>cresult</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr><name>gchar</name></expr></argument>, <argument><expr><name>cresultlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guchar</name></type> <name>cu1</name><init>=<expr><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>cu2</name><init>=<expr><name><name>c2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<comment type="line">//  g_message("get_escaped_middle_char: %u %u %u %d", cu1, abs(cu2-cu1) , cu2, part);</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cresultlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>cu1</name><operator>=</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cu2</name><operator>=</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cu2</name><operator>!=</operator><name>cu1</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>cresult</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><ternary><condition><expr><name>cu2</name><operator>&gt;</operator><name>cu1</name></expr>?</condition><then><expr><name>cu1</name></expr></then><else>:<expr><name>cu2</name></expr></else></ternary><operator>)</operator><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>cu2</name><operator>-</operator><name>cu1</name></expr></argument>)</argument_list></call><operator>/</operator><name>part</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>cresultlen</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>cu1</name><operator>=</operator><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>cu2</name><operator>=</operator><name><name>c2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<comment type="line">//  guchar cur=cresult[0];</comment>
<comment type="line">//  g_message("get_escaped_middle_char: %u %u %u %d", cu1, cur , cu2, part);</comment>
  <expr_stmt><expr><name><name>cresult</name><index>[<expr><name>cresultlen</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>escapedresult</name><init>=<expr><call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>cresultlen</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>escapedresult</name></expr></argument>, <argument><expr><name>cresult</name></expr></argument>, <argument><expr><name>cresultlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>cresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>escapedresult</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_integer_min</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name><init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>minmax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Get minimum/maximum */</comment>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
                        <argument><expr><literal type="string">"SELECT %s `%s` FROM `%s`.`%s` WHERE %s %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" &lt;= `%s` AND `%s` &lt;= %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" ORDER BY `%s` ASC LIMIT 1"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/*!40001 SQL_NO_CACHE */"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>prefix</name></name></expr></argument>,  <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>minmax</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>minmax</name></expr>)</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>row</name><operator>==</operator><name>NULL</name> <operator>||</operator> <name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>guint64</name></type> <name>nmin</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name> <operator>=</operator> <name>nmin</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_integer_max</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name><init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>minmax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Get minimum/maximum */</comment>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
                        <argument><expr><literal type="string">"SELECT %s `%s` FROM `%s`.`%s` WHERE %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" &lt;= `%s` AND `%s` &lt;= %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" ORDER BY `%s` DESC LIMIT 1"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/*!40001 SQL_NO_CACHE */"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  g_free(query);</comment>
  <expr_stmt><expr><name>minmax</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>minmax</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("No middle point");</comment>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>row</name><operator>==</operator><name>NULL</name> <operator>||</operator> <name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("No middle point");</comment>
<label><name>cleanup</name>:</label>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmin</name></name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>guint64</name></type> <name>nmax</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
  
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>nmax</name></name> <operator>=</operator> <name>nmax</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gchar</name><modifier>*</modifier></type> <name>update_cursor</name> <parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>table_job</name></name> <modifier>*</modifier></type><name>tj</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name><init>= <expr><name><name>tj</name><operator>-&gt;</operator><name>chunk_step</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>minmax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Get minimum/maximum */</comment>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type> <name>middle</name> <init>= <expr><call><name>get_escaped_middle_char</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_clen</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tj</name><operator>-&gt;</operator><name>char_chunk_part</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name><name>tj</name><operator>-&gt;</operator><name>char_chunk_part</name></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//num_threads*(num_threads - cs-&gt;char_step.deep&gt;0?num_threads-cs-&gt;char_step.deep:1));</comment>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
                        <argument><expr><literal type="string">"SELECT %s `%s` FROM `%s`.`%s` WHERE '%s' &lt;= `%s` AND '%s' &lt;= `%s` AND `%s` &lt;= '%s' ORDER BY `%s` LIMIT 1"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/*!40001 SQL_NO_CACHE */"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr></argument>, <argument><expr><name><name>tj</name><operator>-&gt;</operator><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>minmax</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>minmax</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("No middle point");</comment>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>row</name><operator>==</operator><name>NULL</name></expr>)</condition><block>{<block_content>
<comment type="line">//    g_message("No middle point");</comment>
<label><name>cleanup</name>:</label>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_clen</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<comment type="line">//  guchar d=middle[0];</comment>
<comment type="line">//  g_message("updated point: `%s` | `%c` %u", middle, middle[0], d);</comment>
  <decl_stmt><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><call><name>mysql_fetch_lengths</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>tj</name><operator>-&gt;</operator><name>char_chunk_part</name></name><operator>--</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_clen</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_clen</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>get_new_minmax</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list><block>{<block_content>
<comment type="line">//  g_message("Thread %d: get_new_minmax", td-&gt;thread_id);</comment>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>minmax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type> <name>previous</name><init>=<expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>previous</name></name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Get minimum/maximum */</comment>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>middle</name><init>=<expr><call><name>get_escaped_middle_char</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name></expr></then><else>: <expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_len</name></name></expr></then><else>:<expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_clen</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>char_chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//  guchar d=middle[0];</comment>
<comment type="line">//  g_message("Middle point: `%s` | `%c` %u", middle, middle[0], d);</comment>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
                        <argument><expr><literal type="string">"SELECT %s `%s` FROM `%s`.`%s` WHERE `%s` &gt; (SELECT `%s` FROM `%s`.`%s` WHERE `%s` &gt; '%s' ORDER BY `%s` LIMIT 1) AND '%s' &lt; `%s` AND `%s` &lt; '%s' ORDER BY `%s` LIMIT 1"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/*!40001 SQL_NO_CACHE */"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name><operator>!=</operator><name>NULL</name></expr>?</condition><then><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cursor_escaped</name></name></expr></then><else>:<expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>minmax</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>minmax</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    g_message("No middle point");</comment>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    g_message("No middle point");</comment>
    <return>return <expr><name>FALSE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<comment type="line">//  guchar c=row[0][0];</comment>
<comment type="line">//  g_message("First char %u ", c);</comment>
  <decl_stmt><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><call><name>mysql_fetch_lengths</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_clen</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmax_escaped</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>previous</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>status</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_clen</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_strlcpy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>cmin_escaped</name></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_chunk_strategy_for_dbt</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>partitions</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>split_partitions</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>partitions</name> <operator>=</operator> <call><name>get_partitions_for_table</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>partitions</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_prepend</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><call><name>new_real_partition_step</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>PARTITION</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rows_per_file</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<comment type="line">//  mysql_query(td-&gt;thrconn, set_names_str);</comment>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>minmax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Get minimum/maximum */</comment>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(
                        <argument><expr><literal type="string">"SELECT %s MIN(`%s`),MAX(`%s`),LEFT(MIN(`%s`),1),LEFT(MAX(`%s`),1) FROM `%s`.`%s` %s %s"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><operator>(</operator><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name><operator>)</operator></expr>
                            ?</condition><then> <expr><literal type="string">"/*!40001 SQL_NO_CACHE */"</literal></expr>
                            </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>where_option</name></expr> ?</condition><then> <expr><literal type="string">"WHERE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>where_option</name></expr> ?</condition><then> <expr><name>where_option</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  g_message("Query: %s", query);</comment>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>minmax</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>minmax</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>NONE</name></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gulong</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><call><name>mysql_fetch_lengths</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Check if all values are NULL */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>NONE</name></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Support just bigger INTs for now, very dumb, no verify approach */</comment>
  <decl_stmt><decl><type><name>guint64</name></type> <name>nmin</name></decl>,<decl><type ref="prev"/><name>nmax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>MYSQL_TYPE_LONG</name></expr>:</case>
  <case>case <expr><name>MYSQL_TYPE_LONGLONG</name></expr>:</case>
  <case>case <expr><name>MYSQL_TYPE_INT24</name></expr>:</case>
  <case>case <expr><name>MYSQL_TYPE_SHORT</name></expr>:</case>
    <expr_stmt><expr><name>nmin</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nmax</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nmax</name><operator>-</operator><name>nmin</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>rows_per_file</name><operator>)</operator></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>cs</name><operator>=</operator><call><name>new_integer_step</name><argument_list>(<argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s` IS NULL OR `%s` = %"</literal><name>G_GUINT64_FORMAT</name><literal type="string">" OR"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name>nmin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><name>nmin</name></expr></argument>, <argument><expr><name>nmax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_prepend</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>INTEGER</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>NONE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>minmax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>
    <break>break;</break>
  <case>case <expr><name>MYSQL_TYPE_STRING</name></expr>:</case>
  <case>case <expr><name>MYSQL_TYPE_VAR_STRING</name></expr>:</case>
    <expr_stmt><expr><name>cs</name><operator>=</operator><call><name>new_char_step</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>field</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name><operator>=</operator><call><name>g_list_prepend</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunks_queue</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>CHAR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>minmax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>NONE</name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>
<label><name>cleanup</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>minmax</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  </block_content>}</block></if><else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name><operator>=</operator><name>NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_field_for_dbt</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>indexes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* first have to pick index, in future should be able to preset in
 *    * configuration too */</comment>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SHOW INDEX FROM `%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>database</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>indexes</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>indexes</name></expr>)</condition><block>{<block_content>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"PRIMARY"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Pick first column in PK, cardinality doesn't matter */</comment>
        <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* If no PK found, try using first UNIQUE index */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>field</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mysql_data_seek</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <comment type="block">/* Again, first column of any unique index */</comment>
          <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Still unlucky? Pick any high-cardinality index */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>field</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>-&gt;</operator><name>use_any_index</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>guint64</name></type> <name>max_cardinality</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>guint64</name></type> <name>cardinality</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>mysql_data_seek</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>cardinality</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>cardinality</name> <operator>&gt;</operator> <name>max_cardinality</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max_cardinality</name> <operator>=</operator> <name>cardinality</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>indexes</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>field</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Try to get EXPLAIN'ed estimates of row in resultset */</comment>
<function><type><name>guint64</name></type> <name>estimate_count</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
                       <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>querybase</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>conn</name> <operator>&amp;&amp;</operator> <name>database</name> <operator>&amp;&amp;</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>querybase</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN SELECT `%s` FROM `%s`.`%s`"</literal></expr></argument>,
                              <argument><expr><operator>(</operator><ternary><condition><expr><name>field</name></expr> ?</condition><then> <expr><name>field</name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>from</name> <operator>||</operator> <name>to</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_assert</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fromclause</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>toclause</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fromclause</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">" `%s` &gt;= %s "</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>to</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mysql_real_escape_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>toclause</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">" `%s` &lt;= %s"</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s WHERE %s %s %s"</literal></expr></argument>, <argument><expr><name>querybase</name></expr></argument>,
                            <argument><expr><operator>(</operator><ternary><condition><expr><name>from</name></expr> ?</condition><then> <expr><name>fromclause</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                            <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>from</name> <operator>&amp;&amp;</operator> <name>to</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"AND"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>to</name></expr> ?</condition><then> <expr><name>toclause</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>toclause</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>toclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fromclause</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>fromclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>querybase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>querybase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>querybase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Unable to get estimates for %s.%s: %s"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>,
              <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>guint64</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>&amp;&amp;</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>get_next_dbt_and_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dbt</name></decl></parameter>,<parameter><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>dbt_list</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>iter</name><init>=<expr><operator>*</operator><name>dbt_list</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>lcs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>are_there_jobs_defining</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>d</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>chunk_type</name></name> <operator>!=</operator> <name>DEFINING</name></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>chunk_type</name></name> <operator>==</operator> <name>NONE</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dbt</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>dbt_list</name><operator>=</operator><call><name>g_list_remove</name><argument_list>(<argument><expr><operator>*</operator><name>dbt_list</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>chunk_type</name></name> <operator>==</operator> <name>UNDEFINED</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dbt</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>chunk_type</name></name> <operator>=</operator> <name>DEFINING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>are_there_jobs_defining</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>lcs</name><operator>=</operator><call><name>get_next_chunk</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lcs</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>cs</name><operator>=</operator><name>lcs</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>dbt</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>dbt_list</name><operator>=</operator><call><name>g_list_remove</name><argument_list>(<argument><expr><operator>*</operator><name>dbt_list</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>are_there_jobs_defining</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>are_there_jobs_defining</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>give_me_another_non_innodb_chunk_step</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>give_me_another_non_innodb_chunk_step_queue</name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>give_me_another_innodb_chunk_step</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>give_me_another_innodb_chunk_step_queue</name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enqueue_shutdown_jobs</name><parameter_list>(<parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>n</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_SHUTDOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>table_job_enqueue</name><parameter_list>(<parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type> <name>pop_queue</name></decl></parameter>, <parameter><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type> <name>push_queue</name></decl></parameter>, <parameter><decl><type><name>GList</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_list</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>chunk_step</name></name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>are_there_jobs_defining</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>pop_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbt</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cs</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>are_there_jobs_defining</name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>are_there_jobs_defining</name><operator>=</operator><call><name>get_next_dbt_and_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbt</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>,<argument><expr><name>table_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cs</name><operator>==</operator><name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dbt</name><operator>==</operator><name>NULL</name><operator>)</operator></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>are_there_jobs_defining</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"chunk_builder_thread: Are jobs defining... show we wait and try again later?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>pop_queue</name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"chunk_builder_thread: There were not job defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"chunk_builder_thread: Job will be enqueued"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>dbt</name><operator>-&gt;</operator><name>chunk_type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>INTEGER</name></expr>:</case>
      <expr_stmt><expr><call><name>create_job_to_dump_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>integer_step</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>primary_key</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>g_async_queue_push</name></expr></argument>, <argument><expr><name>push_queue</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>create_job_to_dump_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>char_step</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>primary_key</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>g_async_queue_push</name></expr></argument>, <argument><expr><name>push_queue</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>PARTITION</name></expr>:</case>
      <expr_stmt><expr><call><name>create_job_to_dump_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>partition_step</name><operator>.</operator><name>number</name></name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>primary_key</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>g_async_queue_push</name></expr></argument>, <argument><expr><name>push_queue</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NONE</name></expr>:</case>
      <expr_stmt><expr><call><name>create_job_to_dump_chunk</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>primary_key</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>g_async_queue_push</name></expr></argument>, <argument><expr><name>push_queue</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DEFINING</name></expr>:</case>
      <expr_stmt><expr><call><name>create_job_to_determine_chunk_type</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>g_async_queue_push</name></expr></argument>, <argument><expr><name>push_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"This should not happen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch> 
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>chunk_builder_thread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Starting Non-InnoDB tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_job_enqueue</name><argument_list>(<argument><expr><name>give_me_another_non_innodb_chunk_step_queue</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>non_innodb_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>non_innodb_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Non-InnoDB tables completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>enqueue_shutdown_jobs</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>non_innodb_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Starting InnoDB tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_job_enqueue</name><argument_list>(<argument><expr><name>give_me_another_innodb_chunk_step_queue</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>innodb_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>innodb_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"InnoDB tables completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>enqueue_shutdown_jobs</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>innodb_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

</unit>
