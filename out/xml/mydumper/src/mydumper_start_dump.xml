<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/mydumper_start_dump.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    Domas Mituzas, Facebook ( domas at fb dot com )
                    Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                    Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)
                    Max Bubenick, Percona RDBA (max dot bubenick at percona dot com)
                    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE64_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FILE_OFFSET_BITS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>MARIADB_CLIENT_VERSION_STR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>MYSQL_SERVER_VERSION</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_SERVER_VERSION</name></cpp:macro> <cpp:value>MARIADB_CLIENT_VERSION_STR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gerror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_detect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<comment type="line">//#include "common_options.h"</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib-unix.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logging.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"set_verbose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/statvfs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_start_dump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_working_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_pmm_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_exec_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_masquerade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mydumper_write.h"</cpp:file></cpp:include>
<comment type="block">/* Some earlier versions of MySQL do not yet define MYSQL_TYPE_JSON */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MYSQL_TYPE_JSON</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MYSQL_TYPE_JSON</name></cpp:macro> <cpp:value>245</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Program options */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GKeyFile</name> <modifier>*</modifier></type> <name>key_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gint</name></type> <name>database_counter</name></decl>;</decl_stmt>
<comment type="line">//extern gint table_counter;</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>stream_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>output_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>output_directory_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>dump_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>snapshot_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>daemon_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>disk_limits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>load_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>detected_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>defaults_file</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>m_open</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_close</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> (<modifier>*</modifier><name>m_write</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GString</name> <modifier>*</modifier></type><name>set_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>tables_skiplist_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>tidb_snapshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>no_updated_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longquery</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longquery_retries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longquery_retry_interval</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_dummy_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_dummy_toku_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compress_output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>killqueries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lock_all_tables</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_schemas</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_locks</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>less_locking</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_backup_locks</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>no_ddl_locks</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>dump_tablespaces</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>table_schemas</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>trigger_schemas</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>view_schemas</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>schema_post</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="line">//gint non_innodb_table_counter = 0;</comment>
<decl_stmt><decl><type><name>gint</name></type> <name>schema_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gint</name></type> <name>non_innodb_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>updated_since</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>trx_consistency_only</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>set_names_str</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pmm_resolution</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>pmm_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>pmm</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>pause_at</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>resume_at</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>db_items</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>ready_database_dump_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier></type><name>ready_table_dump_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>configuration_per_table</name></name></type> <name>conf_per_table</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// For daemon mode</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>dump_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>shutdown_triggered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GAsyncQueue</name> <modifier>*</modifier></type><name>start_scheduled_dump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>exec_command</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>start_dump_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"compress"</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>compress_output</name></expr>,
     <expr><literal type="string">"Compress output files"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exec"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>exec_command</name></expr>,
      <expr><literal type="string">"Command to execute using the file as parameter"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"long-query-retries"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>longquery_retries</name></expr>,
     <expr><literal type="string">"Retry checking for long queries, default 0 (do not retry)"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"long-query-retry-interval"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>longquery_retry_interval</name></expr>,
     <expr><literal type="string">"Time to wait before retrying the long query check in seconds, default 60"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"long-query-guard"</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>longquery</name></expr>,
     <expr><literal type="string">"Set long query timer in seconds, default 60"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,    
    <expr><block>{<expr><literal type="string">"tidb-snapshot"</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>tidb_snapshot</name></expr>,
     <expr><literal type="string">"Snapshot to use for TiDB"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"updated-since"</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_INT</name></expr>, <expr><operator>&amp;</operator><name>updated_since</name></expr>,
     <expr><literal type="string">"Use Update_time to dump only tables updated in the last U days"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-locks"</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_locks</name></expr>,
     <expr><literal type="string">"Do not execute the temporary shared read lock.  WARNING: This will cause "</literal>
     <literal type="string">"inconsistent backups"</literal></expr>,
     <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"all-tablespaces"</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>dump_tablespaces</name></expr>,
    <expr><literal type="string">"Dump all the tablespaces."</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-backup-locks"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_backup_locks</name></expr>,
     <expr><literal type="string">"Do not use Percona backup locks"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lock-all-tables"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>lock_all_tables</name></expr>,
     <expr><literal type="string">"Use LOCK TABLE for all, instead of FTWRL"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"less-locking"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>less_locking</name></expr>,
     <expr><literal type="string">"Minimize locking time on InnoDB tables."</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"trx-consistency-only"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>trx_consistency_only</name></expr>,
     <expr><literal type="string">"Transactional consistency only"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"no-schemas"</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>no_schemas</name></expr>,
      <expr><literal type="string">"Do not dump table schemas with the data and triggers"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"kill-long-queries"</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>killqueries</name></expr>,
     <expr><literal type="string">"Kill long running queries (instead of aborting)"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"set-names"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>set_names_str</name></expr>,
      <expr><literal type="string">"Sets the names, use it at your own risk, default binary"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pmm-path"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>pmm_path</name></expr>,
      <expr><literal type="string">"which default value will be /usr/local/percona/pmm2/collectors/textfile-collector/high-resolution"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pmm-resolution"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_STRING</name></expr>, <expr><operator>&amp;</operator><name>pmm_resolution</name></expr>,
      <expr><literal type="string">"which default will be high"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>load_start_dump_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>load_dump_into_file_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_chunks_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_working_thread_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_exec_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>load_write_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>start_dump_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>initialize_start_dump</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>initialize_common</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>initialize_working_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf_per_table</name><operator>.</operator><name>all_anonymized_function</name></name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf_per_table</name><operator>.</operator><name>all_where_per_table</name></name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf_per_table</name><operator>.</operator><name>all_limit_per_table</name></name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf_per_table</name><operator>.</operator><name>all_num_threads_per_table</name></name><operator>=</operator><call><name>g_hash_table_new</name> <argument_list>( <argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>set_names_str</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>tmp_str</name><init>=<expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"/*!40101 SET NAMES %s*/"</literal></expr></argument>,<argument><expr><name>set_names_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>set_names_str</name><operator>=</operator><name>tmp_str</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>set_names_str</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>set_names_str</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"/*!40101 SET NAMES binary*/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  

  <comment type="line">// until we have an unique option on lock types we need to ensure this</comment>
  <if_stmt><if>if <condition>(<expr><name>no_locks</name> <operator>||</operator> <name>trx_consistency_only</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>less_locking</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="line">// clarify binlog coordinates with trx_consistency_only</comment>
  <if_stmt><if>if <condition>(<expr><name>trx_consistency_only</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Using trx_consistency_only, binlog coordinates will not be "</literal>
              <literal type="string">"accurate if you are writing to non transactional tables."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>db_items</name><operator>=</operator><call><name>g_strsplit</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pmm_path</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pmm</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmm_resolution</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>pmm_resolution</name><operator>=</operator><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>pmm_resolution</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pmm</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pmm_path</name><operator>=</operator><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"/usr/local/percona/pmm2/collectors/textfile-collector/%s-resolution"</literal></expr></argument>,<argument><expr><name>pmm_resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name> <operator>&amp;&amp;</operator> <name>exec_command</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Stream and execute a command is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_disk_limits</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>p_at</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>r_at</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pause_at</name><operator>=</operator><name>p_at</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>resume_at</name><operator>=</operator><name>r_at</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>is_disk_space_ok</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>statvfs</name></name></type> <name>buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>statvfs</name><argument_list>(<argument><expr><name>output_directory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>available</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>buffer</name><operator>.</operator><name>f_bfree</name></name> <operator>*</operator> <name><name>buffer</name><operator>.</operator><name>f_frsize</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>available</name> <operator>&gt;</operator> <name>val</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Disk space check failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>monitor_disk_space_thread</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>queue</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pause_mutex_per_thread</name><init>=<expr><call><name>g_new</name><argument_list>(<argument><expr><name>GMutex</name> <operator>*</operator></expr></argument> , <argument><expr><name>num_threads</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>gboolean</name></type> <name>previous_state</name> <init>= <expr><name>TRUE</name></expr></init></decl>, <decl><type ref="prev"/><name>current_state</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>disk_limits</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>current_state</name> <operator>=</operator> <ternary><condition><expr><name>previous_state</name></expr> ?</condition><then> <expr><call><name>is_disk_space_ok</name><argument_list>(<argument><expr><name>pause_at</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>is_disk_space_ok</name><argument_list>(<argument><expr><name>resume_at</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>previous_state</name> <operator>!=</operator> <name>current_state</name></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_state</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Pausing backup disk space lower than %dMB. You need to free up to %dMB to resume"</literal></expr></argument>,<argument><expr><name>pause_at</name></expr></argument>,<argument><expr><name>resume_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Resuming backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>previous_state</name> <operator>=</operator> <name>current_state</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>GMutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>pause_mutex_per_thread</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>gboolean</name></type> <name>sig_triggered</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>signal</name> <operator>==</operator> <name>SIGTERM</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>shutdown_triggered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>

    <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pause_mutex_per_thread</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>pause_mutex_per_thread</name><operator>=</operator><call><name>g_new</name><argument_list>(<argument><expr><name>GMutex</name> <operator>*</operator></expr></argument> , <argument><expr><name>num_threads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator>struct <name>configuration</name> <operator>*</operator><operator>)</operator><name>user_data</name><operator>)</operator><operator>-&gt;</operator><name>pause_resume</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>configuration</name> <operator>*</operator><operator>)</operator><name>user_data</name><operator>)</operator><operator>-&gt;</operator><name>pause_resume</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>configuration</name> <operator>*</operator><operator>)</operator><name>user_data</name><operator>)</operator><operator>-&gt;</operator><name>pause_resume</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>daemon_mode</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Ctrl+c detected! Are you sure you want to cancel(Y/N)?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>queue</name></expr></argument>,<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <do>do<block>{<block_content>
          <expr_stmt><expr><name>c</name><operator>=</operator><call><name>fgetc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>while <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'\n'</literal></expr>)</condition>;</do>
        <if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block>{<block_content>
          <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
          <return>return <expr><name>TRUE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'Y'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><name>shutdown_triggered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
          <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num_threads</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>pause_mutex_per_thread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Shutting down gracefully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>gboolean</name></type> <name>sig_triggered_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sig_triggered</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>,<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>gboolean</name></type> <name>sig_triggered_term</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sig_triggered</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>,<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>signal_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GMainLoop</name> <modifier>*</modifier></type> <name>loop</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_unix_signal_add</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>sig_triggered_int</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_unix_signal_add</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sig_triggered_term</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>loop</name> <operator>=</operator> <call><name>g_main_loop_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_main_loop_run</name> <argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Ending signal thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>GHashTable</name> <modifier>*</modifier></type> <name>mydumper_initialize_hash_of_session_variables</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name><init>=<expr><call><name>initialize_hash_of_session_variables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"information_schema_stats_expiry"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"0 /*!80003"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>set_session_hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MYSQL</name> <modifier>*</modifier></type><name>create_main_connection</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>mysql_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mydumper</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"mydumper"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>m_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>mydumper</name></expr></argument> ,<argument><expr><ternary><condition><expr><name>db_items</name><operator>!=</operator><name>NULL</name></expr>?</condition><then><expr><name><name>db_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></then><else>:<expr><name>db</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mydumper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>set_session</name> <operator>=</operator> <call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>detected_server</name> <operator>=</operator> <call><name>detect_server</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type> <name>set_session_hash</name> <init>= <expr><call><name>mydumper_initialize_hash_of_session_variables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key_file</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>load_session_hash_from_key_file</name><argument_list>(<argument><expr><name>key_file</name></expr></argument>,<argument><expr><name>set_session_hash</name></expr></argument>,<argument><expr><literal type="string">"mydumper_variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>load_per_table_info_from_key_file</name><argument_list>(<argument><expr><name>key_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf_per_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>get_function_pointer_for</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>refresh_set_session_from_hash</name><argument_list>(<argument><expr><name>set_session</name></expr></argument>,<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_hash_table</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>set_session_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>execute_gstring</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>set_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>detected_server</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>SERVER_TYPE_MYSQL</name></expr>:</case>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Connected to a MySQL server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_transaction_isolation_level_repeatable_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SERVER_TYPE_DRIZZLE</name></expr>:</case>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Connected to a Drizzle server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SERVER_TYPE_TIDB</name></expr>:</case>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Connected to a TiDB server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Cannot detect server type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_not_updated</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
      <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) FROM "</literal>
                      <literal type="string">"information_schema.TABLES WHERE TABLE_TYPE = 'BASE "</literal>
                      <literal type="string">"TABLE' AND UPDATE_TIME &lt; NOW() - INTERVAL %d DAY"</literal></expr></argument>,
                      <argument><expr><name>updated_since</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>no_updated_tables</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>no_updated_tables</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>no_updated_tables</name> <operator>=</operator> <call><name>g_list_reverse</name><argument_list>(<argument><expr><name>no_updated_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>long_query_wait</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p3</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>longquery_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SHOW PROCESSLIST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Could not check PROCESSLIST, no long query guard enabled: %s"</literal></expr></argument>,
                  <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
       <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

        <comment type="block">/* Just in case PROCESSLIST output column order changes */</comment>
        <decl_stmt><decl><type><name>MYSQL_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>mysql_fetch_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>guint</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tcol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ccol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>icol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ucol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Command"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ccol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
          <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Time"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tcol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
          <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"Id"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>icol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
          <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"User"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ucol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tcol</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccol</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>icol</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error obtaining information from processlist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>ccol</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>ccol</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Query"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>ucol</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>ucol</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"system user"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>tcol</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>tcol</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>longquery</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>killqueries</name></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                              <argument><expr><name>p3</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"KILL %lu"</literal></expr></argument>, <argument><expr><call><name>atol</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>icol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Could not KILL slow query: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>longquery_count</name><operator>++</operator></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Killed a query that was running for %ss"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>tcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>longquery_count</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>longquery_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if>
        <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>longquery_retries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"There are queries in PROCESSLIST running longer than "</literal>
                       <literal type="string">"%us, aborting dump,\n\t"</literal>
                       <literal type="string">"use --long-query-guard to change the guard value, kill "</literal>
                       <literal type="string">"queries (--kill-long-queries) or use \n\tdifferent "</literal>
                       <literal type="string">"server for dump"</literal></expr></argument>,
                       <argument><expr><name>longquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>longquery_retries</name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"There are queries in PROCESSLIST running longer than "</literal>
                         <literal type="string">"%us, retrying in %u seconds (%u left)."</literal></expr></argument>,
                         <argument><expr><name>longquery</name></expr></argument>, <argument><expr><name>longquery_retry_interval</name></expr></argument>, <argument><expr><name>longquery_retries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name>longquery_retry_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_mariadb_backup_locks</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"BACKUP STAGE START"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire BACKUP STAGE START: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"BACKUP STAGE FLUSH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire BACKUP STAGE FLUSH: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"BACKUP STAGE BLOCK_DDL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire BACKUP STAGE BLOCK_DDL: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"BACKUP STAGE BLOCK_COMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire BACKUP STAGE BLOCK_COMMIT: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_percona57_backup_locks</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"LOCK TABLES FOR BACKUP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire LOCK TABLES FOR BACKUP, snapshots will "</literal>
               <literal type="string">"not be consistent: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"LOCK BINLOG FOR BACKUP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire LOCK BINLOG FOR BACKUP, snapshots will "</literal>
               <literal type="string">"not be consistent: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_lock_instance_backup</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"LOCK INSTANCE FOR BACKUP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire LOCK INSTANCE FOR BACKUP: %s"</literal></expr></argument>,
               <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function> 

<function><type><name>void</name></type> <name>send_unlock_tables</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UNLOCK TABLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_unlock_binlogs</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UNLOCK BINLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_unlock_instance_backup</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UNLOCK INSTANCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_backup_stage_end</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"BACKUP STAGE END"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_flush_table_with_read_lock</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Sending Flush Table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"FLUSH NO_WRITE_TO_BINLOG TABLES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Flush tables failed, we are continuing anyways: %s"</literal></expr></argument>,
                   <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Acquiring FTWRL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"FLUSH TABLES WITH READ LOCK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't acquire global lock, snapshots will not be "</literal>
                   <literal type="string">"consistent: %s"</literal></expr></argument>,
                   <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>determine_ddl_lock_function</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><modifier>*</modifier><name>flush_table</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>acquire_lock_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier> <name>release_lock_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier> <name>release_binlog_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT @@version_comment, @@version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res2</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><operator>*</operator><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>ver</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>ver</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Percona"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"8."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>acquire_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_lock_instance_backup</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>release_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_unlock_instance_backup</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"5.7."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>acquire_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_percona57_backup_locks</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>release_binlog_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_unlock_binlogs</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>release_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_unlock_tables</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>conn</name> <operator>=</operator> <call><name>create_main_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"MySQL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"8."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>acquire_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_lock_instance_backup</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>release_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_unlock_instance_backup</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mariadb"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"10.5"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
          <operator>(</operator><call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"10.6"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>flush_table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>acquire_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_mariadb_backup_locks</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>release_lock_function</name> <operator>=</operator> <operator>&amp;</operator><name>send_backup_stage_end</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>send_lock_all_tables</name><parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="line">// LOCK ALL TABLES</comment>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">16777216</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>dbtb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>dt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>tables_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>retry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>lock</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>tables</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tables</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>dt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>dt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>dbtb</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tables_lock</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>tables_lock</name></expr></argument>, <argument><expr><name>dbtb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>tables_lock</name> <operator>=</operator> <call><name>g_list_reverse</name><argument_list>(<argument><expr><name>tables_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>db_quoted_list</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>db_quoted_list</name><operator>=</operator><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>db_quoted_list</name></expr></argument>,<argument><expr><literal type="string">"'%s'"</literal></expr></argument>,<argument><expr><name><name>db_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>i</name><operator>&lt;</operator><call><name>g_strv_length</name><argument_list>(<argument><expr><name>db_items</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>db_quoted_list</name></expr></argument>,<argument><expr><literal type="string">",'%s'"</literal></expr></argument>,<argument><expr><name><name>db_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>

      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(
            <argument><expr><name>query</name></expr></argument>,
            <argument><expr><literal type="string">"SELECT TABLE_SCHEMA, TABLE_NAME FROM information_schema.TABLES "</literal>
            <literal type="string">"WHERE TABLE_SCHEMA in (%s) AND TABLE_TYPE ='BASE TABLE' AND NOT "</literal>
            <literal type="string">"(TABLE_SCHEMA = 'mysql' AND (TABLE_NAME = 'slow_log' OR "</literal>
            <literal type="string">"TABLE_NAME = 'general_log'))"</literal></expr></argument>,
            <argument><expr><name><name>db_quoted_list</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_printf</name><argument_list>(
        <argument><expr><name>query</name></expr></argument>,
        <argument><expr><literal type="string">"SELECT TABLE_SCHEMA, TABLE_NAME FROM information_schema.TABLES "</literal>
        <literal type="string">"WHERE TABLE_TYPE ='BASE TABLE' AND TABLE_SCHEMA NOT IN "</literal>
        <literal type="string">"('information_schema', 'performance_schema', 'data_dictionary') "</literal>
        <literal type="string">"AND NOT (TABLE_SCHEMA = 'mysql' AND (TABLE_NAME = 'slow_log' OR "</literal>
        <literal type="string">"TABLE_NAME = 'general_log'))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tables_lock</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>query</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>  )</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't get table list for lock all tables: %s"</literal></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name></decl>;</decl_stmt>

      <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tables</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>table_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tables</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>g_ascii_strcasecmp</name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name>table_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>table_found</name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name>lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>&amp;&amp;</operator> <name>tables_skiplist_file</name> <operator>&amp;&amp;</operator> <call><name>check_skiplist</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>eval_regex</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>dbtb</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>tables_lock</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>tables_lock</name></expr></argument>, <argument><expr><name>dbtb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>tables_lock</name> <operator>=</operator> <call><name>g_list_reverse</name><argument_list>(<argument><expr><name>tables_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tables_lock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
  <comment type="line">// Try three times to get the lock, this is in case of tmp tables</comment>
  <comment type="line">// disappearing</comment>
    <while>while <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>retry</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>query</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"LOCK TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>tables_lock</name></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>g_string_append_printf</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"%s READ,"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>=</operator><literal type="char">' '</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>failed_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp_fail</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>tmp_fail</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp_fail</name> <operator>=</operator> <call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>tmp_fail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>failed_table</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"`%s`.`%s`"</literal></expr></argument>, <argument><expr><name><name>tmp_fail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp_fail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>tables_lock</name></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>failed_table</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tables_lock</name> <operator>=</operator> <call><name>g_list_remove</name><argument_list>(<argument><expr><name>tables_lock</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tmp_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>failed_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>retry</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Lock all tables fail: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"No table found to lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    exit(EXIT_FAILURE);</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>tables_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>start_dump</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>create_main_connection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>second_conn</name> <init>= <expr><name>conn</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>configuration</name></name></type> <name>conf</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>metadata_partial_filename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>metadata_filename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>detect_server_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>flush_table_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><operator>&amp;</operator><name>send_flush_table_with_read_lock</name></expr></init>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>acquire_ddl_lock_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release_ddl_lock_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release_binlog_function</name>)<parameter_list>(<parameter><decl><type><name>MYSQL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type><name>dbt</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="line">//  struct schema_post *sp;</comment>
  <decl_stmt><decl><type><name>guint</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>nufile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>disk_check_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>disk_limits</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>pause_resume</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>disk_check_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><name>monitor_disk_space_thread</name></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>pause_resume</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>daemon_mode</name></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>serror</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>sthread</name> <init>=
        <expr><call><name>g_thread_create</name><argument_list>(<argument><expr><name>signal_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serror</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sthread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not create signal thread: %s"</literal></expr></argument>, <argument><expr><name><name>serror</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>serror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>


  <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>pmmthread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pmm</name></expr>)</condition><block>{<block_content>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Using PMM resolution %s at %s"</literal></expr></argument>, <argument><expr><name>pmm_resolution</name></expr></argument>, <argument><expr><name>pmm_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>serror</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pmmthread</name> <operator>=</operator>
        <call><name>g_thread_create</name><argument_list>(<argument><expr><name>pmm_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pmmthread</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not create pmm thread: %s"</literal></expr></argument>, <argument><expr><name><name>serror</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>serror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>metadata_partial_filename</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/metadata.partial"</literal></expr></argument>, <argument><expr><name>dump_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>metadata_filename</name> <operator>=</operator> <call><name>g_strndup</name><argument_list>(<argument><expr><name>metadata_partial_filename</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>metadata_partial_filename</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>mdfile</name> <init>= <expr><call><name>g_fopen</name><argument_list>(<argument><expr><name>metadata_partial_filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't write metadata file %s (%d)"</literal></expr></argument>, <argument><expr><name>metadata_partial_filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>updated_since</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s/not_updated_tables"</literal></expr></argument>, <argument><expr><name>dump_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nufile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nufile</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't write not_updated_tables file (%d)"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>get_not_updated</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>nufile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_locks</name></expr>)</condition> <block>{<block_content>
  <comment type="line">// We check SHOW PROCESSLIST, and if there're queries</comment>
  <comment type="line">// larger than preset value, we terminate the process.</comment>
  <comment type="line">// This avoids stalling whole server with flush.</comment>
		<expr_stmt><expr><call><name>long_query_wait</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_TIDB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Skipping locks because of TiDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tidb_snapshot</name></expr>)</condition> <block>{<block_content>

      <comment type="line">// Generate a @@tidb_snapshot to use for the worker threads since</comment>
      <comment type="line">// the tidb-snapshot argument was not specified when starting mydumper</comment>

      <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SHOW MASTER STATUS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Couldn't generate @@tidb_snapshot: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>

        <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>row</name> <init>= <expr><call><name>mysql_fetch_row</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* There should never be more than one row */</comment>
        <expr_stmt><expr><name>tidb_snapshot</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Need to set the @@tidb_snapshot for the master thread</comment>
    <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>query</name> <init>=
        <expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"SET SESSION tidb_snapshot = '%s'"</literal></expr></argument>, <argument><expr><name>tidb_snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Set to tidb_snapshot '%s'"</literal></expr></argument>, <argument><expr><name>tidb_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Failed to set tidb_snapshot: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if><else>else<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_locks</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// This backup will lock the database</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_backup_locks</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>determine_ddl_lock_function</name><argument_list>(<argument><expr><operator>&amp;</operator><name>second_conn</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>flush_table_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acquire_ddl_lock_function</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>release_ddl_lock_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>release_binlog_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>lock_all_tables</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>send_lock_all_tables</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>flush_table_function</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>flush_table_function</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>acquire_ddl_lock_function</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Acquiring DDL lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>acquire_ddl_lock_function</name><argument_list>(<argument><expr><name>second_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Executing in no-locks mode, snapshot might not be consistent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>


<comment type="line">// TODO: this should be deleted on future releases. </comment>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_get_server_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">40108</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(
        <argument><expr><name>conn</name></expr></argument>,
        <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS mysql.mydumperdummy (a INT) ENGINE=INNODB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>need_dummy_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// tokudb do not support consistent snapshot</comment>
  <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT @@tokudb_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>rest</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>mysql_num_rows</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"TokuDB detected, creating dummy table for CS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(
        <argument><expr><name>conn</name></expr></argument>,
        <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS mysql.tokudbdummy (a INT) ENGINE=TokuDB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>need_dummy_toku_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Do not start a transaction when lock all tables instead of FTWRL,</comment>
  <comment type="line">// since it can implicitly release read locks we hold</comment>
  <comment type="line">// TODO: this should be deleted as main connection is not being used for export data</comment>
<comment type="line">//  if (!lock_all_tables) {</comment>
<comment type="line">//    g_message("Sending start transaction in main connection");</comment>
<comment type="line">//    mysql_query(conn, "START TRANSACTION /*!40108 WITH CONSISTENT SNAPSHOT */");</comment>
<comment type="line">//  }</comment>

  <if_stmt><if>if <condition>(<expr><name>need_dummy_read</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                <argument><expr><literal type="string">"SELECT /*!40001 SQL_NO_CACHE */ * FROM mysql.mydumperdummy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>need_dummy_toku_read</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                <argument><expr><literal type="string">"SELECT /*!40001 SQL_NO_CACHE */ * FROM mysql.tokudbdummy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GDateTime</name> <modifier>*</modifier></type><name>datetime</name> <init>= <expr><call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datetimestr</name><init>=<expr><call><name>g_date_time_format</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><literal type="string">"\%Y-\%m-\%d \%H:\%M:\%S"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>mdfile</name></expr></argument>, <argument><expr><literal type="string">"Started dump at: %s\n"</literal></expr></argument>, <argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Started dump at: %s"</literal></expr></argument>, <argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>initialize_stream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>exec_command</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>initialize_exec_command</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stream</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
  
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>threads</name> <init>= <expr><call><name>g_new</name><argument_list>(<argument><expr><name>GThread</name> <operator>*</operator></expr></argument>, <argument><expr><name>num_threads</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name> <init>=
      <expr><call><name>g_new</name><argument_list>(<argument><expr>struct <name>thread_data</name></expr></argument>, <argument><expr><name>num_threads</name> <operator>*</operator> <operator>(</operator><name>less_locking</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>initial_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>schema_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>post_data_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>innodb_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ready</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>non_innodb_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ready_non_innodb_queue</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>unlock_tables</name></name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ready_database_dump_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>ready_database_dump_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ready_table_dump_mutex</name> <operator>=</operator> <call><name>g_mutex_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>ready_table_dump_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <if_stmt><if>if <condition>(<expr><name>detected_server</name> <operator>==</operator> <name>SERVER_TYPE_MYSQL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>create_job_to_dump_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>mdfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*  if (set_names_str)
                mysql_query(conn, set_names_str);
    write_snapshot_info(conn, mdfile);
*/</comment>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Begin Job Creation</comment>

  <if_stmt><if>if <condition>(<expr><name>dump_tablespaces</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>create_job_to_dump_tablespaces</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>guint</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>g_strv_length</name><argument_list>(<argument><expr><name>db_items</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>create_job_to_dump_database</name><argument_list>(<argument><expr><call><name>new_database</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,<argument><expr><name><name>db_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_schemas</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>create_job_to_dump_schema</name><argument_list>(<argument><expr><name><name>db_items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tables</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>create_job_to_dump_table_list</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator> <name>db</name> <operator>==</operator> <name>NULL</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>tables</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>create_job_to_dump_all_databases</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// End Job Creation</comment>
  <decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>chunk_builder</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_data</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>chunk_builder</name><operator>=</operator><call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>chunk_builder_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>conf</name> <operator>=</operator> <operator>&amp;</operator><name>conf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>thread_id</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>less_locking_stage</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>binlog_snapshot_gtid_executed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator>
        <call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>working_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>td</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <comment type="line">//   g_async_queue_pop(conf.ready);</comment>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// IMPORTANT: At this point, all the threads are in sync</comment>

  <if_stmt><if>if <condition>(<expr><name>trx_consistency_only</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Transactions started, unlocking tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UNLOCK TABLES /* trx-only */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>release_binlog_function</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Releasing binlog lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>release_binlog_function</name><argument_list>(<argument><expr><name>second_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Waiting database finish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>database_counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name>ready_database_dump_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>no_updated_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_SHUTDOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>initial_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Shutdown jobs for less locking enqueued"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_SHUTDOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>schema_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

 
  <if_stmt><if>if <condition>(<expr><name>less_locking</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>build_lock_tables_statement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ready_non_innodb_queue</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<comment type="block">/*
  for (n = 0; n &lt; num_threads; n++) {
    struct job *j = g_new0(struct job, 1);
    j-&gt;type = JOB_SHUTDOWN;
    g_async_queue_push(conf.non_innodb_queue, j);
  }
*/</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_locks</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trx_consistency_only</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>unlock_tables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Non-InnoDB dump complete, unlocking tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UNLOCK TABLES /* FTWRL */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Releasing FTWR lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>release_binlog_function</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Releasing binlog lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>release_binlog_function</name><argument_list>(<argument><expr><name>second_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<comment type="block">/*
  for (n = 0; n &lt; num_threads; n++) {
    struct job *j = g_new0(struct job, 1);
    j-&gt;type = JOB_SHUTDOWN;
    g_async_queue_push(conf.innodb_queue, j);
  }
*/</comment>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>j</name> <init>= <expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>job</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>j</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JOB_SHUTDOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>post_data_queue</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_data</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name>chunk_builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Waiting threads to complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>finalize_working_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>release_ddl_lock_function</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Releasing DDL lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>release_ddl_lock_function</name><argument_list>(<argument><expr><name>second_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Queue count: %d %d %d %d %d"</literal></expr></argument>, <argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>initial_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>schema_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>non_innodb_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>innodb_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>post_data_queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// close main connection</comment>
  <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>second_conn</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name>second_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Main connection closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO: We need to create jobs for metadata.</comment>
  <expr_stmt><expr><name>table_schemas</name> <operator>=</operator> <call><name>g_list_reverse</name><argument_list>(<argument><expr><name>table_schemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>table_schemas</name></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>dbt</name> <operator>=</operator> <operator>(</operator>struct <name>db_table</name> <operator>*</operator><operator>)</operator><name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>write_table_metadata_into_file</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_db_table</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
<comment type="line">//  g_list_free(table_schemas);</comment>
<comment type="line">//  table_schemas=NULL;</comment>
  <if_stmt><if>if <condition>(<expr><name>pmm</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>kill_pmm_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    g_thread_join(pmmthread);</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>innodb_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>innodb_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>non_innodb_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>non_innodb_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>unlock_tables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>unlock_tables</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ready</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>schema_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>schema_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>initial_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>initial_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>post_data_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>post_data_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_async_queue_unref</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ready_non_innodb_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ready_non_innodb_queue</name></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>datetime</name> <operator>=</operator> <call><name>g_date_time_new_now_local</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>datetimestr</name><operator>=</operator><call><name>g_date_time_format</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,<argument><expr><literal type="string">"\%Y-\%m-\%d \%H:\%M:\%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_date_time_unref</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>mdfile</name></expr></argument>, <argument><expr><literal type="string">"Finished dump at: %s\n"</literal></expr></argument>, <argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>mdfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>updated_since</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>nufile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_rename</name><argument_list>(<argument><expr><name>metadata_partial_filename</name></expr></argument>, <argument><expr><name>metadata_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><name>metadata_filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>metadata_partial_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>metadata_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Finished dump at: %s"</literal></expr></argument>,<argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>datetimestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>exec_command</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>wait_exec_command_to_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>stream_queue</name></expr></argument>, <argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wait_stream_to_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>no_delete</name> <operator>==</operator> <name>FALSE</name> <operator>&amp;&amp;</operator> <name>output_directory_param</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_rmdir</name><argument_list>(<argument><expr><name>output_directory</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Backup directory not removed: %s"</literal></expr></argument>, <argument><expr><name>output_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_databases</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>disk_check_thread</name><operator>!=</operator><name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>disk_limits</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>set_session</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_common</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
