<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/mydumper/src/myloader_restore.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZWRAP_USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../zstd/zstd_zlibwrapper.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_jobs_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>commit_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>compress_extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gboolean</name></type> <name>skip_definer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GOptionEntry</name></type> <name><name>restore_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"skip-definer"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><operator>&amp;</operator><name>skip_definer</name></expr>,
     <expr><literal type="string">"Removes DEFINER from the CREATE statement. By default, statements are not modified"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>G_OPTION_ARG_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>load_restore_entries</name><parameter_list>(<parameter><decl><type><name>GOptionGroup</name> <modifier>*</modifier></type><name>main_group</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_option_group_add_entries</name><argument_list>(<argument><expr><name>main_group</name></expr></argument>, <argument><expr><name>restore_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>restore_data_in_gstring_by_statement</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_schema</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>query_counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>is_schema</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Error restoring: %s %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Thread %d: Error restoring: %s"</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>query_counter</name><operator>=</operator><operator>*</operator><name>query_counter</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>is_schema</name><operator>==</operator><name>FALSE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>commit_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>query_counter</name> <operator>==</operator> <name>commit_count</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>query_counter</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
          <return>return <expr><literal type="number">2</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"START TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>restore_data_in_gstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_schema</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>query_counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>gchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>line</name><init>=<expr><call><name>g_strsplit</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>g_strv_length</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
         <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>str</name><init>=<expr><call><name>g_string_new</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name>g_string_append_c</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>r</name><operator>+=</operator><call><name>restore_data_in_gstring_by_statement</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>is_schema</name></expr></argument>, <argument><expr><name>query_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>g_strfreev</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>split_and_restore_data_in_gstring_by_statement</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>,
                  <parameter><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_schema</name></decl></parameter>, <parameter><decl><type><name>guint</name> <modifier>*</modifier></type><name>query_counter</name></decl></parameter>, <parameter><decl><type><name>guint</name></type> <name>offset_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next_line</name><init>=<expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>insert_statement_prefix</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><name>next_line</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>insert_statement_prefix_len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>insert_statement_prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>tr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>current_offset_line</name><init>=<expr><name>offset_line</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>current_line</name><init>=<expr><name>next_line</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>next_line</name><operator>=</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>current_line</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type> <name>new_insert</name><init>=<expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>insert_statement_prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>current_rows</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>current_rows</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>new_insert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>new_insert</name><operator>=</operator><call><name>g_string_append</name><argument_list>(<argument><expr><name>new_insert</name></expr></argument>,<argument><expr><name>insert_statement_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name>current_line</name></expr></argument>, <argument><expr><name>next_line</name> <operator>-</operator> <name>current_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>new_insert</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>current_rows</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>current_line</name><operator>=</operator><name>next_line</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>next_line</name><operator>=</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>current_line</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>current_offset_line</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>current_rows</name> <operator>&lt;</operator> <name>rows</name> <operator>&amp;&amp;</operator> <name>next_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
    <if_stmt><if>if <condition>(<expr><name><name>new_insert</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>insert_statement_prefix_len</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>tr</name><operator>=</operator><call><name>restore_data_in_gstring_by_statement</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>new_insert</name></expr></argument>, <argument><expr><name>is_schema</name></expr></argument>, <argument><expr><name>query_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>tr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>r</name><operator>+=</operator><name>tr</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error occurs between lines: %d and %d in a splited INSERT: %s"</literal></expr></argument>,<argument><expr><name>offset_line</name></expr></argument>,<argument><expr><name>current_offset_line</name></expr></argument>,<argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_line</name><operator>=</operator><name>current_offset_line</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>current_line</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// remove trailing ,</comment>
  </block_content>}</block> while <condition>(<expr><name>next_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>new_insert</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>insert_statement_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>send_file_to_fifo</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>compressed_filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fifo_name</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name>compressed_filename</name></expr></argument>,<argument><expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name>compressed_filename</name></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call><operator>-</operator><name>compressed_filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>fd</name> <init>= <expr><call><name>g_fopen</name><argument_list>(<argument><expr><name>fifo_name</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>is_compressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>compressed_filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ml_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>is_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>eof</name><init>=<expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>l</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzgets</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>file</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gzeof</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name><operator>!=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Incomplete data transferred to FIFO: %s"</literal></expr></argument>, <argument><expr><name>fifo_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>eof</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>restore_data_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>gboolean</name></type> <name>is_schema</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infile</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>is_compressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gboolean</name></type> <name>eof</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>query_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GString</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>g_string_sized_new</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>line</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>preline</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>g_build_filename</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ml_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infile</name></expr></argument>,<argument><expr><name>path</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>is_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*  if (!g_str_has_suffix(path, compress_extension)) {
    infile = g_fopen(path, "r");
    is_compressed = FALSE;
  } else {
    infile = (void *)gzopen(path, "r");
    is_compressed = TRUE;
  }*/</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"cannot open file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_schema</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>commit_count</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"START TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>guint</name></type> <name>tr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>eof</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>read_data</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>is_compressed</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_strrstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>str</name><index>[<expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><name>skip_definer</name> <operator>&amp;&amp;</operator> <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>remove_definer</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>g_strrstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>tr</name><operator>=</operator><call><name>split_and_restore_data_in_gstring_by_statement</name><argument_list>(<argument><expr><name>td</name></expr></argument>,
            <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_schema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_counter</name></expr></argument>,<argument><expr><name>preline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>g_strrstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="string">"LOAD DATA "</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fff</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name><operator>-</operator><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>has_compession_extension</name><argument_list>(<argument><expr><name>fff</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
              <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>fifo_name</name><init>=<expr><call><name>g_strndup</name><argument_list>(<argument><expr><name>fff</name></expr></argument>,<argument><expr><call><name>g_strrstr</name><argument_list>(<argument><expr><name>fff</name></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call><operator>-</operator><name>fff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>mkfifo</name><argument_list>(<argument><expr><name>fifo_name</name></expr></argument>,<argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>send_file_to_fifo</name></expr></argument>, <argument><expr><name>fff</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <for>for<control>(<init><expr><name>from</name><operator>=</operator><call><name>g_strstr_len</name><argument_list>(<argument><expr><name>to</name><operator>-</operator><literal type="number">4</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>from</name><operator>&lt;</operator><name>to</name></expr> ;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>from</name><operator>=</operator><literal type="char">' '</literal></expr>;</expr_stmt>
              </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>tr</name><operator>=</operator><call><name>restore_data_in_gstring_by_statement</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>is_schema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>r</name><operator>+=</operator><name>tr</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error occurs between lines: %d and %d on file %s: %s"</literal></expr></argument>,<argument><expr><name>preline</name></expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>g_string_set_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preline</name><operator>=</operator><name>line</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"error reading file %s (%d)"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
      <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_schema</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>commit_count</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>mysql_query</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Error committing data for %s.%s from file %s: %s"</literal></expr></argument>,
               <argument><expr><name>database</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>thrconn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errors</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>gzclose</name><argument_list>(<argument><expr><operator>(</operator><name>gzFile</name><operator>)</operator><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>m_remove</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

</unit>
