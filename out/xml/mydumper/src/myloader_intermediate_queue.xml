<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/myloader_intermediate_queue.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:    David Ducos, Percona (david dot ducos at percona dot com)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_restore_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_control_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"myloader_intermediate_queue.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gchar</name> <modifier>*</modifier></type><name>source_db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>no_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>skip_triggers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>skip_post</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>num_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>guint</name></type> <name>total_data_sql_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>innodb_optimize_keys_all_tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>gboolean</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>intermediate_queue_ended</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GAsyncQueue</name> <modifier>*</modifier></type><name>intermediate_queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GThread</name> <modifier>*</modifier></type><name>stream_intermediate_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>intermediate_thread</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>intermediate_conf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initialize_intermediate_queue</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>intermediate_conf</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>intermediate_queue</name> <operator>=</operator> <call><name>g_async_queue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>intermediate_queue_ended</name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>stream_intermediate_thread</name> <operator>=</operator> <call><name>g_thread_create</name><argument_list>(<argument><expr><operator>(</operator><name>GThreadFunc</name><operator>)</operator><name>intermediate_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>intermediate_queue_new</name><parameter_list>(<parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>intermediate_filename</name></name> <modifier>*</modifier></type> <name>iflnm</name><init>=<expr><call><name>g_new0</name><argument_list>(<argument><expr>struct <name>intermediate_filename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>iflnm</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iflnm</name><operator>-&gt;</operator><name>iterations</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>intermediate_queue</name></expr></argument>, <argument><expr><name>iflnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>intermediate_queue_end</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>e</name><init>=<expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>intermediate_queue_new</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Intermediate queue: Sending END job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_thread_join</name><argument_list>(<argument><expr><name>stream_intermediate_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Intermediate thread: SHUTDOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>intermediate_queue_ended</name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>intermediate_queue_incomplete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>intermediate_filename</name></name> <modifier>*</modifier></type> <name>iflnm</name></decl></parameter>)</parameter_list><block>{<block_content>
<comment type="line">// TODO: we need to add the filelist and check the filename iterations</comment>
<comment type="line">// the idea is to keep track how many times a filename was incomplete and</comment>
<comment type="line">// at what stage</comment>
  <expr_stmt><expr><name><name>iflnm</name><operator>-&gt;</operator><name>iterations</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>intermediate_queue</name></expr></argument>, <argument><expr><name>iflnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>file_type</name></name></type> <name>process_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>enum</name> <name>file_type</name></name></type> <name>ft</name><init>= <expr><call><name>get_file_type</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>source_db</name> <operator>||</operator>
    <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s."</literal></expr></argument>, <argument><expr><name>source_db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s-schema-post.sql"</literal></expr></argument>, <argument><expr><name>source_db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
    <call><name>g_str_has_prefix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s-schema-create.sql"</literal></expr></argument>, <argument><expr><name>source_db</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>
    )</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>ft</name></expr>)</condition><block>{<block_content>
      <case>case <expr><name>INIT</name></expr>:</case>
        <break>break;</break>
      <case>case <expr><name>SCHEMA_TABLESPACE</name></expr>:</case>
        <break>break;</break>
      <case>case <expr><name>SCHEMA_CREATE</name></expr>:</case>
        <expr_stmt><expr><call><name>process_database_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"create database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>ft</name><operator>=</operator><name>DO_NOT_ENQUEUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">//m_remove(directory,filename);</comment>
        <break>break;</break>
      <case>case <expr><name>SCHEMA_TABLE</name></expr>:</case>
        <comment type="line">// filename is free</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_table_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
          <return>return <expr><name>INCOMPLETE</name></expr>;</return>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>refresh_table_list</name><argument_list>(<argument><expr><name>intermediate_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>SCHEMA_VIEW</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_schema_view_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>INCOMPLETE</name></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>SCHEMA_TRIGGER</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_triggers</name></expr>)</condition><block type="pseudo"><block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_schema_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"trigger"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>INCOMPLETE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>SCHEMA_POST</name></expr>:</case>
        <comment type="line">// can be enqueued in any order</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_post</name></expr>)</condition><block type="pseudo"><block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_schema_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"post"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>INCOMPLETE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>CHECKSUM</name></expr>:</case>
        <expr_stmt><expr><name><name>intermediate_conf</name><operator>-&gt;</operator><name>checksum_list</name></name><operator>=</operator><call><name>g_list_insert</name><argument_list>(<argument><expr><name><name>intermediate_conf</name><operator>-&gt;</operator><name>checksum_list</name></name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>METADATA_GLOBAL</name></expr>:</case>
        <break>break;</break>
      <case>case <expr><name>METADATA_TABLE</name></expr>:</case>
        <expr_stmt><expr><name><name>intermediate_conf</name><operator>-&gt;</operator><name>metadata_list</name></name><operator>=</operator><call><name>g_list_insert</name><argument_list>(<argument><expr><name><name>intermediate_conf</name><operator>-&gt;</operator><name>metadata_list</name></name></expr></argument>,<argument><expr><name>filename</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_metadata_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>INCOMPLETE</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>refresh_table_list</name><argument_list>(<argument><expr><name>intermediate_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DATA</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_data</name></expr>)</condition><block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_data_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>INCOMPLETE</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if><else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>m_remove</name><argument_list>(<argument><expr><name>directory</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>total_data_sql_files</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>RESUME</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"We don't expect to find resume files in a stream scenario"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>IGNORED</name></expr>:</case>
        <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Filename %s has been ignored"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>LOAD_DATA</name></expr>:</case>
        <break>break;</break>
      <case>case <expr><name>SHUTDOWN</name></expr>:</case>
        <break>break;</break>
      <case>case <expr><name>INCOMPLETE</name></expr>:</case>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>ft</name><operator>=</operator><name>DO_NOT_ENQUEUE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>ft</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_stream_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>intermediate_filename</name></name>  <modifier>*</modifier></type> <name>iflnm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>enum</name> <name>file_type</name></name></type> <name>current_ft</name><init>=<expr><call><name>process_filename</name><argument_list>(<argument><expr><name><name>iflnm</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>current_ft</name> <operator>==</operator> <name>INCOMPLETE</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iflnm</name><operator>-&gt;</operator><name>iterations</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Max renqueing reached for: %s"</literal></expr></argument>, <argument><expr><name><name>iflnm</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>g_debug</name><argument_list>(<argument><expr><literal type="string">"Requeuing in intermediate queue %u: %s"</literal></expr></argument>, <argument><expr><name><name>iflnm</name><operator>-&gt;</operator><name>iterations</name></name></expr></argument>, <argument><expr><name><name>iflnm</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>intermediate_queue_incomplete</name><argument_list>(<argument><expr><name>iflnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<comment type="line">//    g_async_queue_push(intermediate_queue, filename);</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>current_ft</name> <operator>!=</operator> <name>SCHEMA_VIEW</name> <operator>&amp;&amp;</operator>
      <name>current_ft</name> <operator>!=</operator> <name>SCHEMA_TRIGGER</name> <operator>&amp;&amp;</operator>
      <name>current_ft</name> <operator>!=</operator> <name>SCHEMA_POST</name> <operator>&amp;&amp;</operator>
      <name>current_ft</name> <operator>!=</operator> <name>CHECKSUM</name> <operator>&amp;&amp;</operator>
      <name>current_ft</name> <operator>!=</operator> <name>METADATA_TABLE</name> <operator>&amp;&amp;</operator>
      <name>current_ft</name> <operator>!=</operator> <name>DO_NOT_ENQUEUE</name></expr> )</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>intermediate_conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>current_ft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enqueue_all_index_jobs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>configuration</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type> <name>iter</name><init>=<expr><name><name>conf</name><operator>-&gt;</operator><name>table_list</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>db_table</name></name> <modifier>*</modifier></type> <name>dbt</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>dbt</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_mutex_lock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbt</name><operator>-&gt;</operator><name>index_enqueued</name></name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>restore_job</name></name> <modifier>*</modifier></type><name>rj</name> <init>= <expr><call><name>new_schema_restore_job</name><argument_list>(<argument><expr><call><name>g_strdup</name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>JOB_RESTORE_STRING</name></expr></argument>, <argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>indexes</name></name></expr></argument>,<argument><expr><literal type="string">"indexes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>index_queue</name></name></expr></argument>, <argument><expr><call><name>new_job</name><argument_list>(<argument><expr><name>JOB_RESTORE</name></expr></argument>,<argument><expr><name>rj</name></expr></argument>,<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>real_database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dbt</name><operator>-&gt;</operator><name>index_enqueued</name></name><operator>=</operator><name>TRUE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>dbt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name><operator>=</operator><name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>g_mutex_unlock</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>table_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>intermediate_thread</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>intermediate_filename</name></name>  <modifier>*</modifier></type> <name>iflnm</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><name>iflnm</name> <operator>=</operator> <operator>(</operator>struct <name>intermediate_filename</name>  <operator>*</operator><operator>)</operator><call><name>g_async_queue_pop</name><argument_list>(<argument><expr><name>intermediate_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><call><name>g_strcmp0</name><argument_list>(<argument><expr><name><name>iflnm</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,<argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>g_async_queue_length</name><argument_list>(<argument><expr><name>intermediate_queue</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name>intermediate_queue</name></expr></argument>,<argument><expr><name>iflnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>iflnm</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>iflnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iflnm</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>process_stream_filename</name><argument_list>(<argument><expr><name>iflnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>iflnm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
  <decl_stmt><decl><type><name>guint</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<comment type="line">//    g_async_queue_push(intermediate_conf-&gt;stream_queue, GINT_TO_POINTER(SHUTDOWN));</comment>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>innodb_optimize_keys_all_tables</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>enqueue_all_index_jobs</name><argument_list>(<argument><expr><name>intermediate_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>g_message</name><argument_list>(<argument><expr><literal type="string">"Intermediate thread ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>g_async_queue_push</name><argument_list>(<argument><expr><name><name>intermediate_conf</name><operator>-&gt;</operator><name>stream_queue</name></name></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>INTERMEDIATE_ENDED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

</unit>
