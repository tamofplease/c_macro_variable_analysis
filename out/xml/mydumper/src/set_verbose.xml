<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/mydumper/src/set_verbose.c"><comment type="block">/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

        Authors:        Domas Mituzas, Facebook ( domas at fb dot com )
                        Mark Leith, Oracle Corporation (mark dot leith at oracle dot com)
                        Andrew Hutchings, MariaDB Foundation (andrew at mariadb dot org)

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcre.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib/gstdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logging.h"</cpp:file></cpp:include>

<comment type="block">/* two handlers currently defined: no_log, write_log_file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>total_handlers</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_no_log</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_write_log_file</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>guint</name></type> <name><name>log_handlers</name><index>[<expr><name>total_handlers</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_log_handlers</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>total_handlers</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>log_handlers</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_log_remove_handler</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>log_handlers</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>set_verbose</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>verbosity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>logfile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>logoutfile</name> <operator>=</operator> <call><name>g_fopen</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>logoutfile</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>g_critical</name><argument_list>(<argument><expr><literal type="string">"Could not open log file '%s' for writing: %d"</literal></expr></argument>, <argument><expr><name>logfile</name></expr></argument>,
                 <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>free_log_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>verbosity</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
    <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>use_no_log</name></expr>]</index></name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>GLogLevelFlags</name><operator>)</operator><operator>(</operator><name>G_LOG_LEVEL_MASK</name><operator>)</operator></expr></argument>,
        <argument><expr><name>no_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><literal type="number">1</literal></expr>:</case>
    <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>use_no_log</name></expr>]</index></name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>GLogLevelFlags</name><operator>)</operator><operator>(</operator><name>G_LOG_LEVEL_WARNING</name> <operator>|</operator> <name>G_LOG_LEVEL_MESSAGE</name><operator>)</operator></expr></argument>,
        <argument><expr><name>no_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>logfile</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>use_write_log_file</name></expr>]</index></name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(
          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>GLogLevelFlags</name><operator>)</operator><operator>(</operator><name>G_LOG_LEVEL_ERROR</name> <operator>|</operator> <name>G_LOG_LEVEL_CRITICAL</name><operator>)</operator></expr></argument>,
          <argument><expr><name>write_log_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  <case>case <expr><literal type="number">2</literal></expr>:</case>
    <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>use_no_log</name></expr>]</index></name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>GLogLevelFlags</name><operator>)</operator><operator>(</operator><name>G_LOG_LEVEL_MESSAGE</name><operator>)</operator></expr></argument>,
        <argument><expr><name>no_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>logfile</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>use_write_log_file</name></expr>]</index></name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(
          <argument><expr><name>NULL</name></expr></argument>,
          <argument><expr><operator>(</operator><name>GLogLevelFlags</name><operator>)</operator><operator>(</operator><name>G_LOG_LEVEL_WARNING</name> <operator>|</operator> <name>G_LOG_LEVEL_ERROR</name> <operator>|</operator>
                           <name>G_LOG_LEVEL_WARNING</name> <operator>|</operator> <name>G_LOG_LEVEL_ERROR</name> <operator>|</operator>
                           <name>G_LOG_LEVEL_CRITICAL</name><operator>)</operator></expr></argument>,
          <argument><expr><name>write_log_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  <default>default:</default>
    <if_stmt><if>if <condition>(<expr><name>logfile</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>log_handlers</name><index>[<expr><name>use_write_log_file</name></expr>]</index></name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(
          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>GLogLevelFlags</name><operator>)</operator><operator>(</operator><name>G_LOG_LEVEL_MASK</name><operator>)</operator></expr></argument>,
          <argument><expr><name>write_log_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
